<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Microsoft.Coyote</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Coyote.Actors.Actor">
            <summary>
            Type that implements an actor. Inherit from this class to declare a custom actor.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/overview">Programming
            model: asynchronous actors</see> for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.ActionCache">
            <summary>
            Cache of actor types to a map of event types to action declarations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.ActionCacheLocks">
            <summary>
            A set of lockable objects used to protect static initialization of the ActionCache while
            also enabling multithreaded initialization of different Actor types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.SingleEventTypeArray">
            <summary>
            A cached array that contains a single event type.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.Context">
            <summary>
            The actor execution context.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.Id">
            <summary>
            Unique id that identifies this actor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.Operation">
            <summary>
            Unique operation that is used to control the actor execution during systematic testing.
            </summary>
            <remarks>
            This is null in production.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.Inbox">
            <summary>
            The inbox of the actor. Incoming events are enqueued here.
            Events are dequeued to be processed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.ActionMap">
            <summary>
            Map from event types to cached action delegates.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.Timers">
            <summary>
            Map that contains the active timers.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.CurrentStatus">
            <summary>
            The current status of the actor. It is marked volatile as
            the runtime can read it concurrently.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.CurrentStateName">
            <summary>
            Gets the name of the current state, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.IsEventHandlerRunning">
            <summary>
            True if the event handler of the actor is running, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.IsHalted">
            <summary>
            Checks if the actor is halted.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.EventGroup">
            <summary>
            The <see cref="P:Microsoft.Coyote.Actors.Actor.EventGroup" /> currently associated with the actor, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup">
            <summary>
            An optional <see cref="P:Microsoft.Coyote.Actors.Actor.EventGroup" /> associated with the current event being handled.
            </summary>
            <remarks>
            This is an optional argument provided to <see cref="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)" />
            or <see cref="M:Microsoft.Coyote.Actors.IActorRuntime.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)" />.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.Logger">
            <summary>
            The logger installed to the runtime.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.HashedState">
            <summary>
            User-defined hashed state of the actor. Override to improve the
            accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Actor" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Configure(Microsoft.Coyote.Actors.ActorExecutionContext,Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.ActorOperation,Microsoft.Coyote.Actors.IEventQueue,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Configures the actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)">
            <summary>
            Initializes the actor with the specified optional event.
            </summary>
            <param name="initialEvent">Optional event used for initialization.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.CreateActor(System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified type and with the specified optional
            <see cref="T:Microsoft.Coyote.Event" />. This <see cref="T:Microsoft.Coyote.Event" /> can only be used to access
            its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional initialization event.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The unique actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.CreateActor(System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified type and name, and with the specified
            optional <see cref="T:Microsoft.Coyote.Event" />. This <see cref="T:Microsoft.Coyote.Event" /> can only be used to
            access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional initialization event.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The unique actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and name, using the specified
            unbound actor id, and passes the specified optional <see cref="T:Microsoft.Coyote.Event" />. This event
            can only be used to access its payload, and cannot be handled.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional initialization event.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Event" /> to a target.
            </summary>
            <param name="id">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="eventGroup">An optional event group associated with this Actor.</param>
            <param name="options">Optional configuration of a send operation.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ReceiveEventAsync(System.Type,System.Func{Microsoft.Coyote.Event,System.Boolean})">
            <summary>
            Waits to receive an <see cref="T:Microsoft.Coyote.Event" /> of the specified type
            that satisfies an optional predicate.
            </summary>
            <param name="eventType">The event type.</param>
            <param name="predicate">The optional predicate.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ReceiveEventAsync(System.Type[])">
            <summary>
            Waits to receive an <see cref="T:Microsoft.Coyote.Event" /> of the specified types.
            </summary>
            <param name="eventTypes">The event types to wait for.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ReceiveEventAsync(System.Tuple{System.Type,System.Func{Microsoft.Coyote.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an <see cref="T:Microsoft.Coyote.Event" /> of the specified types
            that satisfy the specified predicates.
            </summary>
            <param name="events">Event types and predicates.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.StartTimer(System.TimeSpan,Microsoft.Coyote.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Starts a timer that sends a <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent" /> to this actor after the
            specified due time. The timer accepts an optional payload to be used during timeout.
            The timer is automatically disposed after it timeouts. To manually stop and dispose
            the timer, invoke the <see cref="M:Microsoft.Coyote.Actors.Actor.StopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)" /> method.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/timers">Using timers in actors</see> for more information.
            </remarks>
            <param name="startDelay">The amount of time to wait before sending the timeout event.</param>
            <param name="customEvent">Optional custom event to raise instead of the default TimerElapsedEvent.</param>
            <returns>Handle that contains information about the timer.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.StartPeriodicTimer(System.TimeSpan,System.TimeSpan,Microsoft.Coyote.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Starts a periodic timer that sends a <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent" /> to this actor after
            the specified due time, and then repeats after each specified period. The timer accepts
            an optional payload to be used during timeout. The timer can be stopped by invoking the
            <see cref="M:Microsoft.Coyote.Actors.Actor.StopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)" /> method.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/timers">Using timers in actors</see> for more information.
            </remarks>
            <param name="startDelay">The amount of time to wait before sending the first timeout event.</param>
            <param name="period">The time interval between timeout events.</param>
            <param name="customEvent">Optional custom event to raise instead of the default TimerElapsedEvent.</param>
            <returns>Handle that contains information about the timer.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.StopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Stops and disposes the specified timer.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/timers">Using timers in actors</see> for more information.
            </remarks>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.RandomBoolean">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
            <returns>The controlled nondeterministic choice.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.RandomBoolean(System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing. The value is used
            to generate a number in the range [0..maxValue), where 0
            triggers true.
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The controlled nondeterministic choice.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer, that can be controlled during
            analysis or testing. The value is used to generate an integer in
            the range [0..maxValue).
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The controlled nondeterministic integer.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Monitor``1(Microsoft.Coyote.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">Event to send to the monitor.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Monitor(System.Type,Microsoft.Coyote.Event)">
            <summary>
            Invokes the specified monitor with the specified event.
            </summary>
            <param name="type">Type of the monitor.</param>
            <param name="e">The event to send.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.RaiseHaltEvent">
            <summary>
            Raises a <see cref="T:Microsoft.Coyote.Actors.HaltEvent" /> to halt the actor at the end of the current action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnInitializeAsync(Microsoft.Coyote.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor is initialized with an optional event.
            </summary>
            <param name="initialEvent">Optional event used for initialization.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventDequeuedAsync(Microsoft.Coyote.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor successfully dequeues an event from its inbox.
            This method is not called when the dequeue happens via a receive statement.
            </summary>
            <param name="e">The event that was dequeued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventIgnored(Microsoft.Coyote.Event)">
            <summary>
            Callback that is invoked when the actor ignores an event and removes it from its inbox.
            </summary>
            <param name="e">The event that was ignored.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventDeferred(Microsoft.Coyote.Event)">
            <summary>
            Callback that is invoked when the actor defers dequeing an event from its inbox.
            </summary>
            <param name="e">The event that was deferred.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventHandledAsync(Microsoft.Coyote.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor finishes handling a dequeued event, unless
            the handler of the dequeued event caused the actor to halt (either normally or due to an exception).
            The actor will either become idle or dequeue the next event from its inbox.
            </summary>
            <param name="e">The event that was handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventUnhandledAsync(Microsoft.Coyote.Event,System.String)">
            <summary>
            Asynchronous callback that is invoked when the actor receives an event that it is not
            prepared to handle. The callback is invoked first, after which the actor will necessarily
            throw an <see cref="T:Microsoft.Coyote.Actors.UnhandledEventException" />.
            </summary>
            <param name="e">The event that was unhandled.</param>
            <param name="state">The state when the event was dequeued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnExceptionHandledAsync(System.Exception,Microsoft.Coyote.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor handles an exception.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="e">The event being handled when the exception was thrown.</param>
            <returns>The action that the runtime should take.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnHaltAsync(Microsoft.Coyote.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor halts.
            </summary>
            <param name="e">The event being handled when the actor halted.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Enqueue(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Enqueues the specified event and its metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.RunEventHandlerAsync">
            <summary>
            Runs the event handler. The handler terminates if there is no next
            event to process or if the actor has halted.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.HandleEventAsync(Microsoft.Coyote.Event)">
            <summary>
            Handles the specified <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.InvokeActionAsync(Microsoft.Coyote.Actors.CachedDelegate,Microsoft.Coyote.Event)">
            <summary>
            Invokes the specified action delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.InvokeUserCallbackAsync(System.String,Microsoft.Coyote.Event,System.String)">
            <summary>
            Invokes the specified event handler user callback.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.InvokeOnFailureExceptionFilter(Microsoft.Coyote.Actors.CachedDelegate,System.Exception)">
            <summary>
            An exception filter that calls <see cref="E:Microsoft.Coyote.Runtime.CoyoteRuntime.OnFailure" />,
            which can choose to fast-fail the app to get a full dump.
            </summary>
            <param name="action">The action being executed when the failure occurred.</param>
            <param name="ex">The exception being tested.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.TryHandleActionInvocationExceptionAsync(System.Exception,System.String)">
            <summary>
            Tries to handle an exception thrown during an action invocation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.IsEventIgnored(Microsoft.Coyote.Event)">
            <summary>
            Checks if the specified event is ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.IsEventDeferred(Microsoft.Coyote.Event)">
            <summary>
            Checks if the specified event is deferred.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.IsDefaultHandlerInstalled">
            <summary>
            Checks if there is a default handler installed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.GetHashedState">
            <summary>
            Returns the hashed state of this actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.RegisterTimer(System.TimeSpan,System.TimeSpan,Microsoft.Coyote.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Registers a new timer using the specified configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.UnregisterTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Unregisters the specified timer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.SetupEventHandlers">
            <summary>
            Extracts user declarations and sets up the event handlers.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.GetActionWithName(System.String)">
            <summary>
            Returns the action with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ReportActivityCoverage(Microsoft.Coyote.Actors.Coverage.CoverageInfo)">
            <summary>
            Reports the activity coverage of this actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.AssertActionValidity(System.Reflection.MethodInfo)">
            <summary>
            Checks the validity of the specified action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.FormatFairRandom(System.String,System.String,System.Int32)">
            <summary>
            Returns the formatted strint to be used with a fair nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:Microsoft.Coyote.AssertionFailureException" />
            exception, and throws it to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEnqueueEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Invoked when an event has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnRaiseEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Invoked when an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnWaitTask(System.Threading.Tasks.Task,System.String)">
            <summary>
            Invoked when the actor is waiting for the specified task to complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Invoked when the actor is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnReceiveEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Invoked when an event that the actor is waiting to receive has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnReceiveEventWithoutWaiting(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Invoked when an event that the actor is waiting to receive has already been in the
            event queue when the actor invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnReceiveInvoked">
            <summary>
            Invoked when <see cref="M:Microsoft.Coyote.Actors.Actor.ReceiveEventAsync(System.Type[])" /> or one of its overloaded methods was called.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnIgnoreEvent(Microsoft.Coyote.Event)">
            <summary>
            Callback that is invoked when the actor ignores an event and removes it from its inbox.
            </summary>
            <param name="e">The event that was ignored.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnDeferEvent(Microsoft.Coyote.Event)">
            <summary>
            Callback that is invoked when the actor defers dequeing an event from its inbox.
            </summary>
            <param name="e">The event that was deferred.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnDropEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Invoked when an event has been dropped.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnExceptionHandler(System.Exception,System.String,Microsoft.Coyote.Event)">
            <summary>
            Callback that is invoked when the actor throws an exception.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="methodName">The handler (outermost) that threw the exception.</param>
            <param name="e">The event being handled when the exception was thrown.</param>
            <returns>True if the exception was handled, else false if it should continue to get thrown.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnUnhandledEventExceptionHandler(Microsoft.Coyote.Actors.UnhandledEventException,Microsoft.Coyote.Event)">
            <summary>
            Callback that is invoked when the actor receives an event that it cannot handle.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="e">The unhandled event.</param>
            <returns>True if the the actor should gracefully halt, else false if the exception
            should continue to get thrown.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnException(System.Exception,System.String,Microsoft.Coyote.Event)">
            <summary>
            Callback that is invoked when the actor throws an exception. By default,
            the actor throws the exception causing the runtime to fail.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="methodName">The handler (outermost) that threw the exception.</param>
            <param name="e">The event being handled when the exception was thrown.</param>
            <returns>The action that the runtime should take.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.HaltAsync(Microsoft.Coyote.Event)">
            <summary>
            Halts the actor.
            </summary>
            <param name="e">The event being handled when the actor halts.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ToString">
            <summary>
            Returns a string that represents the current actor.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Actor.Status">
            <summary>
            The status of the actor.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.Status.Active">
            <summary>
            The actor is active.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.Status.Halting">
            <summary>
            The actor is halting.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.Status.Halted">
            <summary>
            The actor is halted.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Actor.UserCallbackType">
            <summary>
            The type of a user callback.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Actor.OnEventDoActionAttribute">
            <summary>
            Attribute for declaring which action should be invoked
            to handle a dequeued event of the specified type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.OnEventDoActionAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.OnEventDoActionAttribute.Action">
            <summary>
            The name of the action to invoke.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventDoActionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Actor.OnEventDoActionAttribute" /> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="actionName">The name of the action to invoke.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorExecutionContext">
            <summary>
            The execution context of an actor program.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.OnFailureSyncObject">
            <summary>
            Object used to synchronize access to the <see cref="E:Microsoft.Coyote.Actors.ActorExecutionContext.OnFailure" /> event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.Configuration">
            <summary>
            The configuration used by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.Runtime">
            <summary>
            The runtime associated with this context.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.Scheduler">
            <summary>
            The asynchronous operation scheduler, if available.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.SpecificationEngine">
            <summary>
            Responsible for checking specifications.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.ActorMap">
            <summary>
            Map from unique actor ids to actors.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.CoverageInfo">
            <summary>
            Data structure containing information regarding testing coverage.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.ValueGenerator">
            <summary>
            Responsible for generating random values.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.LogWriter">
            <summary>
            Responsible for writing to all registered <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog" /> objects.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorExecutionContext.Logger">
            <summary>
            Get or set the  <see cref="T:Microsoft.Coyote.IO.ILogger" /> used to log messages.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorExecutionContext.IsRunning">
            <summary>
            True if the actor program is running, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorExecutionContext.IsExecutionControlled">
            <summary>
            If true, the actor execution is controlled, else false.
            </summary>
        </member>
        <member name="E:Microsoft.Coyote.Actors.ActorExecutionContext.OnEventDropped">
            <summary>
            Callback that is fired when an event is dropped.
            </summary>
        </member>
        <member name="E:Microsoft.Coyote.Actors.ActorExecutionContext.OnFailure">
            <summary>
            Callback that is fired when an exception is thrown that includes failed assertions.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.SystematicTesting.OperationScheduler,Microsoft.Coyote.Specifications.SpecificationEngine,Microsoft.Coyote.IRandomValueGenerator,Microsoft.Coyote.Actors.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorExecutionContext" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorId(System.Type,System.String)">
            <summary>
            Creates a fresh actor id that has not yet been bound to any actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorIdFromName(System.Type,System.String)">
            <summary>
            Creates a actor id that is uniquely tied to the specified unique name. The
            returned actor id can either be a fresh id (not yet bound to any actor), or
            it can be bound to a previously created actor. In the second case, this actor
            id can be directly used to communicate with the corresponding actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Unique name used to create or get the actor id.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActor(System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and with the specified
            optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActor(System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and name, and with the
            specified optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified type, using the specified <see cref="T:Microsoft.Coyote.Actors.ActorId" />.
            This method optionally passes an <see cref="T:Microsoft.Coyote.Event" />. This event is given to the
            InitializeAsync method on the new actor.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorAndExecuteAsync(System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and with the specified
            optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor. The method returns only when the actor is initialized and
            the <see cref="T:Microsoft.Coyote.Event" /> (if any) is handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorAndExecuteAsync(System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and name, and with the
            specified optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor. The method returns only when the actor is
            initialized and the <see cref="T:Microsoft.Coyote.Event" /> (if any) is handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" />, using the specified unbound
            actor id, and passes the specified optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to
            the InitializeAsync method on the new actor. The method returns only when
            the actor is initialized and the <see cref="T:Microsoft.Coyote.Event" /> (if any)
            is handled.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor" /> of the specified <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor" /> of the specified <see cref="T:System.Type" />. The method
            returns only when the actor is initialized and the <see cref="T:Microsoft.Coyote.Event" /> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor" /> of the specified <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Event" /> to an actor.
            </summary>
            <param name="targetId">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="eventGroup">An optional event group associated with this Actor.</param>
            <param name="options">Optional configuration of a send operation.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.SendEventAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.Coyote.Event" /> to an actor. Returns immediately if the target was already
            running. Otherwise blocks until the target handles the event and reaches quiescense.
            </summary>
            <param name="targetId">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <param name="options">Optional configuration of a send operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is true if
            the event was handled, false if the event was only enqueued.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Event" /> to an actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.SendEventAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Event" /> to an actor. Returns immediately if the target was
            already running. Otherwise blocks until the target handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.EnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.Actor@)">
            <summary>
            Enqueues an event to the actor with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RunActorEventHandler(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous actor event handler.
            This is a fire and forget invocation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RunActorEventHandlerAsync(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous actor event handler.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorTimer(Microsoft.Coyote.Actors.Timers.TimerInfo,Microsoft.Coyote.Actors.Actor)">
            <summary>
            Creates a new timer that sends a <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent" /> to its owner actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetCurrentEventGroup(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Returns the current <see cref="T:Microsoft.Coyote.Actors.EventGroup" /> of the actor with the specified id. Returns null
            if the id is not set, or if the <see cref="T:Microsoft.Coyote.Actors.ActorId" /> is not associated with this runtime. During
            testing, the runtime asserts that the specified actor is currently executing.
            </summary>
            <param name="currentActorId">The id of the currently executing actor.</param>
            <returns>The current EventGroup or null.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetActorWithId``1(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Gets the actor of type <typeparamref name="TActor" /> with the specified id,
            or null if no such actor exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetNextOperationId">
            <summary>
            Returns the next available unique operation id.
            </summary>
            <returns>Value representing the next available unique operation id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RandomBoolean">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing.
            </summary>
            <returns>The nondeterministic boolean choice.</returns>
            <remarks>
            See <see href="/coyote/learn/core/non-determinism">Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RandomBoolean(System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing. The value is used to generate a number
            in the range [0..maxValue), where 0 triggers true.
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The nondeterministic boolean choice.</returns>
            <remarks>
            See <see href="/coyote/learn/core/non-determinism">Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetNondeterministicBooleanChoice(System.Int32,System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be
            controlled during analysis or testing. The value is used
            to generate an integer in the range [0..maxValue).
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The nondeterministic integer choice.</returns>
            <remarks>
            See <see href="/coyote/learn/core/non-determinism">Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetNondeterministicIntegerChoice(System.Int32,System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogInvokedAction(Microsoft.Coyote.Actors.Actor,System.Reflection.MethodInfo,System.String,System.String)">
            <summary>
            Logs that the specified actor invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogEnqueuedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Logs that the specified actor enqueued an <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogDequeuedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventInfo,System.Boolean)">
            <summary>
            Logs that the specified actor dequeued an <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogDefaultEventDequeued(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Logs that the specified actor dequeued the default <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogDefaultEventHandlerCheck(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Notifies that the inbox of the specified actor is about to be
            checked to see if the default event handler should fire.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogRaisedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Logs that the specified actor raised an <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogHandleRaisedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event)">
            <summary>
            Logs that the specified actor is handling a raised <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogReceiveCalled(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Logs that the specified actor called <see cref="M:Microsoft.Coyote.Actors.Actor.ReceiveEventAsync(System.Type[])" />
            or one of its overloaded methods.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogReceivedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Logs that the specified actor enqueued an event that it was waiting to receive.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogReceivedEventWithoutWaiting(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Logs that the specified actor received an event without waiting because the event
            was already in the inbox when the actor invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogWaitEvent(Microsoft.Coyote.Actors.Actor,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Logs that the specified actor is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogEnteredState(Microsoft.Coyote.Actors.StateMachine)">
            <summary>
            Logs that the specified state machine entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogExitedState(Microsoft.Coyote.Actors.StateMachine)">
            <summary>
            Logs that the specified state machine exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogPopState(Microsoft.Coyote.Actors.StateMachine)">
            <summary>
            Logs that the specified state machine invoked pop.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogInvokedOnEntryAction(Microsoft.Coyote.Actors.StateMachine,System.Reflection.MethodInfo)">
            <summary>
            Logs that the specified state machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogInvokedOnExitAction(Microsoft.Coyote.Actors.StateMachine,System.Reflection.MethodInfo)">
            <summary>
            Logs that the specified state machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.BuildCoverageInfo">
            <summary>
            Builds the coverage graph information, if any. This information is only available
            when <see cref="P:Microsoft.Coyote.Configuration.ReportActivityCoverage" /> is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetHashedActorState">
            <summary>
            Returns the current hashed state of the actors.
            </summary>
            <remarks>
            The hash is updated in each execution step.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetActorProgramCounter(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Returns the program counter of the specified actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RegisterMonitor``1">
            <summary>
            Registers a new specification monitor of the specified <see cref="T:System.Type" />.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Monitor``1(Microsoft.Coyote.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">Event to send to the monitor.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.TryCreateMonitor(System.Type)">
            <summary>
            Tries to create a new <see cref="T:Microsoft.Coyote.Specifications.Monitor" /> of the specified <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.InvokeMonitor(System.Type,Microsoft.Coyote.Event,System.String,System.String,System.String)">
            <summary>
            Invokes the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor" /> with the specified <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.AssertExpectedCallerActor(Microsoft.Coyote.Actors.Actor,System.String)">
            <summary>
            Asserts that the actor calling an actor method is also the actor that is currently executing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RaiseOnFailureEvent(System.Exception)">
            <summary>
            Raises the <see cref="E:Microsoft.Coyote.Actors.ActorExecutionContext.OnFailure" /> event with the specified <see cref="T:System.Exception" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.HandleDroppedEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Handle the specified dropped <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.WrapAndThrowException(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception containing the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.SetLogger(System.IO.TextWriter)">
            <summary>
            The old way of setting the <see cref="P:Microsoft.Coyote.Runtime.ICoyoteRuntime.Logger" /> property.
            </summary>
            <remarks>
            The new way is to just set the Logger property to an <see cref="T:Microsoft.Coyote.IO.ILogger" /> object.
            This method is only here for compatibility and has a minor perf impact as it has to
            wrap the writer in an object that implements the <see cref="T:Microsoft.Coyote.IO.ILogger" /> interface.
            </remarks>
            <param name="writer">The writer to use for logging.</param>
            <returns>The previously installed logger.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RegisterLog(Microsoft.Coyote.Actors.IActorRuntimeLog)">
            <summary>
            Use this method to register an <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog" />.
            </summary>
            <param name="log">The log writer to register.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RemoveLog(Microsoft.Coyote.Actors.IActorRuntimeLog)">
            <summary>
            Use this method to unregister a previously registered <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog" />.
            </summary>
            <param name="log">The previously registered log writer to unregister.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Stop">
            <summary>
            Terminates the runtime and notifies each active actor to halt execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Dispose(System.Boolean)">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Dispose" />
        <member name="T:Microsoft.Coyote.Actors.ActorExecutionContext.Mock">
            <summary>
            The mocked execution context of an actor program.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.NameValueToActorId">
            <summary>
            Map that stores all unique names and their corresponding actor ids.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.ProgramCounterMap">
            <summary>
            Map of program counters used for state-caching to distinguish
            scheduling from non-deterministic choices.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.IsExecutionControlled">
            <summary>
            If true, the actor execution is controlled, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.SystematicTesting.OperationScheduler,Microsoft.Coyote.Specifications.SpecificationEngine,Microsoft.Coyote.IRandomValueGenerator,Microsoft.Coyote.Actors.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorExecutionContext.Mock" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorIdFromName(System.Type,System.String)">
            <summary>
            Creates a actor id that is uniquely tied to the specified unique name. The
            returned actor id can either be a fresh id (not yet bound to any actor), or
            it can be bound to a previously created actor. In the second case, this actor
            id can be directly used to communicate with the corresponding actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Unique name used to create or get the actor id.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and with the specified
            optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and name, and with the
            specified optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified type, using the specified <see cref="T:Microsoft.Coyote.Actors.ActorId" />.
            This method optionally passes an <see cref="T:Microsoft.Coyote.Event" />. This event is given to the
            InitializeAsync method on the new actor.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorAndExecuteAsync(System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and with the specified
            optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor. The method returns only when the actor is initialized and
            the <see cref="T:Microsoft.Coyote.Event" /> (if any) is handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorAndExecuteAsync(System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and name, and with the
            specified optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor. The method returns only when the actor is
            initialized and the <see cref="T:Microsoft.Coyote.Event" /> (if any) is handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" />, using the specified unbound
            actor id, and passes the specified optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to
            the InitializeAsync method on the new actor. The method returns only when
            the actor is initialized and the <see cref="T:Microsoft.Coyote.Event" /> (if any)
            is handled.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and name, using the specified
            unbound actor id, and passes the specified optional <see cref="T:Microsoft.Coyote.Event" />. This event
            can only be used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor" /> of the specified <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and name, using the specified
            unbound actor id, and passes the specified optional <see cref="T:Microsoft.Coyote.Event" />. This event
            can only be used to access its payload, and cannot be handled. The method returns only
            when the actor is initialized and the <see cref="T:Microsoft.Coyote.Event" /> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor" /> of the specified <see cref="T:System.Type" />. The method
            returns only when the actor is initialized and the <see cref="T:Microsoft.Coyote.Event" /> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor" /> of the specified <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Event" /> to an actor.
            </summary>
            <param name="targetId">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="eventGroup">An optional event group associated with this Actor.</param>
            <param name="options">Optional configuration of a send operation.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.SendEventAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.Coyote.Event" /> to an actor. Returns immediately if the target was already
            running. Otherwise blocks until the target handles the event and reaches quiescense.
            </summary>
            <param name="targetId">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <param name="options">Optional configuration of a send operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is true if
            the event was handled, false if the event was only enqueued.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Event" /> to an actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.SendEventAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Event" /> to an actor. Returns immediately if the target was
            already running. Otherwise blocks until the target handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.EnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions,Microsoft.Coyote.Actors.Actor@)">
            <summary>
            Enqueues an event to the actor with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.EnqueueEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Enqueues an event to the actor with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.RunActorEventHandler(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,System.Boolean,Microsoft.Coyote.Actors.Actor)">
            <summary>
            Runs a new asynchronous event handler for the specified actor.
            This is a fire and forget invocation.
            </summary>
            <param name="actor">The actor that executes this event handler.</param>
            <param name="initialEvent">Optional event for initializing the actor.</param>
            <param name="isFresh">If true, then this is a new actor.</param>
            <param name="syncCaller">Caller actor that is blocked for quiscence.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorTimer(Microsoft.Coyote.Actors.Timers.TimerInfo,Microsoft.Coyote.Actors.Actor)">
            <summary>
            Creates a new timer that sends a <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent" /> to its owner actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.GetCurrentEventGroup(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Returns the current <see cref="T:Microsoft.Coyote.Actors.EventGroup" /> of the actor with the specified id. Returns null
            if the id is not set, or if the <see cref="T:Microsoft.Coyote.Actors.ActorId" /> is not associated with this runtime. During
            testing, the runtime asserts that the specified actor is currently executing.
            </summary>
            <param name="currentActorId">The id of the currently executing actor.</param>
            <returns>The current EventGroup or null.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.GetNondeterministicBooleanChoice(System.Int32,System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.GetNondeterministicIntegerChoice(System.Int32,System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogInvokedAction(Microsoft.Coyote.Actors.Actor,System.Reflection.MethodInfo,System.String,System.String)">
            <summary>
            Logs that the specified actor invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogEnqueuedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Logs that the specified actor enqueued an <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogDequeuedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventInfo,System.Boolean)">
            <summary>
            Logs that the specified actor dequeued an <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogDefaultEventDequeued(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Logs that the specified actor dequeued the default <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogDefaultEventHandlerCheck(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Notifies that the inbox of the specified actor is about to be
            checked to see if the default event handler should fire.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogRaisedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Logs that the specified actor raised an <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogHandleRaisedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event)">
            <summary>
            Logs that the specified actor is handling a raised <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogReceiveCalled(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Logs that the specified actor called <see cref="M:Microsoft.Coyote.Actors.Actor.ReceiveEventAsync(System.Type[])" />
            or one of its overloaded methods.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogReceivedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Logs that the specified actor enqueued an event that it was waiting to receive.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogReceivedEventWithoutWaiting(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Logs that the specified actor received an event without waiting because the event
            was already in the inbox when the actor invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogWaitEvent(Microsoft.Coyote.Actors.Actor,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Logs that the specified actor is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogEnteredState(Microsoft.Coyote.Actors.StateMachine)">
            <summary>
            Logs that the specified state machine entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogExitedState(Microsoft.Coyote.Actors.StateMachine)">
            <summary>
            Logs that the specified state machine exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogPopState(Microsoft.Coyote.Actors.StateMachine)">
            <summary>
            Logs that the specified state machine invoked pop.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogInvokedOnEntryAction(Microsoft.Coyote.Actors.StateMachine,System.Reflection.MethodInfo)">
            <summary>
            Logs that the specified state machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogInvokedOnExitAction(Microsoft.Coyote.Actors.StateMachine,System.Reflection.MethodInfo)">
            <summary>
            Logs that the specified state machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.GetHashedActorState">
            <summary>
            Returns the current hashed state of the actors.
            </summary>
            <remarks>
            The hash is updated in each execution step.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.GetActorProgramCounter(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Returns the program counter of the specified actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.IncrementActorProgramCounter(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Increments the program counter of the specified actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.ResetProgramCounter(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Resets the program counter of the specified actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.AssertExpectedCallerActor(Microsoft.Coyote.Actors.Actor,System.String)">
            <summary>
            Asserts that the actor calling an actor method is also the actor that is currently executing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.ProcessUnhandledExceptionInOperation(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Exception)">
            <summary>
            Processes an unhandled exception in the specified asynchronous operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.UnwrapException(System.Exception)">
            <summary>
            Unwraps the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.Dispose(System.Boolean)">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorFactory">
            <summary>
            Factory for creating actor instances.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorFactory.ActorConstructorCache">
            <summary>
            Cache storing actors constructors.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorFactory.Create(System.Type)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor" /> instance of the specified type.
            </summary>
            <param name="type">The type of the actors.</param>
            <returns>The created actor instance.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorId">
            <summary>
            Unique actor id.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorId.Runtime">
            <summary>
            The runtime that executes the actor with this id.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorId.Value">
            <summary>
            Unique id, when <see cref="F:Microsoft.Coyote.Actors.ActorId.NameValue" /> is empty.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorId.NameValue">
            <summary>
            Unique id, when non-empty.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorId.Type">
            <summary>
            The type of the actor associated with this id.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorId.Name">
            <summary>
            Name used for logging.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorId.IsNameUsedForHashing">
            <summary>
            True if <see cref="F:Microsoft.Coyote.Actors.ActorId.NameValue" /> is used as the unique id, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.#ctor(System.Type,System.UInt64,System.String,Microsoft.Coyote.Actors.ActorExecutionContext,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorId" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.Bind(Microsoft.Coyote.Actors.ActorExecutionContext)">
            <summary>
            Bind the actor id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.ToString">
            <summary>
            Returns a string that represents the current actor id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.Equals(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.ActorId" /> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.ActorId" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.CompareTo(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Compares the specified <see cref="T:Microsoft.Coyote.Actors.ActorId" /> with the current
            <see cref="T:Microsoft.Coyote.Actors.ActorId" /> for ordering or sorting purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.System#IEquatable{Microsoft#Coyote#Actors#ActorId}#Equals(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.ActorId" /> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.ActorId" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.System#IComparable{Microsoft#Coyote#Actors#ActorId}#CompareTo(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Compares the specified <see cref="T:Microsoft.Coyote.Actors.ActorId" /> with the current
            <see cref="T:Microsoft.Coyote.Actors.ActorId" /> for ordering or sorting purposes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorOperation">
            <summary>
            Represents an asynchronous actor operation that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorOperation.Actor">
            <summary>
            The actor that executes this operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorOperation.#ctor(System.UInt64,System.String,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.SystematicTesting.OperationScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorOperation" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorOperation.BlockUntilEventReceived">
            <summary>
            Blocks the operation until the event the actor is waiting for has been received.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorOperation.EnableDueToReceivedEvent">
            <summary>
            Enables the operation due to the received event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Coverage.ActivityCoverageReporter">
            <summary>
            Reports actor activity coverage.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Coverage.ActivityCoverageReporter.CoverageInfo">
            <summary>
            Data structure containing information
            regarding testing coverage.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Coverage.ActivityCoverageReporter.BuiltInEvents">
            <summary>
            Set of built in events which we hide in the coverage report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActivityCoverageReporter.#ctor(Microsoft.Coyote.Actors.Coverage.CoverageInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Coverage.ActivityCoverageReporter" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActivityCoverageReporter.EmitVisualizationGraph(System.String)">
            <summary>
            Emits the visualization graph.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActivityCoverageReporter.EmitCoverageReport(System.String)">
            <summary>
            Emits the code coverage report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActivityCoverageReporter.GetEventIds(Microsoft.Coyote.Actors.Coverage.GraphLink)">
            <summary>
            Return all events represented by this link.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActivityCoverageReporter.WriteCoverageText(System.IO.TextWriter)">
            <summary>
            Writes the visualization text.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActivityCoverageReporter.RemoveCoveredEvents(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}})">
            <summary>
            Remove all events from expectedEvent that are found in the graph.
            </summary>
            <param name="expectedEvents">The list of all expected events organized by unique state Id.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Coverage.EventCoverage">
            <summary>
            This class maintains information about events received and sent from each state of each actor.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Coverage.EventCoverage.EventsReceived">
            <summary>
            Map from states to the list of events received by that state.  The state id is fully qualified by
            the actor id it belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Coverage.EventCoverage.EventsSent">
            <summary>
            Map from states to the list of events sent by that state.  The state id is fully qualified by
            the actor id it belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.EventCoverage.GetEventsReceived(System.String)">
            <summary>
            Get list of events received by the given fully qualified state.
            </summary>
            <param name="stateId">The actor qualified state name.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.EventCoverage.GetEventsSent(System.String)">
            <summary>
            Get list of events sent by the given state.
            </summary>
            <param name="stateId">The actor qualified state name.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder">
            <summary>
            Implements the <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog" /> and builds a directed graph
            from the recorded events and state transitions.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.CollapseMachineInstances">
            <summary>
            Set this boolean to true to get a collapsed graph showing only
            machine types, states and events.  This will not show machine "instances".
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.Logger">
            <summary>
            Get or set the underlying logging object.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.Graph">
            <summary>
            Get the Graph object built by this logger.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnCreateActor(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified actor has been created.
            </summary>
            <param name="id">The id of the actor that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnCreateStateMachine(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine has been created.
            </summary>
            <param name="id">The id of the state machine that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnSendEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String,Microsoft.Coyote.Event,System.Guid,System.Boolean)">
            <summary>
            Invoked when the specified event is sent to a target actor.
            </summary>
            <param name="targetActorId">The id of the target actor.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The state name, if the sender is a state machine, else null.</param>
            <param name="e">The event being sent.</param>
            <param name="eventGroupId">The id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target actor halted.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnRaiseEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified state machine raises an event.
            </summary>
            <param name="id">The id of the actor raising the event.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnEnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified event is about to be enqueued to an actor.
            </summary>
            <param name="id">The id of the actor that the event is being enqueued to.</param>
            <param name="e">The event being enqueued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnDequeueEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified event is dequeued by an actor.
            </summary>
            <param name="id">The id of the actor that the event is being dequeued by.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being dequeued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnReceiveEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event,System.Boolean)">
            <summary>
            Invoked when the specified event is received by an actor.
            </summary>
            <param name="id">The id of the actor that received the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The the event being received.</param>
            <param name="wasBlocked">The actor was waiting for one or more specific events,
            and <paramref name="e" /> was one of them.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type)">
            <summary>
            Invoked when the specified actor waits to receive an event of a specified type.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type[])">
            <summary>
            Invoked when the specified actor waits to receive an event of one of the specified types.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnStateTransition(Microsoft.Coyote.Actors.ActorId,System.String,System.Boolean)">
            <summary>
            Invoked when the specified state machine enters or exits a state.
            </summary>
            <param name="id">The id of the actor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnExecuteAction(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String)">
            <summary>
            Invoked when the specified actor executes an action.
            </summary>
            <param name="id">The id of the actor executing the action.</param>
            <param name="handlingStateName">The state that declared this action (can be different from currentStateName in the case of pushed states.</param>
            <param name="currentStateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnGotoState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine performs a goto transition to the specified state.
            </summary>
            <param name="id">The id of the actor.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnPushState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine is being pushed to a state.
            </summary>
            <param name="id">The id of the actor being pushed to the state.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnPopState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine has popped its current state.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="restoredStateName">The name of the state being re-entered, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnHalt(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <summary>
            Invoked when the specified actor has been halted.
            </summary>
            <param name="id">The id of the actor that has been halted.</param>
            <param name="inboxSize">Approximate size of the inbox.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnDefaultEventHandler(Microsoft.Coyote.Actors.ActorId,System.String)">
            <summary>
            Invoked when the specified actor is idle (there is nothing to dequeue) and the default
            event handler is about to be executed.
            </summary>
            <param name="id">The id of the actor that the state will execute in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnHandleRaisedEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified actor handled a raised event.
            </summary>
            <param name="id">The id of the actor handling the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnPopStateUnhandledEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified event cannot be handled in the current state, its exit
            handler is executed and then the state is popped and any previous "current state"
            is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnExceptionThrown(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Invoked when the specified actor throws an exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnExceptionHandled(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Invoked when the specified OnException method is used to handle a thrown exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnCreateTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Invoked when the specified actor timer has been created.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnStopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Invoked when the specified actor timer has been stopped.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnCreateMonitor(System.String)">
            <summary>
            Invoked when the specified monitor has been created.
            </summary>
            <param name="monitorType">The name of the type of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorExecuteAction(System.String,System.String,System.String)">
            <summary>
            Invoked when the specified monitor executes an action.
            </summary>
            <param name="monitorType">Name of type of the monitor that is executing the action.</param>
            <param name="stateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified monitor is about to process an event.
            </summary>
            <param name="monitorType">Name of type of the monitor that will process the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The name of the state the sender is in.</param>
            <param name="e">The event being processed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorRaiseEvent(System.String,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified monitor raised an event.
            </summary>
            <param name="monitorType">Name of type of the monitor raising the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Invoked when the specified monitor enters or exits a state.
            </summary>
            <param name="monitorType">The name of the type of the monitor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState" />
            is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Invoked when the specified monitor finds an error.
            </summary>
            <param name="monitorType">The name of the type of the monitor.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnRandom(System.Object,System.String,System.String)">
            <summary>
            Invoked when the specified controlled nondeterministic result has been obtained.
            </summary>
            <param name="result">The nondeterministic result (may be bool or int).</param>
            <param name="callerName">The name of the caller, if any.</param>
            <param name="callerType">The type of the caller, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnAssertionFailure(System.String)">
            <summary>
            Invoked when the specified assertion failure has occurred.
            </summary>
            <param name="error">The text of the error.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnStrategyDescription(System.String,System.String)">
            <summary>
            Invoked to describe the specified scheduling strategy.
            </summary>
            <param name="strategyName">The name of the strategy that was used.</param>
            <param name="description">More information about the scheduling strategy.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnCompleted">
            <summary>
            Invoked when a log is complete (and is about to be closed).
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.SnapshotGraph(System.Boolean)">
            <summary>
            Return current graph and reset for next iteration.
            </summary>
            <param name="reset">Set to true will reset the graph for the next iteration.</param>
            <returns>The graph.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Coverage.Graph">
            <summary>
            A directed graph made up of Nodes and Links.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.Graph.Nodes">
            <summary>
            Return the current list of nodes (in no particular order).
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.Graph.Links">
            <summary>
            Return the current list of links (in no particular order).
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.Graph.GetNode(System.String)">
            <summary>
            Get existing node or null.
            </summary>
            <param name="id">The id of the node.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.Graph.GetOrCreateNode(System.String,System.String,System.String)">
            <summary>
            Get existing node or create a new one with the given id and label.
            </summary>
            <returns>Returns the new node or the existing node if it was already defined.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.Graph.GetOrCreateNode(Microsoft.Coyote.Actors.Coverage.GraphNode)">
            <summary>
            Get existing node or create a new one with the given id and label.
            </summary>
            <returns>Returns the new node or the existing node if it was already defined.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.Graph.GetOrCreateLink(Microsoft.Coyote.Actors.Coverage.GraphNode,Microsoft.Coyote.Actors.Coverage.GraphNode,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Get existing link or create a new one connecting the given source and target nodes.
            </summary>
            <returns>The new link or the existing link if it was already defined.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.Graph.ToString">
            <summary>
            Serialize the graph to a DGML string.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.Graph.WriteDgml(System.IO.TextWriter,System.Boolean)">
            <summary>
            Serialize the graph to DGML.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.Graph.LoadDgml(System.String)">
            <summary>
            Load a DGML file into a new Graph object.
            </summary>
            <param name="graphFilePath">Full path to the DGML file.</param>
            <returns>The loaded Graph object.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.Graph.Merge(Microsoft.Coyote.Actors.Coverage.Graph)">
            <summary>
            Merge the given graph so that this graph becomes a superset of both graphs.
            </summary>
            <param name="other">The new graph to merge into this graph.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Coverage.GraphObject">
            <summary>
            A Node of a Graph.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.GraphObject.Attributes">
            <summary>
            Optional list of attributes for the node.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.GraphObject.AttributeLists">
            <summary>
            Optional list of attributes that have a multi-part value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.GraphObject.AddAttribute(System.String,System.String)">
            <summary>
            Add an attribute to the node.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.GraphObject.AddListAttribute(System.String,System.String)">
            <summary>
            Creates a compound attribute value containing a merged list of unique values.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The new value to add to the unique list.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Coverage.GraphNode">
            <summary>
            A Node of a Graph.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.GraphNode.Id">
            <summary>
            The unique Id of the Node within the Graph.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.GraphNode.Label">
            <summary>
            An optional display label for the node (does not need to be unique).
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.GraphNode.Category">
            <summary>
            An optional category for the node.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.GraphNode.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Coverage.GraphNode" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.GraphNode.AddDgmlProperties(System.Xml.Linq.XElement)">
            <summary>
            Add additional properties from XML element.
            </summary>
            <param name="e">An XML element representing the graph node in DGML format.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Coverage.GraphLink">
            <summary>
            A Link represents a directed graph connection between two Nodes.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.GraphLink.Label">
            <summary>
            An optional display label for the link.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.GraphLink.Category">
            <summary>
            An optional category for the link.
            The special category "Contains" is reserved for building groups.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.GraphLink.Source">
            <summary>
            The source end of the link.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.GraphLink.Target">
            <summary>
            The target end of the link.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.GraphLink.Index">
            <summary>
            The optional link index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.GraphLink.#ctor(Microsoft.Coyote.Actors.Coverage.GraphNode,Microsoft.Coyote.Actors.Coverage.GraphNode,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Coverage.GraphLink" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.GraphLink.AddDgmlProperties(System.Xml.Linq.XElement)">
            <summary>
            Add additional properties from XML element.
            </summary>
            <param name="e">An XML element representing the graph node in DGML format.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Coverage.CoverageInfo">
            <summary>
            Class for storing actor coverage-specific data across multiple testing iterations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.CoverageInfo.Machines">
            <summary>
            Set of known machines.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.CoverageInfo.MachinesToStates">
            <summary>
            Map from machines to set of all states states defined in that machine.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.CoverageInfo.RegisteredEvents">
            <summary>
            Set of (machine + "." + state =&gt; registered events). So all events that can
            get us into each state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.CoverageInfo.CoverageGraph">
            <summary>
            The coverage graph.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.CoverageInfo.EventInfo">
            <summary>
            Information about events sent and received.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.CoverageInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Coverage.CoverageInfo" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.CoverageInfo.IsMachineDeclared(System.String)">
            <summary>
            Checks if the machine type has already been registered for coverage.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.CoverageInfo.DeclareMachineState(System.String,System.String)">
            <summary>
            Declares a state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.CoverageInfo.DeclareStateEvent(System.String,System.String,System.String)">
            <summary>
            Declares a registered state, event pair.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.CoverageInfo.Merge(Microsoft.Coyote.Actors.Coverage.CoverageInfo)">
            <summary>
            Merges the information from the specified coverage info. This is not thread-safe.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.CoverageInfo.AddState(System.String,System.String)">
            <summary>
            Adds a new state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.CoverageInfo.Load(System.String)">
            <summary>
            Load the given Coverage info file.
            </summary>
            <param name="filename">Path to the file to load.</param>
            <returns>The deserialized coverage info.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.CoverageInfo.Save(System.String)">
            <summary>
            Save the coverage info to the given XML file.
            </summary>
            <param name="serFilePath">The path to the file to create.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.DequeueStatus">
            <summary>
            The status returned as the result of a dequeue operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.DequeueStatus.Success">
            <summary>
            An event was successfully dequeued.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.DequeueStatus.Raised">
            <summary>
            The raised event was dequeued.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.DequeueStatus.Default">
            <summary>
            The default event was dequeued.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.DequeueStatus.NotAvailable">
            <summary>
            No event available to dequeue.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EnqueueStatus">
            <summary>
            The status returned as the result of an enqueue operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EnqueueStatus.EventHandlerRunning">
            <summary>
            The event handler is already running.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EnqueueStatus.EventHandlerNotRunning">
            <summary>
            The event handler is not running.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EnqueueStatus.Received">
            <summary>
            The event was consumed at a receive statement.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EnqueueStatus.NextEventUnavailable">
            <summary>
            There is no next event available to dequeue and handle.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EnqueueStatus.Dropped">
            <summary>
            The event was dropped.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EventQueue">
            <summary>
            Implements a queue of events.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.Owner">
            <summary>
            The actor that owns this queue.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.Queue">
            <summary>
            The backing queue.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.RaisedEvent">
            <summary>
            The raised event and its metadata, or null if no event has been raised.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.EventWaitTypes">
            <summary>
            Map from the types of events that the owner of the queue is waiting to receive
            to an optional predicate. If an event of one of these types is enqueued, then
            if there is no predicate, or if there is a predicate and evaluates to true, then
            the event is received, else the event is deferred.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.ReceiveCompletionSource">
            <summary>
            Task completion source that contains the event obtained using an explicit receive.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.IsClosed">
            <summary>
            Checks if the queue is accepting new events.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventQueue.Size">
            <summary>
            The size of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventQueue.IsEventRaised">
            <summary>
            Checks if an event has been raised.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventQueue.IsEventHandlerRunning">
            <summary>
            True if the event handler is currently running, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.#ctor(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.EventQueue" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.Enqueue(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Enqueues the specified event and its optional metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.Dequeue">
            <summary>
            Dequeues the next event, if there is one available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.RaiseEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Enqueues the specified raised event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.ReceiveEventAsync(System.Type[])">
            <summary>
            Waits to receive an event of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.ReceiveEventAsync(System.Tuple{System.Type,System.Func{Microsoft.Coyote.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an event of the specified types that satisfy the specified predicates.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.ReceiveEventAsync(System.Collections.Generic.Dictionary{System.Type,System.Func{Microsoft.Coyote.Event,System.Boolean}})">
            <summary>
            Waits for an event to be enqueued based on the conditions defined in the event wait types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.IsEventIgnored(Microsoft.Coyote.Event)">
            <summary>
            Checks if the specified event is currently ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.IsEventDeferred(Microsoft.Coyote.Event)">
            <summary>
            Checks if the specified event is currently deferred.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.IsDefaultHandlerAvailable">
            <summary>
            Checks if a default handler is currently available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnEnqueueEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnRaiseEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies the actor that it is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnReceiveEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event it was waiting to receive has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnReceiveEventWithoutWaiting(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event it was waiting to receive was already in the
            event queue when the actor invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnIgnoreEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnDeferEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been deferred.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnDropEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been dropped.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.Close">
            <summary>
            Closes the queue, which stops any further event enqueues.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.Dispose(System.Boolean)">
            <summary>
            Disposes the queue resources.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.Dispose" />
        <member name="T:Microsoft.Coyote.Actors.IEventQueue">
            <summary>
            Interface of a queue of events.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.IEventQueue.Size">
            <summary>
            The size of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.IEventQueue.IsEventRaised">
            <summary>
            Checks if an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.Enqueue(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Enqueues the specified event and its optional metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.Dequeue">
            <summary>
            Dequeues the next event, if there is one available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.RaiseEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Enqueues the specified raised event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.ReceiveEventAsync(System.Type,System.Func{Microsoft.Coyote.Event,System.Boolean})">
            <summary>
            Waits to receive an event of the specified type that satisfies an optional predicate.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.ReceiveEventAsync(System.Type[])">
            <summary>
            Waits to receive an event of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.ReceiveEventAsync(System.Tuple{System.Type,System.Func{Microsoft.Coyote.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an event of the specified types that satisfy the specified predicates.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.GetCachedState">
            <summary>
            Returns the cached state of the queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.Close">
            <summary>
            Closes the queue, which stops any further event enqueues.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Mocks.MockEventQueue">
            <summary>
            Implements a queue of events that is used during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Owner">
            <summary>
            The actor that owns this queue.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Queue">
            <summary>
            The backing queue that contains events with their metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.RaisedEvent">
            <summary>
            The raised event and its metadata, or null if no event has been raised.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.EventWaitTypes">
            <summary>
            Map from the types of events that the owner of the queue is waiting to receive
            to an optional predicate. If an event of one of these types is enqueued, then
            if there is no predicate, or if there is a predicate and evaluates to true, then
            the event is received, else the event is deferred.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveCompletionSource">
            <summary>
            Task completion source that contains the event obtained using an explicit receive.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsClosed">
            <summary>
            Checks if the queue is accepting new events.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Size">
            <summary>
            The size of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsEventRaised">
            <summary>
            Checks if an event has been raised.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsEventHandlerRunning">
            <summary>
            True if the event handler is currently running, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.#ctor(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Mocks.MockEventQueue" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Enqueue(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Enqueues the specified event and its optional metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Dequeue">
            <summary>
            Dequeues the next event, if there is one available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.TryDequeueEvent(System.Boolean)">
            <summary>
            Dequeues the next event and its metadata, if there is one available, else returns null.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.RaiseEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Enqueues the specified raised event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveEventAsync(System.Type,System.Func{Microsoft.Coyote.Event,System.Boolean})">
            <summary>
            Waits to receive an event of the specified type that satisfies an optional predicate.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveEventAsync(System.Type[])">
            <summary>
            Waits to receive an event of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveEventAsync(System.Tuple{System.Type,System.Func{Microsoft.Coyote.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an event of the specified types that satisfy the specified predicates.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveEventAsync(System.Collections.Generic.Dictionary{System.Type,System.Func{Microsoft.Coyote.Event,System.Boolean}})">
            <summary>
            Waits for an event to be enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsEventIgnored(Microsoft.Coyote.Event)">
            <summary>
            Checks if the specified event is currently ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsEventDeferred(Microsoft.Coyote.Event)">
            <summary>
            Checks if the specified event is currently deferred.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsDefaultHandlerAvailable">
            <summary>
            Checks if a default handler is currently available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnEnqueueEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnRaiseEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies the actor that it is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnReceiveEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event it was waiting to receive has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnReceiveEventWithoutWaiting(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event it was waiting to receive was already in the
            event queue when the actor invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnReceiveInvoked">
            <summary>
            Notifies the actor that <see cref="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveEventAsync(System.Type[])" /> or one of its overloaded methods was invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnIgnoreEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnDeferEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been deferred.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnDropEvent(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been dropped.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.GetCachedState">
            <summary>
            Returns the cached state of the queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Close">
            <summary>
            Closes the queue, which stops any further event enqueues.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Dispose(System.Boolean)">
            <summary>
            Disposes the queue resources.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Dispose" />
        <member name="T:Microsoft.Coyote.Actors.AwaitableEventGroup`1">
            <summary>
            An object representing an awaitable long running context involving one or more actors.
            An `AwaitableEventGroup` can be provided as an optional argument in CreateActor and SendEvent.
            If a null `AwaitableEventGroup` is passed then the `EventGroup` is inherited from the sender
            or target actors (based on which ever one has a <see cref="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup" />).
            In this way an `AwaitableEventGroup` is automatically communicated to all actors involved in
            completing some larger operation. Each actor involved can find the `AwaitableEventGroup` using
            their <see cref="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup" /> property.
            </summary>
            <typeparam name="T">The result returned when the operation is completed.</typeparam>
        </member>
        <member name="F:Microsoft.Coyote.Actors.AwaitableEventGroup`1.Tcs">
            <summary>
            A task completion source that can be awaited to get the final result object.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.AwaitableEventGroup`1.Task">
            <summary>
            Gets the task created by this `AwaitableEventGroup`.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.AwaitableEventGroup`1.IsCompleted">
            <summary>
            Indicates the `AwaitableEventGroup` has been completed.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.AwaitableEventGroup`1.IsCanceled">
            <summary>
            Value that indicates whether the task completed execution due to being canceled.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.AwaitableEventGroup`1.IsFaulted">
            <summary>
            Value that indicates whether the task completed due to an unhandled exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.AwaitableEventGroup`1" /> class.
            </summary>
            <param name="id">The id for this `AwaitableEventGroup` (defaults to Guid.Empty).</param>
            <param name="name">An optional friendly name for this `EventGroup`.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.SetResult(`0)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.
            </summary>
            <param name="result">The completed result object.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.TrySetResult(`0)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.
            </summary>
            <param name="result">The completed result object.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.SetCancelled">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.TrySetCanceled">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.
            </summary>
            <returns>True if the `AwaitableEventGroup` was successful; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.SetException(System.Exception)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state
            and binds it to the specified exception.
            </summary>
            <param name="exception">The exception to bind to this task.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state
            and binds it to the specified exception.
            </summary>
            <param name="exception">The exception to bind to this task.</param>
            <returns>True if the `AwaitableEventGroup` was successful; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.GetAwaiter">
            <summary>
            Gets an awaiter for this awaitable.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.DefaultEvent">
            <summary>
            A default event that is generated by the runtime when
            no user-defined event is dequeued or received.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.DefaultEvent.Instance">
            <summary>
            Gets a <see cref="T:Microsoft.Coyote.Actors.DefaultEvent" /> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.DefaultEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.DefaultEvent" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EventGroup">
            <summary>
            An object representing a long running context involving one or more actors.
            An `EventGroup` can be provided as an optional argument in CreateActor and SendEvent.
            If a null `EventGroup` is passed then the `EventGroup` is inherited from the sender
            or target actors (based on which ever one has a <see cref="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup" />).
            In this way an `EventGroup` is automatically communicated to all actors involved in
            completing some larger operation. Each actor involved can find the `EventGroup` using
            their <see cref="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup" /> property.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventGroup.Null">
            <summary>
            A special null event group that can be used to stop the <see cref="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup" /> from
            being passed along when <see cref="M:Microsoft.Coyote.Actors.Actor.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)" />
            or <see cref="M:Microsoft.Coyote.Actors.Actor.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)" /> is invoked.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventGroup.Id">
            <summary>
            The unique id of this `EventGroup`, initialized with Guid.Empty.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventGroup.Name">
            <summary>
            An optional friendly name for this `EventGroup`.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventGroup.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.EventGroup" /> class.
            </summary>
            <param name="id">The id for this `EventGroup` (defaults to Guid.Empty).</param>
            <param name="name">An optional friendly name for this `EventGroup`.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EventInfo">
            <summary>
            Contains an <see cref="T:Microsoft.Coyote.Event" />, and its associated metadata.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventInfo.EventName">
            <summary>
            Event name.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventInfo.OriginInfo">
            <summary>
            Information regarding the event origin.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventInfo.MustHandle">
            <summary>
            True if this event must always be handled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventInfo.Assert">
            <summary>
            Asserts that there must not be more than N instances of the
            event type in the inbox queue of the receiver.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventInfo.HashedState">
            <summary>
            User-defined hash of the event. The default value is 0. Override to
            improve the accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventInfo.#ctor(Microsoft.Coyote.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.EventInfo" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventInfo.#ctor(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventOriginInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.EventInfo" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EventOriginInfo">
            <summary>
            Contains the origin information of an <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventOriginInfo.SenderActorId">
            <summary>
            The sender actor id.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventOriginInfo.SenderActorName">
            <summary>
            The sender actor name.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventOriginInfo.SenderStateName">
            <summary>
            The sender state name, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventOriginInfo.#ctor(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.EventOriginInfo" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.GotoStateEvent">
            <summary>
            The goto state event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.GotoStateEvent.State">
            <summary>
            Type of the state to transition to.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.GotoStateEvent.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.GotoStateEvent" /> class.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.HaltEvent">
            <summary>
            The halt event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.HaltEvent.Instance">
            <summary>
            Gets a <see cref="T:Microsoft.Coyote.Actors.HaltEvent" /> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.HaltEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.HaltEvent" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.PushStateEvent">
            <summary>
            The push state event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.PushStateEvent.State">
            <summary>
            Type of the state to transition to.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.PushStateEvent.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.PushStateEvent" /> class.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.QuiescentEvent">
            <summary>
            Signals that an actor has reached quiescence.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.QuiescentEvent.ActorId">
            <summary>
            The id of the actor that has reached quiescence.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.QuiescentEvent.#ctor(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.QuiescentEvent" /> class.
            </summary>
            <param name="id">The id of the actor that has reached quiescence.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.WildCardEvent">
            <summary>
            The wild card event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.WildCardEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.WildCardEvent" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActionExceptionFilterException">
            <summary>
            Exception that is thrown by the runtime upon an <see cref="T:Microsoft.Coyote.Actors.Actor" /> action failure.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActionExceptionFilterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActionExceptionFilterException" /> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActionExceptionFilterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActionExceptionFilterException" /> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.OnEventDroppedHandler">
            <summary>
            Handles the <see cref="E:Microsoft.Coyote.Actors.IActorRuntime.OnEventDropped" /> event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.OnExceptionOutcome">
            <summary>
            The outcome when an <see cref="T:Microsoft.Coyote.Actors.Actor" /> throws an exception.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.OnExceptionOutcome.ThrowException">
            <summary>
            The actor throws the exception causing the runtime to fail.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.OnExceptionOutcome.HandledException">
            <summary>
            The actor handles the exception and resumes execution.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.OnExceptionOutcome.Halt">
            <summary>
            The actor handles the exception and halts.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.UnhandledEventException">
            <summary>
            Signals that an <see cref="T:Microsoft.Coyote.Actors.Actor" /> received an unhandled event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.UnhandledEventException.UnhandledEvent">
            <summary>
             The unhandled event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.UnhandledEventException.CurrentStateName">
            <summary>
            The name of the current state, if the actor that threw the exception
            is a <see cref="T:Microsoft.Coyote.Actors.StateMachine" /> and a state exists, else null.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.UnhandledEventException.#ctor(Microsoft.Coyote.Event,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.UnhandledEventException" /> class.
            </summary>
            <param name="unhandledEvent">The event that was unhandled.</param>
            <param name="currentStateName">The name of the current state, if the actor that threw the exception
            is a state machine and a state exists, else null.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActionEventHandlerDeclaration">
            <summary>
            Defines an action event handler declaration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActionEventHandlerDeclaration.Name">
            <summary>
            Name of the action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActionEventHandlerDeclaration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActionEventHandlerDeclaration" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.CachedDelegate">
            <summary>
            An actor delegate that has been cached to optimize performance of invocations.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.DeferEventHandlerDeclaration">
            <summary>
            Defines a defer event handler declaration.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EventHandlerDeclaration">
            <summary>
            An abstract event handler declaration.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.IgnoreEventHandlerDeclaration">
            <summary>
            Defines an ignore event handler declaration.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.IActorRuntime">
            <summary>
            Interface that exposes runtime methods for creating and executing actors.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/overview">Programming
            model: asynchronous actors</see> for more information.
            </remarks>
        </member>
        <member name="E:Microsoft.Coyote.Actors.IActorRuntime.OnEventDropped">
            <summary>
            Callback that is fired when an event is dropped.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActorId(System.Type,System.String)">
            <summary>
            Creates a fresh actor id that has not yet been bound to any actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActorIdFromName(System.Type,System.String)">
            <summary>
            Creates a actor id that is uniquely tied to the specified unique name. The
            returned actor id can either be a fresh id (not yet bound to any actor), or
            it can be bound to a previously created actor. In the second case, this actor
            id can be directly used to communicate with the corresponding actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Unique name used to create or get the actor id.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActor(System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and with the specified
            optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActor(System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and name, and with the
            specified optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified type, using the specified <see cref="T:Microsoft.Coyote.Actors.ActorId" />.
            This method optionally passes an <see cref="T:Microsoft.Coyote.Event" />. This event is given to the
            InitializeAsync method on the new actor.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActorAndExecuteAsync(System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and with the specified
            optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor. The method returns only when the actor is initialized and
            the <see cref="T:Microsoft.Coyote.Event" /> (if any) is handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActorAndExecuteAsync(System.Type,System.String,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" /> and name, and with the
            specified optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Event)" />
            method on the new actor. The method returns only when the actor is
            initialized and the <see cref="T:Microsoft.Coyote.Event" /> (if any) is handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type" />, using the specified unbound
            actor id, and passes the specified optional <see cref="T:Microsoft.Coyote.Event" />. This event is given to
            the InitializeAsync method on the new actor. The method returns only when
            the actor is initialized and the <see cref="T:Microsoft.Coyote.Event" /> (if any)
            is handled.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Event" /> to an actor.
            </summary>
            <param name="targetId">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="eventGroup">An optional event group associated with this Actor.</param>
            <param name="options">Optional configuration of a send operation.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.SendEventAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.Coyote.Event" /> to an actor. Returns immediately if the target was already
            running. Otherwise blocks until the target handles the event and reaches quiescense.
            </summary>
            <param name="targetId">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <param name="options">Optional configuration of a send operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is true if
            the event was handled, false if the event was only enqueued.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.GetCurrentEventGroup(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Returns the current <see cref="T:Microsoft.Coyote.Actors.EventGroup" /> of the actor with the specified id. Returns null
            if the id is not set, or if the <see cref="T:Microsoft.Coyote.Actors.ActorId" /> is not associated with this runtime. During
            testing, the runtime asserts that the specified actor is currently executing.
            </summary>
            <param name="currentActorId">The id of the currently executing actor.</param>
            <returns>The current EventGroup or null.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.RegisterLog(Microsoft.Coyote.Actors.IActorRuntimeLog)">
            <summary>
            Use this method to register an <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog" />.
            </summary>
            <param name="log">The log writer to register.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.RemoveLog(Microsoft.Coyote.Actors.IActorRuntimeLog)">
            <summary>
            Use this method to unregister a previously registered <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog" />.
            </summary>
            <param name="log">The previously registered log writer to unregister.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter">
            <summary>
            This class implements IActorRuntimeLog and generates output in a a human readable text format.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.Logger">
            <summary>
            Get or set the <see cref="T:Microsoft.Coyote.IO.ILogger" /> interface to the logger.
            </summary>
            <remarks>
            If you want Coyote to log to an existing TextWriter, then use the <see cref="T:Microsoft.Coyote.IO.TextWriterLogger" /> object
            but that will have a minor performance overhead, so it is better to use <see cref="T:Microsoft.Coyote.IO.ILogger" /> directly.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnAssertionFailure(System.String)">
            <summary>
            Invoked when the specified assertion failure has occurred.
            </summary>
            <param name="error">The text of the error.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnCreateActor(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified actor has been created.
            </summary>
            <param name="id">The id of the actor that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnCreateStateMachine(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine has been created.
            </summary>
            <param name="id">The id of the state machine that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnCreateMonitor(System.String)">
            <summary>
            Invoked when the specified monitor has been created.
            </summary>
            <param name="monitorType">The name of the type of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnCreateTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Invoked when the specified actor timer has been created.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnDefaultEventHandler(Microsoft.Coyote.Actors.ActorId,System.String)">
            <summary>
            Invoked when the specified actor is idle (there is nothing to dequeue) and the default
            event handler is about to be executed.
            </summary>
            <param name="id">The id of the actor that the state will execute in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnDequeueEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified event is dequeued by an actor.
            </summary>
            <param name="id">The id of the actor that the event is being dequeued by.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being dequeued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnEnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified event is about to be enqueued to an actor.
            </summary>
            <param name="id">The id of the actor that the event is being enqueued to.</param>
            <param name="e">The event being enqueued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnExceptionHandled(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Invoked when the specified OnException method is used to handle a thrown exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnExceptionThrown(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Invoked when the specified actor throws an exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnExecuteAction(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String)">
            <summary>
            Invoked when the specified actor executes an action.
            </summary>
            <param name="id">The id of the actor executing the action.</param>
            <param name="handlingStateName">The state that declared this action (can be different from currentStateName in the case of pushed states.</param>
            <param name="currentStateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnGotoState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine performs a goto transition to the specified state.
            </summary>
            <param name="id">The id of the actor.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnHalt(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <summary>
            Invoked when the specified actor has been halted.
            </summary>
            <param name="id">The id of the actor that has been halted.</param>
            <param name="inboxSize">Approximate size of the inbox.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnHandleRaisedEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified actor handled a raised event.
            </summary>
            <param name="id">The id of the actor handling the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnMonitorExecuteAction(System.String,System.String,System.String)">
            <summary>
            Invoked when the specified monitor executes an action.
            </summary>
            <param name="monitorType">Name of type of the monitor that is executing the action.</param>
            <param name="stateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified monitor is about to process an event.
            </summary>
            <param name="monitorType">Name of type of the monitor that will process the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The name of the state the sender is in.</param>
            <param name="e">The event being processed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnMonitorRaiseEvent(System.String,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified monitor raised an event.
            </summary>
            <param name="monitorType">Name of type of the monitor raising the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Invoked when the specified monitor enters or exits a state.
            </summary>
            <param name="monitorType">The name of the type of the monitor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState" />
            is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Invoked when the specified monitor finds an error.
            </summary>
            <param name="monitorType">The name of the type of the monitor.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnPopState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine has popped its current state.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="restoredStateName">The name of the state being re-entered, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnPopStateUnhandledEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified event cannot be handled in the current state, its exit
            handler is executed and then the state is popped and any previous "current state"
            is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnPushState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine is being pushed to a state.
            </summary>
            <param name="id">The id of the actor being pushed to the state.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnRaiseEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified state machine raises an event.
            </summary>
            <param name="id">The id of the actor raising the event.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnReceiveEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event,System.Boolean)">
            <summary>
            Invoked when the specified event is received by an actor.
            </summary>
            <param name="id">The id of the actor that received the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The the event being received.</param>
            <param name="wasBlocked">The actor was waiting for one or more specific events,
            and <paramref name="e" /> was one of them.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnSendEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String,Microsoft.Coyote.Event,System.Guid,System.Boolean)">
            <summary>
            Invoked when the specified event is sent to a target actor.
            </summary>
            <param name="targetActorId">The id of the target actor.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The state name, if the sender is a state machine, else null.</param>
            <param name="e">The event being sent.</param>
            <param name="eventGroupId">The id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target actor halted.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnStateTransition(Microsoft.Coyote.Actors.ActorId,System.String,System.Boolean)">
            <summary>
            Invoked when the specified state machine enters or exits a state.
            </summary>
            <param name="id">The id of the actor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnStopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Invoked when the specified actor timer has been stopped.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnStrategyDescription(System.String,System.String)">
            <summary>
            Invoked to describe the specified scheduling strategy.
            </summary>
            <param name="strategyName">The name of the strategy that was used.</param>
            <param name="description">More information about the scheduling strategy.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type)">
            <summary>
            Invoked when the specified actor waits to receive an event of a specified type.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type[])">
            <summary>
            Invoked when the specified actor waits to receive an event of one of the specified types.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnRandom(System.Object,System.String,System.String)">
            <summary>
            Invoked when the specified controlled nondeterministic result has been obtained.
            </summary>
            <param name="result">The nondeterministic result (may be bool or int).</param>
            <param name="callerName">The name of the caller, if any.</param>
            <param name="callerType">The type of the caller, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnCompleted">
            <summary>
            Invoked when a log is complete (and is about to be closed).
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter">
            <summary>
            This class implements IActorRuntimeLog and generates log output in an XML format.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnCompleted">
            <summary>
            Invoked when a log is complete (and is about to be closed).
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnCreateStateMachine(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine has been created.
            </summary>
            <param name="id">The id of the state machine that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.IActorRuntimeLog">
            <summary>
            Interface that allows an external module to track what
            is happening in the <see cref="T:Microsoft.Coyote.Actors.IActorRuntime" />.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnCreateActor(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified actor has been created.
            </summary>
            <param name="id">The id of the actor that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnCreateStateMachine(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine has been created.
            </summary>
            <param name="id">The id of the state machine that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnExecuteAction(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String)">
            <summary>
            Invoked when the specified actor executes an action.
            </summary>
            <param name="id">The id of the actor executing the action.</param>
            <param name="handlingStateName">The state that declared this action (can be different from currentStateName in the case of pushed states.</param>
            <param name="currentStateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnSendEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String,Microsoft.Coyote.Event,System.Guid,System.Boolean)">
            <summary>
            Invoked when the specified event is sent to a target actor.
            </summary>
            <param name="targetActorId">The id of the target actor.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The state name, if the sender is a state machine, else null.</param>
            <param name="e">The event being sent.</param>
            <param name="eventGroupId">The id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target actor halted.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnRaiseEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified state machine raises an event.
            </summary>
            <param name="id">The id of the actor raising the event.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnEnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified event is about to be enqueued to an actor.
            </summary>
            <param name="id">The id of the actor that the event is being enqueued to.</param>
            <param name="e">The event being enqueued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnDequeueEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified event is dequeued by an actor.
            </summary>
            <param name="id">The id of the actor that the event is being dequeued by.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being dequeued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnReceiveEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event,System.Boolean)">
            <summary>
            Invoked when the specified event is received by an actor.
            </summary>
            <param name="id">The id of the actor that received the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The the event being received.</param>
            <param name="wasBlocked">The actor was waiting for one or more specific events,
            and <paramref name="e" /> was one of them.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type)">
            <summary>
            Invoked when the specified actor waits to receive an event of a specified type.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type[])">
            <summary>
            Invoked when the specified actor waits to receive an event of one of the specified types.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnStateTransition(Microsoft.Coyote.Actors.ActorId,System.String,System.Boolean)">
            <summary>
            Invoked when the specified state machine enters or exits a state.
            </summary>
            <param name="id">The id of the actor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnGotoState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine performs a goto transition to the specified state.
            </summary>
            <param name="id">The id of the actor.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnPushState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine is being pushed to a state.
            </summary>
            <param name="id">The id of the actor being pushed to the state.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnPopState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine has popped its current state.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="restoredStateName">The name of the state being re-entered, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnDefaultEventHandler(Microsoft.Coyote.Actors.ActorId,System.String)">
            <summary>
            Invoked when the specified actor is idle (there is nothing to dequeue) and the default
            event handler is about to be executed.
            </summary>
            <param name="id">The id of the actor that the state will execute in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnHalt(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <summary>
            Invoked when the specified actor has been halted.
            </summary>
            <param name="id">The id of the actor that has been halted.</param>
            <param name="inboxSize">Approximate size of the inbox.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnHandleRaisedEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified actor handled a raised event.
            </summary>
            <param name="id">The id of the actor handling the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnPopStateUnhandledEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified event cannot be handled in the current state, its exit
            handler is executed and then the state is popped and any previous "current state"
            is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnExceptionThrown(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Invoked when the specified actor throws an exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnExceptionHandled(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Invoked when the specified OnException method is used to handle a thrown exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnCreateTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Invoked when the specified actor timer has been created.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnStopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Invoked when the specified actor timer has been stopped.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnCreateMonitor(System.String)">
            <summary>
            Invoked when the specified monitor has been created.
            </summary>
            <param name="monitorType">The name of the type of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnMonitorExecuteAction(System.String,System.String,System.String)">
            <summary>
            Invoked when the specified monitor executes an action.
            </summary>
            <param name="monitorType">Name of type of the monitor that is executing the action.</param>
            <param name="stateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified monitor is about to process an event.
            </summary>
            <param name="monitorType">Name of type of the monitor that will process the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The name of the state the sender is in.</param>
            <param name="e">The event being processed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnMonitorRaiseEvent(System.String,System.String,Microsoft.Coyote.Event)">
            <summary>
            Invoked when the specified monitor raised an event.
            </summary>
            <param name="monitorType">Name of type of the monitor raising the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Invoked when the specified monitor enters or exits a state.
            </summary>
            <param name="monitorType">The name of the type of the monitor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState" />
            is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Invoked when the specified monitor finds an error.
            </summary>
            <param name="monitorType">The name of the type of the monitor.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnRandom(System.Object,System.String,System.String)">
            <summary>
            Invoked when the specified controlled nondeterministic result has been obtained.
            </summary>
            <param name="result">The nondeterministic result (may be bool or int).</param>
            <param name="callerName">The name of the caller, if any.</param>
            <param name="callerType">The type of the caller, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnAssertionFailure(System.String)">
            <summary>
            Invoked when the specified assertion failure has occurred.
            </summary>
            <param name="error">The text of the error.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnStrategyDescription(System.String,System.String)">
            <summary>
            Invoked to describe the specified scheduling strategy.
            </summary>
            <param name="strategyName">The name of the strategy that was used.</param>
            <param name="description">More information about the scheduling strategy.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnCompleted">
            <summary>
            Invoked when a log is complete (and is about to be closed).
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.LogWriter">
            <summary>
            Manages the installed <see cref="T:System.IO.TextWriter" /> and all registered
            <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog" /> objects.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.LogWriter.Logs">
            <summary>
            The set of registered log writers.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.LogWriter.Logger">
            <summary>
            Used to log messages.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.LogWriter.LogLevel">
            <summary>
            The log level to report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.#ctor(Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.LogWriter" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogCreateActor(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified actor has been created.
            </summary>
            <param name="id">The id of the actor that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogCreateStateMachine(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine has been created.
            </summary>
            <param name="id">The id of the state machine that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogExecuteAction(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String)">
            <summary>
            Logs that the specified actor executes an action.
            </summary>
            <param name="id">The id of the actor executing the action.</param>
            <param name="handlingStateName">The state that declared this action (can be different from currentStateName in the case of PushStates.</param>
            <param name="currentStateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogSendEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String,Microsoft.Coyote.Event,System.Guid,System.Boolean)">
            <summary>
            Logs that the specified event is sent to a target actor.
            </summary>
            <param name="targetActorId">The id of the target actor.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderState">The state name, if the sender is a state machine, else null.</param>
            <param name="e">The event being sent.</param>
            <param name="eventGroupId">The id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target actor halted.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogRaiseEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Logs that the specified actor raises an event.
            </summary>
            <param name="id">The id of the actor raising the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogEnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Event)">
            <summary>
            Logs that the specified event is about to be enqueued to an actor.
            </summary>
            <param name="id">The id of the actor that the event is being enqueued to.</param>
            <param name="e">The event being enqueued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogDequeueEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Logs that the specified event is dequeued by an actor.
            </summary>
            <param name="id">The id of the actor that the event is being dequeued by.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being dequeued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogReceiveEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event,System.Boolean)">
            <summary>
            Logs that the specified event is received by an actor.
            </summary>
            <param name="id">The id of the actor that received the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being received.</param>
            <param name="wasBlocked">The state machine was waiting for one or more specific events,
            and <paramref name="e" /> was one of them.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type)">
            <summary>
            Logs that the specified actor waits to receive an event of a specified type.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type[])">
            <summary>
            Logs that the specified actor waits to receive an event of one of the specified types.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogRandom(System.Object,System.String,System.String)">
            <summary>
            Logs that the specified random result has been obtained.
            </summary>
            <param name="result">The random result (may be bool or int).</param>
            <param name="callerName">The name of the caller, if any.</param>
            <param name="callerType">The type of the caller, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogStateTransition(Microsoft.Coyote.Actors.ActorId,System.String,System.Boolean)">
            <summary>
            Logs that the specified state machine enters or exits a state.
            </summary>
            <param name="id">The id of the actor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogGotoState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine performs a goto state transition.
            </summary>
            <param name="id">The id of the actor.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogPushState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine performs a push state transition.
            </summary>
            <param name="id">The id of the actor being pushed to the state.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogPopState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine performs a pop state transition.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="currStateName">The name of the current state.</param>
            <param name="restoredStateName">The name of the state being re-entered, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogHalt(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <summary>
            Logs that the specified actor has halted.
            </summary>
            <param name="id">The id of the actor that has been halted.</param>
            <param name="inboxSize">Approximate size of the inbox.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogDefaultEventHandler(Microsoft.Coyote.Actors.ActorId,System.String)">
            <summary>
            Logs that the specified actor is idle (there is nothing to dequeue) and the default
            event handler is about to be executed.
            </summary>
            <param name="id">The id of the actor that the state will execute in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogHandleRaisedEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Logs that the specified state machine handled a raised event.
            </summary>
            <param name="id">The id of the actor handling the event.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="e">The event being handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogPopStateUnhandledEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Event)">
            <summary>
            Logs that the specified event cannot be handled in the current state, its exit
            handler is executed and then the state is popped and any previous "current state"
            is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogExceptionThrown(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Logs that the specified actor throws an exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogExceptionHandled(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Logs that the specified OnException method is used to handle a thrown exception.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogCreateTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Logs that the specified actor timer has been created.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogStopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Logs that the specified actor timer has been stopped.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogCreateMonitor(System.String)">
            <summary>
            Logs that the specified monitor has been created.
            </summary>
            <param name="monitorType">The name of the type of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogMonitorExecuteAction(System.String,System.String,System.String)">
            <summary>
            Logs that the specified monitor executes an action.
            </summary>
            <param name="monitorType">Name of type of the monitor that is executing the action.</param>
            <param name="stateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,Microsoft.Coyote.Event)">
            <summary>
            Logs that the specified monitor is about to process an event.
            </summary>
            <param name="monitorType">Name of type of the monitor that will process the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The name of the state the sender is in.</param>
            <param name="e">The event being processed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogMonitorRaiseEvent(System.String,System.String,Microsoft.Coyote.Event)">
            <summary>
            Logs that the specified monitor raised an event.
            </summary>
            <param name="monitorType">Name of type of the monitor raising the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Logs that the specified monitor enters or exits a state.
            </summary>
            <param name="monitorType">The name of the type of the monitor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState" />
            is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Logs that the specified monitor has found an error.
            </summary>
            <param name="monitorType">The name of the type of the monitor.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogAssertionFailure(System.String)">
            <summary>
            Logs that the specified assertion failure has occurred.
            </summary>
            <param name="error">The text of the error.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogStrategyDescription(System.String,System.String)">
            <summary>
            Logs the specified scheduling strategy description.
            </summary>
            <param name="strategyName">The name of the strategy that was used.</param>
            <param name="description">More information about the scheduling strategy.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.LogCompletion">
            <summary>
            Use this method to notify all logs that the test iteration is complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.GetLogsOfType``1">
            <summary>
            Returns all registered logs of type <typeparamref name="TActorRuntimeLog" />,
            if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.SetLogger(Microsoft.Coyote.IO.ILogger)">
            <summary>
            Use this method to override the default <see cref="T:Microsoft.Coyote.IO.ILogger" /> for logging messages.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.RegisterLog(Microsoft.Coyote.Actors.IActorRuntimeLog)">
            <summary>
            Use this method to register an <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.LogWriter.RemoveLog(Microsoft.Coyote.Actors.IActorRuntimeLog)">
            <summary>
            Use this method to unregister a previously registered <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog" />.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.NameResolver">
            <summary>
            Utility class for resolving names.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.NameResolver.StateNamesCache">
            <summary>
            Cache of state names.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.NameResolver.GetQualifiedStateName(System.Type)">
            <summary>
            Returns the qualified (i.e. <see cref="T:Microsoft.Coyote.Actors.StateMachine.StateGroup" />) name of the specified
            state machine or monitor state, or the empty string if there is no such name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.NameResolver.GetStateNameForLogging(System.Type)">
            <summary>
            Returns the state name to be used for logging purposes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.RuntimeFactory">
            <summary>
            Provides methods for creating a <see cref="T:Microsoft.Coyote.Actors.IActorRuntime" /> runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.RuntimeFactory.Create">
            <summary>
            Creates a new actor runtime.
            </summary>
            <returns>The created actor runtime.</returns>
            <remarks>
            Only one runtime can be created per async local context. This is not a thread-safe operation.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.RuntimeFactory.Create(Microsoft.Coyote.Configuration)">
            <summary>
            Creates a new actor runtime with the specified <see cref="T:Microsoft.Coyote.Configuration" />.
            </summary>
            <param name="configuration">The runtime configuration to use.</param>
            <returns>The created actor runtime.</returns>
            <remarks>
            Only one runtime can be created per async local context. This is not a thread-safe operation.
            </remarks>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SendOptions">
            <summary>
            Represents a send event configuration that is used during testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SendOptions.Default">
            <summary>
            The default send options.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SendOptions.MustHandle">
            <summary>
            True if this event must always be handled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SendOptions.Assert">
            <summary>
            Asserts that there must not be more than N instances of the
            event in the inbox queue of the receiver.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SendOptions.HashedState">
            <summary>
            User-defined hash of the event. The default value is 0. Override to
            improve the accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SendOptions.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SendOptions" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SendOptions.ToString">
            <summary>
            A string that represents the current options.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent">
            <summary>
            Event used to communicate with a shared counter actor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.Operation">
            <summary>
            The operation stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.Value">
            <summary>
            The shared counter value stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.Comparand">
            <summary>
            Comparand value stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.Sender">
            <summary>
            The sender actor stored in this event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.#ctor(Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType,System.Int32,System.Int32,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.IncrementEvent">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.Increment" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.DecrementEvent">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.Decrement" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.SetEvent(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.Set" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.GetEvent(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.Get" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.AddEvent(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.Add" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.CompareExchangeEvent(Microsoft.Coyote.Actors.ActorId,System.Int32,System.Int32)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.CompareExchange" /> operation.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType">
            <summary>
            Supported shared counter operations.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterResponseEvent">
            <summary>
            Event containing the value of a shared counter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterResponseEvent.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterResponseEvent.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterResponseEvent" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent">
            <summary>
            Event used to communicate with a shared counter actor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.Operation">
            <summary>
            The operation stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.Key">
            <summary>
            The shared dictionary key stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.Value">
            <summary>
            The shared dictionary value stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.ComparisonValue">
            <summary>
            The shared dictionary comparison value stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.Sender">
            <summary>
            The sender actor stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.Comparer">
            <summary>
            The comparer stored in this event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.#ctor(Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType,System.Object,System.Object,System.Object,Microsoft.Coyote.Actors.ActorId,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.InitializeEvent(System.Object)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.Initialize" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.TryAddEvent(System.Object,System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.TryAdd" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.TryUpdateEvent(System.Object,System.Object,System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.TryUpdate" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.GetEvent(System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.Get" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.TryGetEvent(System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.TryGet" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.SetEvent(System.Object,System.Object)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.Set" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.CountEvent(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.Count" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.TryRemoveEvent(System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.TryRemove" /> operation.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType">
            <summary>
            Supported shared dictionary operations.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryResponseEvent`1">
            <summary>
            Event containing the value of a shared dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryResponseEvent`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryResponseEvent`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryResponseEvent`1" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent">
            <summary>
            Event used to communicate with a shared register actor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.Operation">
            <summary>
            The operation stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.Value">
            <summary>
            The shared register value stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.Func">
            <summary>
            The shared register func stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.Sender">
            <summary>
            The sender actor stored in this event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.#ctor(Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.OperationType,System.Object,System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.UpdateEvent(System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.OperationType.Update" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.SetEvent(System.Object)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.OperationType.Set" /> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.GetEvent(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.OperationType.Get" /> operation.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.OperationType">
            <summary>
            Supported shared register operations.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterResponseEvent`1">
            <summary>
            Event containing the value of a shared register.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterResponseEvent`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterResponseEvent`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterResponseEvent`1" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounter">
            <summary>
            A thread-safe counter that can be shared in-memory by actors.
            </summary>
            <remarks>
            See also <see href="/coyote/learn/programming-models/actors/sharing-objects">Sharing Objects</see>.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Counter">
            <summary>
            The value of the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounter" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Create(Microsoft.Coyote.Actors.IActorRuntime,System.Int32)">
            <summary>
            Creates a new shared counter.
            </summary>
            <param name="runtime">The actor runtime.</param>
            <param name="value">The initial value.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Increment">
            <summary>
            Increments the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Decrement">
            <summary>
            Decrements the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.GetValue">
            <summary>
            Gets the current value of the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Add(System.Int32)">
            <summary>
            Adds a value to the counter atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Exchange(System.Int32)">
            <summary>
            Sets the counter to a value atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.CompareExchange(System.Int32,System.Int32)">
            <summary>
            Sets the counter to a value atomically if it is equal to a given value.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock">
            <summary>
            Mock implementation of <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounter" /> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.CounterActor">
            <summary>
            Actor modeling the shared counter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.Context">
            <summary>
            The execution context associated with this shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.#ctor(System.Int32,Microsoft.Coyote.Actors.ActorExecutionContext.Mock)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.Increment">
            <summary>
            Increments the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.Decrement">
            <summary>
            Decrements the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.GetValue">
            <summary>
            Gets the current value of the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.Add(System.Int32)">
            <summary>
            Adds a value to the counter atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.Exchange(System.Int32)">
            <summary>
            Sets the counter to a value atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.CompareExchange(System.Int32,System.Int32)">
            <summary>
            Sets the counter to a value atomically if it is equal to a given value.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterActor">
            <summary>
            A shared counter modeled using an actor for testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterActor.Counter">
            <summary>
            The value of the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterActor.OnInitializeAsync(Microsoft.Coyote.Event)">
            <summary>
            Initializes the actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterActor.ProcessEvent(Microsoft.Coyote.Event)">
            <summary>
            Processes the next dequeued event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary">
            <summary>
            A thread-safe dictionary that can be shared in-memory by actors.
            </summary>
            <remarks>
            See also <see href="/coyote/learn/programming-models/actors/sharing-objects">Sharing Objects</see>.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Create``2(Microsoft.Coyote.Actors.IActorRuntime)">
            <summary>
            Creates a new shared dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="runtime">The actor runtime.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},Microsoft.Coyote.Actors.IActorRuntime)">
            <summary>
            Creates a new shared dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="comparer">The key comparer.</param>
            <param name="runtime">The actor runtime.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2">
            <summary>
            Mock implementation of <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2" /> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.DictionaryActor">
            <summary>
            Actor modeling the shared dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.Context">
            <summary>
            The execution context associated with this shared dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.#ctor(Microsoft.Coyote.Actors.ActorExecutionContext.Mock,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.TryAdd(`0,`1)">
            <summary>
            Adds a new key to the dictionary, if it doesn't already exist in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates the value for an existing key in the dictionary, if that key has a specific value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.TryRemove(`0,`1@)">
            <summary>
            Removes the specified key from the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.Count">
            <summary>
            Gets the number of elements in the dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2">
            <summary>
            A thread-safe dictionary that can be shared in-memory by actors.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.Dictionary">
            <summary>
            The dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.TryAdd(`0,`1)">
            <summary>
            Adds a new key to the dictionary, if it doesn't already exist in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates the value for an existing key in the dictionary, if that key has a specific value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Removes the specified key from the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.Count">
            <summary>
            Gets the number of elements in the dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryActor`2">
            <summary>
            A shared dictionary modeled using an actor for testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryActor`2.Dictionary">
            <summary>
            The internal shared dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryActor`2.OnInitializeAsync(Microsoft.Coyote.Event)">
            <summary>
            Initializes the actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryActor`2.ProcessEvent(Microsoft.Coyote.Event)">
            <summary>
            Processes the next dequeued event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister">
            <summary>
            A thread-safe register that can be shared in-memory by actors.
            </summary>
            <remarks>
            See also <see href="/coyote/learn/programming-models/actors/sharing-objects">Sharing Objects</see>.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Create``1(Microsoft.Coyote.Actors.IActorRuntime,``0)">
            <summary>
            Creates a new shared register.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="runtime">The actor runtime.</param>
            <param name="value">The initial value.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1">
            <summary>
            Mock implementation of <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1" /> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.RegisterActor">
            <summary>
            Actor modeling the shared register.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.Context">
            <summary>
            The execution context associated with this shared register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.#ctor(Microsoft.Coyote.Actors.ActorExecutionContext.Mock,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.Update(System.Func{`0,`0})">
            <summary>
            Reads and updates the register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.GetValue">
            <summary>
            Gets current value of the register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.SetValue(`0)">
            <summary>
            Sets current value of the register.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1">
            <summary>
            A thread-safe register that can be shared in-memory by actors.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.Value">
            <summary>
            Current value of the register.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.SynchronizationObject">
            <summary>
            Object used for synchronizing accesses to the register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.Update(System.Func{`0,`0})">
            <summary>
            Reads and updates the register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.GetValue">
            <summary>
            Gets current value of the register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.SetValue(`0)">
            <summary>
            Sets current value of the register.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterActor`1">
            <summary>
            A shared register modeled using an actor for testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterActor`1.Value">
            <summary>
            The value of the shared register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterActor`1.OnInitializeAsync(Microsoft.Coyote.Event)">
            <summary>
            Initializes the actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterActor`1.ProcessEvent(Microsoft.Coyote.Event)">
            <summary>
            Processes the next dequeued event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine">
            <summary>
            Type that implements a state machine actor. Inherit from this class to declare
            a custom actor with states, state transitions and event handlers.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/state-machines">State machines</see>
            for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.ActionCache">
            <summary>
            Cache of state machine types to a map of action names to action declarations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.ActionCacheLocks">
            <summary>
            A set of lockable objects used to protect static initialization of the ActionCache while
            also enabling multithreaded initialization of different StateMachine types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.StateTypeCache">
            <summary>
            Cache of state machine types to a set of all possible states types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.StateInstanceCache">
            <summary>
            Cache of state machine types to a set of all available state instances.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.StateStack">
            <summary>
            A stack of states. The state on the top of the stack represents the current state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.InheritableEventHandlerMap">
            <summary>
            A map from event type to a Stack of HandlerInfo where the stack contains the inheritable
            event handlers defined by each state that has been pushed onto the StateStack (if any).
            The HandlerInfo also remembers which state the handler was defined on so that when the
            handler is invoked the IActorRuntimeLog can be given that information.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.EventHandlerMap">
            <summary>
            A map from event type to EventHandlerDeclaration for those EventHandlerDeclarations that
            are not inheritable on the state stack.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.EmptyEventHandlerMap">
            <summary>
            This is just so we don't have to allocate an empty map more than once.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.StateMachineActionMap">
            <summary>
            Map from action names to cached action delegates for all states in this state machine.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.PendingTransition">
            <summary>
            Newly created Transition that hasn't been returned from InvokeActionAsync yet.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.StateMachine.CurrentState">
            <summary>
            Gets the <see cref="T:System.Type" /> of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.InitializeAsync(Microsoft.Coyote.Event)">
            <summary>
            Initializes the actor with the specified optional event.
            </summary>
            <param name="initialEvent">Optional event used for initialization.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Event)">
            <summary>
            Raises the specified <see cref="T:Microsoft.Coyote.Event" /> at the end of the current action.
            </summary>
            <remarks>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Event)" />, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1" />,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1" /> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent" /> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent" />.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="e">The event to raise.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1">
            <summary>
            Raise a special event that performs a goto state operation at the end of the current action.
            </summary>
            <remarks>
            Goto state pops the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" /> and pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" /> on the active state stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventGotoState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Event)" />, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1" />,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1" /> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent" /> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent" />.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <typeparam name="TState">Type of the state.</typeparam>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent(System.Type)">
            <summary>
            Raise a special event that performs a goto state operation at the end of the current action.
            </summary>
            <remarks>
            Goto state pops the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" /> and pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" /> on the active state stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventGotoState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Event)" />, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1" />,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1" /> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent" /> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent" />.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="state">Type of the state.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1">
            <summary>
            Raise a special event that performs a push state operation at the end of the current action.
            </summary>
            <remarks>
            Pushing a state does not pop the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" />, instead it pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" /> on the active state stack
            so that you can have multiple active states.  In this case events can be handled by all active states on the stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventPushState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Event)" />, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1" />,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1" /> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent" /> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent" />.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <typeparam name="TState">Type of the state.</typeparam>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent(System.Type)">
            <summary>
            Raise a special event that performs a push state operation at the end of the current action.
            </summary>
            <remarks>
            Pushing a state does not pop the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" />, instead it pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" /> on the active state stack
            so that you can have multiple active states.  In this case events can be handled by all active states on the stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventPushState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Event)" />, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1" />,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1" /> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent" /> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent" />.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="state">Type of the state.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent">
            <summary>
             Raise a special event that performs a pop state operation at the end of the current action.
             </summary>
            <remarks>
             Popping a state pops the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" /> that was pushed using <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent(System.Type)" /> or an OnEventPushStateAttribute.
             An assert is raised if there are no states left to pop.
             This event is not handled until the action that calls this method returns control back
             to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            
             Only one of the following can be called per action:
             <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Event)" />, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1" />,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1" /> or
             <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent" /> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent" />.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent">
            <summary>
             Raises a <see cref="T:Microsoft.Coyote.Actors.HaltEvent" /> to halt the actor at the end of the current action.
             </summary>
            <remarks>
             This event is not handled until the action that calls this method returns control back
             to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            
             Only one of the following can be called per action:
             <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Event)" />, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1" />,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1" /> or
             <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent" /> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent" />.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.OnStateChanged">
            <summary>
            Notification that the current state has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.OnEventHandledAsync(Microsoft.Coyote.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor finishes handling a dequeued
            event, unless the handler of the dequeued event raised an event or caused the actor
            to halt (either normally or due to an exception). Unless this callback raises an
            event, the actor will either become idle or dequeue the next event from its inbox.
            </summary>
            <param name="e">The event that was handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.HandleEventAsync(Microsoft.Coyote.Event)">
            <summary>
            Handles the specified <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ExecuteCurrentStateOnEntryAsync(Microsoft.Coyote.Event)">
            <summary>
            Executes the on entry action of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ExecuteCurrentStateOnExitAsync(System.String,Microsoft.Coyote.Event)">
            <summary>
            Executes the on exit action of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ApplyEventHandlerTransitionAsync(Microsoft.Coyote.Actors.StateMachine.Transition,Microsoft.Coyote.Event)">
            <summary>
            Applies the specified event handler transition.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.CheckDanglingTransition">
            <summary>
            Notifies that a Transition was created but not returned to the StateMachine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.GotoStateAsync(System.Type,System.String,Microsoft.Coyote.Event)">
            <summary>
            Performs a goto transition to the specified state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.PushStateAsync(System.Type,Microsoft.Coyote.Event)">
            <summary>
            Performs a push transition to the specified state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.DoStatePush(Microsoft.Coyote.Actors.StateMachine.State)">
            <summary>
            Configures the state transitions of the state machine when a state is pushed into the stack.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.DoStatePop">
            <summary>
            Configures the state transitions of the state machine
            when a state is popped.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.GetInheritedEventHandler(Microsoft.Coyote.Event,Microsoft.Coyote.Actors.StateMachine.HandlerInfo@)">
            <summary>
            Get the appropriate inherited event handler for the given event.
            </summary>
            <param name="e">The event we want to handle.</param>
            <param name="info">The HandlerInfo in the state stack.</param>
            <returns>True if a handler is found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.IsEventIgnored(Microsoft.Coyote.Event)">
            <summary>
            Checks if the specified event is ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.IsEventDeferred(Microsoft.Coyote.Event)">
            <summary>
            Checks if the specified event is deferred.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.IsDefaultHandlerInstalled">
            <summary>
            Checks if there is a default handler installed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.GetHashedState">
            <summary>
            Returns the hashed state of this state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.SetupEventHandlers">
            <summary>
            Extracts user declarations and setups the event handlers and state transitions.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.GetStateTypeAtStackIndex(System.Int32)">
            <summary>
            Returns the type of the state at the specified state
            stack index, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ExtractStateTypes(System.Type)">
            <summary>
            Processes a type, looking for states.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ReportActivityCoverage(Microsoft.Coyote.Actors.Coverage.CoverageInfo)">
            <summary>
            Reports the activity coverage of this actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.AssertStateValidity">
            <summary>
            Checks the state machine for state related errors.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.FormatFairRandom(System.String,System.String,System.Int32)">
            <summary>
            Returns the formatted strint to be used with a fair nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:Microsoft.Coyote.AssertionFailureException" />
            exception, and throws it to the user.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.Transition">
            <summary>
            Defines the <see cref="T:Microsoft.Coyote.Actors.StateMachine" /> transition that is the
            result of executing an event handler.  Transitions are created by using
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1" />, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Event)" />, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1" /> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent" /> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent" />.
            The Transition is processed by the Coyote runtime when
            an event handling method of a StateMachine returns a Transition object.
            This means such a method can only do one such Transition per method call.
            If the method wants to do a conditional transition it can return
            Transition.None to indicate no transition is to be performed.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/state-machines">State machines</see> for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.TypeValue">
            <summary>
            The type of the transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.State">
            <summary>
            The target state of the transition, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Event">
            <summary>
            The event participating in the transition, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.None">
            <summary>
            This special transition represents a transition that does not change the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.Transition.#ctor(Microsoft.Coyote.Actors.StateMachine.Transition.Type,System.Type,Microsoft.Coyote.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.Transition" /> struct.
            </summary>
            <param name="type">The type of the transition.</param>
            <param name="state">The target state of the transition, if there is one.</param>
            <param name="e">The event participating in the transition, if there is one.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.Transition.Type">
            <summary>
            Defines the type of a <see cref="T:Microsoft.Coyote.Actors.StateMachine" /> transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.None">
            <summary>
            A transition that does not change the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" />.
            This is the value used by <see cref="F:Microsoft.Coyote.Actors.StateMachine.Transition.None" />.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.RaiseEvent">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Event)" /> that raises an <see cref="F:Microsoft.Coyote.Actors.StateMachine.Transition.Event" /> bypassing
            the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" /> inbox.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.GotoState">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1" /> that pops the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" />
            and pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" /> on the
            stack of <see cref="T:Microsoft.Coyote.Actors.StateMachine" /> states.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.PushState">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1" /> that pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" />
            on the stack of <see cref="T:Microsoft.Coyote.Actors.StateMachine" /> states.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.PopState">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent" /> that pops the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" />
            from the stack of <see cref="T:Microsoft.Coyote.Actors.StateMachine" /> states.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.Halt">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent" /> that halts the <see cref="T:Microsoft.Coyote.Actors.StateMachine" />.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.HandlerInfo">
            <summary>
            A struct used to track event handlers that are pushed or popped on the StateStack.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.HandlerInfo.State">
            <summary>
            The state that provided this EventHandler.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.HandlerInfo.StackDepth">
            <summary>
            Records where this State is in the StateStack.  This information is needed to implement WildCardEvent
            semantics.  A specific Handler closest to the top of the stack (higher StackDepth) wins over a
            WildCardEvent further down the stack (lower StackDepth).
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.HandlerInfo.Handler">
            <summary>
            The event handler for a given event Type defined by the State.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State">
            <summary>
            Abstract class representing a state.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/state-machines">State machines</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.StateMachine.State.EntryAction">
            <summary>
            The entry action of the state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.StateMachine.State.ExitAction">
            <summary>
            The exit action of the state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.InheritableEventHandlers">
            <summary>
            Map containing all event handler declarations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.EventHandlers">
            <summary>
            Map containing all non-inheritable event handler declarations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.StateMachine.State.IsStart">
            <summary>
            True if this is the start state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InitializeState">
            <summary>
            Initializes the state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InstallGotoTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares goto event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InheritGotoTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits goto event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InstallPushTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares push event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InheritPushTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits push event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InstallActionBindings(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Installs action bindings, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InheritActionBindings(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits action bindings from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InstallIgnoreHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares ignore event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InheritIgnoreHandlers(System.Type,System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits ignore event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InstallDeferHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares defer event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InheritDeferHandlers(System.Type,System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits defer event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.CheckEventHandlerAlreadyDeclared(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already declared.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.CheckEventHandlerAlreadyInherited(System.Type,System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already inherited.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.StartAttribute">
            <summary>
            Attribute for declaring the state that a state machine transitions upon creation.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.OnEntryAttribute">
            <summary>
            Attribute for declaring what action to perform when entering a state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEntryAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnEntryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnEntryAttribute" /> class.
            </summary>
            <param name="actionName">The name of the action to execute.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.OnExitAttribute">
            <summary>
            Attribute for declaring what action to perform when exiting a state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnExitAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnExitAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnExitAttribute" /> class.
            </summary>
            <param name="actionName">The name of the action to execute.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute">
            <summary>
            Attribute for declaring a goto state transition when the state machine
            is in the specified state and dequeues an event of the specified type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute.State">
            <summary>
            The type of the state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute" /> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="stateType">The type of the state.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute" /> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="stateType">The type of the state.</param>
            <param name="actionName">Name of action to perform on exit.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventPushStateAttribute">
            <summary>
            Attribute for declaring a push state transition when the state machine
            is in the specified state and dequeues an event of the specified type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventPushStateAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventPushStateAttribute.State">
            <summary>
            The type of the state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnEventPushStateAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventPushStateAttribute" /> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="stateType">The type of the state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventDoActionAttribute">
            <summary>
            Attribute for declaring which action should be invoked when the state machine
            is in the specified state to handle a dequeued event of the specified type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventDoActionAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventDoActionAttribute.Action">
            <summary>
            The name of the action to invoke.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnEventDoActionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventDoActionAttribute" /> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="actionName">The name of the action to invoke.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.DeferEventsAttribute">
            <summary>
            Attribute for declaring what events should be deferred in a state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.DeferEventsAttribute.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.DeferEventsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.DeferEventsAttribute" /> class.
            </summary>
            <param name="eventTypes">Event types.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.IgnoreEventsAttribute">
            <summary>
            Attribute for declaring what events should be ignored in a state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.IgnoreEventsAttribute.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.IgnoreEventsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.IgnoreEventsAttribute" /> class.
            </summary>
            <param name="eventTypes">Event types.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.StateGroup">
            <summary>
            Abstract class used for representing a group of related states.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.GotoStateTransition">
            <summary>
            Defines a goto state transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.GotoStateTransition.TargetState">
            <summary>
            The target state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.GotoStateTransition.Lambda">
            <summary>
            An optional lambda function that executes after the
            on-exit handler of the exiting state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.GotoStateTransition.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.GotoStateTransition" /> class.
            </summary>
            <param name="targetState">The target state.</param>
            <param name="lambda">Lambda function that executes after the on-exit handler of the exiting state.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.GotoStateTransition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.GotoStateTransition" /> class.
            </summary>
            <param name="targetState">The target state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.PushStateTransition">
            <summary>
            Defines a push state transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.PushStateTransition.TargetState">
            <summary>
            The target state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.PushStateTransition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.PushStateTransition" /> class.
            </summary>
            <param name="targetState">The target state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.ActorTimer">
            <summary>
            A timer that can send timeout events to its owner actor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Timers.ActorTimer.Info">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.ActorTimer.Owner">
            <summary>
            The actor that owns this timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.ActorTimer.InternalTimer">
            <summary>
            The internal timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.ActorTimer.TimeoutEvent">
            <summary>
            The timeout event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.ActorTimer.IsDisposed">
            <summary>
            Whether this timer is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.#ctor(Microsoft.Coyote.Actors.Timers.TimerInfo,Microsoft.Coyote.Actors.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Timers.ActorTimer" /> class.
            </summary>
            <param name="info">Stores information about this timer.</param>
            <param name="owner">The actor that owns this timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.HandleTimeout(System.Object)">
            <summary>
            Handles the timeout.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.Equals(Microsoft.Coyote.Actors.Timers.ActorTimer)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.ActorId" /> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.ActorId" />.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.Dispose">
            <summary>
            Disposes the resources held by this timer.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.IActorTimer">
            <summary>
            Interface of a timer that can send timeout events to its owner actor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Timers.IActorTimer.Info">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer">
            <summary>
            A mock timer that replaces <see cref="T:Microsoft.Coyote.Actors.Timers.ActorTimer" /> during testing.
            It is implemented as a state machine.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.TimerInfo">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Microsoft#Coyote#Actors#Timers#IActorTimer#Info">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Owner">
            <summary>
            The actor that owns this timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.TimeoutEvent">
            <summary>
            The timeout event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Delay">
            <summary>
            Adjusts the probability of firing a timeout event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Setup(Microsoft.Coyote.Event)">
            <summary>
            Initializes the timer with the specified configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.HandleTimeout">
            <summary>
            Handles the timeout.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Equals(Microsoft.Coyote.Actors.Timers.ActorTimer)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.ActorId" /> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.ActorId" />.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>True if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Dispose">
            <summary>
            Disposes the resources held by this timer.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent">
            <summary>
            Defines a timer elapsed event that is sent from a timer to the actor that owns the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent.Info">
            <summary>
            Stores information about the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent.Owner">
            <summary>
            The actor that owns the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent.Delay">
            <summary>
            Adjusts the probability of firing a timeout event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent.#ctor(Microsoft.Coyote.Actors.Timers.TimerInfo,Microsoft.Coyote.Actors.Actor,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent" /> class.
            </summary>
            <param name="info">Stores information about the timer.</param>
            <param name="owner">The actor that owns the timer.</param>
            <param name="delay">Adjusts the probability of firing a timeout event.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent">
            <summary>
            Defines a timer elapsed event that is sent from a timer to the actor that owns the timer.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/timers">Using timers in actors</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent.Info">
            <summary>
            Stores information about the timer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent.#ctor(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent" /> class.
            </summary>
            <param name="info">Stores information about the timer.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.TimerInfo">
            <summary>
            Stores information about a timer that can send timeout events to its owner actor.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/timers">Using timers in actors</see> for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.TimerInfo.Id">
            <summary>
            The unique id of the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.TimerInfo.OwnerId">
            <summary>
            The id of the actor that owns the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.TimerInfo.DueTime">
            <summary>
            The amount of time to wait before sending the first timeout event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.TimerInfo.Period">
            <summary>
            The time interval between timeout events.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.TimerInfo.CustomEvent">
            <summary>
            The optional custom event to raise instead of the default TimerElapsedEvent.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.#ctor(Microsoft.Coyote.Actors.ActorId,System.TimeSpan,System.TimeSpan,Microsoft.Coyote.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Timers.TimerInfo" /> class.
            </summary>
            <param name="ownerId">The id of the actor that owns this timer.</param>
            <param name="dueTime">The amount of time to wait before sending the first timeout event.</param>
            <param name="period">The time interval between timeout events.</param>
            <param name="customEvent">Optional custom event to raise instead of a default TimerElapsedEvent.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.Equals(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.Timers.TimerInfo" /> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.Timers.TimerInfo" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.System#IEquatable{Microsoft#Coyote#Actors#Timers#TimerInfo}#Equals(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.Timers.TimerInfo" /> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.Timers.TimerInfo" />.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Event">
            <summary>
            Abstract class representing an event.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/actors/overview">Programming model: asynchronous actors</see> for more information.
            </remarks>
        </member>
        <member name="T:Microsoft.Coyote.Configuration">
            <summary>
            The Coyote project configurations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.ToolCommand">
            <summary>
            The user-specified command to perform by the Coyote tool.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.AdditionalPaths">
            <summary>
            Something to add to the PATH environment at test time.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.OutputFilePath">
            <summary>
            The output path.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.AssemblyToBeAnalyzed">
            <summary>
            The assembly to be analyzed for bugs.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.RewritingOptionsPath">
            <summary>
            The path to the binary rewriting configuration file or a folder containing assemblies to rewrite.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.TestMethodName">
            <summary>
            Test method to be used.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.SchedulingStrategy">
            <summary>
            The systematic testing strategy to use.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.TestingIterations">
            <summary>
            Number of testing iterations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.TestingTimeout">
            <summary>
            Timeout in seconds after which no more testing iterations will run.
            </summary>
            <remarks>
            Setting this value overrides the <see cref="P:Microsoft.Coyote.Configuration.TestingIterations" /> value.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.RandomGeneratorSeed">
            <summary>
            Custom seed to be used by the random value generator. By default,
            this value is null indicating that no seed has been set.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IncrementalSchedulingSeed">
            <summary>
            If true, the seed will increment in each
            testing iteration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.PerformFullExploration">
            <summary>
            If true, the Coyote tester performs a full exploration,
            and does not stop when it finds a bug.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.MaxUnfairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore for unfair schedulers.
            By default this is set to 10,000 steps.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.MaxFairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore for fair schedulers.
            By default this is set to 100,000 steps.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.UserExplicitlySetMaxFairSchedulingSteps">
            <summary>
            True if the user has explicitly set the fair scheduling steps.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.ConsiderDepthBoundHitAsBug">
            <summary>
            If true, then the Coyote tester will consider an execution
            that hits the depth bound as buggy.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.StrategyBound">
            <summary>
            A strategy-specific bound.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.TimeoutDelay">
            <summary>
            Value that controls the probability of triggering a timeout each time <see cref="M:System.Threading.Tasks.Task.Delay(System.Int32)" />
            or a built-in timer is scheduled during systematic testing. Decrease the value to increase the
            frequency of timeouts (e.g. a value of 1 corresponds to a 50% probability), or increase the value
            to decrease the frequency (e.g. a value of 10 corresponds to a 10% probability). By default this
            value is 10.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.SafetyPrefixBound">
            <summary>
            Safety prefix bound. By default it is 0.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsPartiallyControlledTestingEnabled">
            <summary>
            If this option is enabled, systematic testing supports partially controlled executions.
            </summary>
            <remarks>
            This is an experimental feature.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsLivenessCheckingEnabled">
            <summary>
            If this option is enabled, liveness checking is enabled during systematic testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.LivenessTemperatureThreshold">
            <summary>
            The liveness temperature threshold. If it is 0 then it is disabled. By default
            this value is assigned to <see cref="P:Microsoft.Coyote.Configuration.MaxFairSchedulingSteps" /> / 2.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.UserExplicitlySetLivenessTemperatureThreshold">
            <summary>
            True if the user has explicitly set the liveness temperature threshold.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsProgramStateHashingEnabled">
            <summary>
            If this option is enabled, the tester is hashing the program state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsMonitoringEnabledInInProduction">
            <summary>
            If this option is enabled, (safety) monitors are used in the production runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.AttachDebugger">
            <summary>
            Attaches the debugger during trace replay.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.ScheduleFile">
            <summary>
            The schedule file to be replayed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.ScheduleTrace">
            <summary>
            The schedule trace to be replayed.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.IsVerbose">
            <summary>
            If true, then messages are logged.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsDebugVerbosityEnabled">
            <summary>
            If true, then debug verbosity is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.LogLevel">
            <summary>
            The level of detail to provide in verbose logging.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.ReportCodeCoverage">
            <summary>
            Enables code coverage reporting of a Coyote program.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.ReportActivityCoverage">
            <summary>
            Enables activity coverage reporting of a Coyote program.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.DebugActivityCoverage">
            <summary>
            Enables activity coverage debugging.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsDgmlBugGraph">
            <summary>
            Is DGML graph showing all test iterations or just one "bug" iteration.
            False means all, and True means only the iteration containing a bug.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.IsDgmlGraphEnabled">
            <summary>
            If specified, requests a DGML graph of the iteration that contains a bug, if a bug is found.
            This is different from a coverage activity graph, as it will also show actor instances.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.IsXmlLogEnabled">
            <summary>
            Produce an XML formatted runtime log file.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.CustomActorRuntimeLogType">
            <summary>
            If specified, requests a custom runtime log to be used instead of the default.
            This is the AssemblyQualifiedName of the type to load.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.ParallelBugFindingTasks">
            <summary>
            Number of parallel systematic testing tasks.
            By default it is 1 task.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.ParallelDebug">
            <summary>
            Put a debug prompt at the beginning of each child TestProcess.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.TestingSchedulerIpAddress">
            <summary>
            Specify ip address if you want to use something other than localhost.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.WaitForTestingProcesses">
            <summary>
            Do not automatically launch the TestingProcesses in parallel mode, instead wait for them
            to be launched independently.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.RunAsParallelBugFindingTask">
            <summary>
            Runs this process as a parallel systematic testing task.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.TestingSchedulerEndPoint">
            <summary>
            The testing scheduler unique endpoint.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.TestingProcessId">
            <summary>
            The unique testing process id.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.AdditionalCodeCoverageAssemblies">
            <summary>
            Additional assembly specifications to instrument for code coverage, besides those in the
            dependency graph between <see cref="F:Microsoft.Coyote.Configuration.AssemblyToBeAnalyzed" /> and the Microsoft.Coyote DLLs.
            Key is filename, value is whether it is a list file (true) or a single file (false).
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.EnableColoredConsoleOutput">
            <summary>
            Enables colored console output.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.DisableEnvironmentExit">
            <summary>
            If true, then environment exit will be disabled.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.EnableTelemetry">
            <summary>
            Enable Coyote sending Telemetry to Azure which is used to help improve the tool (default true).
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.PlatformVersion">
            <summary>
            The .NET platform version being used.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.TelemetryServerPath">
            <summary>
            Optional location of app that can run as a telemetry server.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Configuration" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.Create">
            <summary>
            Creates a new configuration with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithRandomStrategy">
            <summary>
            Updates the configuration to use the random scheduling strategy during systematic testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithProbabilisticStrategy(System.UInt32)">
            <summary>
            Updates the configuration to use the probabilistic scheduling strategy during systematic testing.
            You can specify a value controlling the probability of each scheduling decision. This value is
            specified as the integer N in the equation 0.5 to the power of N. So for N=1, the probability is
            0.5, for N=2 the probability is 0.25, N=3 you get 0.125, etc. By default, this value is 3.
            </summary>
            <param name="probabilityLevel">The probability level.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithPCTStrategy(System.Boolean,System.UInt32)">
            <summary>
            Updates the configuration to use the PCT scheduling strategy during systematic testing.
            You can specify the number of priority switch points, which by default are 10.
            </summary>
            <param name="isFair">If true, use the fair version of PCT.</param>
            <param name="numPrioritySwitchPoints">The nunmber of priority switch points.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithDFSStrategy">
            <summary>
            Updates the configuration to use the dfs scheduling strategy during systematic testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithReplayStrategy(System.String)">
            <summary>
            Updates the configuration to use the replay scheduling strategy during systematic testing.
            This strategy replays the specified schedule trace to reproduce the same execution.
            </summary>
            <param name="scheduleTrace">The schedule trace to be replayed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithTestingIterations(System.UInt32)">
            <summary>
            Updates the configuration with the specified number of iterations to run during systematic testing.
            </summary>
            <param name="iterations">The number of iterations to run.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithTestingTimeout(System.Int32)">
            <summary>
            Updates the configuration with the specified systematic testing timeout in seconds.
            </summary>
            <param name="timeout">The timeout value in seconds.</param>
            <remarks>
            Setting this value overrides the <see cref="P:Microsoft.Coyote.Configuration.TestingIterations" /> value.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithMaxSchedulingSteps(System.UInt32)">
            <summary>
            Updates the configuration with the specified number of maximum scheduling steps to explore per
            iteration during systematic testing. The <see cref="P:Microsoft.Coyote.Configuration.MaxUnfairSchedulingSteps" /> is assigned the
            <paramref name="maxSteps" /> value, whereas the <see cref="P:Microsoft.Coyote.Configuration.MaxFairSchedulingSteps" /> is assigned
            a value using the default heuristic, which is 10 * <paramref name="maxSteps" />.
            </summary>
            <param name="maxSteps">The maximum scheduling steps to explore per iteration.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithMaxSchedulingSteps(System.UInt32,System.UInt32)">
            <summary>
            Updates the configuration with the specified number of maximum unfair and fair scheduling
            steps to explore per iteration during systematic testing. It is recommended to use
            <see cref="M:Microsoft.Coyote.Configuration.WithMaxSchedulingSteps(System.UInt32)" /> instead of this overloaded method.
            </summary>
            <param name="maxUnfairSteps">The unfair scheduling steps to explore per iteration.</param>
            <param name="maxFairSteps">The fair scheduling steps to explore per iteration.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithPartiallyControlledTestingEnabled(System.Boolean)">
            <summary>
            Updates the configuration with partially controlled testing enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then partially controlled testing is enabled.</param>
            <remarks>
            This is an experimental feature.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithLivenessTemperatureThreshold(System.UInt32)">
            <summary>
            Updates the configuration with the specified liveness temperature threshold during
            systematic testing. If this value is 0 it disables liveness checking. It is not
            recommended to explicitly set this value, instead use the default value which is
            assigned to <see cref="P:Microsoft.Coyote.Configuration.MaxFairSchedulingSteps" /> / 2.
            </summary>
            <param name="threshold">The liveness temperature threshold.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithTimeoutDelay(System.UInt32)">
            <summary>
            Updates the <see cref="P:Microsoft.Coyote.Configuration.TimeoutDelay" /> value that controls the probability of triggering
            a timeout each time <see cref="M:System.Threading.Tasks.Task.Delay(System.Int32)" /> or a built-in timer is scheduled during
            systematic testing.
            </summary>
            <param name="timeoutDelay">The timeout delay during testing.</param>
            <remarks>
            Increase the value to decrease the probability. This value is not a unit of time.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithRandomGeneratorSeed(System.UInt32)">
            <summary>
            Updates the seed used by the random value generator during systematic testing.
            </summary>
            <param name="seed">The seed used by the random value generator.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithVerbosityEnabled(System.Boolean,Microsoft.Coyote.IO.LogSeverity)">
            <summary>
            Updates the configuration with verbose output enabled or disabled.
            </summary>
            <param name="isVerbose">If true, then messages are logged.</param>
            <param name="logLevel">The level of detail to provide in verbose logging.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithDebugLoggingEnabled(System.Boolean)">
            <summary>
            Updates the configuration with debug logging enabled or disabled.
            </summary>
            <param name="isDebugLoggingEnabled">If true, then debug messages are logged.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithActivityCoverageEnabled(System.Boolean)">
            <summary>
            Updates the configuration with activity coverage enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then enables activity coverage.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithDgmlGraphEnabled(System.Boolean)">
            <summary>
            Updates the configuration with DGML graph generation enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then enables DGML graph generation.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithXmlLogEnabled(System.Boolean)">
            <summary>
            Updates the configuration with XML log generation enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then enables XML log generation.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithTelemetryEnabled(System.Boolean)">
            <summary>
            Updates the configuration with telemetry enabled or disabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithProductionMonitorEnabled(System.Boolean)">
            <summary>
            Enable running of Monitor objects in production.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.GetPlatformVersion">
            <summary>
            Returns the .NET platform version this assembly was compiled for.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.AssertionFailureException">
            <summary>
            The exception that is thrown by the Coyote runtime upon assertion failure.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.AssertionFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.AssertionFailureException" /> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Microsoft.Coyote.AssertionFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.AssertionFailureException" /> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Microsoft.Coyote.ExecutionCanceledException">
            <summary>
            Exception that is thrown upon cancellation of testing execution by the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.ExecutionCanceledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.ExecutionCanceledException" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.RuntimeException">
            <summary>
            An exception that is thrown by the Coyote runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.RuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.RuntimeException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.RuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.RuntimeException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.RuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.RuntimeException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.RuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.RuntimeException" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.IO.Debug">
            <summary>
            Static class implementing debug reporting methods.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.IO.Debug.IsEnabled">
            <summary>
            Checks if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Debug.Write(System.String,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Debug.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Debug.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Debug.Write(System.String,System.Object[])">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Debug.WriteLine(System.String,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Debug.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Debug.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Debug.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.IO.Error">
            <summary>
            Static class implementing error reporting methods.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.IO.Error.ColorLock">
            <summary>
            If you play with Console.ForegroundColor then you should grab this lock in order
            to avoid color leakage (wrong color becomes set permanently).
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Error.Report(System.String,System.Object[])">
            <summary>
            Reports a generic error to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Error.ReportAndExit(System.String)">
            <summary>
            Reports a generic error to the user and exits.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Error.ReportAndExit(System.String,System.Object[])">
            <summary>
            Reports a generic error to the user and exits.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Error.Write(System.ConsoleColor,System.String)">
            <summary>
             Writes the specified string value to the output stream.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.Error.Write(System.IO.TextWriter,System.ConsoleColor,System.String)">
            <summary>
            Writes with console color to the specified TextWriter.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.IO.ConsoleLogger">
            <summary>
            Logger that writes text to the console.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.IO.ConsoleLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.IO.ConsoleLogger" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.IO.ConsoleLogger.TextWriter">
            <summary>
            This property provides a TextWriter that implements ILogger which is handy if you
            have existing code that requires a TextWriter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.IO.ConsoleLogger.Encoding">
            <summary>
            When overridden in a derived class, returns the character encoding in which the
            output is written.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.IO.ConsoleLogger.LogLevel">
            <summary>
            The level of detail to report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.ConsoleLogger.Write(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ConsoleLogger.Write(Microsoft.Coyote.IO.LogSeverity,System.String)">
            <summary>
            Writes a string to the log.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ConsoleLogger.Write(Microsoft.Coyote.IO.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string to the log.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ConsoleLogger.WriteLine(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ConsoleLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ConsoleLogger.WriteLine(Microsoft.Coyote.IO.LogSeverity,System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ConsoleLogger.WriteLine(Microsoft.Coyote.IO.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="T:Microsoft.Coyote.IO.ILogger">
            <summary>
            A logger is used to capture messages, warnings and errors.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.IO.ILogger.TextWriter">
            <summary>
            This property provides a TextWriter that implements ILogger which is handy if you
            have existing code that requires a TextWriter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.ILogger.Write(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ILogger.Write(System.String,System.Object[])">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ILogger.Write(Microsoft.Coyote.IO.LogSeverity,System.String)">
            <summary>
            Writes a string to the log.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ILogger.Write(Microsoft.Coyote.IO.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string to the log.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ILogger.WriteLine(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ILogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ILogger.WriteLine(Microsoft.Coyote.IO.LogSeverity,System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.ILogger.WriteLine(Microsoft.Coyote.IO.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="T:Microsoft.Coyote.IO.InMemoryLogger">
            <summary>
            Thread safe logger that writes text to an in-memory buffer.
            The buffered text can be extracted using the ToString() method.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.IO.InMemoryLogger.Builder">
            <summary>
            Underlying string builder.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.IO.InMemoryLogger.Lock">
            <summary>
            Serializes access to the string writer.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.IO.InMemoryLogger.UserLogger">
            <summary>
            Optional logger provided by the user to delegate logging to.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.IO.InMemoryLogger.TextWriter">
            <summary>
            This property provides a TextWriter that implements ILogger which is handy if you
            have existing code that requires a TextWriter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.IO.InMemoryLogger.Encoding">
            <summary>
            When overridden in a derived class, returns the character encoding in which the
            output is written.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.InMemoryLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.IO.InMemoryLogger" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.InMemoryLogger.Write(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.InMemoryLogger.Write(Microsoft.Coyote.IO.LogSeverity,System.String)">
            <summary>
            Writes a string to the log.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.InMemoryLogger.Write(Microsoft.Coyote.IO.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string to the log.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.InMemoryLogger.WriteLine(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.InMemoryLogger.WriteLine(Microsoft.Coyote.IO.LogSeverity,System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.InMemoryLogger.WriteLine(Microsoft.Coyote.IO.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.InMemoryLogger.ToString">
            <summary>
            Returns the logged text as a string.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.IO.LogSeverity">
            <summary>
            Flag indicating the type of logging information being provided to the <see cref="T:Microsoft.Coyote.IO.ILogger" />.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.IO.LogSeverity.Informational">
            <summary>
            General information about what is happening in the program.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.IO.LogSeverity.Warning">
            <summary>
            Warnings that something unusual is found and is being handled.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.IO.LogSeverity.Error">
            <summary>
            Error is something unexpected that usually means program cannot proceed normally.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.IO.LogSeverity.Important">
            <summary>
            Output that is not an error or warning, but is important.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.IO.NullLogger">
            <summary>
            A logger is used to capture messages, warnings and errors.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.IO.NullLogger.TextWriter">
            <summary>
            This property provides a TextWriter that implements ILogger which is handy if you
            have existing code that requires a TextWriter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.NullLogger.Write(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="P:Microsoft.Coyote.IO.NullLogger.Encoding">
            <summary>
            When overridden in a derived class, returns the character encoding in which the
            output is written.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.NullLogger.Write(Microsoft.Coyote.IO.LogSeverity,System.String)">
            <summary>
            Writes a string to the log.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.NullLogger.Write(System.String,System.Object[])">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.NullLogger.Write(Microsoft.Coyote.IO.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string to the log.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.NullLogger.WriteLine(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.NullLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.NullLogger.WriteLine(Microsoft.Coyote.IO.LogSeverity,System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.NullLogger.WriteLine(Microsoft.Coyote.IO.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="T:Microsoft.Coyote.IO.TextWriterLogger">
            <summary>
            Bridges custom user provided TextWriter logger so it can be passed into
            Coyote via the <see cref="T:Microsoft.Coyote.IO.ILogger" /> interface.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.IO.TextWriterLogger.TextWriter">
            <summary>
            This property provides a TextWriter that implements ILogger which is handy if you
            have existing code that requires a TextWriter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IO.TextWriterLogger.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.IO.TextWriterLogger" /> class.
            </summary>
            <param name="userLogger">The TextWriter to delegate to.</param>
        </member>
        <member name="P:Microsoft.Coyote.IO.TextWriterLogger.Encoding" />
        <member name="M:Microsoft.Coyote.IO.TextWriterLogger.Write(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.TextWriterLogger.Write(System.String,System.Object[])">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.TextWriterLogger.Write(Microsoft.Coyote.IO.LogSeverity,System.String)">
            <summary>
            Writes a string to the log.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.TextWriterLogger.Write(Microsoft.Coyote.IO.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string to the log.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.TextWriterLogger.WriteLine(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.TextWriterLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.TextWriterLogger.WriteLine(Microsoft.Coyote.IO.LogSeverity,System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.IO.TextWriterLogger.WriteLine(Microsoft.Coyote.IO.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="severity">The severity of the issue being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="T:Microsoft.Coyote.Random.Generator">
            <summary>
            Represents a pseudo-random value generator, which is an algorithm that produces
            a sequence of values that meet certain statistical requirements for randomness.
            During systematic testing, the generation of random values is controlled, which
            allows the runtime to explore combinations of choices to find bugs.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/non-determinism">Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Random.Generator.Runtime">
            <summary>
            The runtime associated with this random value generator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Random.Generator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Random.Generator" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Random.Generator.Create">
            <summary>
            Creates a new pseudo-random value generator.
            </summary>
            <returns>The pseudo-random value generator.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Random.Generator.NextBoolean">
            <summary>
            Returns a random boolean, that can be controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Random.Generator.NextBoolean(System.Int32)">
            <summary>
            Returns a random boolean, that can be controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Random.Generator.NextInteger(System.Int32)">
            <summary>
            Returns a random integer, that can be controlled during testing.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.IRandomValueGenerator">
            <summary>
            Interface for random value generators.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.IRandomValueGenerator.Seed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IRandomValueGenerator.Next">
            <summary>
            Returns a non-negative random number.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IRandomValueGenerator.Next(System.Int32)">
            <summary>
            Returns a non-negative random number less than maxValue.
            </summary>
            <param name="maxValue">Exclusive upper bound.</param>
        </member>
        <member name="M:Microsoft.Coyote.IRandomValueGenerator.NextDouble">
            <summary>
            Returns a random floating-point number that is greater
            than or equal to 0.0, and less than 1.0.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.RandomValueGenerator">
            <summary>
            Basic random value generator that uses the <see cref="T:System.Random" /> generator.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.RandomValueGenerator.Random">
            <summary>
            Device for generating random numbers.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.RandomValueGenerator.RandomSeed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.RandomValueGenerator.Seed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.RandomValueGenerator.#ctor(Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.RandomValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.RandomValueGenerator.Next">
            <summary>
            Returns a non-negative random number.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.RandomValueGenerator.Next(System.Int32)">
            <summary>
            Returns a non-negative random number less than the specified max value.
            </summary>
            <param name="maxValue">Exclusive upper bound.</param>
        </member>
        <member name="M:Microsoft.Coyote.RandomValueGenerator.NextDouble">
            <summary>
            Returns a random floating-point number that is greater
            than or equal to 0.0, and less than 1.0.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CoyoteRuntime">
            <summary>
            Runtime for executing and controlling asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.AsyncLocalInstance">
            <summary>
            Provides access to the runtime associated with each asynchronous control flow.
            </summary>
            <remarks>
            In testing mode, each testing iteration uses a unique runtime instance. To safely
            retrieve it from static methods, we store it in each asynchronous control flow.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.Current">
            <summary>
            The currently executing runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.IsExecutionControlled">
            <summary>
            If true, the program execution is controlled by the runtime to
            explore interleavings and sources of nondeterminism, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ExecutionControlledUseCount">
            <summary>
            Count of controlled execution runtimes that have been used in this process.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.Configuration">
            <summary>
            The configuration used by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.Scheduler">
            <summary>
            The asynchronous operation scheduler.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.SpecificationEngine">
            <summary>
            Responsible for checking specifications.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.DefaultActorExecutionContext">
            <summary>
            The default actor execution context.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ValueGenerator">
            <summary>
            Responsible for generating random values.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.TaskMap">
            <summary>
            Map from controlled tasks to their corresponding operations,
            if such an operation exists.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.OperationIdCounter">
            <summary>
            Monotonically increasing operation id counter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.IsRunning">
            <summary>
            Records if the runtime is running.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.IsControlled">
            <summary>
            If true, the execution is controlled, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.RootTaskId">
            <summary>
            The root task id.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.LogWriter">
            <summary>
            Responsible for writing to all registered <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog" /> objects.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.Logger">
            <summary>
            Used to log text messages. Use <see cref="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.SetLogger(System.IO.TextWriter)" />
            to replace the logger with a custom one.
            </summary>
        </member>
        <member name="E:Microsoft.Coyote.Runtime.CoyoteRuntime.OnFailure">
            <summary>
            Callback that is fired when an exception is thrown that includes failed assertions.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CoyoteRuntime" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.SystematicTesting.SchedulingStrategy,Microsoft.Coyote.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CoyoteRuntime" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RunTest(System.Delegate,System.String)">
            <summary>
            Runs the specified test method.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CreateTaskOperation(System.Boolean)">
            <summary>
            Creates a new task operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleAction(System.Action,System.Threading.Tasks.Task,Microsoft.Coyote.SystematicTesting.OperationExecutionOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified action to be executed asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleFunction(System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified function to be executed asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleFunction``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified function to be executed asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleAsyncFunction(System.Func{Microsoft.Coyote.Tasks.Task},System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified function to be executed asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleAsyncFunction``1(System.Func{Microsoft.Coyote.Tasks.Task{``0}},System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified function to be executed asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleFunction``1(System.Func{``0},System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified function to be executed asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleTaskOperation``1(Microsoft.Coyote.SystematicTesting.TaskOperation,System.Threading.Tasks.Task,System.Threading.Tasks.TaskCompletionSource{``0})">
            <summary>
            Schedules the specified task operation for execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ExecuteOperation(System.Object)">
            <summary>
            Execute the operation with the specified context.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ExecuteOperation``3(System.Object)">
            <summary>
            Execute the (asynchronous) operation with the specified context.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.SetTaskCompletionSource``1(System.Threading.Tasks.TaskCompletionSource{``0},``0,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Sets the specified task completion source with a result, cancelation or exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleDelay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified delay to be executed asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleTaskAwaiterContinuation(System.Threading.Tasks.Task,System.Action)">
            <summary>
            Schedules the specified task awaiter continuation to be executed asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleYieldAwaiterContinuation(System.Action)">
            <summary>
            Schedules the specified yield awaiter continuation to be executed asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WhenAllTasksCompleteAsync(System.Threading.Tasks.Task[])">
            <summary>
            Creates a controlled task that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WhenAllTasksCompleteAsync(Microsoft.Coyote.Tasks.Task[])">
            <summary>
            Creates a controlled task that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WhenAllTasksCompleteAsync``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a controlled task that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WhenAllTasksCompleteAsync``1(Microsoft.Coyote.Tasks.Task{``0}[])">
            <summary>
            Creates a controlled task that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WhenAnyTaskCompletesAsync(System.Threading.Tasks.Task[])">
            <summary>
            Creates a controlled task that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WhenAnyTaskCompletesAsync(Microsoft.Coyote.Tasks.Task[])">
            <summary>
            Creates a controlled task that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WhenAnyTaskCompletesAsync``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a controlled task that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WhenAnyTaskCompletesAsync``1(Microsoft.Coyote.Tasks.Task{``0}[])">
            <summary>
            Creates a controlled task that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WaitAllTasksComplete(System.Threading.Tasks.Task[])">
            <summary>
            Waits for all of the provided controlled task objects to complete execution within
            a specified number of milliseconds or until a cancellation token is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WaitAllTasksComplete(Microsoft.Coyote.Tasks.Task[])">
            <summary>
            Waits for all of the provided controlled task objects to complete execution within
            a specified number of milliseconds or until a cancellation token is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WaitAnyTaskCompletes(System.Threading.Tasks.Task[])">
            <summary>
            Waits for any of the provided controlled task objects to complete execution within
            a specified number of milliseconds or until a cancellation token is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WaitAnyTaskCompletes(Microsoft.Coyote.Tasks.Task[])">
            <summary>
            Waits for any of the provided controlled task objects to complete execution within
            a specified number of milliseconds or until a cancellation token is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WaitTaskCompletes(System.Threading.Tasks.Task)">
            <summary>
            Waits for the task to complete execution. The wait terminates if a timeout interval
            elapses or a cancellation token is canceled before the task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WaitTaskCompletes``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Waits for the task to complete execution and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.UnwrapTask(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
            <summary>
            Unwraps the specified task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.UnwrapTask``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            Unwraps the specified task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.OnTaskCompletionSourceGetTask(System.Threading.Tasks.Task)">
            <summary>
            Callback invoked when the task of a task completion source is accessed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.OnAsyncTaskMethodBuilderSetException(System.Exception)">
            <summary>
            Callback invoked when the <see cref="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)" /> is accessed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CheckExecutingOperationIsControlled">
            <summary>
            Checks if the currently executing operation is controlled by the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.OnYieldAwaiterGetResult">
            <summary>
            Callback invoked when the <see cref="M:Microsoft.Coyote.Tasks.YieldAwaitable.YieldAwaiter.GetResult" /> is called.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.OnWaitTask(System.Threading.Tasks.Task)">
            <summary>
            Callback invoked when the executing operation is waiting for the specified task to complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.IsCurrentOperationExecutingAsynchronously">
            <summary>
            Returns true if the current operation is executing an asynchronous state machine, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ProcessUnhandledExceptionInOperation(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Exception)">
            <summary>
            Processes an unhandled exception in the specified asynchronous operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.UnwrapException(System.Exception)">
            <summary>
            Unwraps the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RegisterMonitor``1">
            <summary>
            Registers a new specification monitor of the specified <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Monitor``1(Microsoft.Coyote.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.MonitorTaskCompletion(System.Threading.Tasks.Task)">
            <summary>
            Creates a liveness monitor that checks if the specified task eventually completes execution successfully.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetNondeterministicBooleanChoice(System.Int32,System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetNondeterministicIntegerChoice(System.Int32,System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetNextOperationId">
            <summary>
            Returns the next available unique operation id.
            </summary>
            <returns>Value representing the next available unique operation id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetExecutingOperation``1">
            <summary>
            Gets the <see cref="T:Microsoft.Coyote.SystematicTesting.AsyncOperation" /> that is executing on the current
            synchronization context, or null if no such operation is executing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleNextOperation">
            <summary>
            Schedules the next controlled asynchronous operation. This method
            is only used during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetHashedProgramState">
            <summary>
            Returns the current hashed state of the execution.
            </summary>
            <remarks>
            The hash is updated in each execution step.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CheckIfExecutionHasDeadlocked(System.Collections.Generic.IEnumerable{Microsoft.Coyote.SystematicTesting.AsyncOperation})">
            <summary>
            Checks if the execution has deadlocked. This happens when there are no more enabled operations,
            but there is one or more blocked operations that are waiting some resource to complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CheckLivenessErrors">
            <summary>
            Checks for liveness errors.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.NotifyAssertionFailure(System.String,System.Boolean,System.Boolean)">
            <summary>
            Notify that an assertion has failed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ReportThrownException(System.Exception)">
            <summary>
            Reports the specified thrown exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RaiseOnFailureEvent(System.Exception)">
            <summary>
            Raises the <see cref="E:Microsoft.Coyote.Runtime.CoyoteRuntime.OnFailure" /> event with the specified <see cref="T:System.Exception" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.AssignAsyncControlFlowRuntime(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Assigns the specified runtime as the default for the current asynchronous control flow.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WaitAsync">
            <summary>
            Waits until all actors have finished execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Dispose(System.Boolean)">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Dispose">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.ICoyoteRuntime">
            <summary>
            Interface that exposes base runtime methods for Coyote.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ICoyoteRuntime.Logger">
            <summary>
            Get or set the  <see cref="T:Microsoft.Coyote.IO.ILogger" /> used to log messages.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="E:Microsoft.Coyote.Runtime.ICoyoteRuntime.OnFailure">
            <summary>
            Callback that is fired when an exception is thrown that includes failed assertions.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.RegisterMonitor``1">
            <summary>
            Registers a new specification monitor of the specified <see cref="T:System.Type" />.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Monitor``1(Microsoft.Coyote.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">Event to send to the monitor.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.RandomBoolean">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing.
            </summary>
            <returns>The nondeterministic boolean choice.</returns>
            <remarks>
            See <see href="/coyote/learn/core/non-determinism">Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.RandomBoolean(System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing. The value is used to generate a number
            in the range [0..maxValue), where 0 triggers true.
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The nondeterministic boolean choice.</returns>
            <remarks>
            See <see href="/coyote/learn/core/non-determinism">Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be
            controlled during analysis or testing. The value is used
            to generate an integer in the range [0..maxValue).
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The nondeterministic integer choice.</returns>
            <remarks>
            See <see href="/coyote/learn/core/non-determinism">Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.SetLogger(System.IO.TextWriter)">
            <summary>
            The old way of setting the <see cref="P:Microsoft.Coyote.Runtime.ICoyoteRuntime.Logger" /> property.
            </summary>
            <remarks>
            The new way is to just set the Logger property to an <see cref="T:Microsoft.Coyote.IO.ILogger" /> object.
            This method is only here for compatibility and has a minor perf impact as it has to
            wrap the writer in an object that implements the <see cref="T:Microsoft.Coyote.IO.ILogger" /> interface.
            </remarks>
            <param name="writer">The writer to use for logging.</param>
            <returns>The previously installed logger.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Stop">
            <summary>
            Terminates the runtime and notifies each active actor to halt execution.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.OnFailureHandler">
            <summary>
            Handles the <see cref="E:Microsoft.Coyote.Runtime.ICoyoteRuntime.OnFailure" /> event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.RuntimeFactory">
            <summary>
            Provides methods for creating a <see cref="T:Microsoft.Coyote.Runtime.ICoyoteRuntime" /> runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.RuntimeFactory.InstalledRuntime">
            <summary>
            The installed runtime instance.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.RuntimeFactory.SyncObject">
            <summary>
            Protects access to the installed runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeFactory.Create">
            <summary>
            Creates a new Coyote runtime.
            </summary>
            <returns>The created task runtime.</returns>
            <remarks>
            Only one task runtime can be created per process. If you create a new task
            runtime it replaces the previously installed one.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeFactory.Create(Microsoft.Coyote.Configuration)">
            <summary>
            Creates a new Coyote runtime with the specified <see cref="T:Microsoft.Coyote.Configuration" />.
            </summary>
            <param name="configuration">The runtime configuration to use.</param>
            <returns>The created task runtime.</returns>
            <remarks>
            Only one task runtime can be created per process. If you create a new task
            runtime it replaces the previously installed one.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeFactory.CreateAndInstall(Microsoft.Coyote.Configuration)">
            <summary>
            Creates a new Coyote runtime with the specified <see cref="T:Microsoft.Coyote.Configuration" /> and sets
            it as the installed runtime, or returns the installed runtime if it already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeFactory.CreateWithConfiguration(Microsoft.Coyote.Configuration)">
            <summary>
            Creates a new Coyote runtime with the specified <see cref="T:Microsoft.Coyote.Configuration" />.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.CachedDelegate">
            <summary>
            A monitor delegate that has been cached to optimize performance of invocations.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor">
            <summary>
            Abstract class representing a specification monitor.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/specifications">Specifications Overview</see>
            for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.StateTypeMap">
            <summary>
            Map from monitor types to a set of all possible states types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.StateMap">
            <summary>
            Map from monitor types to a set of all available states.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.MonitorActionMap">
            <summary>
            Map from monitor types to a set of all available actions.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.ActionCacheLocks">
            <summary>
            A set of lockable objects used to protect static initialization of the ActionCache while
            also enabling multithreaded initialization of different Actor types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.SingleEventTypeArray">
            <summary>
            A cached array that contains a single event type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Configuration">
            <summary>
            The configuration used by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.SpecificationEngine">
            <summary>
            Responsible for checking specifications.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.ActiveState">
            <summary>
            The active monitor state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.EventHandlers">
            <summary>
            Dictionary containing all the current action bindings.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.ActionMap">
            <summary>
            Map from action names to cached action delegates.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.IgnoredEvents">
            <summary>
            Set of currently ignored event types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.LivenessTemperature">
            <summary>
            A counter that increases in each step of the execution, as long as the monitor
            remains in a hot state. If the temperature reaches the specified limit, then
            a potential liveness bug has been found.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.Name">
            <summary>
            Gets the name of this monitor.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.LogWriter">
            <summary>
            Responsible for logging.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.Logger">
            <summary>
            The logger installed to the runtime.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.CurrentStateName">
            <summary>
            Gets the current state name.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.CurrentStateNameWithTemperature">
            <summary>
            Gets the current state name with temperature.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.HashedState">
            <summary>
            User-defined hashed state of the monitor. Override to improve the
            accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.PendingTransition">
            <summary>
            A pending transition object that has not been returned from ExecuteAction yet.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Initialize(Microsoft.Coyote.Configuration,Microsoft.Coyote.Specifications.SpecificationEngine,Microsoft.Coyote.Actors.LogWriter)">
            <summary>
            Initializes this monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Event)">
            <summary>
            Raises the specified <see cref="T:Microsoft.Coyote.Event" /> at the end of the current action.
            </summary>
            <remarks>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Event)" />, <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1" />.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="e">The event to raise.</param>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1">
            <summary>
             Raise a special event that performs a goto state operation at the end of the current action.
             </summary>
            <remarks>
             Goto state pops the current <see cref="T:Microsoft.Coyote.Specifications.Monitor.State" /> and pushes the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor.State" /> on the active state stack.
            
             This is shorthand for the following code:
             <code>
             class Event E { }
             [OnEventGotoState(typeof(E), typeof(S))]
             this.RaiseEvent(new E());
             </code>
             This event is not handled until the action that calls this method returns control back
             to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
             Only one of the following can be called per action:
             <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Event)" />, <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1" />.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
            <typeparam name="TState">Type of the state.</typeparam>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent(System.Type)">
            <summary>
             Raise a special event that performs a goto state operation at the end of the current action.
             </summary>
            <remarks>
             Goto state pops the current <see cref="T:Microsoft.Coyote.Specifications.Monitor.State" /> and pushes the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor.State" /> on the active state stack.
            
             This is shorthand for the following code:
             <code>
             class Event E { }
             [OnEventGotoState(typeof(E), typeof(S))]
             this.RaiseEvent(new E());
             </code>
             This event is not handled until the action that calls this method returns control back
             to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
             Only one of the following can be called per action:
             <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Event)" />, <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1" />.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
            <param name="state">Type of the state.</param>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.MonitorEvent(Microsoft.Coyote.Event,System.String,System.String,System.String)">
            <summary>
            Notifies the monitor to handle the received event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.HandleEvent(Microsoft.Coyote.Event)">
            <summary>
            Handles the given event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.IsEventIgnoredInCurrentState(Microsoft.Coyote.Event)">
            <summary>
            Checks if the specified event is ignored in the current monitor state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Do(System.String,Microsoft.Coyote.Event)">
            <summary>
            Invokes an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ExecuteCurrentStateOnEntry(Microsoft.Coyote.Event)">
            <summary>
            Executes the on entry function of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ExecuteCurrentStateOnExit(System.String,Microsoft.Coyote.Event)">
            <summary>
            Executes the on exit function of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ExecuteAction(Microsoft.Coyote.Specifications.CachedDelegate,Microsoft.Coyote.Event)">
            <summary>
            Executes the specified action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ApplyEventHandlerTransition(Microsoft.Coyote.Specifications.Monitor.Transition)">
            <summary>
            Applies the specified event handler transition.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.CheckDanglingTransition">
            <summary>
            Notifies that a Transition was created but not returned to the Monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GotoState(System.Type,System.String,Microsoft.Coyote.Event)">
            <summary>
            Performs a goto transition to the given state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.CanHandleEvent(System.Type)">
            <summary>
            Checks if the state can handle the given event type. An event
            can be handled if it is deferred, or leads to a transition or
            action binding.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.IsLivenessThresholdExceeded(System.Int32)">
            <summary>
            Checks the liveness temperature of the monitor and report a potential liveness bug if the
            the value exceeded the specified threshold.
            </summary>
            <remarks>
            This method only works if this is a liveness monitor.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.IsInHotState">
            <summary>
            Returns true if the monitor is in a hot state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.IsInHotState(System.String@)">
            <summary>
            Returns true if the monitor is in a hot state. Also outputs
            the name of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.IsInColdState">
            <summary>
            Returns true if the monitor is in a cold state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GetHotState">
            <summary>
            Returns a nullable boolean indicating liveness temperature: true for hot, false for cold, else null.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GetHashedState">
            <summary>
            Returns the hashed state of this monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ToString">
            <summary>
            Returns a string that represents the current monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GotoStartState">
            <summary>
            Transitions to the start state, and executes the
            entry action, if there is any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.InitializeStateInformation">
            <summary>
            Initializes information about the states of the monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ExtractStateTypes(System.Type)">
            <summary>
            Processes a type, looking for monitor states.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ConfigureStateTransitions(Microsoft.Coyote.Specifications.Monitor.State)">
            <summary>
            Configures the state transitions of the monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GetActionWithName(System.String)">
            <summary>
            Returns the action with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.LogEnteredState(Microsoft.Coyote.Specifications.Monitor)">
            <summary>
            Logs that the monitor entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.LogExitedState(Microsoft.Coyote.Specifications.Monitor)">
            <summary>
            Logs that the monitor exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.LogInvokedAction(Microsoft.Coyote.Specifications.Monitor,System.Reflection.MethodInfo,System.String)">
            <summary>
            Logs that the monitor invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.LogRaisedEvent(Microsoft.Coyote.Specifications.Monitor,Microsoft.Coyote.Event)">
            <summary>
            Logs that the monitor raised an <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.LogMonitorError(Microsoft.Coyote.Specifications.Monitor)">
            <summary>
            Logs that the monitor found an error.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ReportActivityCoverage(Microsoft.Coyote.Actors.Coverage.CoverageInfo)">
            <summary>
            Reports the activity coverage of this monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.AssertStateValidity">
            <summary>
            Check monitor for state related errors.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:Microsoft.Coyote.AssertionFailureException" />
            exception, and throws it to the user.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.Transition">
            <summary>
            Defines the <see cref="T:Microsoft.Coyote.Specifications.Monitor" /> transition that is the
            result of executing an event handler.  Transitions are created by using
            <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1" />, or <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Event)" />.
            The Transition is processed by the Coyote runtime when
            an event handling method returns a Transition object.
            This means such a method can only do one such Transition per method call.
            If the method wants to do a conditional transition it can return
            Transition.None to indicate no transition is to be performed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.TypeValue">
            <summary>
            The type of the transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.State">
            <summary>
            The target state of the transition, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.Event">
            <summary>
            The event participating in the transition, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.None">
            <summary>
            This special transition represents a transition that does not change the current <see cref="T:Microsoft.Coyote.Specifications.Monitor.State" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Transition.#ctor(Microsoft.Coyote.Specifications.Monitor.Transition.Type,System.Type,Microsoft.Coyote.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.Transition" /> struct.
            </summary>
            <param name="type">The type of the transition.</param>
            <param name="state">The target state of the transition, if there is one.</param>
            <param name="e">The event participating in the transition, if there is one.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.Transition.Type">
            <summary>
            Defines the type of a <see cref="T:Microsoft.Coyote.Specifications.Monitor" /> transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.Type.None">
            <summary>
            A transition that does not change the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State" />.
            This is the value used by <see cref="F:Microsoft.Coyote.Specifications.Monitor.Transition.None" />.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.Type.Raise">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Event)" /> that raises an <see cref="F:Microsoft.Coyote.Specifications.Monitor.Transition.Event" /> bypassing
            the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State" /> inbox.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.Type.Goto">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1" /> from the current <see cref="T:Microsoft.Coyote.Specifications.Monitor.State" />
            to the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor.State" />.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State">
            <summary>
            Abstract class representing a state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.State.EntryAction">
            <summary>
            The entry action of the state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.State.ExitAction">
            <summary>
            The exit action of the state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.EventHandlers">
            <summary>
            Dictionary containing all the event handlers.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.IgnoredEvents">
            <summary>
            Set of ignored event types.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.State.IsStart">
            <summary>
            True if this is the start state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.State.IsHot">
            <summary>
            Returns true if this is a hot state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.State.IsCold">
            <summary>
            Returns true if this is a cold state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InitializeState">
            <summary>
            Initializes the state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InstallGotoTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares goto event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InheritGotoTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits goto event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InstallActionHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares action event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InheritActionHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits action event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InstallIgnoreHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares ignore event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InheritIgnoreHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits ignore event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.CheckEventHandlerAlreadyDeclared(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already declared.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.CheckEventHandlerAlreadyInherited(System.Type,System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already inherited.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.StartAttribute">
            <summary>
            Attribute for declaring that a state of a monitor
            is the start one.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.OnEntryAttribute">
            <summary>
            Attribute for declaring what action to perform
            when entering a monitor state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEntryAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.OnEntryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.OnEntryAttribute" /> class.
            </summary>
            <param name="actionName">Action name.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.OnExitAttribute">
            <summary>
            Attribute for declaring what action to perform
            when exiting a monitor state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnExitAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.OnExitAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.OnExitAttribute" /> class.
            </summary>
            <param name="actionName">Action name.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute">
            <summary>
            Attribute for declaring which state a monitor should transition to
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute.State">
            <summary>
            State type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute" /> class.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="stateType">State type.</param>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute" /> class.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="stateType">State type.</param>
            <param name="actionName">Name of action to perform on exit.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.OnEventDoActionAttribute">
            <summary>
            Attribute for declaring what action a monitor should perform
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEventDoActionAttribute.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEventDoActionAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.OnEventDoActionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.OnEventDoActionAttribute" /> class.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="actionName">Action name.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.IgnoreEventsAttribute">
            <summary>
            Attribute for declaring what events should be ignored in
            a monitor state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.IgnoreEventsAttribute.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.IgnoreEventsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.IgnoreEventsAttribute" /> class.
            </summary>
            <param name="eventTypes">Event types.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.ColdAttribute">
            <summary>
            Attribute for declaring a cold monitor state. A monitor that
            is in a cold state satisfies a liveness property.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.HotAttribute">
            <summary>
            Attribute for declaring a hot monitor state. A monitor that
            is in a hot state violates a liveness property.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.StateGroup">
            <summary>
            Abstract class used for representing a group of related states.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.TaskLivenessMonitor">
            <summary>
            A monitor that checks if a task eventually completes execution successfully.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.TaskLivenessMonitor.Task">
            <summary>
            The task being monitored.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.TaskLivenessMonitor.LivenessTemperature">
            <summary>
            A counter that increases in each step of the execution, as long as the property
            has not been satisfied. If the temperature reaches the specified limit, then
            a potential liveness bug has been found.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.TaskLivenessMonitor.IsSatisfied">
            <summary>
            True if the liveness property is satisfied, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.TaskLivenessMonitor.StackTrace">
            <summary>
            Trace used for debugging purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.TaskLivenessMonitor.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.TaskLivenessMonitor" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.TaskLivenessMonitor.IsLivenessThresholdExceeded(System.Int32)">
            <summary>
            Checks the liveness temperature of the monitor and report a potential liveness bug if the
            the value exceeded the specified threshold.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Specification">
            <summary>
            Provides static methods that are useful for writing specifications
            and interacting with the systematic testing engine.
            </summary>
            <remarks>
            See <see href="/coyote/learn/core/specifications">Specifications Overview</see>
            for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the predicate holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the predicate holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the predicate holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the predicate holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.IsEventuallyCompletedSuccessfully(System.Threading.Tasks.Task)">
            <summary>
            Creates a monitor that checks if the specified task eventually completes its execution successfully,
            and if not, fails with a liveness property violation.
            </summary>
            <param name="task">The task to monitor.</param>
            <remarks>
            The liveness property is only checked during systematic testing.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.RegisterMonitor``1">
            <summary>
            Registers a new safety or liveness monitor.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.Monitor``1(Microsoft.Coyote.Event)">
            <summary>
            Invokes the specified monitor with the given event.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">Event to send to the monitor.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.SpecificationEngine">
            <summary>
            Provides methods for writing specifications and checking if they hold.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.SpecificationEngine.Configuration">
            <summary>
            The configuration used by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.SpecificationEngine.Runtime">
            <summary>
            Responsible for controlling the program execution during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.SpecificationEngine.LivenessMonitors">
            <summary>
            List of liveness monitors in the program.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.SpecificationEngine.StateMachineMonitors">
            <summary>
            List of safety and liveness state-machine monitors in the program.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.SpecificationEngine.IsMonitoringEnabled">
            <summary>
            True if monitors are enabled, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.SpecificationEngine" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.MonitorTaskCompletion(System.Threading.Tasks.Task)">
            <summary>
            Creates a liveness monitor that checks if the specified task eventually completes execution successfully.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.TryCreateMonitor(System.Type,Microsoft.Coyote.Actors.Coverage.CoverageInfo,Microsoft.Coyote.Actors.LogWriter)">
            <summary>
            Tries to create a new <see cref="T:Microsoft.Coyote.Specifications.Monitor" /> of the specified <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.InvokeMonitor(System.Type,Microsoft.Coyote.Event,System.String,System.String,System.String)">
            <summary>
            Invokes the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor" /> with the specified <see cref="T:Microsoft.Coyote.Event" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.WrapAndThrowException(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:Microsoft.Coyote.AssertionFailureException" /> exception containing the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.CheckLivenessErrors">
            <summary>
            Checks for liveness errors.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.CheckLivenessThresholdExceeded">
            <summary>
            Checks if a liveness monitor exceeded its threshold, and if yes, it reports an error.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.GetHashedMonitorState">
            <summary>
            Returns the current hashed state of the monitors.
            </summary>
            <remarks>
            The hash is updated in each execution step.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.Dispose(System.Boolean)">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.SpecificationEngine.Dispose">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.ExceptionProvider">
            <summary>
            Provides a set of static methods for working with specific kinds of <see cref="T:System.Exception" /> instances.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ExceptionProvider.ThrowIfExecutionCanceledException(System.Object)">
            <summary>
            Checks if the exception object contains an <see cref="T:Microsoft.Coyote.ExecutionCanceledException" />
            and, if yes, it re-throws it so that the exception is not silently consumed.
            </summary>
            <param name="exception">The exception object.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ExceptionProvider.ThrowNotSupportedInvocationException(System.String)">
            <summary>
            Throws a <see cref="T:System.NotSupportedException" /> for the specified unsupported method.
            </summary>
            <param name="methodName">The name of the invoked method that is not supported.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ExceptionProvider.ThrowIfReturnedTaskNotControlled(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an exception if the task returned by the method with the specified name
            is not controlled during systematic testing.
            </summary>
            <param name="task">The task to check if it is controlled or not.</param>
            <param name="methodName">The name of the method returning the task.</param>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder">
            <summary>
            Represents a builder for asynchronous methods that return a <see cref="P:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.Task" />.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.MethodBuilder">
            <summary>
            The task builder to which most operations are delegated.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.Task">
            <summary>
            Gets the task for this builder.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.Create">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.Start``1(``0@)">
            <summary>
            Begins running the builder with the associated state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the specified state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.SetResult">
            <summary>
            Marks the task as successfully completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.SetException(System.Exception)">
            <summary>
            Marks the task as failed and binds the specified exception to the task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1">
            <summary>
            Represents a builder for asynchronous methods that return a <see cref="T:System.Threading.Tasks.Task`1" />.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1.MethodBuilder">
            <summary>
            The task builder to which most operations are delegated.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1.Task">
            <summary>
            Gets the task for this builder.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1.Create">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1.Start``1(``0@)">
            <summary>
            Begins running the builder with the associated state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the specified state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1.SetResult(`0)">
            <summary>
            Marks the task as successfully completed.
            </summary>
            <param name="result">The result to use to complete the task.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
            <summary>
            Marks the task as failed and binds the specified exception to the task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor">
            <summary>
            Provides methods for monitors that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.Enter(System.Object)">
            <summary>
            Acquires an exclusive lock on the specified object.
            </summary>
            <param name="obj">The object on which to acquire the monitor lock.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.Enter(System.Object,System.Boolean@)">
            <summary>
            Acquires an exclusive lock on the specified object.
            </summary>
            <param name="obj">The object on which to acquire the monitor lock.</param>
            <param name="lockTaken">
            The result of the attempt to acquire the lock, passed by reference. The input must be false.
            The output is true if the lock is acquired; otherwise, the output is false. The output is set
            even if an exception occurs during the attempt to acquire the lock. Note that if no exception
            occurs, the output of this method is always true.
            </param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.Exit(System.Object)">
            <summary>
            Releases an exclusive lock on the specified object.
            </summary>
            <param name="obj">The object on which to release the lock.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.IsEntered(System.Object)">
            <summary>
            Determines whether the current thread holds the lock on the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns>True if the current thread holds the lock on obj, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.Pulse(System.Object)">
            <summary>
            Notifies a thread in the waiting queue of a change in the locked object's state.
            </summary>
            <param name="obj">The object that sends the pulse.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.PulseAll(System.Object)">
            <summary>
            Notifies all waiting threads of a change in the object's state.
            </summary>
            <param name="obj">The object that sends the pulse.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
            <summary>
            Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object,
            and atomically sets a value that indicates whether the lock was taken.
            </summary>
            <param name="obj">The object on which to acquire the lock.</param>
            <param name="timeout">
            The amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.
            </param>
            <param name="lockTaken">
            The result of the attempt to acquire the lock, passed by reference. The input must be false.
            The output is true if the lock is acquired; otherwise, the output is false. The output is set
            even if an exception occurs during the attempt to acquire the lock. Note that if no exception
            occurs, the output of this method is always true.
            </param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.TryEnter(System.Object,System.TimeSpan)">
            <summary>
            Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object,
            and atomically sets a value that indicates whether the lock was taken.
            </summary>
            <param name="obj">The object on which to acquire the lock.</param>
            <param name="timeout">
            The amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.
            </param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
            <summary>
            Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object,
            and atomically sets a value that indicates whether the lock was taken.
            </summary>
            <param name="obj">The object on which to acquire the lock.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the lock.</param>
            <param name="lockTaken">
            The result of the attempt to acquire the lock, passed by reference. The input must be false.
            The output is true if the lock is acquired; otherwise, the output is false. The output is set
            even if an exception occurs during the attempt to acquire the lock.
            </param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.TryEnter(System.Object,System.Boolean@)">
            <summary>
            Attempts to acquire an exclusive lock on the specified object, and atomically
            sets a value that indicates whether the lock was taken.
            </summary>
            <param name="obj">The object on which to acquire the lock.</param>
            <param name="lockTaken">
            The result of the attempt to acquire the lock, passed by reference. The input must be false.
            The output is true if the lock is acquired; otherwise, the output is false. The output is set
            even if an exception occurs during the attempt to acquire the lock.
            </param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.TryEnter(System.Object)">
            <summary>
            Attempts to acquire an exclusive lock on the specified object.
            </summary>
            <param name="obj">The object on which to acquire the lock.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.Wait(System.Object)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            </summary>
            <param name="obj">The object on which to wait.</param>
            <returns>
            True if the call returned because the caller reacquired the lock for the specified
            object. This method does not return if the lock is not reacquired.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.Wait(System.Object,System.Int32)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            If the specified time-out interval elapses, the thread enters the ready queue.
            </summary>
            <param name="obj">The object on which to wait.</param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait before the thread enters the ready queue.
            </param>
            <returns>
            True if the lock was reacquired before the specified time elapsed, else false if the
            lock was reacquired after the specified time elapsed. The method does not return until
            the lock is reacquired.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.Wait(System.Object,System.Int32,System.Boolean)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock. If the
            specified time-out interval elapses, the thread enters the ready queue. This method also specifies
            whether the synchronization domain for the context (if in a synchronized context) is exited before
            the wait and reacquired afterward.
            </summary>
            <param name="obj">The object on which to wait.</param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait before the thread enters the ready queue.
            </param>
            <param name="exitContext">
            True to exit and reacquire the synchronization domain for the context (if in a synchronized context)
            before the wait, else false.
            </param>
            <returns>
            True if the lock was reacquired before the specified time elapsed, else false if the lock was reacquired
            after the specified time elapsed. The method does not return until the lock is reacquired.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.Wait(System.Object,System.TimeSpan)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            If the specified time-out interval elapses, the thread enters the ready queue.
            </summary>
            <param name="obj">The object on which to wait.</param>
            <param name="timeout">
            A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.
            </param>
            <returns>
            True if the lock was reacquired before the specified time elapsed, else false if the lock was reacquired
            after the specified time elapsed. The method does not return until the lock is reacquired.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledMonitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            If the specified time-out interval elapses, the thread enters the ready queue. Optionally
            exits the synchronization domain for the synchronized context before the wait and reacquires
            the domain afterward.
            </summary>
            <param name="obj">The object on which to wait.</param>
            <param name="timeout">
            A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.
            </param>
            <param name="exitContext">
            True to exit and reacquire the synchronization domain for the context (if in a synchronized context)
            before the wait, else false.
            </param>
            <returns>
            True if the lock was reacquired before the specified time elapsed, else false if the lock was reacquired
            after the specified time elapsed. The method does not return until the lock is reacquired.
            </returns>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask">
            <summary>
            Provides methods for creating tasks that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Factory">
            <summary>
            Provides access to factory methods for creating controlled <see cref="T:System.Threading.Tasks.Task" />
            and <see cref="T:System.Threading.Tasks.Task`1" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Run(System.Action)">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" />
            object that represents that work. A cancellation token allows the work to be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" />
            object that represents that work.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for
            the <see cref="T:System.Threading.Tasks.Task" /> returned by the function.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for
            the <see cref="T:System.Threading.Tasks.Task" /> returned by the function. A cancellation
            token allows the work to be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            <see cref="T:System.Threading.Tasks.Task`1" /> returned by the function.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            <see cref="T:System.Threading.Tasks.Task`1" /> returned by the function. A cancellation
            token allows the work to be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Run``1(System.Func{``0})">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" />
            object that represents that work.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" />
            object that represents that work. A cancellation token allows the work to be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Delay(System.Int32)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that completes after a time delay.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that completes after a time delay.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Delay(System.TimeSpan)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that completes after a specified time interval.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that completes after a specified time interval.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WhenAll(System.Threading.Tasks.Task[])">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that will complete when all tasks
            in the specified array have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that will complete when all tasks
            in the specified array have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WhenAny(System.Threading.Tasks.Task[])">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that will complete when any task
            in the specified array have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WhenAny(System.Threading.Tasks.Task,System.Threading.Tasks.Task)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that will complete when either of the
            two tasks have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WhenAny``1(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``0})">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that will complete when either of the
            two tasks have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that will complete when any task
            in the specified array have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task" /> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WaitAll(System.Threading.Tasks.Task[])">
            <summary>
            Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete
            execution within a specified time interval.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
            <summary>
            Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete
            execution within a specified number of milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
            <summary>
            Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete
            execution unless the wait is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete
            execution within a specified number of milliseconds or until a cancellation
            token is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WaitAny(System.Threading.Tasks.Task[])">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete
            execution within a specified time interval.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete
            execution within a specified number of milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete
            execution unless the wait is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete
            execution within a specified number of milliseconds or until a cancellation
            token is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Wait(System.Threading.Tasks.Task)">
            <summary>
            Waits for the specified <see cref="T:System.Threading.Tasks.Task" /> to complete execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Wait(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            Waits for the specified <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified time interval.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Wait(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Waits for the specified <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified number of milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Wait(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Waits for the specified <see cref="T:System.Threading.Tasks.Task" /> to complete execution. The wait terminates if a cancellation
            token is canceled before the task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Wait(System.Threading.Tasks.Task,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for the specified <see cref="T:System.Threading.Tasks.Task" /> to complete execution. The wait terminates if a timeout interval
            elapses or a cancellation token is canceled before the task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.GetAwaiter(System.Threading.Tasks.Task)">
            <summary>
            Returns a <see cref="T:Microsoft.Coyote.Tasks.TaskAwaiter" /> for the specified <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.ConfigureAwait(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.Yield">
            <summary>
            Creates an awaitable that asynchronously yields back to the current context when awaited.
            </summary>
            <remarks>
            You can use `await Task.Yield()` in an asynchronous method to force the method to complete
            asynchronously. During systematic testing, the underlying scheduling strategy can use this
            as a hint on how to better prioritize this work relative to other work that may be pending.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask.ExploreContextSwitch">
            <summary>
            Injects a context switch point that can be systematically explored during testing.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask`1">
            <summary>
            Provides methods for creating generic tasks that can be controlled during testing.
            </summary>
            <typeparam name="TResult">The type of the produced result.</typeparam>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask`1.Factory">
            <summary>
            Provides access to factory methods for creating controlled <see cref="T:System.Threading.Tasks.Task" />
            and <see cref="T:System.Threading.Tasks.Task`1" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask`1.get_Result(System.Threading.Tasks.Task{`0})">
            <summary>
            Gets the result value of the specified <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask`1.GetAwaiter(System.Threading.Tasks.Task{`0})">
            <summary>
            Returns a <see cref="T:Microsoft.Coyote.Tasks.TaskAwaiter`1" /> for the specified <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTask`1.ConfigureAwait(System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.ControlledTaskCompletionSource`1">
            <summary>
            Represents the producer side of a controlled <see cref="T:System.Threading.Tasks.Task`1" /> unbound to a delegate, providing
            access to the consumer side through the <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> property.
            </summary>
            <typeparam name="TResult">The type of the result value.</typeparam>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTaskCompletionSource`1.get_Task(System.Threading.Tasks.TaskCompletionSource{`0})">
            <summary>
            Gets the task created by this task completion source.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTaskCompletionSource`1.SetResult(System.Threading.Tasks.TaskCompletionSource{`0},`0)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTaskCompletionSource`1.SetException(System.Threading.Tasks.TaskCompletionSource{`0},System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state
            and binds a collection of exception objects to it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTaskCompletionSource`1.SetException(System.Threading.Tasks.TaskCompletionSource{`0},System.Exception)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state
            and binds it to a specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTaskCompletionSource`1.SetCanceled(System.Threading.Tasks.TaskCompletionSource{`0})">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTaskCompletionSource`1.TrySetResult(System.Threading.Tasks.TaskCompletionSource{`0},`0)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTaskCompletionSource`1.TrySetException(System.Threading.Tasks.TaskCompletionSource{`0},System.Exception)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state
            and binds it to a specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTaskCompletionSource`1.TrySetException(System.Threading.Tasks.TaskCompletionSource{`0},System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state
            and binds a collection of exception objects to it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTaskCompletionSource`1.TrySetCanceled(System.Threading.Tasks.TaskCompletionSource{`0})">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledTaskCompletionSource`1.TrySetCanceled(System.Threading.Tasks.TaskCompletionSource{`0},System.Threading.CancellationToken)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state
            and enables a cancellation token to be stored in the canceled task.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread">
            <summary>
            Provides a controlled thread class that creates and controls a thread, sets its priority, and gets its status
            and provides other helper methods like SpinWait and Yield that Coyote needs to intercept.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.ClearCache">
            <summary>
            This iks called after each test iteration is complete just so this dictionary doesn't get too big with junk threads.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Create(System.Threading.ThreadStart)">
            <summary>
            Initializes a new instance of the System.Threading.Thread class.
            </summary>
            <param name="start">A System.Threading.ThreadStart delegate that represents the methods to be invoked
            when this thread begins executing.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Create(System.Threading.ThreadStart,System.Int32)">
            <summary>
            Initializes a new instance of the System.Threading.Thread class.
            </summary>
            <param name="start">A System.Threading.ThreadStart delegate that represents the methods to be invoked
            when this thread begins executing.</param>
            <param name="maxStackSize">
            The maximum stack size, in bytes, to be used by the thread, or 0 to use the default
            maximum stack size specified in the header for the executable. Important For
            partially trusted code, maxStackSize is ignored if it is greater than the default
            stack size. No exception is thrown.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Create(System.Threading.ParameterizedThreadStart)">
            <summary>
            Initializes a new instance of the System.Threading.Thread class.
            </summary>
            <param name="start">A System.Threading.ParameterizedThreadStart delegate that represents the methods
            to be invoked when this thread begins executing.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Create(System.Threading.ParameterizedThreadStart,System.Int32)">
            <summary>
            Initializes a new instance of the System.Threading.Thread class.
            </summary>
            <param name="start">A System.Threading.ParameterizedThreadStart delegate that represents the methods
            to be invoked when this thread begins executing.</param>
            <param name="maxStackSize">
            The maximum stack size, in bytes, to be used by the thread, or 0 to use the default
            maximum stack size specified in the header for the executable. Important For
            partially trusted code, maxStackSize is ignored if it is greater than the default
            stack size. No exception is thrown.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.ScheduleAction(System.Action)">
            <summary>
            Schedule a Coyote task to run the action.
            </summary>
            <param name="action">The action to schedule.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Sleep(System.Int32)">
            <summary>
             Suspends the current thread for the specified number of milliseconds.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds for which the thread is suspended. If the value of
            the millisecondsTimeout argument is zero, the thread relinquishes the remainder
            of its time slice to any thread of equal priority that is ready to run. If there
            are no other threads of equal priority that are ready to run, execution of the
            current thread is not suspended.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Sleep(System.TimeSpan)">
            <summary>
            Suspends the current thread for the specified amount of time.
            </summary>
            <param name="timeout">
            The amount of time for which the thread is suspended. If the value of the millisecondsTimeout
            argument is System.TimeSpan.Zero, the thread relinquishes the remainder of its
            time slice to any thread of equal priority that is ready to run. If there are
            no other threads of equal priority that are ready to run, execution of the current
            thread is not suspended.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.SpinWait(System.Int32)">
            <summary>
            Causes a thread to wait the number of times defined by the iterations parameter.
            </summary>
            <param name="iterations">
            A 32-bit signed integer that defines how long a thread is to wait.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Yield">
            <summary>
            Causes the calling thread to yield execution to another thread that is ready
            to run on the current processor. The operating system selects the thread to yield
            to.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Join(System.Threading.Thread,System.TimeSpan)">
            <summary>
            Blocks the calling thread until the thread represented by this instance terminates
            or the specified time elapses, while continuing to perform standard COM and SendMessage
            pumping.
            </summary>
            <param name="thread">The thread to join.</param>
            <param name="timeout">
            A System.TimeSpan set to the amount of time to wait for the thread to terminate.</param>
            <returns>
            true if the thread terminated; false if the thread has not terminated after the
            amount of time specified by the timeout parameter has elapsed.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Join(System.Threading.Thread,System.Int32)">
            <summary>
            Blocks the calling thread until the thread represented by this instance terminates
            or the specified time elapses, while continuing to perform standard COM and SendMessage
            pumping.
            </summary>
            <param name="thread">The thread to join.</param>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait for the thread to terminate.</param>
            <returns>
            true if the thread has terminated; false if the thread has not terminated after
            the amount of time specified by the millisecondsTimeout parameter has elapsed.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Join(System.Threading.Thread)">
            <summary>
            Blocks the calling thread until the thread represented by this instance terminates,
            while continuing to perform standard COM and SendMessage pumping.
            </summary>
            <param name="thread">The thread to join.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Start(System.Threading.Thread,System.Object)">
            <summary>
            Causes the operating system to change the state of the current instance to System.Threading.ThreadState.Running,
            and optionally supplies an object containing data to be used by the method the
            thread executes.
            </summary>
            <param name="thread">The thread to start.</param>
            <param name="parameter">An object that contains data to be used by the method the thread executes.</param>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ControlledThread.Start(System.Threading.Thread)">
            <summary>
            Causes the operating system to change the state of the current instance to System.Threading.ThreadState.Running.
            </summary>
            <param name="thread">The thread to start.</param>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.Parallel">
            <summary>
            Provides methods for creating tasks that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Interception.Parallel.MaxDegreeOfParallelism">
            <summary>
            We pick a fixed max degree of parallelism to make sure the schedules are reproducible
            across machines with different processor count.
            </summary>
            <remarks>
            TODO: make this configurable.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.Parallel.CompletedResult">
            <summary>
            Cached completed result.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.Invoke(System.Action[])">
            <summary>
            Executes each of the provided actions, possibly in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])">
            <summary>
            Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel and loop options
            can be configured.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a for loop in which iterations may run in parallel and the state of
            the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a for loop in which iterations may run in parallel, loop options can
            be configured, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})">
            <summary>
            Executes a for loop with 64-bit indexes in which iterations may run in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})">
            <summary>
            Executes a for loop with 64-bit indexes in which iterations may run in parallel
            and loop options can be configured.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a for loop with 64-bit indexes in which iterations may run in parallel
            and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a for loop with 64-bit indexes in which iterations may run in parallel, loop
            options can be configured, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>
            Executes a for loop with thread-local data in which iterations may run in parallel,
            and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>
            Executes a for loop with thread-local data in which iterations may run in parallel, loop
            options can be configured, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>
            Executes a for loop with 64-bit indexes and thread-local data in which iterations
            may run in parallel, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>
            Executes a for loop with 64-bit indexes and thread-local data in which iterations
            may run in parallel, loop options can be configured, and the state of the loop
            can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.IEnumerable" />
            in which iterations may run in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.IEnumerable" />
            in which iterations may run in parallel and loop options can be configured.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run
            in parallel and loop options can be configured.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.IEnumerable" /> in which iterations
            may run in parallel, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.IEnumerable" /> in which iterations
            may run in parallel, loop options can be configured, and the state of the loop can be monitored and
            manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel,
            and the state of the loop can be monitored
            and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel,
            loop options can be configured, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
            <summary>
            Executes a foreach operation with 64-bit indexes on a <see cref="T:System.Collections.IEnumerable" />
            in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
            <summary>
            Executes a foreach operation with 64-bit indexes on a <see cref="T:System.Collections.IEnumerable" />
            in which iterations may run in parallel, loop options can be configured, and the state of the loop
            can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations
            may run in parallel and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />
            in which iterations may run in parallel, loop options can be configured, and
            the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.IEnumerable" />
            in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.IEnumerable" />
            in which iterations may run in parallel, loop options can be configured, and the state of the loop
            can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in
            parallel and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in
            parallel, loop options can be configured, and the state of the loop can be monitored
            and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.IEnumerable" />
            in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data and 64-bit indexes on a <see cref="T:System.Collections.IEnumerable" />
            in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and
            manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />
            in which iterations may run in parallel, loop options can be configured, and the state of the loop
            can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with 64-bit indexes and with thread-local data on
            a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in
            parallel , loop options can be configured, and the state of the loop can be
            monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.GetCompletedResult">
            <summary>
            Returns a completed <see cref="T:System.Threading.Tasks.ParallelLoopResult" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.Parallel.ValidateParallelOptions(System.Threading.Tasks.ParallelOptions)">
            <summary>
            Ensure that the specified parallel options can be handled during systematic testing.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.TaskExtensions">
            <summary>
            Provides a set of static methods for working with specific kinds of <see cref="T:System.Threading.Tasks.Task" /> instances.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
            <summary>
            Creates a proxy <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation
            of a <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.
            </summary>
            <param name="task">The task to unwrap.</param>
            <returns>A Task that represents the asynchronous operation of the provided task.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a proxy <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation of a task.
            </summary>
            <param name="task">The task to unwrap.</param>
            <returns>A Task that represents the asynchronous operation of the provided task.</returns>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory">
            <summary>
            Provides support for creating and scheduling controlled <see cref="T:System.Threading.Tasks.Task" /> objects.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.MethodCache">
            <summary>
            Cache of methods for optimizing invocation to the controlled runtime, when
            the static type of the task generic argument is not available.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinuationOptions">
            <summary>
            The default task continuation options for this task factory.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.CancellationToken">
            <summary>
            The default task cancellation token for this task factory.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.CreationOptions">
            <summary>
            The default task creation options for this task factory.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.Scheduler">
            <summary>
            The default task scheduler for this task factory.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew(System.Action)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew``1(System.Func{``0})">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
            <summary>
            Creates a task that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a task that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
            <summary>
            Creates a task that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a task that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1">
            <summary>
            Provides support for creating and scheduling controlled <see cref="T:System.Threading.Tasks.Task`1" /> objects.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinuationOptions">
            <summary>
            The default task continuation options for this task factory.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.CancellationToken">
            <summary>
            The default task cancellation token for this task factory.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.CreationOptions">
            <summary>
            The default task creation options for this task factory.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.Scheduler">
            <summary>
            The default task scheduler for this task factory.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.StartNew(System.Func{`0})">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that starts when a set of specified tasks has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a continuation task that will be started upon the completion of any task in the provided set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that represents a pair of begin and end methods that conform
            to the Asynchronous Programming Model pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
            <summary>
            Creates a task that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a task that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a task that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool">
            <summary>
            Provides a controlled pool of threads that can be used to execute tasks, post work items,
            process asynchronous I/O, wait on behalf of other threads, and process timers.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the difference between the maximum number of thread pool threads returned by the
            <see cref="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the number of requests to the thread pool that can be active concurrently. All requests above
            that number remain queued until thread pool threads become available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made,
            before switching to an algorithm for managing thread creation and destruction.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
            <summary>
            Sets the number of requests to the thread pool that can be active concurrently. All requests
            above that number remain queued until thread pool threads become available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
            <summary>
            Sets the minimum number of threads the thread pool creates on demand, as new requests are made,
            before switching to an algorithm for managing thread creation and destruction.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queues a method for execution. The method executes when a thread pool thread becomes available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queues a method for execution. The method executes when a thread pool thread becomes available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
            <summary>
            Queues a method specified by an <see cref="T:System.Action`1" /> delegate for execution, and provides data
            to be used by the method. The method executes when a thread pool thread becomes available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)">
            <summary>
            Queues the specified work item object to the thread pool.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
            <summary>
            Queues a method specified by an <see cref="T:System.Action`1" /> delegate for execution, and provides data
            to be used by the method. The method executes when a thread pool thread becomes available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Binds an operating system handle to the <see cref="T:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> for
            the time-out.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
            <summary>
            Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for
            the time-out in milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
            <summary>
            Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for
            the time-out in milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
            <summary>
            Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for
            the time-out in milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> for
            the time-out. This method does not propagate the calling stack to the worker thread.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
            <summary>
            Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for
            the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
            <summary>
            Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for
            the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Interception.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
            <summary>
            Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for
            the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.OperationScheduler">
            <summary>
            Scheduler that controls the execution of asynchronous operations during systematic testing.
            </summary>
            <remarks>
            Invoking the scheduler is thread-safe.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.OperationScheduler.ExecutingOperation">
            <summary>
            Provides access to the operation executing on each asynchronous control flow.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.OperationScheduler.Configuration">
            <summary>
            The configuration used by the scheduler.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.OperationScheduler.Runtime">
            <summary>
            Responsible for controlling the program execution during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.OperationScheduler.Strategy">
            <summary>
            The scheduling strategy used for program exploration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.OperationScheduler.OperationMap">
            <summary>
            Map from unique ids to asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.OperationScheduler.ScheduleTrace">
            <summary>
            The program schedule trace.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.OperationScheduler.SyncObject">
            <summary>
            Object that is used to synchronize access to the scheduler.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.OperationScheduler.CompletionSource">
            <summary>
            The scheduler completion source.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.OperationScheduler.IsProgramExecuting">
            <summary>
            True if the user program is executing, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.OperationScheduler.IsAttached">
            <summary>
            True if the scheduler is attached to the executing program, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.OperationScheduler.ScheduledOperation">
            <summary>
            The currently scheduled asynchronous operation.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.OperationScheduler.ScheduledSteps">
            <summary>
            Number of scheduled steps.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.OperationScheduler.HasFullyExploredSchedule">
            <summary>
            Checks if the schedule has been fully explored.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.OperationScheduler.BugFound">
            <summary>
            True if a bug was found.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.OperationScheduler.BugReport">
            <summary>
            Bug report.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.OperationScheduler.UnhandledException">
            <summary>
            Associated with the bug report is an optional unhandled exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.SystematicTesting.SchedulingStrategy,Microsoft.Coyote.SystematicTesting.ScheduleTrace,Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.OperationScheduler" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.ScheduleNext">
            <summary>
            Schedules the next enabled operation, which can include the currently executing operation.
            </summary>
            <remarks>
            An enabled operation is one that is not blocked nor completed.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.Yield">
            <summary>
            Yields execution to the next enabled operation, which can include the currently executing operation.
            </summary>
            <remarks>
            An enabled operation is one that is not blocked nor completed.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.ScheduleNextOperation(System.Boolean)">
            <summary>
            Schedules the next enabled operation, which can include the currently executing operation.
            </summary>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <remarks>
            An enabled operation is one that is not blocked nor completed.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.TryGetNextEnabledOperation(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Boolean,Microsoft.Coyote.SystematicTesting.AsyncOperation@)">
            <summary>
            Tries to get the next enabled operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.GetNextNondeterministicBooleanChoice(System.Int32)">
            <summary>
            Returns the next nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.GetNextNondeterministicIntegerChoice(System.Int32)">
            <summary>
            Returns the next nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.RegisterOperation(Microsoft.Coyote.SystematicTesting.AsyncOperation)">
            <summary>
            Registers the specified asynchronous operation.
            </summary>
            <param name="op">The operation to register.</param>
            <returns>True if the operation was successfully registered, else false if it already exists.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.StartOperation(Microsoft.Coyote.SystematicTesting.AsyncOperation)">
            <summary>
            Starts the execution of the specified asynchronous operation.
            </summary>
            <param name="op">The operation to start executing.</param>
            <remarks>
            This method performs a handshake with <see cref="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.WaitOperationStart(Microsoft.Coyote.SystematicTesting.AsyncOperation)" />.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.WaitOperationStart(Microsoft.Coyote.SystematicTesting.AsyncOperation)">
            <summary>
            Waits for the specified asynchronous operation to start executing.
            </summary>
            <param name="op">The operation to wait.</param>
            <remarks>
            This method performs a handshake with <see cref="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.StartOperation(Microsoft.Coyote.SystematicTesting.AsyncOperation)" />.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.PauseOperation(Microsoft.Coyote.SystematicTesting.AsyncOperation)">
            <summary>
            Pauses the specified operation.
            </summary>
            <remarks>
            It is assumed that this method runs in the scope of a 'lock (this.SyncObject)' statement.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.TryEnableOperation(Microsoft.Coyote.SystematicTesting.AsyncOperation)">
            <summary>
            Tries to enable the specified operation.
            </summary>
            <remarks>
            It is assumed that this method runs in the scope of a 'lock (this.SyncObject)' statement.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.GetOperationWithId``1(System.UInt64)">
            <summary>
            Gets the <see cref="T:Microsoft.Coyote.SystematicTesting.AsyncOperation" /> associated with the specified
            unique id, or null if no such operation exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.GetExecutingOperation``1">
            <summary>
            Gets the <see cref="T:Microsoft.Coyote.SystematicTesting.AsyncOperation" /> that is currently executing,
            or null if no such operation is executing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.GetRegisteredOperations">
            <summary>
            Returns all registered operations.
            </summary>
            <remarks>
            This operation is thread safe because the systematic testing
            runtime serializes the execution.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.CheckIfSchedulingStepsBoundIsReached">
            <summary>
            Checks if the scheduling steps bound has been reached. If yes,
            it stops the scheduler and kills all enabled machines.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.ThrowUncontrolledTaskException">
            <summary>
            Checks if the currently executing operation is controlled by the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.NotifyAssertionFailure(System.String,System.Boolean,System.Boolean)">
            <summary>
            Notify that an assertion has failed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.WaitAsync">
            <summary>
            Waits until the scheduler terminates.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.Detach(System.Boolean)">
            <summary>
            Detaches the scheduler releasing all controlled operations.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.ForceStop">
            <summary>
            Forces the scheduler to terminate.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationScheduler.ThrowExecutionCanceledExceptionIfDetached">
            <summary>
            If scheduler is detached, throw exception to force terminate the caller.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.AsyncOperation">
            <summary>
            Represents an abstract asynchronous operation that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.AsyncOperation.Id">
            <summary>
            The unique id of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.AsyncOperation.Name">
            <summary>
            The unique name of the operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.AsyncOperation.Status">
            <summary>
            The status of the operation. An operation can be scheduled only
            if it is <see cref="F:Microsoft.Coyote.SystematicTesting.AsyncOperationStatus.Enabled" />.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.AsyncOperation.HashedProgramState">
            <summary>
            A value that represents the hashed program state when
            this operation last executed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.AsyncOperation.#ctor(System.UInt64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.AsyncOperation" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.AsyncOperation.OnCompleted">
            <summary>
            Invoked when the operation completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.AsyncOperation.TryEnable">
            <summary>
            Tries to enable the operation, if it is not already enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.AsyncOperation.IsBlockedOnUncontrolledDependency">
            <summary>
            Checks if the operation is blocked on an uncontrolled dependency.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.AsyncOperation.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.AsyncOperation.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.AsyncOperation.ToString">
            <summary>
            Returns a string that represents the current actor id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.AsyncOperation.Equals(Microsoft.Coyote.SystematicTesting.AsyncOperation)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.SystematicTesting.AsyncOperation" /> is equal
            to the current <see cref="T:Microsoft.Coyote.SystematicTesting.AsyncOperation" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.AsyncOperation.System#IEquatable{Microsoft#Coyote#SystematicTesting#AsyncOperation}#Equals(Microsoft.Coyote.SystematicTesting.AsyncOperation)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.SystematicTesting.AsyncOperation" /> is equal
            to the current <see cref="T:Microsoft.Coyote.SystematicTesting.AsyncOperation" />.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.AsyncOperationContext`3">
            <summary>
            The context of a controlled asynchronous operation that is scheduled for execution.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.AsyncOperationContext`3.Executor">
            <summary>
            Task representing an asynchronous work.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.AsyncOperationContext`3.ExecutorSource">
            <summary>
            Provides asynchronous access to the task executing the operation.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.AsyncOperationStatus">
            <summary>
            The status of an asynchronous operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.AsyncOperationStatus.None">
            <summary>
            The operation does not have a status yet.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.AsyncOperationStatus.Enabled">
            <summary>
            The operation is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.AsyncOperationStatus.BlockedOnWaitAll">
            <summary>
            The operation is waiting for all of its dependencies to complete.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.AsyncOperationStatus.BlockedOnWaitAny">
            <summary>
            The operation is waiting for any of its dependencies to complete.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.AsyncOperationStatus.BlockedOnReceive">
            <summary>
            The operation is waiting to receive an event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.AsyncOperationStatus.BlockedOnResource">
            <summary>
            The operation is waiting to acquire a resource.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.AsyncOperationStatus.Delayed">
            <summary>
            The operation is delayed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.AsyncOperationStatus.Completed">
            <summary>
            The operation is completed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.AsyncOperationStatus.Canceled">
            <summary>
            The operation is canceled.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.OperationContext`2">
            <summary>
            The context of a controlled operation that is scheduled for execution.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.OperationContext`2.Operation">
            <summary>
            The operation that is executing the work.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.OperationContext`2.Work">
            <summary>
            The work to be executed.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.OperationContext`2.Predecessor">
            <summary>
            Optional predecessor that must complete before the operation starts.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.OperationContext`2.ResultSource">
            <summary>
            Provides asynchronous access to the result of the operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.OperationContext`2.Options">
            <summary>
            Options for executing the operation.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.OperationContext`2.CancellationToken">
            <summary>
            Cancellation token that can be used to cancel the operation.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.OperationContext">
            <summary>
            Provides static helpers for managing <see cref="T:Microsoft.Coyote.SystematicTesting.OperationContext`2" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationContext.CreateOperationExecutionOptions(System.Boolean,System.Boolean)">
            <summary>
            Helper for creating an <see cref="T:Microsoft.Coyote.SystematicTesting.OperationExecutionOptions" /> enum.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.OperationContext.IsInstance(System.Object)">
            <summary>
            Helper for checking if an object is an instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.OperationContext`2" /> type.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.OperationExecutionOptions">
            <summary>
            Options for executing an operation.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.TaskDelayOperation">
            <summary>
            Represents an asynchronous task delay operation that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TaskDelayOperation.Timeout">
            <summary>
            The value until the operation may complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TaskDelayOperation.#ctor(System.UInt64,System.String,System.UInt32,Microsoft.Coyote.SystematicTesting.OperationScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.TaskDelayOperation" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TaskDelayOperation.DelayUntilTimeout">
            <summary>
            Delays the execution of the operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TaskDelayOperation.TryEnable">
            <summary>
            Tries to enable the operation, if it is not already enabled.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.TaskOperation">
            <summary>
            Represents an asynchronous task operation that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TaskOperation.Scheduler">
            <summary>
            The scheduler executing this operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TaskOperation.JoinDependencies">
            <summary>
            Set of tasks that this operation is waiting to join. All tasks
            in the set must complete before this operation can resume.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TaskOperation.Exception">
            <summary>
            The <see cref="P:Microsoft.Coyote.SystematicTesting.TaskOperation.Exception" /> that caused this operation to end prematurely.
            If the operation completed successfully or has not yet thrown any exceptions,
            this will be null.
            </summary>
            <remarks>
            Only an exception thrown during the execution of an asynchronous state machine
            is currently being captured by this property.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TaskOperation.#ctor(System.UInt64,System.String,Microsoft.Coyote.SystematicTesting.OperationScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.TaskOperation" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TaskOperation.BlockUntilTaskCompletes(System.Threading.Tasks.Task)">
            <summary>
            Blocks the operation until the specified tasks completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TaskOperation.TryBlockUntilTaskCompletes(System.Threading.Tasks.Task)">
            <summary>
            Tries to blocks the operation until the specified tasks completes,
            if the task has not already completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TaskOperation.BlockUntilTasksComplete(System.Threading.Tasks.Task[],System.Boolean)">
            <summary>
            Blocks the operation until all or any of the specified tasks complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TaskOperation.BlockUntilTasksComplete(Microsoft.Coyote.Tasks.Task[],System.Boolean)">
            <summary>
            Blocks the operation until all or any of the specified tasks complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TaskOperation.TryEnable">
            <summary>
            Tries to enable the operation, if it is not already enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TaskOperation.IsBlockedOnUncontrolledDependency">
            <summary>
            Checks if the operation is blocked on an uncontrolled dependency.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TaskOperation.SetException(System.Exception)">
            <summary>
            Sets the <see cref="P:Microsoft.Coyote.SystematicTesting.TaskOperation.Exception" /> that caused this operation to end prematurely.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Resource">
            <summary>
            Resource that can be used to synchronize asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Resource.Runtime">
            <summary>
            The runtime associated with this resource.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Resource.AwaitingOperations">
            <summary>
            Set of asynchronous operations that are waiting on the resource to be released.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Resource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Resource" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Resource.Wait">
            <summary>
            Waits for the resource to be released.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Resource.Signal(Microsoft.Coyote.SystematicTesting.AsyncOperation)">
            <summary>
            Signals the specified waiting operation that the resource has been released.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Resource.SignalAll">
            <summary>
            Signals all waiting operations that the resource has been released.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy">
            <summary>
            A depth-first search scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.MaxScheduledSteps">
            <summary>
            The maximum number of steps to schedule.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.ScheduleStack">
            <summary>
            Stack of scheduling choices.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.BoolNondetStack">
            <summary>
            Stack of nondeterministic choices.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.IntNondetStack">
            <summary>
            Stack of nondeterministic choices.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.SchIndex">
            <summary>
            Current schedule index.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.NondetIndex">
            <summary>
            Current nondeterministic index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.InitializeNextIteration(System.UInt32)">
            <summary>
            Initializes the next iteration.
            </summary>
            <param name="iteration">The id of the next iteration.</param>
            <returns>True to start the specified iteration, else false to stop exploring.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.GetNextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.SystematicTesting.AsyncOperation},Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Boolean,Microsoft.Coyote.SystematicTesting.AsyncOperation@)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
            <param name="ops">Operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.GetNextBooleanChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.GetNextIntegerChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.DebugPrintSchedule">
            <summary>
            Prints the schedule, if debug is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.SChoice">
            <summary>
            A scheduling choice. Contains an id and a boolean that is
            true if the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.SChoice.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.SChoice" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.NondetBooleanChoice">
            <summary>
            A nondeterministic choice. Contains a boolean value that
            corresponds to the choice and a boolean that is true if
            the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.NondetBooleanChoice.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.NondetBooleanChoice" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.NondetIntegerChoice">
            <summary>
            A nondeterministic choice. Contains an integer value that
            corresponds to the choice and a boolean that is true if
            the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.NondetIntegerChoice.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.DFSStrategy.NondetIntegerChoice" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy">
            <summary>
            Abstract strategy for detecting liveness property violations. It
            contains a nested <see cref="F:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy.SchedulingStrategy" /> that is used
            for scheduling decisions.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy.Configuration">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy.SpecificationEngine">
            <summary>
            Responsible for checking specifications.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy.SchedulingStrategy">
            <summary>
            Strategy used for scheduling decisions.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.Specifications.SpecificationEngine,Microsoft.Coyote.SystematicTesting.SchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy.InitializeNextIteration(System.UInt32)">
            <summary>
            Initializes the next iteration.
            </summary>
            <param name="iteration">The id of the next iteration.</param>
            <returns>True to start the specified iteration, else false to stop exploring.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.LivenessCheckingStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.TemperatureCheckingStrategy">
            <summary>
            Strategy for detecting liveness property violations using the "temperature"
            method. It contains a nested <see cref="T:Microsoft.Coyote.SystematicTesting.SchedulingStrategy" /> that is used
            for scheduling decisions. Note that liveness property violations are checked
            only if the nested strategy is fair.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.TemperatureCheckingStrategy.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.Specifications.SpecificationEngine,Microsoft.Coyote.SystematicTesting.SchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.TemperatureCheckingStrategy" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.TemperatureCheckingStrategy.GetNextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.SystematicTesting.AsyncOperation},Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Boolean,Microsoft.Coyote.SystematicTesting.AsyncOperation@)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
            <param name="ops">Operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.TemperatureCheckingStrategy.GetNextBooleanChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.TemperatureCheckingStrategy.GetNextIntegerChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy">
            <summary>
            A probabilistic priority-based scheduling strategy.
            </summary>
            <remarks>
            This strategy is described in the following paper:
            https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/asplos277-pct.pdf.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.RandomValueGenerator">
            <summary>
            Random value generator.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.MaxScheduledSteps">
            <summary>
            The maximum number of steps to schedule.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.MaxPrioritySwitchPoints">
            <summary>
            Max number of priority switch points.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.ScheduleLength">
            <summary>
            Approximate length of the schedule across all iterations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.PrioritizedOperations">
            <summary>
            List of prioritized operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.PriorityChangePoints">
            <summary>
            Scheduling points in the current execution where a priority change should occur.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.#ctor(System.Int32,System.Int32,Microsoft.Coyote.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.InitializeNextIteration(System.UInt32)">
            <summary>
            Initializes the next iteration.
            </summary>
            <param name="iteration">The id of the next iteration.</param>
            <returns>True to start the specified iteration, else false to stop exploring.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.GetNextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.SystematicTesting.AsyncOperation},Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Boolean,Microsoft.Coyote.SystematicTesting.AsyncOperation@)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
            <param name="ops">Operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.SetNewOperationPriorities(System.Collections.Generic.List{Microsoft.Coyote.SystematicTesting.AsyncOperation},Microsoft.Coyote.SystematicTesting.AsyncOperation)">
            <summary>
            Sets the priority of new operations, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.DeprioritizeEnabledOperationWithHighestPriority(System.Collections.Generic.List{Microsoft.Coyote.SystematicTesting.AsyncOperation},Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Boolean)">
            <summary>
            Deprioritizes the enabled operation with the highest priority, if there is a
            priotity change point installed on the current execution step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.GetEnabledOperationWithHighestPriority(System.Collections.Generic.List{Microsoft.Coyote.SystematicTesting.AsyncOperation})">
            <summary>
            Returns the enabled operation with the highest priority.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.GetNextBooleanChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.GetNextIntegerChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.Shuffle(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Shuffles the specified range using the Fisher-Yates algorithm.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.DebugPrintOperationPriorityList">
            <summary>
            Print the operation priority list, if debug is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.PCTStrategy.DebugPrintPriorityChangePoints">
            <summary>
            Print the priority change points, if debug is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.ProbabilisticRandomStrategy">
            <summary>
            A randomized scheduling strategy with increased probability
            to remain in the same scheduling choice.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.ProbabilisticRandomStrategy.NumberOfCoinFlips">
            <summary>
            Number of coin flips.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ProbabilisticRandomStrategy.#ctor(System.Int32,System.Int32,Microsoft.Coyote.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.ProbabilisticRandomStrategy" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ProbabilisticRandomStrategy.GetNextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.SystematicTesting.AsyncOperation},Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Boolean,Microsoft.Coyote.SystematicTesting.AsyncOperation@)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
            <param name="ops">Operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ProbabilisticRandomStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ProbabilisticRandomStrategy.ShouldCurrentMachineChange">
            <summary>
            Flip the coin a specified number of times.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy">
            <summary>
            A simple (but effective) randomized scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.RandomValueGenerator">
            <summary>
            Random value generator.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.MaxScheduledSteps">
            <summary>
            The maximum number of steps to schedule.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.#ctor(System.Int32,Microsoft.Coyote.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.InitializeNextIteration(System.UInt32)">
            <summary>
            Initializes the next iteration.
            </summary>
            <param name="iteration">The id of the next iteration.</param>
            <returns>True to start the specified iteration, else false to stop exploring.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.GetNextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.SystematicTesting.AsyncOperation},Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Boolean,Microsoft.Coyote.SystematicTesting.AsyncOperation@)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
            <param name="ops">Operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.GetNextBooleanChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.GetNextIntegerChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.RandomStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy">
            <summary>
            This strategy combines two given strategies, using them to schedule
            the prefix and suffix of an execution.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.PrefixStrategy">
            <summary>
            The prefix strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.SuffixStrategy">
            <summary>
            The suffix strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.#ctor(Microsoft.Coyote.SystematicTesting.SchedulingStrategy,Microsoft.Coyote.SystematicTesting.SchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.InitializeNextIteration(System.UInt32)">
            <summary>
            Initializes the next iteration.
            </summary>
            <param name="iteration">The id of the next iteration.</param>
            <returns>True to start the specified iteration, else false to stop exploring.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.GetNextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.SystematicTesting.AsyncOperation},Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Boolean,Microsoft.Coyote.SystematicTesting.AsyncOperation@)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
            <param name="ops">Operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.GetNextBooleanChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.GetNextIntegerChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ComboStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy">
            <summary>
            An interactive scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.Configuration">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.InputCache">
            <summary>
            The input cache.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.ExploredSteps">
            <summary>
            The number of explored steps.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.IO.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.InitializeNextIteration(System.UInt32)">
            <summary>
            Initializes the next iteration.
            </summary>
            <param name="iteration">The id of the next iteration.</param>
            <returns>True to start the specified iteration, else false to stop exploring.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.GetNextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.SystematicTesting.AsyncOperation},Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Boolean,Microsoft.Coyote.SystematicTesting.AsyncOperation@)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
            <param name="ops">Operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.GetNextBooleanChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.GetNextIntegerChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.Replay">
            <summary>
            Replays an earlier point of the execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.Jump">
            <summary>
            Jumps to a later point in the execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.AddInInputCache(System.Int32)">
            <summary>
            Adds in the input cache.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.RemoveFromInputCache(System.Int32)">
            <summary>
            Removes from the input cache.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.InteractiveStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy">
            <summary>
            A replaying scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.Configuration">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.ScheduleTrace">
            <summary>
            The Coyote program schedule trace.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.SuffixStrategy">
            <summary>
            The suffix strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.IsSchedulerFair">
            <summary>
            True if the scheduler that produced the schedule trace is fair, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.IsReplaying">
            <summary>
            True if the scheduler is replaying the trace, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.ErrorText">
            <summary>
            Text describing a replay error.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.SystematicTesting.ScheduleTrace,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.SystematicTesting.ScheduleTrace,System.Boolean,Microsoft.Coyote.SystematicTesting.SchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.InitializeNextIteration(System.UInt32)">
            <summary>
            Initializes the next iteration.
            </summary>
            <param name="iteration">The id of the next iteration.</param>
            <returns>True to start the specified iteration, else false to stop exploring.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.GetNextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.SystematicTesting.AsyncOperation},Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Boolean,Microsoft.Coyote.SystematicTesting.AsyncOperation@)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
            <param name="ops">Operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.GetNextBooleanChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.GetNextIntegerChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.Strategies.ReplayStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.SchedulingStrategy">
            <summary>
            Abstract scheduling strategy used during controlled testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.SchedulingStrategy.InitializeNextIteration(System.UInt32)">
            <summary>
            Initializes the next iteration.
            </summary>
            <param name="iteration">The id of the next iteration.</param>
            <returns>True to start the specified iteration, else false to stop exploring.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.SchedulingStrategy.GetNextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.SystematicTesting.AsyncOperation},Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Boolean,Microsoft.Coyote.SystematicTesting.AsyncOperation@)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
            <param name="ops">Operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.SchedulingStrategy.GetNextBooleanChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.SchedulingStrategy.GetNextIntegerChoice(Microsoft.Coyote.SystematicTesting.AsyncOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.SchedulingStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.SchedulingStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.SchedulingStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.SchedulingStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.SchedulingStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.ScheduleStep">
            <summary>
            Class implementing a program schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.ScheduleStep.Index">
            <summary>
            The unique index of this schedule step.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.ScheduleStep.Type">
            <summary>
            The type of this schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.ScheduleStep.ScheduledOperationId">
            <summary>
            The id of the scheduled operation. Only relevant if this is
            a regular schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.ScheduleStep.BooleanChoice">
            <summary>
            The non-deterministic boolean choice value. Only relevant if
            this is a choice schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.ScheduleStep.IntegerChoice">
            <summary>
            The non-deterministic integer choice value. Only relevant if
            this is a choice schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.ScheduleStep.Previous">
            <summary>
            Previous schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.ScheduleStep.Next">
            <summary>
            Next schedule step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleStep.CreateSchedulingChoice(System.Int32,System.UInt64)">
            <summary>
            Creates a schedule step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleStep.CreateNondeterministicBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Creates a nondeterministic boolean choice schedule step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleStep.CreateNondeterministicIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Creates a nondeterministic integer choice schedule step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleStep.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleStep.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.ScheduleStepType">
            <summary>
            The schedule step type.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.ScheduleTrace">
            <summary>
            Class implementing a program schedule trace. A trace is a series
            of transitions from some initial state to some end state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.ScheduleTrace.Steps">
            <summary>
            The steps of the schedule trace.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.ScheduleTrace.Count">
            <summary>
            The number of steps in the schedule trace.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.ScheduleTrace.Item(System.Int32)">
            <summary>
            Index for the schedule trace.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleTrace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.ScheduleTrace" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleTrace.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.ScheduleTrace" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleTrace.AddSchedulingChoice(System.UInt64)">
            <summary>
            Adds a scheduling choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleTrace.AddNondeterministicBooleanChoice(System.Boolean)">
            <summary>
            Adds a nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleTrace.AddNondeterministicIntegerChoice(System.Int32)">
            <summary>
            Adds a nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleTrace.Pop">
            <summary>
            Returns the latest schedule step and removes
            it from the trace.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleTrace.Peek">
            <summary>
            Returns the latest schedule step without removing it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleTrace.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleTrace.System#Collections#Generic#IEnumerable{Microsoft#Coyote#SystematicTesting#ScheduleStep}#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.ScheduleTrace.Push(Microsoft.Coyote.SystematicTesting.ScheduleStep)">
            <summary>
            Pushes a new step to the trace.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder">
            <summary>
            Represents a builder for asynchronous methods that return a <see cref="P:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.Task" />.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.MethodBuilder">
            <summary>
            The task builder to which most operations are delegated.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.Task">
            <summary>
            Gets the task for this builder.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.Create">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.Start``1(``0@)">
            <summary>
            Begins running the builder with the associated state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the specified state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.SetResult">
            <summary>
            Marks the task as successfully completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.SetException(System.Exception)">
            <summary>
            Marks the task as failed and binds the specified exception to the task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1">
            <summary>
            Represents a builder for asynchronous methods that return a <see cref="T:Microsoft.Coyote.Tasks.Task`1" />.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1.MethodBuilder">
            <summary>
            The task builder to which most operations are delegated.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1.Task">
            <summary>
            Gets the task for this builder.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1.Create">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1.Start``1(``0@)">
            <summary>
            Begins running the builder with the associated state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the specified state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1.SetResult(`0)">
            <summary>
            Marks the task as successfully completed.
            </summary>
            <param name="result">The result to use to complete the task.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
            <summary>
            Marks the task as failed and binds the specified exception to the task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable">
            <summary>
            Provides an awaitable object that is the outcome of invoking <see cref="M:Microsoft.Coyote.Tasks.Task.ConfigureAwait(System.Boolean)" />.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.GetAwaiter">
            <summary>
            Returns an awaiter for this awaitable object.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter">
            <summary>
            Provides an awaiter for an awaitable object. This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.IsCompleted">
            <summary>
            Gets a value that indicates whether the controlled task has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult">
            <summary>
            Ends the await on the completed task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1">
            <summary>
            Provides an awaitable object that enables configured awaits on a <see cref="T:Microsoft.Coyote.Tasks.Task`1" />.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.GetAwaiter">
            <summary>
            Returns an awaiter for this awaitable object.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter">
            <summary>
            Provides an awaiter for an awaitable object. This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.IsCompleted">
            <summary>
            Gets a value that indicates whether the controlled task has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult">
            <summary>
            Ends the await on the completed task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.AsyncLock">
            <summary>
            A non-reentrant mutual exclusion lock that can be acquired asynchronously
            in a first-in first-out order. During testing, the lock is automatically
            replaced with a controlled mocked version.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.AsyncLock.Awaiters">
            <summary>
            Queue of tasks awaiting to acquire the lock.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.AsyncLock.IsAcquired">
            <summary>
            True if the lock has been acquired, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.AsyncLock" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncLock.Create">
            <summary>
            Creates a new mutual exclusion lock.
            </summary>
            <returns>The asynchronous mutual exclusion lock.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncLock.AcquireAsync">
            <summary>
            Tries to acquire the lock asynchronously, and returns a task that completes
            when the lock has been acquired. The returned task contains a releaser that
            releases the lock when disposed. This is not a reentrant operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncLock.Release">
            <summary>
            Releases the lock.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.AsyncLock.Releaser">
            <summary>
            Releases the acquired <see cref="F:Microsoft.Coyote.Tasks.AsyncLock.Releaser.AsyncLock" /> when disposed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.AsyncLock.Releaser.AsyncLock">
            <summary>
            The acquired lock.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncLock.Releaser.#ctor(Microsoft.Coyote.Tasks.AsyncLock)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.AsyncLock.Releaser" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncLock.Releaser.Dispose">
            <summary>
            Releases the acquired lock.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.AsyncLock.Mock">
            <summary>
            Mock implementation of <see cref="T:Microsoft.Coyote.Tasks.AsyncLock" /> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.AsyncLock.Mock.Resource">
            <summary>
            The resource associated with this lock.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncLock.Mock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.AsyncLock.Mock" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncLock.Mock.AcquireAsync">
            <summary>
            Tries to acquire the lock asynchronously, and returns a task that completes
            when the lock has been acquired. The returned task contains a releaser that
            releases the lock when disposed. This is not a reentrant operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.AsyncLock.Mock.Release">
            <summary>
            Releases the lock.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.Semaphore">
            <summary>
            A semaphore that limits the number of tasks that can access a resource. During testing,
            the semaphore is automatically replaced with a controlled mocked version.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.Semaphore.Instance">
            <summary>
            Limits the number of tasks that can access a resource.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Semaphore.CurrentCount">
            <summary>
            Number of remaining tasks that can enter the semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.#ctor(System.Threading.SemaphoreSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.Semaphore" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new semaphore.
            </summary>
            <returns>The semaphore.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Wait">
            <summary>
            Blocks the current task until it can enter the semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Wait(System.TimeSpan)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a <see cref="T:System.TimeSpan" />
            that specifies the timeout.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" />
            that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents
            0 milliseconds to test the wait handle and return immediately.
            </param>
            <returns>True if the current task successfully entered the semaphore, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Wait(System.Int32)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a 32-bit signed integer
            that specifies the timeout.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely,
            or zero to test the state of the wait handle and return immediately.
            </param>
            <returns>True if the current task successfully entered the semaphore, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Wait(System.Threading.CancellationToken)">
            <summary>
            Blocks the current task until it can enter the semaphore, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Wait(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a <see cref="T:System.TimeSpan" />
            that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" />
            that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents
            0 milliseconds to test the wait handle and return immediately.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
            <returns>True if the current task successfully entered the semaphore, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Wait(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a 32-bit signed integer
            that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely,
            or zero to test the state of the wait handle and return immediately.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
            <returns>True if the current task successfully entered the semaphore, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.WaitAsync">
            <summary>
            Asynchronously waits to enter the semaphore.
            </summary>
            <returns>A task that will complete when the semaphore has been entered.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.WaitAsync(System.TimeSpan)">
            <summary>
            Asynchronously waits to enter the semaphore, using a <see cref="T:System.TimeSpan" />
            that specifies the timeout.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" />
            that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents
            0 milliseconds to test the wait handle and return immediately.
            </param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the semaphore, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.WaitAsync(System.Int32)">
            <summary>
            Asynchronously waits to enter the semaphore, using a 32-bit signed integer
            that specifies the timeout.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely,
            or zero to test the state of the wait handle and return immediately.
            </param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the semaphore, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the semaphore, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
            <returns>A task that will complete when the semaphore has been entered.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the semaphore, using a <see cref="T:System.TimeSpan" />
            that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" />
            that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents
            0 milliseconds to test the wait handle and return immediately.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the semaphore, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the semaphore, using a 32-bit signed integer
            that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely,
            or zero to test the state of the wait handle and return immediately.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the semaphore, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Release">
            <summary>
            Releases the semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Dispose">
            <summary>
            Releases resources used by the semaphore.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.Semaphore.Mock">
            <summary>
            Mock implementation of <see cref="T:Microsoft.Coyote.Tasks.Semaphore" /> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.Semaphore.Mock.Resource">
            <summary>
            The resource associated with this semaphore.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.Semaphore.Mock.MaxCount">
            <summary>
            The maximum number of requests that can be granted concurrently.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.Semaphore.Mock.NumAcquired">
            <summary>
            The number of requests that have been granted concurrently.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Semaphore.Mock.CurrentCount">
            <summary>
            Number of remaining tasks that can enter the semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.Semaphore.Mock" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.Wait">
            <summary>
            Blocks the current task until it can enter the semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.Wait(System.TimeSpan)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a <see cref="T:System.TimeSpan" />
            that specifies the timeout.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" />
            that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents
            0 milliseconds to test the wait handle and return immediately.
            </param>
            <returns>True if the current task successfully entered the semaphore, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.Wait(System.Int32)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a 32-bit signed integer
            that specifies the timeout.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely,
            or zero to test the state of the wait handle and return immediately.
            </param>
            <returns>True if the current task successfully entered the semaphore, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.Wait(System.Threading.CancellationToken)">
            <summary>
            Blocks the current task until it can enter the semaphore, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.Wait(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a <see cref="T:System.TimeSpan" />
            that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" />
            that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents
            0 milliseconds to test the wait handle and return immediately.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
            <returns>True if the current task successfully entered the semaphore, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.Wait(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a 32-bit signed integer
            that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely,
            or zero to test the state of the wait handle and return immediately.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
            <returns>True if the current task successfully entered the semaphore, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.WaitAsync">
            <summary>
            Asynchronously waits to enter the semaphore.
            </summary>
            <returns>A task that will complete when the semaphore has been entered.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.WaitAsync(System.TimeSpan)">
            <summary>
            Asynchronously waits to enter the semaphore, using a <see cref="T:System.TimeSpan" />
            that specifies the timeout.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" />
            that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents
            0 milliseconds to test the wait handle and return immediately.
            </param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the semaphore, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.WaitAsync(System.Int32)">
            <summary>
            Asynchronously waits to enter the semaphore, using a 32-bit signed integer
            that specifies the timeout.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely,
            or zero to test the state of the wait handle and return immediately.
            </param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the semaphore, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the semaphore, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
            <returns>A task that will complete when the semaphore has been entered.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the semaphore, using a <see cref="T:System.TimeSpan" />
            that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" />
            that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents
            0 milliseconds to test the wait handle and return immediately.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the semaphore, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the semaphore, using a 32-bit signed integer
            that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely,
            or zero to test the state of the wait handle and return immediately.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to observe.</param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the semaphore, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Semaphore.Mock.Release">
            <summary>
            Releases the semaphore.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.SynchronizedBlock">
            <summary>
            Provides a mechanism that synchronizes access to objects. It is implemented as a thin wrapper
            on <see cref="T:System.Threading.Monitor" />. During testing, the implementation is automatically replaced
            with a controlled mocked version. It can be used as a replacement of the lock keyword to allow
            systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.SyncObject">
            <summary>
            The object used for synchronization.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.IsLockTaken">
            <summary>
            True if the lock was taken, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.SynchronizedBlock" /> class.
            </summary>
            <param name="syncObject">The sync object to serialize access to.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Lock(System.Object)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Tasks.SynchronizedBlock" /> for synchronizing access
            to the specified object and enters the lock.
            </summary>
            <returns>The synchronized block.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.EnterLock">
            <summary>
            Enters the lock.
            </summary>
            <returns>The synchronized block.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Pulse">
            <summary>
            Notifies a thread in the waiting queue of a change in the locked object's state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.PulseAll">
            <summary>
            Notifies all waiting threads of a change in the object's state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Wait">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires
            the lock.
            </summary>
            <returns>True if the call returned because the caller reacquired the lock for the specified
            object. This method does not return if the lock is not reacquired.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Wait(System.Int32)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires
            the lock. If the specified time-out interval elapses, the thread enters the ready
            queue.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait before the thread enters the ready queue.</param>
            <returns>True if the lock was reacquired before the specified time elapsed; false if the
            lock was reacquired after the specified time elapsed. The method does not return
            until the lock is reacquired.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Wait(System.TimeSpan)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires
            the lock. If the specified time-out interval elapses, the thread enters the ready
            queue.
            </summary>
            <param name="timeout">A System.TimeSpan representing the amount of time to wait before the thread enters
            the ready queue.</param>
            <returns>True if the lock was reacquired before the specified time elapsed; false if the
            lock was reacquired after the specified time elapsed. The method does not return
            until the lock is reacquired.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the synchronized block.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Dispose">
            <summary>
            Releases resources used by the synchronized block.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock">
            <summary>
            Mock implementation of <see cref="T:Microsoft.Coyote.Tasks.SynchronizedBlock" /> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Cache">
            <summary>
            Cache from synchronized objects to mock instances.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Resource">
            <summary>
            The resource associated with this synchronization object.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Owner">
            <summary>
            The current owner of this synchronization object.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.WaitQueue">
            <summary>
            Wait queue of asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.ReadyQueue">
            <summary>
            Ready queue of asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.PulseQueue">
            <summary>
            Queue of nondeterministically buffered pulse operations to be performed after releasing
            the lock. This allows modeling delayed pulse operations by the operation system.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.LockCountMap">
            <summary>
            The number of times that the lock has been acquired per owner. The lock can only
            be acquired more than one times by the same owner. A count &gt; 1 indicates that the
            invocation by the current owner is reentrant.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.UseCount">
            <summary>
            Used to reference count accesses to this synchronized block
            so that it can be removed from the cache.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Create(System.Object)">
            <summary>
            Creates a new mock for the specified synchronization object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Find(System.Object)">
            <summary>
            Finds the mock associated with the specified synchronization object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.IsEntered">
            <summary>
            Determines whether the current thread holds the lock on the sync object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Lock">
            <summary>
            For use by ControlledMonitor only.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Pulse">
            <summary>
            Notifies a thread in the waiting queue of a change in the locked object's state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.PulseAll">
            <summary>
            Notifies all waiting threads of a change in the object's state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.SchedulePulse(Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.PulseOperation)">
            <summary>
            Schedules a pulse operation that will either execute immediately or be scheduled
            to execute after the current owner releases the lock. This nondeterministic action
            is controlled by the runtime to simulate scenarios where the pulse is delayed by
            the operation system.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.DrainPulseQueue">
            <summary>
            Drains the pulse queue, if it contains one or more buffered pulse operations.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Pulse(Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.PulseOperation)">
            <summary>
            Invokes the pulse operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Wait">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires
            the lock.
            </summary>
            <returns>True if the call returned because the caller reacquired the lock for the specified
            object. This method does not return if the lock is not reacquired.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Wait(System.Int32)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires
            the lock. If the specified time-out interval elapses, the thread enters the ready
            queue.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait before the thread enters the ready queue.</param>
            <returns>True if the lock was reacquired before the specified time elapsed; false if the
            lock was reacquired after the specified time elapsed. The method does not return
            until the lock is reacquired.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Wait(System.TimeSpan)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires
            the lock. If the specified time-out interval elapses, the thread enters the ready
            queue.
            </summary>
            <param name="timeout">A System.TimeSpan representing the amount of time to wait before the thread enters
            the ready queue.</param>
            <returns>True if the lock was reacquired before the specified time elapsed; false if the
            lock was reacquired after the specified time elapsed. The method does not return
            until the lock is reacquired.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.UnlockNextReady">
            <summary>
            Assigns the lock to the next operation waiting in the ready queue, if there is one,
            following the FIFO semantics of <see cref="T:System.Threading.Monitor" />.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the synchronized block.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.PulseOperation">
            <summary>
            The type of a pulse operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.PulseOperation.Next">
            <summary>
            Pulses the next waiting operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.SynchronizedBlock.Mock.PulseOperation.All">
            <summary>
            Pulses all waiting operations.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.Task">
            <summary>
            Represents an asynchronous operation. Each <see cref="T:Microsoft.Coyote.Tasks.Task" /> is a thin wrapper over
            <see cref="T:System.Threading.Tasks.Task" /> and each call simply invokes the wrapped task. During
            testing, a <see cref="T:Microsoft.Coyote.Tasks.Task" /> is controlled by the runtime and systematically interleaved
            with other asynchronous operations to find bugs.
            </summary>
            <remarks>
            See <see href="/coyote/learn/programming-models/async/overview">Programming model: asynchronous tasks</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Task.CompletedTask">
            <summary>
            A <see cref="T:Microsoft.Coyote.Tasks.Task" /> that has completed successfully.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Task.CurrentId">
            <summary>
            Returns the id of the currently executing <see cref="T:Microsoft.Coyote.Tasks.Task" />.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.Task.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.Task.InternalTask">
            <summary>
            Internal task used to execute the work.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Task.Id">
            <summary>
            The id of this task.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Task.UncontrolledTask">
            <summary>
            The uncontrolled <see cref="T:System.Threading.Tasks.Task" /> that is wrapped inside this
            controlled <see cref="T:Microsoft.Coyote.Tasks.Task" />.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Task.IsCompleted">
            <summary>
            Value that indicates whether the task has completed.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Task.IsCanceled">
            <summary>
            Value that indicates whether the task completed execution due to being canceled.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Task.IsFaulted">
            <summary>
            Value that indicates whether the task completed due to an unhandled exception.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Task.Exception">
            <summary>
            Gets the <see cref="T:System.AggregateException" /> that caused the task
            to end prematurely. If the task completed successfully or has not yet
            thrown any exceptions, this will return null.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Task.Status">
            <summary>
            The status of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.Task" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.FromResult``1(``0)">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task`1" /> that is completed successfully with the specified result.
            </summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="result">The result to store into the completed task.</param>
            <returns>The successfully completed task.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that is completed due to
            cancellation with a specified cancellation token.
            </summary>
            <param name="cancellationToken">The cancellation token with which to complete the task.</param>
            <returns>The canceled task.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task`1" /> that is completed due to
            cancellation with a specified cancellation token.
            </summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="cancellationToken">The cancellation token with which to complete the task.</param>
            <returns>The canceled task.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.FromException(System.Exception)">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that is completed with a specified exception.
            </summary>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.FromException``1(System.Exception)">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task`1" /> that is completed with a specified exception.
            </summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Run(System.Action)">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:Microsoft.Coyote.Tasks.Task" />
            object that represents that work. A cancellation token allows the work to be cancelled.
            </summary>
            <param name="action">The work to execute asynchronously.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:Microsoft.Coyote.Tasks.Task" />
            object that represents that work.
            </summary>
            <param name="action">The work to execute asynchronously.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the work.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Run(System.Func{Microsoft.Coyote.Tasks.Task})">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for
            the <see cref="T:Microsoft.Coyote.Tasks.Task" /> returned by the function.
            </summary>
            <param name="function">The work to execute asynchronously.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Run(System.Func{Microsoft.Coyote.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for
            the <see cref="T:Microsoft.Coyote.Tasks.Task" /> returned by the function. A cancellation
            token allows the work to be cancelled.
            </summary>
            <param name="function">The work to execute asynchronously.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the work.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Run``1(System.Func{Microsoft.Coyote.Tasks.Task{``0}})">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            <see cref="T:Microsoft.Coyote.Tasks.Task`1" /> returned by the function.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Run``1(System.Func{Microsoft.Coyote.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            <see cref="T:Microsoft.Coyote.Tasks.Task`1" /> returned by the function. A cancellation
            token allows the work to be cancelled.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the work.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Run``1(System.Func{``0})">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:Microsoft.Coyote.Tasks.Task" />
            object that represents that work.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a <see cref="T:Microsoft.Coyote.Tasks.Task" />
            object that represents that work. A cancellation token allows the work to be cancelled.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the work.</param>
            <returns>Task that represents the work to run asynchronously.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Delay(System.Int32)">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that completes after a time delay.
            </summary>
            <param name="millisecondsDelay">
            The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.
            </param>
            <returns>Task that represents the time delay.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that completes after a time delay.
            </summary>
            <param name="millisecondsDelay">
            The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.
            </param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the delay.</param>
            <returns>Task that represents the time delay.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Delay(System.TimeSpan)">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that completes after a specified time interval.
            </summary>
            <param name="delay">
            The time span to wait before completing the returned task, or TimeSpan.FromMilliseconds(-1)
            to wait indefinitely.
            </param>
            <returns>Task that represents the time delay.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that completes after a specified time interval.
            </summary>
            <param name="delay">
            The time span to wait before completing the returned task, or TimeSpan.FromMilliseconds(-1)
            to wait indefinitely.
            </param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the delay.</param>
            <returns>Task that represents the time delay.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WhenAll(Microsoft.Coyote.Tasks.Task[])">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that will complete when all tasks
            in the specified array have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>Task that represents the completion of all of the specified tasks.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Tasks.Task})">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>Task that represents the completion of all of the specified tasks.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WhenAll``1(Microsoft.Coyote.Tasks.Task{``0}[])">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that will complete when all tasks
            in the specified array have completed.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>Task that represents the completion of all of the specified tasks.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Tasks.Task{``0}})">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that will complete when all tasks
            in the specified enumerable collection have completed.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>Task that represents the completion of all of the specified tasks.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WhenAny(Microsoft.Coyote.Tasks.Task[])">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that will complete when any task
            in the specified array have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Tasks.Task})">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WhenAnyTaskCompletesInProductionAsync(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Tasks.Task})">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WhenAny``1(Microsoft.Coyote.Tasks.Task{``0}[])">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that will complete when any task
            in the specified array have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Tasks.Task{``0}})">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WhenAnyTaskCompletesInProductionAsync``1(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Tasks.Task{``0}})">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.Tasks.Task" /> that will complete when any task
            in the specified enumerable collection have completed.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WaitAll(Microsoft.Coyote.Tasks.Task[])">
            <summary>
            Waits for all of the provided <see cref="T:Microsoft.Coyote.Tasks.Task" /> objects to complete execution.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WaitAll(Microsoft.Coyote.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for all of the provided <see cref="T:Microsoft.Coyote.Tasks.Task" /> objects to complete
            execution within a specified time interval.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="timeout">
            A time span that represents the number of milliseconds to wait, or
            TimeSpan.FromMilliseconds(-1) to wait indefinitely.
            </param>
            <returns>True if all tasks completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WaitAll(Microsoft.Coyote.Tasks.Task[],System.Int32)">
            <summary>
            Waits for all of the provided <see cref="T:Microsoft.Coyote.Tasks.Task" /> objects to complete
            execution within a specified number of milliseconds.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <returns>True if all tasks completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WaitAll(Microsoft.Coyote.Tasks.Task[],System.Threading.CancellationToken)">
            <summary>
            Waits for all of the provided <see cref="T:Microsoft.Coyote.Tasks.Task" /> objects to complete
            execution unless the wait is cancelled.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the wait.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WaitAll(Microsoft.Coyote.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided <see cref="T:Microsoft.Coyote.Tasks.Task" /> objects to complete
            execution within a specified number of milliseconds or until a cancellation
            token is cancelled.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the wait.</param>
            <returns>True if all tasks completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WaitAny(Microsoft.Coyote.Tasks.Task[])">
            <summary>
            Waits for any of the provided <see cref="T:Microsoft.Coyote.Tasks.Task" /> objects to complete execution.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <returns>The index of the completed task in the tasks array.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WaitAny(Microsoft.Coyote.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for any of the provided <see cref="T:Microsoft.Coyote.Tasks.Task" /> objects to complete
            execution within a specified time interval.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="timeout">
            A time span that represents the number of milliseconds to wait, or
            TimeSpan.FromMilliseconds(-1) to wait indefinitely.
            </param>
            <returns>The index of the completed task in the tasks array, or -1 if the timeout occurred.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WaitAny(Microsoft.Coyote.Tasks.Task[],System.Int32)">
            <summary>
            Waits for any of the provided <see cref="T:Microsoft.Coyote.Tasks.Task" /> objects to complete
            execution within a specified number of milliseconds.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <returns>The index of the completed task in the tasks array, or -1 if the timeout occurred.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WaitAny(Microsoft.Coyote.Tasks.Task[],System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided <see cref="T:Microsoft.Coyote.Tasks.Task" /> objects to complete
            execution unless the wait is cancelled.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the wait.</param>
            <returns>The index of the completed task in the tasks array.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.WaitAny(Microsoft.Coyote.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided <see cref="T:Microsoft.Coyote.Tasks.Task" /> objects to complete
            execution within a specified number of milliseconds or until a cancellation
            token is cancelled.
            </summary>
            <param name="tasks">The tasks to wait for completion.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the wait.</param>
            <returns>The index of the completed task in the tasks array, or -1 if the timeout occurred.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Yield">
            <summary>
            Creates an awaitable that asynchronously yields back to the current context when awaited.
            </summary>
            <remarks>
            You can use `await Task.Yield()` in an asynchronous method to force the method to complete
            asynchronously. During systematic testing, the underlying scheduling strategy can use this
            as a hint on how to better prioritize this work relative to other work that may be pending.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Wait">
            <summary>
            Waits for the task to complete execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Wait(System.TimeSpan)">
            <summary>
            Waits for the task to complete execution within a specified time interval.
            </summary>
            <param name="timeout">
            A time span that represents the number of milliseconds to wait, or
            TimeSpan.FromMilliseconds(-1) to wait indefinitely.
            </param>
            <returns>True if the task completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Wait(System.Int32)">
            <summary>
            Waits for the task to complete execution within a specified number of milliseconds.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <returns>True if the task completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Wait(System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete execution. The wait terminates if
            a cancellation token is canceled before the task completes.
            </summary>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete execution. The wait terminates if a timeout interval
            elapses or a cancellation token is canceled before the task completes.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>True if the task completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.GetAwaiter">
            <summary>
            Gets an awaiter for this awaitable.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.ConfigureAwait(System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
            <param name="continueOnCapturedContext">
            True to attempt to marshal the continuation back to the original context captured; otherwise, false.
            </param>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.ExploreContextSwitch">
            <summary>
            Injects a context switch point that can be systematically explored during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:Microsoft.Coyote.Tasks.Task" />, releasing all of its unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task.Dispose">
            <summary>
            Disposes the <see cref="T:Microsoft.Coyote.Tasks.Task" />, releasing all of its unmanaged resources.
            </summary>
            <remarks>
            Unlike most of the members of <see cref="T:Microsoft.Coyote.Tasks.Task" />, this method is not thread-safe.
            </remarks>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.Task`1">
            <summary>
            Represents an asynchronous operation that can return a value. Each <see cref="T:Microsoft.Coyote.Tasks.Task`1" /> is a thin
            wrapper over <see cref="T:System.Threading.Tasks.Task`1" /> and each call simply invokes the wrapped task. During
            testing, a <see cref="T:Microsoft.Coyote.Tasks.Task" /> is controlled by the runtime and systematically interleaved with other
            asynchronous operations to find bugs.
            </summary>
            <typeparam name="TResult">The type of the produced result.</typeparam>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Task`1.UncontrolledTask">
            <summary>
            The uncontrolled <see cref="T:System.Threading.Tasks.Task`1" /> that is wrapped inside this
            controlled <see cref="T:Microsoft.Coyote.Tasks.Task`1" />.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.Task`1.Result">
            <summary>
            Gets the result value of this task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task`1.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.Task`1" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task`1.GetAwaiter">
            <summary>
            Gets an awaiter for this awaitable.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.Task`1.ConfigureAwait(System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
            <param name="continueOnCapturedContext">
            True to attempt to marshal the continuation back to the original context captured; otherwise, false.
            </param>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.TaskAwaiter">
            <summary>
            Implements a <see cref="T:Microsoft.Coyote.Tasks.Task" /> awaiter. This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.TaskAwaiter.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.TaskAwaiter.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.TaskAwaiter.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.TaskAwaiter.IsCompleted">
            <summary>
            Gets a value that indicates whether the controlled task has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskAwaiter.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.TaskAwaiter" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskAwaiter.GetResult">
            <summary>
            Ends the wait for the completion of the controlled task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Sets the action to perform when the controlled task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that is invoked when the controlled task completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.TaskAwaiter`1">
            <summary>
            Implements a <see cref="T:Microsoft.Coyote.Tasks.Task" /> awaiter. This type is intended for compiler use only.
            </summary>
            <typeparam name="TResult">The type of the produced result.</typeparam>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.TaskAwaiter`1.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.TaskAwaiter`1.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.TaskAwaiter`1.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.TaskAwaiter`1.IsCompleted">
            <summary>
            Gets a value that indicates whether the controlled task has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskAwaiter`1.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.TaskAwaiter`1" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskAwaiter`1.GetResult">
            <summary>
            Ends the wait for the completion of the controlled task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskAwaiter`1.OnCompleted(System.Action)">
            <summary>
            Sets the action to perform when the controlled task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskAwaiter`1.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that is invoked when the controlled task completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.TaskCompletionSource">
            <summary>
            Represents the producer side of a task unbound to a delegate, providing access to the consumer
            side through the <see cref="P:Microsoft.Coyote.Tasks.TaskCompletionSource`1.Task" /> property.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource.Create``1">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Tasks.TaskCompletionSource`1" /> instance.
            </summary>
            <typeparam name="TResult">The type of the result value assocatied with this task completion source.</typeparam>
            <returns>The task completion source.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1">
            <summary>
            Mock implementation of <see cref="T:Microsoft.Coyote.Tasks.TaskCompletionSource`1" /> that
            can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.Resource">
            <summary>
            The resource associated with this task completion source.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.CancellationTokenSource">
            <summary>
            The cancellation token source.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.AwaiterTask">
            <summary>
            A task that can be awaited until the task completion source completes.
            </summary>
            <remarks>
            Cached to avoid allocating a new task on each <see cref="P:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.Task" /> access.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.Task">
            <summary>
            Gets the task created by this task completion source.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.SetResult(`0)" />
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.TrySetResult(`0)" />
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.SetCanceled">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.TrySetCanceled" />
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.SetException(System.Exception)" />
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.TrySetException(System.Exception)" />
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.CompleteWithStatus(System.Threading.Tasks.TaskStatus,`0,System.Exception)">
            <summary>
            Completes the task completion source with the specified status.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource.Mock`1.TryCompleteWithStatus(System.Threading.Tasks.TaskStatus,`0,System.Exception)">
            <summary>
            Tries to complete the task completion source with the specified status.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.TaskCompletionSource`1">
            <summary>
            Represents the producer side of a task unbound to a delegate, providing access to the consumer
            side through the <see cref="P:Microsoft.Coyote.Tasks.TaskCompletionSource`1.Task" /> property.
            </summary>
            <typeparam name="TResult">The type of the result value assocatied with this task completion source.</typeparam>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.TaskCompletionSource`1.Instance">
            <summary>
            The internal task completion source.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.TaskCompletionSource`1.ResultTask">
            <summary>
            The task containing the result.
            </summary>
            <remarks>
            Cached to avoid allocating a new task wrapper on each <see cref="P:Microsoft.Coyote.Tasks.TaskCompletionSource`1.Task" /> access.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.TaskCompletionSource`1.Task">
            <summary>
            Gets the task created by this task completion source.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.TaskCompletionSource`1" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource`1.SetResult(`0)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.
            </summary>
            <param name="result">The result value to bind to this task.</param>
            <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:Microsoft.Coyote.Tasks.Task`1" />
            is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.
            </summary>
            <param name="result">The result value to bind to this task.</param>
            <returns>True if the operation was successful; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource`1.SetCanceled">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:Microsoft.Coyote.Tasks.Task`1" />
            is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource`1.TrySetCanceled">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.
            </summary>
            <returns>True if the operation was successful; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state
            and binds it to the specified exception.
            </summary>
            <param name="exception">The exception to bind to this task.</param>
            <exception cref="T:System.InvalidOperationException">The underlying <see cref="T:Microsoft.Coyote.Tasks.Task`1" />
            is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state
            and binds it to the specified exception.
            </summary>
            <param name="exception">The exception to bind to this task.</param>
            <returns>True if the operation was successful; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.TaskExtensions">
            <summary>
            Extension methods for <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskExtensions.WrapInControlledTask(System.Threading.Tasks.Task)">
            <summary>
            Returns a dummy controlled <see cref="T:Microsoft.Coyote.Tasks.Task" /> that wraps this uncontrolled <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
            <remarks>
            The returned dummy controlled <see cref="T:Microsoft.Coyote.Tasks.Task" /> does not actually take control of the uncontrolled
            <see cref="T:System.Threading.Tasks.Task" /> during systematic testing, so this method should only be used to cross
            an interface boundary where a controlled <see cref="T:Microsoft.Coyote.Tasks.Task" /> must be temporarily converted into an
            uncontrolled <see cref="T:System.Threading.Tasks.Task" /> and then coverted back to a controlled <see cref="T:Microsoft.Coyote.Tasks.Task" />.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.TaskExtensions.WrapInControlledTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Returns a dummy controlled <see cref="T:Microsoft.Coyote.Tasks.Task`1" /> that wraps this uncontrolled
            <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
            <remarks>
            The returned dummy controlled <see cref="T:Microsoft.Coyote.Tasks.Task`1" /> does not actually take control of the
            uncontrolled <see cref="T:System.Threading.Tasks.Task`1" /> during systematic testing, so this method
            should only be used to cross an interface boundary where a controlled <see cref="T:Microsoft.Coyote.Tasks.Task`1" />
            must be temporarily converted into an uncontrolled <see cref="T:System.Threading.Tasks.Task`1" /> and
            then coverted back to a controlled <see cref="T:Microsoft.Coyote.Tasks.Task`1" />.
            </remarks>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.YieldAwaitable">
            <summary>
            Implements an awaitable that asynchronously yields back to the current context when awaited.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.YieldAwaitable.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.YieldAwaitable.GetAwaiter">
            <summary>
            Gets an awaiter for this awaitable.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.YieldAwaitable.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.YieldAwaitable" /> struct.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Tasks.YieldAwaitable.YieldAwaiter">
            <summary>
            Provides an awaiter that switches into a target environment.
            This type is intended for compiler use only.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.YieldAwaitable.YieldAwaiter.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Tasks.YieldAwaitable.YieldAwaiter.Awaiter">
            <summary>
            The internal yield awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Tasks.YieldAwaitable.YieldAwaiter.IsCompleted">
            <summary>
            Gets a value that indicates whether a yield is not required.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.YieldAwaitable.YieldAwaiter.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Tasks.YieldAwaitable.YieldAwaiter" /> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.YieldAwaitable.YieldAwaiter.GetResult">
            <summary>
            Ends the await operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.YieldAwaitable.YieldAwaiter.OnCompleted(System.Action)">
            <summary>
            Posts the continuation action back to the current context.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Tasks.YieldAwaitable.YieldAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Posts the continuation action back to the current context.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Profiler">
            <summary>
            The Coyote profiler.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Profiler.StartMeasuringExecutionTime">
            <summary>
            Starts measuring execution time.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Profiler.StopMeasuringExecutionTime">
            <summary>
            Stops measuring execution time.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Profiler.Results">
            <summary>
            Returns profiling results.
            </summary>
        </member>
    </members>
</doc>