cscope 15 $HOME/concurrency-bugs/memcached-127/libmemcached-0.49               0001357649
	@build/config.h

5 #i‚de‡
__CONFIG_H__


6 
	#__CONFIG_H__


	)

9 #i‡
deföed
–
_SYS_FEATURE_TESTS_H
Ë|| deföed(
_FEATURES_H
)

13 
	~<c⁄fig/t›.h
>

17 #i‚de‡
CONFIG_H


18 
	#CONFIG_H


	)

20 #ifde‡
_SYS_FEATURE_TESTS_H


24 #ifde‡
WIN32


25 
	#_WIN32_WINNT
 0x0501

	)

33 
	#CINTTYPES_H
 <
å1
/
cöây≥s
>

	)

36 
	#CSTDINT_H
 <
å1
/
c°döt
>

	)

42 
	#HAVE_ASSERT_H
 1

	)

54 
	#HAVE_BACKTRACE
 1

	)

57 
	#HAVE_BACKTRACE_SYMBOLS_FD
 1

	)

60 
	#HAVE_CLOCK_GETTIME
 1

	)

64 
	#HAVE_DECL_MADVISE
 0

	)

67 
	#HAVE_DLFCN_H
 1

	)

73 
	#HAVE_EVENT_BASE_FREE
 1

	)

76 
	#HAVE_EVENT_BASE_GET_METHOD
 1

	)

79 
	#HAVE_EVENT_BASE_NEW
 1

	)

82 
	#HAVE_EXECINFO_H
 1

	)

85 
	#HAVE_FNMATCH_H
 1

	)

88 
	#HAVE_GCC_ATOMIC_BUILTINS
 1

	)

91 
	#HAVE_GETLINE
 1

	)

100 
	#HAVE_INTTYPES_H
 1

	)

109 
	#HAVE_LIBEVENT
 1

	)

115 
	#HAVE_LIBMEMCACHEDUTIL
 1

	)

140 
	#HAVE_MEMORY_H
 1

	)

143 
	#HAVE_MSG_DONTWAIT
 1

	)

146 
	#HAVE_MSG_MORE
 1

	)

149 
	#HAVE_MSG_NOSIGNAL
 1

	)

152 
	#HAVE_MURMUR_HASH
 1

	)

164 
	#HAVE_POLL_H
 1

	)

170 
	#HAVE_PTHREAD
 1

	)

176 
	#HAVE_PTHREAD_ATTR_GETSTACKSIZE
 1

	)

182 
	#HAVE_PTHREAD_ATTR_SETSCHEDPARAM
 1

	)

185 
	#HAVE_PTHREAD_ATTR_SETSCOPE
 1

	)

188 
	#HAVE_PTHREAD_ATTR_SETSTACKSIZE
 1

	)

197 
	#HAVE_PTHREAD_KEY_DELETE
 1

	)

200 
	#HAVE_PTHREAD_RWLOCK_RDLOCK
 1

	)

209 
	#HAVE_PTHREAD_SETSCHEDPARAM
 1

	)

212 
	#HAVE_PTHREAD_SIGMASK
 1

	)

221 
	#HAVE_PTHREAD_YIELD_ZERO_ARG
 1

	)

224 
	#HAVE_RCVTIMEO
 1

	)

227 
	#HAVE_READDIR_R
 1

	)

233 
	#HAVE_SIGWAIT
 1

	)

236 
	#HAVE_SNDTIMEO
 1

	)

239 
	#HAVE_STDINT_H
 1

	)

242 
	#HAVE_STDLIB_H
 1

	)

245 
	#HAVE_STRINGS_H
 1

	)

248 
	#HAVE_STRING_H
 1

	)

254 
	#HAVE_SYS_SOCKET_H
 1

	)

257 
	#HAVE_SYS_STAT_H
 1

	)

260 
	#HAVE_SYS_TYPES_H
 1

	)

263 
	#HAVE_SYS_WAIT_H
 1

	)

266 
	#HAVE_UCONTEXT_H
 1

	)

269 
	#HAVE_UNISTD_H
 1

	)

276 
	#HAVE_VISIBILITY
 1

	)

282 
	#HOST_CPU
 "x86_64"

	)

285 
	#HOST_OS
 "löux-gnu"

	)

288 
	#HOST_VENDOR
 "unknown"

	)

292 
	#LT_OBJDIR
 ".libs/"

	)

295 
	#MEMCACHED_BINARY
 "/u§/loˇl/bö/memˇched"

	)

304 
	#PACKAGE
 "libmemˇched"

	)

307 
	#PACKAGE_BUGREPORT
 "hâp://libmemˇched.‹g/"

	)

310 
	#PACKAGE_NAME
 "libmemˇched"

	)

313 
	#PACKAGE_STRING
 "libmemˇched 0.49"

	)

316 
	#PACKAGE_TARNAME
 "libmemˇched"

	)

319 
	#PACKAGE_URL
 ""

	)

322 
	#PACKAGE_VERSION
 "0.49"

	)

325 
	#PANDORA_RELEASE_VERSION
 "0.49"

	)

335 
	#SIZEOF_LONG_LONG
 8

	)

338 
	#SIZEOF_OFF_T
 8

	)

341 
	#SIZEOF_SIZE_T
 8

	)

344 
	#STDCXX_98_HEADERS


	)

347 
	#STDC_HEADERS
 1

	)

350 
	#TARGET_CPU
 "x86_64"

	)

353 
	#TARGET_OS
 "löux-gnu"

	)

359 
	#TARGET_OS_LINUX
 1

	)

371 
	#TARGET_VENDOR
 "unknown"

	)

377 
	#TIME_WITH_SYS_TIME
 1

	)

389 #i‚de‡
_ALL_SOURCE


390 
	#_ALL_SOURCE
 1

	)

393 #i‚de‡
_GNU_SOURCE


394 
	#_GNU_SOURCE
 1

	)

397 #i‚de‡
_POSIX_PTHREAD_SEMANTICS


398 
	#_POSIX_PTHREAD_SEMANTICS
 1

	)

401 #i‚de‡
_TANDEM_SOURCE


402 
	#_TANDEM_SOURCE
 1

	)

405 #i‚de‡
__EXTENSIONS__


406 
	#__EXTENSIONS__
 1

	)

411 
	#VERSION
 "0.49"

	)

418 #i‡
deföed
 
AC_APPLE_UNIVERSAL_BUILD


419 #i‡
deföed
 
__BIG_ENDIAN__


420 
	#WORDS_BIGENDIAN
 1

	)

423 #i‚de‡
WORDS_BIGENDIAN


429 #i‚de‡
_DARWIN_USE_64_BIT_INODE


430 
	#_DARWIN_USE_64_BIT_INODE
 1

	)

465 
	#__STDC_LIMIT_MACROS
 1

	)

472 #i‚de‡
__˝lu•lus


479 
	#ª°ri˘
 
__ª°ri˘


	)

485 #i‡
deföed
 
__SUNPRO_CC
 && !deföed 
__RESTRICT


486 
	#_Re°ri˘


	)

487 
	#__ª°ri˘__


	)

498 #i‚de‡
HAVE_SYS_SOCKET_H


499 
	#SHUT_RD
 
SD_RECEIVE


	)

500 
	#SHUT_WR
 
SD_SEND


	)

501 
	#SHUT_RDWR
 
SD_BOTH


	)

506 #i‡
deföed
(
__˝lu•lus
)

507 #ö˛udê
CSTDINT_H


508 #ö˛udê
CINTTYPES_H


510 
	~<°döt.h
>

511 
	~<öây≥s.h
>

514 #i‡!
deföed
(
HAVE_ULONG
Ë&& !deföed(
__USE_MISC
)

515 
	#HAVE_ULONG
 1

	)

516 
	tul⁄g
;

526 #ifde‡
TARGET_OS_WINDOWS


527 
	#øndom
(Ë
	`ønd
()

	)

528 
	#§™dom
(
a
Ë
	`§™d
◊)

	)

529 
	#gë_sockë_î∫o
(Ë
	`WSAGëLa°Eº‹
()

	)

531 
	#INVALID_SOCKET
 -1

	)

532 
	#SOCKET_ERROR
 -1

	)

533 
	#˛o£sockë
(
a
Ë
	`˛o£
◊)

	)

534 
	#gë_sockë_î∫o
(Ë
î∫o


	)

537 #i‡
deföed
(
__˝lu•lus
)

538 #i‡
deföed
(
DEBUG
)

539 
	~<ˇs£π
>

540 
	~<c°ddef
>

542 
	gãm∂©e
<
ty≥«me
 
	gTo
,Åy≥«mê
	gFrom
>

543 
ölöe
 
To
 
	$im∂icô_ˇ°
(
From
 c⁄° &
f
) {

544  
f
;

545 
	}
}

546 
	gãm∂©e
<
ty≥«me
 
	gTo
,Åy≥«mê
	gFrom
>

547 
ölöe
 
To
 
	$down_ˇ°
(
From
* 
f
) {

552 i‡(
Ál£
) {

553 
im∂icô_ˇ°
<
From
*, 
To
>(0);

556 #i‡
	`deföed
(
DEBUG
)

557 
	`as£π
(
f
 =
NULL
 || 
dy«mic_ˇ°
<
To
>(f) != NULL);

559  
°©ic_ˇ°
<
To
>(
f
);

560 
	}
}

567 #ifde‡
HAVE_SYS_WAIT_H


568 
	~<sys/waô.h
>

571 #ifde‡
HAVE_FNMATCH_H


572 
	~<‚m©ch.h
>

575 #ifde‡
HAVE_POLL_H


576 
	~<pﬁl.h
>

578 
	~"pﬁl/pﬁl.h
"

588 #ifde‡
WIN32


589 
	~"wö32/wøµîs.h
"

590 
	#gë_sockë_î∫o
(Ë
	`WSAGëLa°Eº‹
()

	)

592 
	#INVALID_SOCKET
 -1

	)

593 
	#SOCKET_ERROR
 -1

	)

594 
	#˛o£sockë
(
a
Ë
	`˛o£
◊)

	)

595 
	#gë_sockë_î∫o
(Ë
î∫o


	)

598 #i‚de‡
HAVE_MSG_NOSIGNAL


599 
	#MSG_NOSIGNAL
 0

	)

602 #i‚de‡
HAVE_MSG_DONTWAIT


603 
	#MSG_DONTWAIT
 0

	)

606 #i‚de‡
HAVE_MSG_MORE


607 
	#MSG_MORE
 0

	)

614 #ifde‡
__˝lu•lus


615 
	~<c°dio
>

616 
	#PANDORA_PRINTSTACK_STD_PREFIX
 
°d
::

	)

618 
	~<°dio.h
>

619 
	#PANDORA_PRINTSTACK_STD_PREFIX


	)

622 #i‡
deföed
(
HAVE_UCONTEXT_H
Ë&& deföed(
HAVE_PRINTSTACK
)

623 
	~<uc⁄ãxt.h
>

624 
	#∑nd‹a_¥öt_ˇŒ°ack
(
a
) \

625 
	`¥öt°ack
(
PANDORA_PRINTSTACK_STD_PREFIX
 
	`fûío
(
a
))

	)

626 #ñi‡
deföed
(
HAVE_EXECINFO_H
Ë&& deföed(
HAVE_BACKTRACE
Ë&& deföed(
HAVE_BACKTRACE_SYMBOLS_FD
)

628 
	~<execöfo.h
>

630 
	#∑nd‹a_¥öt_ˇŒ°ack
(
a
) \

632 *
°ack
[100]; \

633 
dïth
 = 
	`backåa˚
(
°ack
, 100); \

634 
	`backåa˚_symbﬁs_fd
(
°ack
, 
dïth
, 
PANDORA_PRINTSTACK_STD_PREFIX
 
	`fûío
(
a
)); \

635 }

	)

636 #ñi‡
deföed
(
HAVE_EXECINFO_H
Ë&& deföed(
HAVE_BACKTRACE
Ë&& deföed(
HAVE_BACKTRACE_SYMBOLS
Ë&& !deföed(
HAVE_BACKTRACE_SYMBOLS_FD
)

638 
	~<execöfo.h
>

640 
	#∑nd‹a_¥öt_ˇŒ°ack
(
a
) \

642 *
°ack
[100]; \

643 
dïth

	`backåa˚
(
°ack
, 100); \

644 **
symbﬁ

	`backåa˚_symbﬁs
(
°ack
, 
dïth
); \

645 
x
0; x < 
size
; ++x) \

646 
PANDORA_PRINTSTACK_STD_PREFIX
 
	`Ârötf
(
a
, "%s\n", 
symbﬁ
[
x
]); \

647 }

	)

649 
	#∑nd‹a_¥öt_ˇŒ°ack
(
a
) \

650 
PANDORA_PRINTSTACK_STD_PREFIX
 
	`Ârötf
(
a
, \

651 "Sèckdum∞nŸ suµ‹ãd f‹Åhi†∂©f‹m\n");

	)

	@build/config/top.h

2 #i‡
deföed
(
i386
Ë&& !deföed(
__i386__
)

3 
	#__i386__


	)

6 #i‡
deföed
(
_FILE_OFFSET_BITS
)

7 #unde‡
_FILE_OFFSET_BITS


	@build/libhashkit/configure.h

8 #i‚de‡
LIBHASHKIT_CONFIGURE_H


9 
	#LIBHASHKIT_CONFIGURE_H


	)

11 #ifde‡
__˝lu•lus


15 #ifde‡
__˝lu•lus


	@build/libmemcached/configure.h

12 #i‚de‡
__LIBMEMCACHED_CONFIGURE_H


13 
	#__LIBMEMCACHED_CONFIGURE_H


	)

15 #ifde‡
__˝lu•lus


22 
	#LIBMEMCACHED_VERSION_STRING
 "0.49"

	)

23 
	#LIBMEMCACHED_VERSION_HEX
 0x00049000

	)

25 #ifde‡
__˝lu•lus


	@clients/client_options.h

12 #i‚de‡
__CLIENT_OPTIONS_H__


13 
	#__CLIENT_OPTIONS_H__


	)

15 
memˇched_hñp_ãxt_°
 
	tmemˇched_hñp_ãxt_°
;

18 
	mOPT_SERVERS
= 's',

19 
	mOPT_VERSION
= 'V',

20 
	mOPT_HELP
= 'h',

21 
	mOPT_VERBOSE
= 'v',

22 
	mOPT_DEBUG
= 'd',

23 
	mOPT_ANALYZE
= 'a',

24 
	mOPT_FLAG
= 257,

25 
	mOPT_EXPIRE
,

26 
	mOPT_SET
,

27 
	mOPT_REPLACE
,

28 
	mOPT_ADD
,

29 
	mOPT_SLAP_EXECUTE_NUMBER
,

30 
	mOPT_SLAP_INITIAL_LOAD
,

31 
	mOPT_SLAP_TEST
,

32 
	mOPT_SLAP_CONCURRENCY
,

33 
	mOPT_SLAP_NON_BLOCK
,

34 
	mOPT_SLAP_TCP_NODELAY
,

35 
	mOPT_FLUSH
,

36 
	mOPT_HASH
,

37 
	mOPT_BINARY
,

38 
	mOPT_UDP
,

39 
	mOPT_USERNAME
,

40 
	mOPT_PASSWD
,

41 
	mOPT_STAT_ARGS
,

42 
	mOPT_FILE
= 'f'

43 } 
	tmemˇched_›ti⁄s
;

	@clients/execute.c

17 
	~"c⁄fig.h
"

18 
	~"execuã.h
"

20 
	$execuã_£t
(
memˇched_°
 *
memc
, 
∑ús_°
 *
∑ús
, 
numbî_of
)

22 
memˇched_ªtu∫_t
 
rc
;

23 
x
;

24 
∑ús_£¡
;

26 
x
0, 
∑ús_£¡
0; x < 
numbî_of
; x++)

28 
rc

	`memˇched_£t
(
memc
, 
∑ús
[
x
].
key
,Öaús[x].
key_Àngth
,

29 
∑ús
[
x
].
vÆue
,Öaús[x].
vÆue_Àngth
,

31 i‡(
rc
 !
MEMCACHED_SUCCESS
 &&Ñ¯!
MEMCACHED_BUFFERED
)

32 
	`Ârötf
(
°dîr
, "Failured on insert of %.*s\n",

33 ()
∑ús
[
x
].
key_Àngth
,Öaús[x].
key
);

35 
∑ús_£¡
++;

38  
∑ús_£¡
;

39 
	}
}

45 
	$execuã_gë
(
memˇched_°
 *
memc
, 
∑ús_°
 *
∑ús
, 
numbî_of
)

47 
memˇched_ªtu∫_t
 
rc
;

48 
x
;

49 
ªåõved
;

52 
ªåõved
0,
x
0; x < 
numbî_of
; x++)

54 *
vÆue
;

55 
size_t
 
vÆue_Àngth
;

56 
uöt32_t
 
Êags
;

57 
„tch_key
;

59 
„tch_key
()(()
	`øndom
(Ë% 
numbî_of
);

61 
vÆue

	`memˇched_gë
(
memc
, 
∑ús
[
„tch_key
].
key
,Öaús[„tch_key].
key_Àngth
,

62 &
vÆue_Àngth
, &
Êags
, &
rc
);

64 i‡(
rc
 !
MEMCACHED_SUCCESS
)

65 
	`Ârötf
(
°dîr
, "Failured onÑead of %.*s\n",

66 ()
∑ús
[
„tch_key
].
key_Àngth
,Öaús[„tch_key].
key
);

68 
ªåõved
++;

70 
	`‰ì
(
vÆue
);

73  
ªåõved
;

74 
	}
}

79 
memˇched_ªtu∫_t
 
	$ˇŒback_cou¡î
(c⁄° 
memˇched_°
 *
±r
,

80 
memˇched_ªsu…_°
 *
ªsu…
,

81 *
c⁄ãxt
)

83 ()
±r
;

84 ()
ªsu…
;

85 *
cou¡î
(*)
c⁄ãxt
;

86 *
cou¡î
= *counter + 1;

88  
MEMCACHED_SUCCESS
;

89 
	}
}

99 
	$execuã_mgë
(
memˇched_°
 *
memc
,

100 c⁄° * c⁄° *
keys
,

101 
size_t
 *
key_Àngth
,

102 
numbî_of
)

104 
ªåõved
= 0;

105 
memˇched_execuã_‚
 
ˇŒbacks
[1]{ [0]&
ˇŒback_cou¡î
 };

106 
memˇched_ªtu∫_t
 
rc
;

107 
rc

	`memˇched_mgë_execuã
(
memc
, 
keys
, 
key_Àngth
,

108 (
size_t
)
numbî_of
, 
ˇŒbacks
, &
ªåõved
, 1);

110 i‡(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_NOTFOUND
 ||

111 
rc
 =
MEMCACHED_BUFFERED
 ||Ñ¯=
MEMCACHED_END
)

113 
rc

	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
ªåõved
, 1);

114 i‡(
rc
 !
MEMCACHED_SUCCESS
 &&Ñ¯!
MEMCACHED_NOTFOUND
 &&Ñ¯!
MEMCACHED_END
)

116 
	`Ârötf
(
°dîr
, "FailedÅoÉxecute mget: %s\n",

117 
	`memˇched_°ªº‹
(
memc
, 
rc
));

118 
	`memˇched_quô
(
memc
);

124 
	`Ârötf
(
°dîr
, "FailedÅoÉxecute mget: %s\n",

125 
	`memˇched_°ªº‹
(
memc
, 
rc
));

126 
	`memˇched_quô
(
memc
);

130  
ªåõved
;

131 
	}
}

	@clients/execute.h

12 #i‚de‡
CLIENTS_EXECUTE_H


13 
	#CLIENTS_EXECUTE_H


	)

15 
	~<°dio.h
>

17 
	~"libmemˇched/memˇched.h
"

18 
	~"gíî©‹.h
"

20 
execuã_£t
(
memˇched_°
 *
memc
, 
∑ús_°
 *
∑ús
, 
numbî_of
);

21 
execuã_gë
(
memˇched_°
 *
memc
, 
∑ús_°
 *
∑ús
, 
numbî_of
);

22 
execuã_mgë
(
memˇched_°
 *
memc
, c⁄° * c⁄° *
keys
, 
size_t
 *
key_Àngth
,

23 
numbî_of
);

	@clients/generator.c

12 
	~"c⁄fig.h
"

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°döt.h
>

17 
	~<°rög.h
>

19 
	~"gíî©‹.h
"

22 c⁄° 
	gALPHANUMERICS
[]=

25 
	#ALPHANUMERICS_SIZE
 ((
ALPHANUMERICS
)-1)

	)

27 
size_t
 
	$gë_Æpha_num
()

29  (
size_t
)
	`øndom
(Ë% 
ALPHANUMERICS_SIZE
;

30 
	}
}

32 
	$gë_øndom_°rög
(*
buf„r
, 
size_t
 
size
)

34 *
buf„r_±r

buf„r
;

36 --
size
)

37 *
buf„r_±r
++
ALPHANUMERICS
[
	`gë_Æpha_num
()];

38 *
buf„r_±r
++
ALPHANUMERICS
[
	`gë_Æpha_num
()];

39 
	}
}

41 
	$∑ús_‰ì
(
∑ús_°
 *
∑ús
)

43 
uöt32_t
 
x
;

45 i‡(! 
∑ús
)

49 
x
0; 
∑ús
[x].
key
; x++)

51 
	`‰ì
(
∑ús
[
x
].
key
);

52 i‡(
∑ús
[
x
].
vÆue
)

53 
	`‰ì
(
∑ús
[
x
].
vÆue
);

56 
	`‰ì
(
∑ús
);

57 
	}
}

59 
∑ús_°
 *
	$∑ús_gíî©e
(
uöt64_t
 
numbî_of
, 
size_t
 
vÆue_Àngth
)

61 
x
;

62 
∑ús_°
 *
∑ús
;

64 
∑ús
(
∑ús_°
*)
	`ˇŒoc
((
size_t
)
numbî_of
 + 1, (pairs_st));

66 i‡(!
∑ús
)

67 
îr‹
;

69 
x
0; x < 
numbî_of
; x++)

71 
∑ús
[
x
].
key
(*)
	`ˇŒoc
(100, ());

72 i‡(!
∑ús
[
x
].
key
)

73 
îr‹
;

74 
	`gë_øndom_°rög
(
∑ús
[
x
].
key
, 100);

75 
∑ús
[
x
].
key_Àngth
= 100;

77 i‡(
vÆue_Àngth
)

79 
∑ús
[
x
].
vÆue
(*)
	`ˇŒoc
(
vÆue_Àngth
, ());

80 i‡(!
∑ús
[
x
].
vÆue
)

81 
îr‹
;

82 
	`gë_øndom_°rög
(
∑ús
[
x
].
vÆue
, 
vÆue_Àngth
);

83 
∑ús
[
x
].
vÆue_Àngth
= value_length;

87 
∑ús
[
x
].
vÆue

NULL
;

88 
∑ús
[
x
].
vÆue_Àngth
= 0;

92  
∑ús
;

93 
îr‹
:

94 
	`Ârötf
(
°dîr
, "Memory Allocation failure inÖairs_generate.\n");

95 
	`exô
(0);

96 
	}
}

	@clients/generator.h

16 #i‚de‡
__GENERATOR_H__


17 
	#__GENERATOR_H__


	)

19 
∑ús_°
 
	t∑ús_°
;

21 
	s∑ús_°
 {

22 *
	mkey
;

23 
size_t
 
	mkey_Àngth
;

24 *
	mvÆue
;

25 
size_t
 
	mvÆue_Àngth
;

28 
∑ús_°
 *
∑ús_gíî©e
(
uöt64_t
 
numbî_of
, 
size_t
 
vÆue_Àngth
);

29 
∑ús_‰ì
(
∑ús_°
 *
∑ús
);

	@clients/memaslap.c

16 
	~"c⁄fig.h
"

18 
	~<°dlib.h
>

19 
	~<gë›t.h
>

20 
	~<limôs.h
>

21 #i‡
TIME_WITH_SYS_TIME


22 
	~<sys/time.h
>

23 
	~<time.h
>

25 #i‡
HAVE_SYS_TIME_H


26 
	~<sys/time.h
>

28 
	~<time.h
>

33 
	~"ms_sig£gv.h
"

34 
	~"ms_£âög.h
"

35 
	~"ms_thªad.h
"

37 
	#PROGRAM_NAME
 "mem¶≠"

	)

38 
	#PROGRAM_DESCRIPTION
 \

39 "Gíî©e†w‹klﬂdágaö° memˇched sîvîs."

	)

41 #ifde‡
__sun


45 
	#OPTIONSTRING
 *

	)

47 
	#OPTIONSTRING
 c⁄° *

	)

51 
›ti⁄
 
	gl⁄g_›ti⁄s
[]=

53 { (
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
,

54 
OPT_SERVERS
 },

55 { (
OPTIONSTRING
)"thªads", 
ªquúed_¨gumít
, 
NULL
,

56 
OPT_THREAD_NUMBER
 },

57 { (
OPTIONSTRING
)"c⁄cuºícy", 
ªquúed_¨gumít
, 
NULL
,

58 
OPT_CONCURRENCY
 },

59 { (
OPTIONSTRING
)"c⁄n_sock", 
ªquúed_¨gumít
, 
NULL
,

60 
OPT_SOCK_PER_CONN
 },

61 { (
OPTIONSTRING
)"execuã_numbî", 
ªquúed_¨gumít
, 
NULL
,

62 
OPT_EXECUTE_NUMBER
 },

63 { (
OPTIONSTRING
)"time", 
ªquúed_¨gumít
, 
NULL
,

64 
OPT_TIME
 },

65 { (
OPTIONSTRING
)"cfg_cmd", 
ªquúed_¨gumít
, 
NULL
,

66 
OPT_CONFIG_CMD
 },

67 { (
OPTIONSTRING
)"wö_size", 
ªquúed_¨gumít
, 
NULL
,

68 
OPT_WINDOW_SIZE
 },

69 { (
OPTIONSTRING
)"fixed_size", 
ªquúed_¨gumít
, 
NULL
,

70 
OPT_FIXED_LTH
 },

71 { (
OPTIONSTRING
)"vîify", 
ªquúed_¨gumít
, 
NULL
,

72 
OPT_VERIFY
 },

73 { (
OPTIONSTRING
)"divisi⁄", 
ªquúed_¨gumít
, 
NULL
,

74 
OPT_GETS_DIVISION
 },

75 { (
OPTIONSTRING
)"°©_‰eq", 
ªquúed_¨gumít
, 
NULL
,

76 
OPT_STAT_FREQ
 },

77 { (
OPTIONSTRING
)"exp_vîify", 
ªquúed_¨gumít
, 
NULL
,

78 
OPT_EXPIRE
 },

79 { (
OPTIONSTRING
)"ovîwrôe", 
ªquúed_¨gumít
, 
NULL
,

80 
OPT_OVERWRITE
 },

81 { (
OPTIONSTRING
)"ªc⁄√˘", 
no_¨gumít
, 
NULL
,

82 
OPT_RECONNECT
 },

83 { (
OPTIONSTRING
)"udp", 
no_¨gumít
, 
NULL
,

84 
OPT_UDP
 },

85 { (
OPTIONSTRING
)"Á˚book", 
no_¨gumít
, 
NULL
,

86 
OPT_FACEBOOK_TEST
 },

87 { (
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
,

88 
OPT_BINARY_PROTOCOL
 },

89 { (
OPTIONSTRING
)"çs", 
ªquúed_¨gumít
, 
NULL
,

90 
OPT_TPS
 },

91 { (
OPTIONSTRING
)"ªp_wrôe", 
ªquúed_¨gumít
, 
NULL
,

92 
OPT_REP_WRITE_SRV
 },

93 { (
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, 
NULL
,

94 
OPT_VERBOSE
 },

95 { (
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
,

96 
OPT_HELP
 },

97 { (
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
,

98 
OPT_VERSION
 },

103 
ms_sync_lock_öô
();

104 
ms_sync_lock_de°roy
();

105 
ms_globÆ_°ru˘_öô
();

106 
ms_globÆ_°ru˘_de°roy
();

107 
ms_vîsi⁄_comm™d
(c⁄° *
comm™d_«me
);

108 c⁄° *
ms_lookup_hñp
(
ms_›ti⁄s_t
 
›ti⁄
);

109 
öt64_t
 
ms_∑r£_time
();

110 
öt64_t
 
ms_∑r£_size
();

111 
ms_›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

112 
ms_check_∑ø
();

113 
ms_°©i°ic_öô
();

114 
ms_°©s_öô
();

115 
ms_¥öt_°©i°ics
(
ö_time
);

116 
ms_¥öt_mem¶≠_°©s
(
timevÆ
 *
°¨t_time
,

117 
timevÆ
 *
íd_time
);

118 
ms_m⁄ô‹_¶≠_mode
();

119 
ms_hñp_comm™d
(c⁄° *
comm™d_«me
, c⁄° *
des¸ùti⁄
);

123 
	$ms_sync_lock_öô
()

125 
ms_globÆ
.
öô_lock
.
cou¡
= 0;

126 
	`±hªad_muãx_öô
(&
ms_globÆ
.
öô_lock
.
lock
, 
NULL
);

127 
	`±hªad_c⁄d_öô
(&
ms_globÆ
.
öô_lock
.
c⁄d
, 
NULL
);

129 
ms_globÆ
.
w¨mup_lock
.
cou¡
 = 0;

130 
	`±hªad_muãx_öô
(&
ms_globÆ
.
w¨mup_lock
.
lock
, 
NULL
);

131 
	`±hªad_c⁄d_öô
(&
ms_globÆ
.
w¨mup_lock
.
c⁄d
, 
NULL
);

133 
ms_globÆ
.
run_lock
.
cou¡
= 0;

134 
	`±hªad_muãx_öô
(&
ms_globÆ
.
run_lock
.
lock
, 
NULL
);

135 
	`±hªad_c⁄d_öô
(&
ms_globÆ
.
run_lock
.
c⁄d
, 
NULL
);

137 
	`±hªad_muãx_öô
(&
ms_globÆ
.
quô_muãx
, 
NULL
);

138 
	`±hªad_muãx_öô
(&
ms_globÆ
.
£q_muãx
, 
NULL
);

139 
	}
}

143 
	$ms_sync_lock_de°roy
()

145 
	`±hªad_muãx_de°roy
(&
ms_globÆ
.
öô_lock
.
lock
);

146 
	`±hªad_c⁄d_de°roy
(&
ms_globÆ
.
öô_lock
.
c⁄d
);

148 
	`±hªad_muãx_de°roy
(&
ms_globÆ
.
w¨mup_lock
.
lock
);

149 
	`±hªad_c⁄d_de°roy
(&
ms_globÆ
.
w¨mup_lock
.
c⁄d
);

151 
	`±hªad_muãx_de°roy
(&
ms_globÆ
.
run_lock
.
lock
);

152 
	`±hªad_c⁄d_de°roy
(&
ms_globÆ
.
run_lock
.
c⁄d
);

154 
	`±hªad_muãx_de°roy
(&
ms_globÆ
.
quô_muãx
);

155 
	`±hªad_muãx_de°roy
(&
ms_globÆ
.
£q_muãx
);

157 i‡(
ms_£âög
.
°©_‰eq
 > 0)

159 
	`±hªad_muãx_de°roy
(&
ms_°©i°ic
.
°©_muãx
);

161 
	}
}

165 
	$ms_globÆ_°ru˘_öô
()

167 
	`ms_sync_lock_öô
();

168 
ms_globÆ
.
föish_w¨mup

Ál£
;

169 
ms_globÆ
.
time_out

Ál£
;

170 
	}
}

174 
	$ms_globÆ_°ru˘_de°roy
()

176 
	`ms_sync_lock_de°roy
();

177 
	}
}

185 
	$ms_vîsi⁄_comm™d
(c⁄° *
comm™d_«me
)

187 
	`¥ötf
("%†v%u.%u\n", 
comm™d_«me
, 1U, 0U);

188 
	`exô
(0);

189 
	}
}

199 c⁄° *
	$ms_lookup_hñp
(
ms_›ti⁄s_t
 
›ti⁄
)

201 
›ti⁄
)

203 
OPT_SERVERS
:

208 
OPT_VERSION
:

211 
OPT_HELP
:

214 
OPT_EXECUTE_NUMBER
:

218 
OPT_THREAD_NUMBER
:

222 
OPT_CONCURRENCY
:

225 
OPT_FIXED_LTH
:

228 
OPT_VERIFY
:

231 
OPT_GETS_DIVISION
:

234 
OPT_TIME
:

239 
OPT_CONFIG_CMD
:

243 
OPT_WINDOW_SIZE
:

248 
OPT_UDP
:

253 
OPT_EXPIRE
:

258 
OPT_OVERWRITE
:

263 
OPT_STAT_FREQ
:

268 
OPT_SOCK_PER_CONN
:

271 
OPT_RECONNECT
:

275 
OPT_VERBOSE
:

279 
OPT_FACEBOOK_TEST
:

283 
OPT_BINARY_PROTOCOL
:

287 
OPT_TPS
:

290 
OPT_REP_WRITE_SRV
:

296 
	}
}

306 
	$ms_hñp_comm™d
(c⁄° *
comm™d_«me
, c⁄° *
des¸ùti⁄
)

308 *
hñp_mesßge

NULL
;

310 
	`¥ötf
("%†v%u.%u\n", 
comm™d_«me
, 1U, 0U);

311 
	`¥ötf
(" %s\n\n", 
des¸ùti⁄
);

312 
	`¥ötf
(

317 
x
0; 
l⁄g_›ti⁄s
[x].
«me
; x++)

319 
	`¥ötf
(" -%c, --%s%c\n", 
l⁄g_›ti⁄s
[
x
].
vÆ
,Ü⁄g_›ti⁄s[x].
«me
,

320 
l⁄g_›ti⁄s
[
x
].
has_¨g
 ? '=' : ' ');

322 i‡((
hñp_mesßge
(*)
	`ms_lookup_hñp
(
l⁄g_›ti⁄s
[
x
].
vÆ
)Ë!
NULL
)

324 
	`¥ötf
(" %s\n", 
hñp_mesßge
);

328 
	`¥ötf
(

338 
	`exô
(0);

339 
	}
}

343 
öt64_t
 
	$ms_∑r£_time
()

345 
öt64_t
 
ªt
= 0;

346 
unô

›èrg
[
	`°æí
(optarg) - 1];

348 
›èrg
[
	`°æí
(optarg) - 1]= '\0';

349 
ªt

	`©oi
(
›èrg
);

351 
unô
)

355 
ªt
*= 24;

359 
ªt
*= 60;

363 
ªt
*= 60;

370 
ªt
= -1;

374  
ªt
;

375 
	}
}

379 
öt64_t
 
	$ms_∑r£_size
()

381 
öt64_t
 
ªt
= -1;

382 
unô

›èrg
[
	`°æí
(optarg) - 1];

384 
›èrg
[
	`°æí
(optarg) - 1]= '\0';

385 
ªt

	`°πﬁl
(
›èrg
, (**)
NULL
, 10);

387 
unô
)

391 
ªt
*= 1024;

396 
ªt
*= 1024 * 1024;

401 
ªt
*= 1024 * 1024 * 1024;

405 
ªt
= -1;

409  
ªt
;

410 
	}
}

414 
	$ms_›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

416 
›ti⁄_ödex
= 0;

417 
›ti⁄_rv
;

419 (
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "VhURbaBs:x:T:c:X:v:d:"

421 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1)

423 
›ti⁄_rv
)

428 
OPT_VERSION
:

429 
	`ms_vîsi⁄_comm™d
(
PROGRAM_NAME
);

432 
OPT_HELP
:

433 
	`ms_hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
);

436 
OPT_SERVERS
:

437 
ms_£âög
.
§v_°r

	`°rdup
(
›èrg
);

440 
OPT_CONCURRENCY
:

441 
ms_£âög
.
nc⁄ns
(
uöt32_t
)
	`°πoul
(
›èrg
, (**Ë
NULL
, 10);

442 i‡(
ms_£âög
.
nc⁄ns
 <= 0)

444 
	`Ârötf
(
°dîr
, "Concurrency must be greaterÅhan 0.:-)\n");

445 
	`exô
(1);

449 
OPT_EXECUTE_NUMBER
:

450 
ms_£âög
.
exec_num
()
	`°πﬁ
(
›èrg
, (**Ë
NULL
, 10);

451 i‡(
ms_£âög
.
exec_num
 <= 0)

453 
	`Ârötf
(
°dîr
, "ExecuteÇumber must be greaterÅhan 0.:-)\n");

454 
	`exô
(1);

458 
OPT_THREAD_NUMBER
:

459 
ms_£âög
.
¡hªads
(
uöt32_t
)
	`°πoul
(
›èrg
, (**Ë
NULL
, 10);

460 i‡(
ms_£âög
.
¡hªads
 <= 0)

462 
	`Ârötf
(
°dîr
, "ThreadsÇumber must be greaterÅhan 0.:-)\n");

463 
	`exô
(1);

467 
OPT_FIXED_LTH
:

468 
ms_£âög
.
fixed_vÆue_size
(
size_t
)
	`°πouŒ
(
›èrg
, (**Ë
NULL
, 10);

469 i‡((
ms_£âög
.
fixed_vÆue_size
 <= 0)

470 || (
ms_£âög
.
fixed_vÆue_size
 > 
MAX_VALUE_SIZE
))

472 
	`Ârötf
(
°dîr
, "Value size must be between 0ánd 1M.:-)\n");

473 
	`exô
(1);

477 
OPT_VERIFY
:

478 
ms_£âög
.
vîify_≥r˚¡

	`©of
(
›èrg
);

479 i‡((
ms_£âög
.
vîify_≥r˚¡
 <= 0)

480 || (
ms_£âög
.
vîify_≥r˚¡
 > 1.0))

482 
	`Ârötf
(
°dîr
, "Data verificationÑate must be "

484 
	`exô
(1);

488 
OPT_GETS_DIVISION
:

489 
ms_£âög
.
mu…_key_num
()
	`°πﬁ
(
›èrg
, (**Ë
NULL
, 10);

490 i‡(
ms_£âög
.
mu…_key_num
 <= 0)

492 
	`Ârötf
(
°dîr
, "Multi-get keyÇumber must be greaterÅhan 0.:-)\n");

493 
	`exô
(1);

497 
OPT_TIME
:

498 
ms_£âög
.
run_time
()
	`ms_∑r£_time
();

499 i‡(
ms_£âög
.
run_time
 == -1)

501 
	`Ârötf
(
°dîr
, "Please specifyÅheÑunÅime. :-)\n"

504 
	`exô
(1);

507 i‡(
ms_£âög
.
run_time
 == 0)

509 
	`Ârötf
(
°dîr
, "RunningÅime canÇot be 0. :-)\n");

510 
	`exô
(1);

514 
OPT_CONFIG_CMD
:

515 
ms_£âög
.
cfg_fûe

	`°rdup
(
›èrg
);

518 
OPT_WINDOW_SIZE
:

519 
ms_£âög
.
wö_size
(
size_t
)
	`ms_∑r£_size
();

520 i‡(
ms_£âög
.
wö_size
 =(
size_t
)-1)

522 
	`Ârötf
(

523 
°dîr
,

526 
	`exô
(1);

530 
OPT_UDP
:

531 
ms_£âög
.
udp

åue
;

534 
OPT_EXPIRE
:

535 
ms_£âög
.
exp_vî_≥r

	`©of
(
›èrg
);

536 i‡((
ms_£âög
.
exp_vî_≥r
 <= 0) || (ms_setting.exp_ver_per > 1.0))

538 
	`Ârötf
(
°dîr
, "ExpireÅime verificationÑate must be "

540 
	`exô
(1);

544 
OPT_OVERWRITE
:

545 
ms_£âög
.
ovîwrôe_≥r˚¡

	`©of
(
›èrg
);

546 i‡((
ms_£âög
.
ovîwrôe_≥r˚¡
 <= 0)

547 || (
ms_£âög
.
ovîwrôe_≥r˚¡
 > 1.0))

549 
	`Ârötf
(
°dîr
, "Objects overwriteÑate must be "

551 
	`exô
(1);

555 
OPT_STAT_FREQ
:

556 
ms_£âög
.
°©_‰eq
()
	`ms_∑r£_time
();

557 i‡(
ms_£âög
.
°©_‰eq
 == -1)

559 
	`Ârötf
(
°dîr
, "Please specifyÅhe frequency of dumping "

563 
	`exô
(1);

566 i‡(
ms_£âög
.
°©_‰eq
 == 0)

568 
	`Ârötf
(
°dîr
, "The frequency of dumping statistic information "

570 
	`exô
(1);

574 
OPT_SOCK_PER_CONN
:

575 
ms_£âög
.
sock_≥r_c⁄n
(
uöt32_t
)
	`°πoul
(
›èrg
, (**Ë
NULL
, 10);

576 i‡(
ms_£âög
.
sock_≥r_c⁄n
 <= 0)

578 
	`Ârötf
(
°dîr
, "Number of socks ofÉach concurrency "

580 
	`exô
(1);

584 
OPT_RECONNECT
:

585 
ms_£âög
.
ªc⁄√˘

åue
;

588 
OPT_VERBOSE
:

589 
ms_£âög
.
vîbo£

åue
;

592 
OPT_FACEBOOK_TEST
:

593 
ms_£âög
.
Á˚book_ã°

åue
;

596 
OPT_BINARY_PROTOCOL
:

597 
ms_£âög
.
bö¨y_¥Ÿ

åue
;

600 
OPT_TPS
:

601 
ms_£âög
.
ex≥˘ed_çs
()
	`ms_∑r£_size
();

602 i‡(
ms_£âög
.
ex≥˘ed_çs
 == -1)

604 
	`Ârötf
(
°dîr
,

607 
	`exô
(1);

611 
OPT_REP_WRITE_SRV
:

612 
ms_£âög
.
ªp_wrôe_§v
(
uöt32_t
)
	`°πoul
(
›èrg
, (**Ë
NULL
, 10);

613 i‡(
ms_£âög
.
ªp_wrôe_§v
 <= 0)

615 
	`Ârötf
(
°dîr
,

618 
	`exô
(1);

624 
	`exô
(1);

627 
	`ab‹t
();

630 
	}
}

633 
	$ms_check_∑ø
()

635 i‡(
ms_£âög
.
§v_°r
 =
NULL
)

637 *
ãmp
;

639 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

641 
ms_£âög
.
§v_°r

	`°rdup
(
ãmp
);

645 
	`Ârötf
(
°dîr
, "No ServersÖrovided\n\n");

650 i‡(
ms_£âög
.
nc⁄ns
 % (
uöt32_t
)ms_£âög.
¡hªads
 != 0)

652 
	`Ârötf
(
°dîr
, "Concurrency must beÅhe multiples ofÅhreads count.\n");

656 i‡(
ms_£âög
.
wö_size
 % 
UNIT_ITEMS_COUNT
 != 0)

658 
	`Ârötf
(
°dîr
, "Window size must beÅhe multiples of 1024.\n\n");

662  
EXIT_SUCCESS
;

663 
	}
}

667 
	$ms_°©i°ic_öô
()

669 
	`±hªad_muãx_öô
(&
ms_°©i°ic
.
°©_muãx
, 
NULL
);

670 
	`ms_öô_°©s
(&
ms_°©i°ic
.
gë_°©
, "Get");

671 
	`ms_öô_°©s
(&
ms_°©i°ic
.
£t_°©
, "Set");

672 
	`ms_öô_°©s
(&
ms_°©i°ic
.
tŸÆ_°©
, "Total");

673 
	}
}

677 
	$ms_°©s_öô
()

679 
	`mem£t
(&
ms_°©s
, 0, (
ms_°©s_t
));

680 i‡(
ms_£âög
.
°©_‰eq
 > 0)

682 
	`ms_°©i°ic_öô
();

684 
	}
}

688 
	$ms_¥öt_°©i°ics
(
ö_time
)

690 
obj_size
()(
ms_£âög
.
avg_key_size
 + ms_£âög.
avg_vÆ_size
);

692 
	`¥ötf
("\033[1;1H\033[2J\n");

693 
	`ms_dump_f‹m©_°©s
(&
ms_°©i°ic
.
gë_°©
, 
ö_time
,

694 
ms_£âög
.
°©_‰eq
, 
obj_size
);

695 
	`ms_dump_f‹m©_°©s
(&
ms_°©i°ic
.
£t_°©
, 
ö_time
,

696 
ms_£âög
.
°©_‰eq
, 
obj_size
);

697 
	`ms_dump_f‹m©_°©s
(&
ms_°©i°ic
.
tŸÆ_°©
, 
ö_time
,

698 
ms_£âög
.
°©_‰eq
, 
obj_size
);

699 
	}
}

703 
	$ms_¥öt_mem¶≠_°©s
(
timevÆ
 *
°¨t_time
,

704 
timevÆ
 *
íd_time
)

706 
buf
[1024];

707 *
pos

buf
;

709 
pos
+
	`¢¥ötf
(pos,

710 (
buf
), "cmd_get: %lu\n",

711 (Ë
ms_°©s
.
cmd_gë
);

712 
pos
+
	`¢¥ötf
(pos,

713 (
buf
Ë- (
size_t
)(
pos
 -buf),

715 (Ë
ms_°©s
.
cmd_£t
);

716 
pos
+
	`¢¥ötf
(pos,

717 (
buf
Ë- (
size_t
)(
pos
 -buf),

719 (Ë
ms_°©s
.
gë_mis£s
);

721 i‡(
ms_£âög
.
vîify_≥r˚¡
 > 0)

723 
pos
+
	`¢¥ötf
(pos,

724 (
buf
Ë- (
size_t
)(
pos
 -buf),

726 (Ë
ms_°©s
.
vef_miss
);

727 
pos
+
	`¢¥ötf
(pos,

728 (
buf
Ë- (
size_t
)(
pos
 -buf),

730 (Ë
ms_°©s
.
vef_Áûed
);

733 i‡(
ms_£âög
.
exp_vî_≥r
 > 0)

735 
pos
+
	`¢¥ötf
(pos,

736 (
buf
Ë- (
size_t
)(
pos
 -buf),

738 (Ë
ms_°©s
.
exp_gë
);

739 
pos
+
	`¢¥ötf
(pos,

740 (
buf
Ë- (
size_t
)(
pos
 -buf),

742 (Ë
ms_°©s
.
u√xp_ungë
);

745 
pos
+
	`¢¥ötf
(pos,

746 (
buf
Ë- (
size_t
)(
pos
 -buf),

748 (Ë
ms_°©s
.
byãs_wrôãn
);

749 
pos
+
	`¢¥ötf
(pos,

750 (
buf
Ë- (
size_t
)(
pos
 -buf),

752 (Ë
ms_°©s
.
byãs_ªad
);

753 
pos
+
	`¢¥ötf
(pos,

754 (
buf
Ë- (
size_t
)(
pos
 -buf),

756 (Ë
ms_°©s
.
obj_byãs
);

758 i‡(
ms_£âög
.
udp
 || ms_£âög.
Á˚book_ã°
)

760 
pos
+
	`¢¥ötf
(pos,

761 (
buf
Ë- (
size_t
)(
pos
 -buf),

763 (Ë
ms_°©s
.
pkt_dis‹dî
);

764 
pos
+
	`¢¥ötf
(pos,

765 (
buf
Ë- (
size_t
)(
pos
 -buf),

767 ()
ms_°©s
.
pkt_dr›
);

768 
pos
+
	`¢¥ötf
(pos,

769 (
buf
Ë- (
size_t
)(
pos
 -buf),

771 ()
ms_°©s
.
udp_timeout
);

774 i‡(
ms_£âög
.
°©_‰eq
 > 0)

776 
	`ms_dump_°©s
(&
ms_°©i°ic
.
gë_°©
);

777 
	`ms_dump_°©s
(&
ms_°©i°ic
.
£t_°©
);

778 
	`ms_dump_°©s
(&
ms_°©i°ic
.
tŸÆ_°©
);

781 
öt64_t
 
time_diff

	`ms_time_diff
(
°¨t_time
, 
íd_time
);

782 
pos
+
	`¢¥ötf
(pos,

783 (
buf
Ë- (
size_t
)(
pos
 -buf),

785 ()
time_diff
 / 1000000,

786 ()(
ms_°©s
.
cmd_gë
 + ms_°©s.
cmd_£t
),

787 (
ms_°©s
.
cmd_gë


788 + 
ms_°©s
.
cmd_£t
Ë/ (()
time_diff
 / 1000000),

790 
ms_°©s
.
byãs_wrôãn


791 + 
ms_°©s
.
byãs_ªad
) / 1024 / 1024

792 / (()
time_diff
 / 1000000));

793 
	`as£π
(
pos
 <
buf
);

795 
	`Ârötf
(
°dout
, "%s", 
buf
);

796 
	`fÊush
(
°dout
);

797 
	}
}

801 
	$ms_m⁄ô‹_¶≠_mode
()

803 
£c⁄d
= 0;

804 
timevÆ
 
°¨t_time
, 
íd_time
;

807 
	`±hªad_muãx_lock
(&
ms_globÆ
.
öô_lock
.
lock
);

808 
ms_globÆ
.
öô_lock
.
cou¡
 < 
ms_£âög
.
¡hªads
)

810 
	`±hªad_c⁄d_waô
(&
ms_globÆ
.
öô_lock
.
c⁄d
,

811 &
ms_globÆ
.
öô_lock
.
lock
);

813 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
öô_lock
.
lock
);

816 i‡(
ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
 < 
PROP_ERROR
)

819 
	`±hªad_muãx_lock
(&
ms_globÆ
.
w¨mup_lock
.
lock
);

820 
ms_globÆ
.
w¨mup_lock
.
cou¡
 < 
ms_£âög
.
nc⁄ns
)

822 
	`±hªad_c⁄d_waô
(&
ms_globÆ
.
w¨mup_lock
.
c⁄d
, &ms_globÆ.w¨mup_lock.
lock
);

824 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
w¨mup_lock
.
lock
);

826 
ms_globÆ
.
föish_w¨mup

åue
;

829 i‡(
ms_£âög
.
run_time
 > 0)

831 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

834 
	`¶ìp
(1);

835 
£c⁄d
++;

837 i‡((
ms_£âög
.
°©_‰eq
 > 0Ë&& (
£c⁄d
 % ms_setting.stat_freq == 0)

838 && (
ms_°©s
.
a˘ive_c⁄ns
 >
ms_£âög
.
nc⁄ns
)

839 && (
ms_°©s
.
a˘ive_c⁄ns
 <
INT_MAX
))

841 
	`ms_¥öt_°©i°ics
(
£c⁄d
);

844 i‡(
ms_£âög
.
run_time
 <
£c⁄d
)

846 
ms_globÆ
.
time_out

åue
;

851 i‡((
£c⁄d
 > 5Ë&& (
ms_°©s
.
a˘ive_c⁄ns
 == 0))

856 
	`gëtimeofday
(&
íd_time
, 
NULL
);

857 
	`¶ìp
(1);

862 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

867 
	`±hªad_muãx_lock
(&
ms_globÆ
.
run_lock
.
lock
);

868 
ms_globÆ
.
run_lock
.
cou¡
 < 
ms_£âög
.
nc⁄ns
)

870 
	`±hªad_c⁄d_waô
(&
ms_globÆ
.
run_lock
.
c⁄d
, &ms_globÆ.run_lock.
lock
);

872 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
run_lock
.
lock
);

874 
	`gëtimeofday
(&
íd_time
, 
NULL
);

877 
	`ms_¥öt_mem¶≠_°©s
(&
°¨t_time
, &
íd_time
);

878 
	}
}

882 
	$maö
(
¨gc
, *
¨gv
[])

884 
	`§™dom
(()
	`time
(
NULL
));

885 
	`ms_globÆ_°ru˘_öô
();

888 
	`ms_£âög_öô_¥e
();

889 
	`ms_›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

890 i‡(
	`ms_check_∑ø
())

892 
	`ms_hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
);

893 
	`exô
(1);

895 
	`ms_£âög_öô_po°
();

896 
	`ms_°©s_öô
();

897 
	`ms_thªad_öô
();

900 
	`ms_m⁄ô‹_¶≠_mode
();

903 
	`ms_thªad_˛ónup
();

904 
	`ms_globÆ_°ru˘_de°roy
();

905 
	`ms_£âög_˛ónup
();

907  
EXIT_SUCCESS
;

908 
	}
}

	@clients/memcapable.c

13 #unde‡
NDEBUG


14 
	~"c⁄fig.h
"

15 
	~<±hªad.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<f˙é.h
>

18 
	~<sig«l.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<î∫o.h
>

22 
	~<as£π.h
>

23 
	~<°rög.h
>

24 
	~<öây≥s.h
>

25 
	~<°dboﬁ.h
>

26 
	~<uni°d.h
>

27 
	~<˘y≥.h
>

29 
	~<libmemˇched/memˇched.h
>

30 
	~<libmemˇched/memˇched/¥Ÿocﬁ_bö¨y.h
>

31 
	~<libmemˇched/byã‹dî.h
>

32 
	~"utûôõs.h
"

34 #ifde‡
löux


40 #unde‡
¡ohs


41 #unde‡
¡ohl


45 
boﬁ
 
	gdo_c‹e

Ál£
;

47 
memˇched_sockë_t
 
	gsock
;

49 
boﬁ
 
	gvîbo£

Ál£
;

52 
	gtimeout
= 2;

65 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	m∂aö
;

66 
¥Ÿocﬁ_bö¨y_ªque°_Êush
 
	mÊush
;

67 
¥Ÿocﬁ_bö¨y_ªque°_ö¸
 
	mö¸
;

68 
¥Ÿocﬁ_bö¨y_ªque°_£t
 
	m£t
;

69 
	mbyãs
[1024];

70 } 
	tcomm™d
;

74 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	m∂aö
;

75 
¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
 
	mö¸
;

76 
¥Ÿocﬁ_bö¨y_ª•⁄£_de¸
 
	mde¸
;

77 
	mbyãs
[1024];

78 } 
	tª•⁄£
;

80 
	eã°_ªtu∫


82 
	mTEST_SKIP
, 
	mTEST_PASS
, 
	mTEST_PASS_RECONNECT
, 
	mTEST_FAIL


88 
addröfo
 *
	$lookupho°
(c⁄° *
ho°«me
, c⁄° *
p‹t
)

90 
addröfo
 *
ai
= 0;

91 
addröfo
 
höts
{.
ai_Ámûy
=
AF_UNSPEC
,

92 .
ai_¥Ÿocﬁ
=
IPPROTO_TCP
,

93 .
ai_sockty≥
=
SOCK_STREAM
};

94 
îr‹

	`gëaddröfo
(
ho°«me
, 
p‹t
, &
höts
, &
ai
);

96 i‡(
îr‹
 != 0)

98 i‡(
îr‹
 !
EAI_SYSTEM
)

99 
	`Ârötf
(
°dîr
, "gëaddröfo(): %s\n", 
	`gai_°ªº‹
(
îr‹
));

101 
	`≥º‹
("getaddrinfo()");

104  
ai
;

105 
	}
}

111 
memˇched_sockë_t
 
	$£t_noblock
()

113 #ifde‡
WIN32


114 
u_l⁄g
 
¨g
 = 1;

115 i‡(
	`io˘lsockë
(
sock
, 
FIONBIO
, &
¨g
Ë=
SOCKET_ERROR
)

117 
	`≥º‹
("FailedÅo setÇonblocking io");

118 
	`˛o£sockë
(
sock
);

119  
INVALID_SOCKET
;

122 
Êags

	`f˙é
(
sock
, 
F_GETFL
, 0);

123 i‡(
Êags
 == -1)

125 
	`≥º‹
("FailedÅo get socket flags");

126 
	`˛o£sockë
(
sock
);

127  
INVALID_SOCKET
;

130 i‡((
Êags
 & 
O_NONBLOCK
) != O_NONBLOCK)

132 i‡(
	`f˙é
(
sock
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1)

134 
	`≥º‹
("FailedÅo set socketÅoÇonblocking mode");

135 
	`˛o£sockë
(
sock
);

136  
INVALID_SOCKET
;

140  
sock
;

141 
	}
}

149 
memˇched_sockë_t
 
	$c⁄√˘_£rvî
(c⁄° *
ho°«me
, c⁄° *
p‹t
)

151 
addröfo
 *
ai

	`lookupho°
(
ho°«me
, 
p‹t
);

152 
sock

INVALID_SOCKET
;

153 i‡(
ai
 !
NULL
)

155 i‡((
sock

	`sockë
(
ai
->
ai_Ámûy
,ái->
ai_sockty≥
,

156 
ai
->
ai_¥Ÿocﬁ
)Ë!
INVALID_SOCKET
)

158 i‡(
	`c⁄√˘
(
sock
, 
ai
->
ai_addr
,ái->
ai_addæí
Ë=
SOCKET_ERROR
)

160 
	`Ârötf
(
°dîr
, "FailedÅo connect socket: %s\n",

161 
	`°ªº‹
(
	`gë_sockë_î∫o
()));

162 
	`˛o£sockë
(
sock
);

163 
sock

INVALID_SOCKET
;

167 
sock

	`£t_noblock
();

171 
	`Ârötf
(
°dîr
, "FailedÅo create socket: %s\n",

172 
	`°ªº‹
(
	`gë_sockë_î∫o
()));

174 
	`‰ìaddröfo
(
ai
);

177  
sock
;

178 
	}
}

180 
ssize_t
 
	$timeout_io_›
(
memˇched_sockë_t
 
fd
, 
dúe˘i⁄
, *
buf
, 
size_t
 
Àn
)

182 
ssize_t
 
ªt
;

184 i‡(
dúe˘i⁄
 =
POLLOUT
)

185 
ªt

	`£nd
(
fd
, 
buf
, 
Àn
, 0);

187 
ªt

	`ªcv
(
fd
, 
buf
, 
Àn
, 0);

189 i‡(
ªt
 =
SOCKET_ERROR
 && 
	`gë_sockë_î∫o
(Ë=
EWOULDBLOCK
) {

190 
pﬁlfd
 
fds
= {

191 .
evíts

dúe˘i⁄
,

192 .
fd
= fd

195 
îr

	`pﬁl
(&
fds
, 1, 
timeout
 * 1000);

197 i‡(
îr
 == 1)

199 i‡(
dúe˘i⁄
 =
POLLOUT
)

200 
ªt

	`£nd
(
fd
, 
buf
, 
Àn
, 0);

202 
ªt

	`ªcv
(
fd
, 
buf
, 
Àn
, 0);

204 i‡(
îr
 == 0)

206 
î∫o

ETIMEDOUT
;

210 
	`≥º‹
("FailedÅoÖoll");

215  
ªt
;

216 
	}
}

224 
ã°_ªtu∫
 
	$ísuª
(
boﬁ
 
vÆ
, c⁄° *
ex¥essi⁄
, c⁄° *
fûe
, 
löe
)

226 i‡(!
vÆ
)

228 i‡(
vîbo£
)

229 
	`Ârötf
(
°dîr
, "\n%s:%d: %s", 
fûe
, 
löe
, 
ex¥essi⁄
);

231 i‡(
do_c‹e
)

232 
	`ab‹t
();

234  
TEST_FAIL
;

237  
TEST_PASS
;

238 
	}
}

240 
	#vîify
(
ex¥essi⁄
Ëdÿ{ i‡(
	`ísuª
”x¥essi⁄, #ex¥essi⁄, 
__FILE__
, 
__LINE__
Ë=
TEST_FAIL
Ë TEST_FAIL; } 0)

	)

241 
	#execuã
(
ex¥essi⁄
Ëdÿ{ i‡(
	`ísuª
”x¥essi⁄ =
TEST_PASS
, #ex¥essi⁄, 
__FILE__
, 
__LINE__
Ë=
TEST_FAIL
Ë TEST_FAIL; } 0)

	)

246 
ã°_ªtu∫
 
	$ªåy_wrôe
(c⁄° * 
buf
, 
size_t
 
Àn
)

248 
size_t
 
off£t
= 0;

249 c⁄° * 
±r

buf
;

253 
size_t
 
num_byãs

Àn
 - 
off£t
;

254 
ssize_t
 
nw

	`timeout_io_›
(
sock
, 
POLLOUT
, (*)(
±r
 + 
off£t
), 
num_byãs
);

255 i‡(
nw
 == -1)

256 
	`vîify
(
	`gë_sockë_î∫o
(Ë=
EINTR
 || gë_sockë_î∫o(Ë=
EAGAIN
);

258 
off£t
+(
size_t
)
nw
;

259 } 
off£t
 < 
Àn
);

261  
TEST_PASS
;

262 
	}
}

268 
ã°_ªtu∫
 
	$ª£nd_∑ckë
(
comm™d
 *
cmd
)

270 
size_t
 
Àngth
 (
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
) +

271 
	`¡ohl
(
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
);

273 
	`execuã
(
	`ªåy_wrôe
(
cmd
, 
Àngth
));

274  
TEST_PASS
;

275 
	}
}

281 
ã°_ªtu∫
 
	$£nd_∑ckë
(
comm™d
 *
cmd
)

284 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
keyÀn
=

285 
	`¡ohs
(
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
keyÀn
);

286 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
=

287 
	`¡ohl
(
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
);

288 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs
=

289 
	`¡ohŒ
(
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs
);

291 
	`execuã
(
	`ª£nd_∑ckë
(
cmd
));

292  
TEST_PASS
;

293 
	}
}

298 
ã°_ªtu∫
 
	$ªåy_ªad
(*
buf
, 
size_t
 
Àn
)

300 
size_t
 
off£t
= 0;

303 
ssize_t
 
ƒ

	`timeout_io_›
(
sock
, 
POLLIN
, ((*Ë
buf
Ë+ 
off£t
, 
Àn
 - offset);

304 
ƒ
) {

306 
	`Ârötf
(
°dîr
, "Eºno: %d %s\n", 
	`gë_sockë_î∫o
(), 
	`°ªº‹
(
î∫o
));

307 
	`vîify
(
	`gë_sockë_î∫o
(Ë=
EINTR
 || gë_sockë_î∫o(Ë=
EAGAIN
);

310  
TEST_FAIL
;

312 
off£t
+(
size_t
)
ƒ
;

314 } 
off£t
 < 
Àn
);

316  
TEST_PASS
;

317 
	}
}

323 
ã°_ªtu∫
 
	$ªcv_∑ckë
(
ª•⁄£
 *
r•
)

325 
	`execuã
(
	`ªåy_ªad
(
r•
, (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
)));

328 
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
=

329 
	`¡ohs
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
);

330 
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
°©us
=

331 
	`¡ohs
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
°©us
);

332 
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
=

333 
	`¡ohl
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
);

334 
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
=

335 
	`¡ohŒ
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
);

337 
size_t
 
bodysz

r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
;

338 i‡(
bodysz
 > 0)

339 
	`execuã
(
	`ªåy_ªad
(
r•
->
byãs
 +  (
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
), 
bodysz
));

341  
TEST_PASS
;

342 
	}
}

356 
	$°‹age_comm™d
(
comm™d
 *
cmd
,

357 
uöt8_t
 
cc
,

358 c⁄° * 
key
,

359 
size_t
 
keyÀn
,

360 c⁄° * 
dè
,

361 
size_t
 
dèÀn
,

362 
uöt32_t
 
Êags
,

363 
uöt32_t
 
ex±ime
)

366 
¥Ÿocﬁ_bö¨y_ªque°_£t
 *
ªque°
&
cmd
->
£t
;

368 
	`mem£t
(
ªque°
, 0,  (*request));

369 
ªque°
->
mesßge
.
hódî
.ªque°.
magic

PROTOCOL_BINARY_REQ
;

370 
ªque°
->
mesßge
.
hódî
.ªque°.
›code

cc
;

371 
ªque°
->
mesßge
.
hódî
.ªque°.
keyÀn
(
uöt16_t
)keylen;

372 
ªque°
->
mesßge
.
hódî
.ªque°.
exéí
= 8;

373 
ªque°
->
mesßge
.
hódî
.ªque°.
bodyÀn
(
uöt32_t
)(
keyÀn
 + 8 + 
dèÀn
);

374 
ªque°
->
mesßge
.
hódî
.ªque°.
›aque
= 0xdeadbeef;

375 
ªque°
->
mesßge
.
body
.
Êags
= flags;

376 
ªque°
->
mesßge
.
body
.
expú©i⁄

ex±ime
;

378 
off_t
 
key_off£t
 (
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
) + 8;

379 
	`mem˝y
(
cmd
->
byãs
 + 
key_off£t
, 
key
, 
keyÀn
);

380 i‡(
dè
 !
NULL
)

381 
	`mem˝y
(
cmd
->
byãs
 + 
key_off£t
 + 
keyÀn
, 
dè
, 
dèÀn
);

382 
	}
}

393 
	$øw_comm™d
(
comm™d
 *
cmd
,

394 
uöt8_t
 
cc
,

395 c⁄° * 
key
,

396 
size_t
 
keyÀn
,

397 c⁄° * 
dè
,

398 
size_t
 
dèÀn
)

401 
	`mem£t
(
cmd
, 0,  (*cmd));

402 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
magic

PROTOCOL_BINARY_REQ
;

403 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
›code

cc
;

404 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
keyÀn
(
uöt16_t
)keylen;

405 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
(
uöt32_t
)(
keyÀn
 + 
dèÀn
);

406 
cmd
->
∂aö
.
mesßge
.
hódî
.
ªque°
.
›aque
= 0xdeadbeef;

408 
off_t
 
key_off£t
 (
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
);

410 i‡(
key
 !
NULL
)

411 
	`mem˝y
(
cmd
->
byãs
 + 
key_off£t
, 
key
, 
keyÀn
);

413 i‡(
dè
 !
NULL
)

414 
	`mem˝y
(
cmd
->
byãs
 + 
key_off£t
 + 
keyÀn
, 
dè
, 
dèÀn
);

415 
	}
}

424 
	$Êush_comm™d
(
comm™d
 *
cmd
,

425 
uöt8_t
 
cc
, 
uöt32_t
 
ex±ime
, 
boﬁ
 
u£_exåa
)

427 
	`mem£t
(
cmd
, 0,  (cmd->
Êush
));

428 
cmd
->
Êush
.
mesßge
.
hódî
.
ªque°
.
magic

PROTOCOL_BINARY_REQ
;

429 
cmd
->
Êush
.
mesßge
.
hódî
.
ªque°
.
›code

cc
;

430 
cmd
->
Êush
.
mesßge
.
hódî
.
ªque°
.
›aque
= 0xdeadbeef;

432 i‡(
ex±ime
 !0 || 
u£_exåa
)

434 
cmd
->
Êush
.
mesßge
.
hódî
.
ªque°
.
exéí
= 4;

435 
cmd
->
Êush
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
(
ex±ime
);

436 
cmd
->
Êush
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
= 4;

438 
	}
}

449 
	$¨ôhmëic_comm™d
(
comm™d
 *
cmd
,

450 
uöt8_t
 
cc
,

451 c⁄° * 
key
,

452 
size_t
 
keyÀn
,

453 
uöt64_t
 
dñè
,

454 
uöt64_t
 
öôül
,

455 
uöt32_t
 
ex±ime
)

457 
	`mem£t
(
cmd
, 0,  (cmd->
ö¸
));

458 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
magic

PROTOCOL_BINARY_REQ
;

459 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
›code

cc
;

460 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
keyÀn
(
uöt16_t
)keylen;

461 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
exéí
= 20;

462 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
bodyÀn
(
uöt32_t
)(
keyÀn
 + 20);

463 
cmd
->
ö¸
.
mesßge
.
hódî
.
ªque°
.
›aque
= 0xdeadbeef;

464 
cmd
->
ö¸
.
mesßge
.
body
.
dñè

	`ht⁄Œ
(delta);

465 
cmd
->
ö¸
.
mesßge
.
body
.
öôül

	`ht⁄Œ
(initial);

466 
cmd
->
ö¸
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
(
ex±ime
);

468 
off_t
 
key_off£t
 (
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
) + 20;

469 
	`mem˝y
(
cmd
->
byãs
 + 
key_off£t
, 
key
, 
keyÀn
);

470 
	}
}

478 
ã°_ªtu∫
 
	$do_vÆid©e_ª•⁄£_hódî
(
ª•⁄£
 *
r•
,

479 
uöt8_t
 
cc
, 
uöt16_t
 
°©us
)

481 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
magic
 =
PROTOCOL_BINARY_RES
);

482 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
›code
 =
cc
);

483 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
d©©y≥
 =
PROTOCOL_BINARY_RAW_BYTES
);

484 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
°©us
 == status);

485 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
›aque
 == 0xdeadbeef);

487 i‡(
°©us
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

489 
cc
) {

490 
PROTOCOL_BINARY_CMD_ADDQ
:

491 
PROTOCOL_BINARY_CMD_APPENDQ
:

492 
PROTOCOL_BINARY_CMD_DECREMENTQ
:

493 
PROTOCOL_BINARY_CMD_DELETEQ
:

494 
PROTOCOL_BINARY_CMD_FLUSHQ
:

495 
PROTOCOL_BINARY_CMD_INCREMENTQ
:

496 
PROTOCOL_BINARY_CMD_PREPENDQ
:

497 
PROTOCOL_BINARY_CMD_QUITQ
:

498 
PROTOCOL_BINARY_CMD_REPLACEQ
:

499 
PROTOCOL_BINARY_CMD_SETQ
:

500 
	`vîify
("Quõàcomm™d shouldn'àªtu∫ o¿suc˚ss" =
NULL
);

505 
cc
) {

506 
PROTOCOL_BINARY_CMD_ADD
:

507 
PROTOCOL_BINARY_CMD_REPLACE
:

508 
PROTOCOL_BINARY_CMD_SET
:

509 
PROTOCOL_BINARY_CMD_APPEND
:

510 
PROTOCOL_BINARY_CMD_PREPEND
:

511 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

512 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

513 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
 == 0);

514 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 != 0);

516 
PROTOCOL_BINARY_CMD_FLUSH
:

517 
PROTOCOL_BINARY_CMD_NOOP
:

518 
PROTOCOL_BINARY_CMD_QUIT
:

519 
PROTOCOL_BINARY_CMD_DELETE
:

520 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

521 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

522 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
 == 0);

523 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 == 0);

526 
PROTOCOL_BINARY_CMD_DECREMENT
:

527 
PROTOCOL_BINARY_CMD_INCREMENT
:

528 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

529 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

530 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
 == 8);

531 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 != 0);

534 
PROTOCOL_BINARY_CMD_STAT
:

535 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

537 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 == 0);

540 
PROTOCOL_BINARY_CMD_VERSION
:

541 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

542 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

543 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
 != 0);

544 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 == 0);

547 
PROTOCOL_BINARY_CMD_GET
:

548 
PROTOCOL_BINARY_CMD_GETQ
:

549 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

550 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 4);

551 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 != 0);

554 
PROTOCOL_BINARY_CMD_GETK
:

555 
PROTOCOL_BINARY_CMD_GETKQ
:

556 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 != 0);

557 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 4);

558 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 != 0);

568 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 == 0);

569 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
exéí
 == 0);

570 i‡(
cc
 !
PROTOCOL_BINARY_CMD_GETK
)

572 
	`vîify
(
r•
->
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 == 0);

576  
TEST_PASS
;

577 
	}
}

584 
	#vÆid©e_ª•⁄£_hódî
(
a
,
b
,
c
) \

585 
	`do_vÆid©e_ª•⁄£_hódî
(
a
,
b
,
c
Ë=
TEST_PASS


	)

588 
ã°_ªtu∫
 
	$£nd_bö¨y_no›
()

590 
comm™d
 
cmd
;

591 
	`øw_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_NOOP
, 
NULL
, 0, NULL, 0);

592 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

593  
TEST_PASS
;

594 
	}
}

596 
ã°_ªtu∫
 
	$ª˚ive_bö¨y_no›
()

598 
ª•⁄£
 
r•
;

599 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

600 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_NOOP
,

601 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

602  
TEST_PASS
;

603 
	}
}

605 
ã°_ªtu∫
 
	$ã°_bö¨y_no›
()

607 
	`execuã
(
	`£nd_bö¨y_no›
());

608 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

609  
TEST_PASS
;

610 
	}
}

612 
ã°_ªtu∫
 
	$ã°_bö¨y_quô_im∂
(
uöt8_t
 
cc
)

614 
comm™d
 
cmd
;

615 
ª•⁄£
 
r•
;

616 
	`øw_comm™d
(&
cmd
, 
cc
, 
NULL
, 0, NULL, 0);

618 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

619 i‡(
cc
 =
PROTOCOL_BINARY_CMD_QUIT
)

621 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

622 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_QUIT
,

623 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

627 
	`vîify
(
	`timeout_io_›
(
sock
, 
POLLIN
, 
r•
.
byãs
, (rsp.bytes)) == 0);

629  
TEST_PASS_RECONNECT
;

630 
	}
}

632 
ã°_ªtu∫
 
	$ã°_bö¨y_quô
()

634  
	`ã°_bö¨y_quô_im∂
(
PROTOCOL_BINARY_CMD_QUIT
);

635 
	}
}

637 
ã°_ªtu∫
 
	$ã°_bö¨y_quôq
()

639  
	`ã°_bö¨y_quô_im∂
(
PROTOCOL_BINARY_CMD_QUITQ
);

640 
	}
}

642 
ã°_ªtu∫
 
	$ã°_bö¨y_£t_im∂
(c⁄° * 
key
, 
uöt8_t
 
cc
)

644 
comm™d
 
cmd
;

645 
ª•⁄£
 
r•
;

647 
uöt64_t
 
vÆue
= 0xdeadbeefdeadcafe;

648 
	`°‹age_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), &
vÆue
,  (value), 0, 0);

651 
ii
= 0; ii < 10; ii++)

653 i‡(
ii
 == 0)

654 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

656 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

658 i‡(
cc
 =
PROTOCOL_BINARY_CMD_SET
)

660 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

661 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

664 
	`execuã
(
	`ã°_bö¨y_no›
());

671 i‡(
cc
 =
PROTOCOL_BINARY_CMD_SETQ
)

673 
cmd
.
£t
.
mesßge
.
hódî
.
ªque°
.
›code

PROTOCOL_BINARY_CMD_SET
;

674 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

675 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

676 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_SET
,

677 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

678 
cmd
.
£t
.
mesßge
.
hódî
.
ªque°
.
›code

PROTOCOL_BINARY_CMD_SETQ
;

682 
cmd
.
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs
=

683 
	`ht⁄Œ
(
r•
.
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
);

684 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

685 i‡(
cc
 =
PROTOCOL_BINARY_CMD_SET
)

687 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

688 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

691 
	`execuã
(
	`ã°_bö¨y_no›
());

694 
cmd
.
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs
=

695 
	`ht⁄Œ
(
r•
.
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 - 1);

696 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

697 
	`execuã
(
	`£nd_bö¨y_no›
());

698 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

699 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
));

700 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

702  
TEST_PASS
;

703 
	}
}

705 
ã°_ªtu∫
 
	$ã°_bö¨y_£t
()

707  
	`ã°_bö¨y_£t_im∂
("ã°_bö¨y_£t", 
PROTOCOL_BINARY_CMD_SET
);

708 
	}
}

710 
ã°_ªtu∫
 
	$ã°_bö¨y_£tq
()

712  
	`ã°_bö¨y_£t_im∂
("ã°_bö¨y_£tq", 
PROTOCOL_BINARY_CMD_SETQ
);

713 
	}
}

715 
ã°_ªtu∫
 
	$ã°_bö¨y_add_im∂
(c⁄° * 
key
, 
uöt8_t
 
cc
)

717 
comm™d
 
cmd
;

718 
ª•⁄£
 
r•
;

719 
uöt64_t
 
vÆue
= 0xdeadbeefdeadcafe;

720 
	`°‹age_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), &
vÆue
,  (value), 0, 0);

724 
ii
=0; ii < 10; ii++)

726 i‡(
ii
 == 0)

727 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

729 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

731 i‡(
cc
 =
PROTOCOL_BINARY_CMD_ADD
 || 
ii
 > 0)

733 
uöt16_t
 
ex≥˘ed_ªsu…
;

734 i‡(
ii
 == 0)

735 
ex≥˘ed_ªsu…

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

737 
ex≥˘ed_ªsu…

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

739 
	`execuã
(
	`£nd_bö¨y_no›
());

740 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

741 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

742 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
ex≥˘ed_ªsu…
));

745 
	`execuã
(
	`ã°_bö¨y_no›
());

748  
TEST_PASS
;

749 
	}
}

751 
ã°_ªtu∫
 
	$ã°_bö¨y_add
()

753  
	`ã°_bö¨y_add_im∂
("ã°_bö¨y_add", 
PROTOCOL_BINARY_CMD_ADD
);

754 
	}
}

756 
ã°_ªtu∫
 
	$ã°_bö¨y_addq
()

758  
	`ã°_bö¨y_add_im∂
("ã°_bö¨y_addq", 
PROTOCOL_BINARY_CMD_ADDQ
);

759 
	}
}

761 
ã°_ªtu∫
 
	$bö¨y_£t_ôem
(c⁄° *
key
, c⁄° *
vÆue
)

763 
comm™d
 
cmd
;

764 
ª•⁄£
 
r•
;

765 
	`°‹age_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_SET
, 
key
, 
	`°æí
(key),

766 
vÆue
, 
	`°æí
(value), 0, 0);

767 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

768 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

769 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_SET
,

770 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

771  
TEST_PASS
;

772 
	}
}

774 
ã°_ªtu∫
 
	$ã°_bö¨y_ª∂a˚_im∂
(c⁄° * 
key
, 
uöt8_t
 
cc
)

776 
comm™d
 
cmd
;

777 
ª•⁄£
 
r•
;

778 
uöt64_t
 
vÆue
= 0xdeadbeefdeadcafe;

779 
	`°‹age_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), &
vÆue
,  (value), 0, 0);

783 
ii
= 0; ii < 10; ii++)

785 i‡(
ii
 == 0)

786 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

788 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

790 i‡(
cc
 =
PROTOCOL_BINARY_CMD_REPLACE
 || 
ii
 == 0)

792 
uöt16_t
 
ex≥˘ed_ªsu…
;

793 i‡(
ii
 == 0)

794 
ex≥˘ed_ªsu…
=
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

796 
ex≥˘ed_ªsu…
=
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

798 
	`execuã
(
	`£nd_bö¨y_no›
());

799 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

800 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

801 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
ex≥˘ed_ªsu…
));

803 i‡(
ii
 == 0)

804 
	`execuã
(
	`bö¨y_£t_ôem
(
key
, key));

807 
	`execuã
(
	`ã°_bö¨y_no›
());

811 
cmd
.
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs
=

812 
	`ht⁄Œ
(
r•
.
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
);

813 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

815 i‡(
cc
 =
PROTOCOL_BINARY_CMD_REPLACE
)

817 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

818 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

821 
	`execuã
(
	`ã°_bö¨y_no›
());

824 
cmd
.
∂aö
.
mesßge
.
hódî
.
ªque°
.
ˇs
=

825 
	`ht⁄Œ
(
r•
.
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
ˇs
 - 1);

826 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

827 
	`execuã
(
	`£nd_bö¨y_no›
());

828 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

829 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

830 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
));

832  
TEST_PASS
;

833 
	}
}

835 
ã°_ªtu∫
 
	$ã°_bö¨y_ª∂a˚
()

837  
	`ã°_bö¨y_ª∂a˚_im∂
("ã°_bö¨y_ª∂a˚", 
PROTOCOL_BINARY_CMD_REPLACE
);

838 
	}
}

840 
ã°_ªtu∫
 
	$ã°_bö¨y_ª∂a˚q
()

842  
	`ã°_bö¨y_ª∂a˚_im∂
("ã°_bö¨y_ª∂a˚q", 
PROTOCOL_BINARY_CMD_REPLACEQ
);

843 
	}
}

845 
ã°_ªtu∫
 
	$ã°_bö¨y_dñëe_im∂
(c⁄° *
key
, 
uöt8_t
 
cc
)

847 
comm™d
 
cmd
;

848 
ª•⁄£
 
r•
;

849 
	`øw_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), 
NULL
, 0);

852 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

853 
	`execuã
(
	`£nd_bö¨y_no›
());

854 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

855 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
));

856 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

857 
	`execuã
(
	`bö¨y_£t_ôem
(
key
, key));

860 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

861 i‡(
cc
 =
PROTOCOL_BINARY_CMD_DELETE
)

863 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

864 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

867 
	`execuã
(
	`ã°_bö¨y_no›
());

869  
TEST_PASS
;

870 
	}
}

872 
ã°_ªtu∫
 
	$ã°_bö¨y_dñëe
()

874  
	`ã°_bö¨y_dñëe_im∂
("ã°_bö¨y_dñëe", 
PROTOCOL_BINARY_CMD_DELETE
);

875 
	}
}

877 
ã°_ªtu∫
 
	$ã°_bö¨y_dñëeq
()

879  
	`ã°_bö¨y_dñëe_im∂
("ã°_bö¨y_dñëeq", 
PROTOCOL_BINARY_CMD_DELETEQ
);

880 
	}
}

882 
ã°_ªtu∫
 
	$ã°_bö¨y_gë_im∂
(c⁄° *
key
, 
uöt8_t
 
cc
)

884 
comm™d
 
cmd
;

885 
ª•⁄£
 
r•
;

887 
	`øw_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), 
NULL
, 0);

888 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

889 
	`execuã
(
	`£nd_bö¨y_no›
());

891 i‡(
cc
 =
PROTOCOL_BINARY_CMD_GET
 || c¯=
PROTOCOL_BINARY_CMD_GETK
)

893 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

894 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
));

897 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

899 
	`execuã
(
	`bö¨y_£t_ôem
(
key
, key));

900 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

901 
	`execuã
(
	`£nd_bö¨y_no›
());

903 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

904 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

905 
	`execuã
(
	`ª˚ive_bö¨y_no›
());

907  
TEST_PASS
;

908 
	}
}

910 
ã°_ªtu∫
 
	$ã°_bö¨y_gë
()

912  
	`ã°_bö¨y_gë_im∂
("ã°_bö¨y_gë", 
PROTOCOL_BINARY_CMD_GET
);

913 
	}
}

915 
ã°_ªtu∫
 
	$ã°_bö¨y_gëk
()

917  
	`ã°_bö¨y_gë_im∂
("ã°_bö¨y_gëk", 
PROTOCOL_BINARY_CMD_GETK
);

918 
	}
}

920 
ã°_ªtu∫
 
	$ã°_bö¨y_gëq
()

922  
	`ã°_bö¨y_gë_im∂
("ã°_bö¨y_gëq", 
PROTOCOL_BINARY_CMD_GETQ
);

923 
	}
}

925 
ã°_ªtu∫
 
	$ã°_bö¨y_gëkq
()

927  
	`ã°_bö¨y_gë_im∂
("ã°_bö¨y_gëkq", 
PROTOCOL_BINARY_CMD_GETKQ
);

928 
	}
}

930 
ã°_ªtu∫
 
	$ã°_bö¨y_ö¸_im∂
(c⁄° * 
key
, 
uöt8_t
 
cc
)

932 
comm™d
 
cmd
;

933 
ª•⁄£
 
r•
;

934 
	`¨ôhmëic_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), 1, 0, 0);

936 
uöt64_t
 
ii
;

937 
ii
= 0; ii < 10; ++ii)

939 i‡(
ii
 == 0)

940 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

942 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

944 i‡(
cc
 =
PROTOCOL_BINARY_CMD_INCREMENT
)

946 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

947 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

948 
	`vîify
(
	`¡ohŒ
(
r•
.
ö¸
.
mesßge
.
body
.
vÆue
Ë=
ii
);

951 
	`execuã
(
	`ã°_bö¨y_no›
());

955  
TEST_PASS
;

956 
	}
}

958 
ã°_ªtu∫
 
	$ã°_bö¨y_ö¸
()

960  
	`ã°_bö¨y_ö¸_im∂
("ã°_bö¨y_ö¸", 
PROTOCOL_BINARY_CMD_INCREMENT
);

961 
	}
}

963 
ã°_ªtu∫
 
	$ã°_bö¨y_ö¸q
()

965  
	`ã°_bö¨y_ö¸_im∂
("ã°_bö¨y_ö¸q", 
PROTOCOL_BINARY_CMD_INCREMENTQ
);

966 
	}
}

968 
ã°_ªtu∫
 
	$ã°_bö¨y_de¸_im∂
(c⁄° * 
key
, 
uöt8_t
 
cc
)

970 
comm™d
 
cmd
;

971 
ª•⁄£
 
r•
;

972 
	`¨ôhmëic_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), 1, 9, 0);

974 
ii
;

975 
ii
= 9; ii > -1; --ii)

977 i‡(
ii
 == 9)

978 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

980 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

982 i‡(
cc
 =
PROTOCOL_BINARY_CMD_DECREMENT
)

984 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

985 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

986 
	`vîify
(
	`¡ohŒ
(
r•
.
de¸
.
mesßge
.
body
.
vÆue
Ë=(
uöt64_t
)
ii
);

989 
	`execuã
(
	`ã°_bö¨y_no›
());

993 
	`execuã
(
	`ª£nd_∑ckë
(&
cmd
));

994 i‡(
cc
 =
PROTOCOL_BINARY_CMD_DECREMENT
)

996 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

997 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

998 
	`vîify
(
	`¡ohŒ
(
r•
.
de¸
.
mesßge
.
body
.
vÆue
) == 0);

1007 
	`execuã
(
	`ã°_bö¨y_no›
());

1008  
TEST_PASS
;

1009 
	}
}

1011 
ã°_ªtu∫
 
	$ã°_bö¨y_de¸
()

1013  
	`ã°_bö¨y_de¸_im∂
("test_binary_decr",

1014 
PROTOCOL_BINARY_CMD_DECREMENT
);

1015 
	}
}

1017 
ã°_ªtu∫
 
	$ã°_bö¨y_de¸q
()

1019  
	`ã°_bö¨y_de¸_im∂
("test_binary_decrq",

1020 
PROTOCOL_BINARY_CMD_DECREMENTQ
);

1021 
	}
}

1023 
ã°_ªtu∫
 
	$ã°_bö¨y_vîsi⁄
()

1025 
comm™d
 
cmd
;

1026 
ª•⁄£
 
r•
;

1027 
	`øw_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_VERSION
, 
NULL
, 0, NULL, 0);

1029 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1030 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1031 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_VERSION
,

1032 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1034  
TEST_PASS
;

1035 
	}
}

1037 
ã°_ªtu∫
 
	$ã°_bö¨y_Êush_im∂
(c⁄° *
key
, 
uöt8_t
 
cc
)

1039 
comm™d
 
cmd
;

1040 
ª•⁄£
 
r•
;

1042 
ii
= 0; ii < 2; ++ii)

1044 
	`execuã
(
	`bö¨y_£t_ôem
(
key
, key));

1045 
	`Êush_comm™d
(&
cmd
, 
cc
, 0, 
ii
 == 0);

1046 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1048 i‡(
cc
 =
PROTOCOL_BINARY_CMD_FLUSH
)

1050 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1051 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1054 
	`execuã
(
	`ã°_bö¨y_no›
());

1056 
	`øw_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_GET
, 
key
, 
	`°æí
(key), 
NULL
, 0);

1057 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1058 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1059 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_GET
,

1060 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
));

1063  
TEST_PASS
;

1064 
	}
}

1066 
ã°_ªtu∫
 
	$ã°_bö¨y_Êush
()

1068  
	`ã°_bö¨y_Êush_im∂
("ã°_bö¨y_Êush", 
PROTOCOL_BINARY_CMD_FLUSH
);

1069 
	}
}

1071 
ã°_ªtu∫
 
	$ã°_bö¨y_Êushq
()

1073  
	`ã°_bö¨y_Êush_im∂
("ã°_bö¨y_Êushq", 
PROTOCOL_BINARY_CMD_FLUSHQ
);

1074 
	}
}

1076 
ã°_ªtu∫
 
	$ã°_bö¨y_c⁄ˇt_im∂
(c⁄° *
key
, 
uöt8_t
 
cc
)

1078 
comm™d
 
cmd
;

1079 
ª•⁄£
 
r•
;

1080 c⁄° *
vÆue
;

1082 i‡(
cc
 =
PROTOCOL_BINARY_CMD_APPEND
 || c¯=
PROTOCOL_BINARY_CMD_APPENDQ
)

1083 
vÆue
="hello";

1085 
vÆue
=" world";

1087 
	`execuã
(
	`bö¨y_£t_ôem
(
key
, 
vÆue
));

1089 i‡(
cc
 =
PROTOCOL_BINARY_CMD_APPEND
 || c¯=
PROTOCOL_BINARY_CMD_APPENDQ
)

1090 
vÆue
=" world";

1092 
vÆue
="hello";

1094 
	`øw_comm™d
(&
cmd
, 
cc
, 
key
, 
	`°æí
(key), 
vÆue
, strlen(value));

1095 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1096 i‡(
cc
 =
PROTOCOL_BINARY_CMD_APPEND
 || c¯=
PROTOCOL_BINARY_CMD_PREPEND
)

1098 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1099 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
cc
, 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1102 
	`execuã
(
	`ã°_bö¨y_no›
());

1104 
	`øw_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_GET
, 
key
, 
	`°æí
(key), 
NULL
, 0);

1105 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1106 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1107 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_GET
,

1108 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1109 
	`vîify
(
r•
.
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
bodyÀn
 - 4 == 11);

1110 
	`vîify
(
	`memcmp
(
r•
.
byãs
 + 28, "hello world", 11) == 0);

1112  
TEST_PASS
;

1113 
	}
}

1115 
ã°_ªtu∫
 
	$ã°_bö¨y_≠≥nd
()

1117  
	`ã°_bö¨y_c⁄ˇt_im∂
("ã°_bö¨y_≠≥nd", 
PROTOCOL_BINARY_CMD_APPEND
);

1118 
	}
}

1120 
ã°_ªtu∫
 
	$ã°_bö¨y_¥ïíd
()

1122  
	`ã°_bö¨y_c⁄ˇt_im∂
("ã°_bö¨y_¥ïíd", 
PROTOCOL_BINARY_CMD_PREPEND
);

1123 
	}
}

1125 
ã°_ªtu∫
 
	$ã°_bö¨y_≠≥ndq
()

1127  
	`ã°_bö¨y_c⁄ˇt_im∂
("ã°_bö¨y_≠≥ndq", 
PROTOCOL_BINARY_CMD_APPENDQ
);

1128 
	}
}

1130 
ã°_ªtu∫
 
	$ã°_bö¨y_¥ïídq
()

1132  
	`ã°_bö¨y_c⁄ˇt_im∂
("ã°_bö¨y_¥ïídq", 
PROTOCOL_BINARY_CMD_PREPENDQ
);

1133 
	}
}

1135 
ã°_ªtu∫
 
	$ã°_bö¨y_°©
()

1137 
comm™d
 
cmd
;

1138 
ª•⁄£
 
r•
;

1140 
	`øw_comm™d
(&
cmd
, 
PROTOCOL_BINARY_CMD_STAT
, 
NULL
, 0, NULL, 0);

1141 
	`execuã
(
	`£nd_∑ckë
(&
cmd
));

1145 
	`execuã
(
	`ªcv_∑ckë
(&
r•
));

1146 
	`vîify
(
	`vÆid©e_ª•⁄£_hódî
(&
r•
, 
PROTOCOL_BINARY_CMD_STAT
,

1147 
PROTOCOL_BINARY_RESPONSE_SUCCESS
));

1148 } 
r•
.
∂aö
.
mesßge
.
hódî
.
ª•⁄£
.
keyÀn
 != 0);

1150  
TEST_PASS
;

1151 
	}
}

1153 
ã°_ªtu∫
 
	$£nd_°rög
(c⁄° *
cmd
)

1155 
	`execuã
(
	`ªåy_wrôe
(
cmd
, 
	`°æí
(cmd)));

1156  
TEST_PASS
;

1157 
	}
}

1159 
ã°_ªtu∫
 
	$ª˚ive_löe
(*
buf„r
, 
size_t
 
size
)

1161 
size_t
 
off£t
= 0;

1162 
off£t
 < 
size
)

1164 
	`execuã
(
	`ªåy_ªad
(
buf„r
 + 
off£t
, 1));

1165 i‡(
buf„r
[
off£t
] == '\n')

1167 i‡(
off£t
 + 1 < 
size
)

1169 
buf„r
[
off£t
 + 1]= '\0';

1170  
TEST_PASS
;

1173  
TEST_FAIL
;

1175 ++
off£t
;

1178  
TEST_FAIL
;

1179 
	}
}

1181 
ã°_ªtu∫
 
	$ª˚ive_ª•⁄£
(c⁄° *
msg
) {

1182 
buf„r
[80];

1183 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1184 i‡(
	`°rcmp
(
msg
, 
buf„r
) != 0) {

1185 
	`Ârötf
(
°dîr
, "[%s]\n", 
buf„r
);

1187 
	`vîify
(
	`°rcmp
(
msg
, 
buf„r
) == 0);

1188  
TEST_PASS
;

1189 
	}
}

1191 
ã°_ªtu∫
 
	$ª˚ive_îr‹_ª•⁄£
()

1193 
buf„r
[80];

1194 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1195 
	`vîify
(
	`°∫cmp
(
buf„r
, "ERROR", 5) == 0 ||

1196 
	`°∫cmp
(
buf„r
, "CLIENT_ERROR", 12) == 0 ||

1197 
	`°∫cmp
(
buf„r
, "SERVER_ERROR", 12) == 0);

1198  
TEST_PASS
;

1199 
	}
}

1201 
ã°_ªtu∫
 
	$ã°_ascii_quô
()

1204 
	`execuã
(
	`£nd_°rög
("quit foo bar\r\n"));

1205 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1208 
	`execuã
(
	`£nd_°rög
("quitÇoreply\r\n"));

1209 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1212 
	`execuã
(
	`£nd_°rög
("quit\r\n"));

1215 
buf„r
[80];

1216 
	`vîify
(
	`timeout_io_›
(
sock
, 
POLLIN
, 
buf„r
, (buffer)) == 0);

1217  
TEST_PASS_RECONNECT
;

1219 
	}
}

1221 
ã°_ªtu∫
 
	$ã°_ascii_vîsi⁄
()

1224 
	`execuã
(
	`£nd_°rög
("version foo bar\r\n"));

1225 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1228 
	`execuã
(
	`£nd_°rög
("versionÇoreply\r\n"));

1229 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1232 
	`execuã
(
	`£nd_°rög
("version\r\n"));

1233 
buf„r
[256];

1234 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1235 
	`vîify
(
	`°∫cmp
(
buf„r
, "VERSION ", 8) == 0);

1237  
TEST_PASS
;

1238 
	}
}

1240 
ã°_ªtu∫
 
	$ã°_ascii_vîbosôy
()

1243 
	`execuã
(
	`£nd_°rög
("verbosity foo bar my\r\n"));

1244 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1246 
	`execuã
(
	`£nd_°rög
("verbosityÇoreply\r\n"));

1247 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1249 
	`execuã
(
	`£nd_°rög
("verbosity 0Çoreply\r\n"));

1250 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1252 
	`execuã
(
	`£nd_°rög
("verbosity\r\n"));

1253 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1255 
	`execuã
(
	`£nd_°rög
("verbosity 1\r\n"));

1256 
	`execuã
(
	`ª˚ive_ª•⁄£
("OK\r\n"));

1258 
	`execuã
(
	`£nd_°rög
("verbosity 0\r\n"));

1259 
	`execuã
(
	`ª˚ive_ª•⁄£
("OK\r\n"));

1261  
TEST_PASS
;

1262 
	}
}

1266 
ã°_ªtu∫
 
	$ã°_ascii_£t_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1269 
buf„r
[1024];

1270 
	`¢¥ötf
(
buf„r
, (buf„r), "£à%†0 0 5%s\r\nvÆue\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1271 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1273 i‡(!
n‹ïly
)

1274 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1276  
	`ã°_ascii_vîsi⁄
();

1277 
	}
}

1279 
ã°_ªtu∫
 
	$ã°_ascii_£t
()

1281  
	`ã°_ascii_£t_im∂
("ã°_ascii_£t", 
Ál£
);

1282 
	}
}

1284 
ã°_ªtu∫
 
	$ã°_ascii_£t_n‹ïly
()

1286  
	`ã°_ascii_£t_im∂
("ã°_ascii_£t_n‹ïly", 
åue
);

1287 
	}
}

1289 
ã°_ªtu∫
 
	$ã°_ascii_add_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1292 
buf„r
[1024];

1293 
	`¢¥ötf
(
buf„r
, (buf„r), "add %†0 0 5%s\r\nvÆue\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1294 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1296 i‡(!
n‹ïly
)

1297 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1299 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1301 i‡(!
n‹ïly
)

1302 
	`execuã
(
	`ª˚ive_ª•⁄£
("NOT_STORED\r\n"));

1304  
	`ã°_ascii_vîsi⁄
();

1305 
	}
}

1307 
ã°_ªtu∫
 
	$ã°_ascii_add
()

1309  
	`ã°_ascii_add_im∂
("ã°_ascii_add", 
Ál£
);

1310 
	}
}

1312 
ã°_ªtu∫
 
	$ã°_ascii_add_n‹ïly
()

1314  
	`ã°_ascii_add_im∂
("ã°_ascii_add_n‹ïly", 
åue
);

1315 
	}
}

1317 
ã°_ªtu∫
 
	$ascii_gë_unknown_vÆue
(**
key
, **
vÆue
, 
ssize_t
 *
nd©a
)

1319 
buf„r
[1024];

1321 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1322 
	`vîify
(
	`°∫cmp
(
buf„r
, "VALUE ", 6) == 0);

1323 *
íd

	`°rchr
(
buf„r
 + 6, ' ');

1324 
	`vîify
(
íd
 !
NULL
);

1325 *
íd
= '\0';

1326 *
key

	`°rdup
(
buf„r
 + 6);

1327 
	`vîify
(*
key
 !
NULL
);

1328 *
±r

íd
 + 1;

1330 
vÆ

	`°πoul
(
±r
, &
íd
, 10);

1331 
	`vîify
(
±r
 !
íd
);

1332 
	`vîify
(
vÆ
 == 0);

1333 
	`vîify
(
íd
 !
NULL
);

1334 *
nd©a
 = (
ssize_t
)
	`°πoul
(
íd
, &end, 10);

1335 
	`vîify
(
±r
 !
íd
);

1336 
	`vîify
(
íd
 !
NULL
);

1337 *
íd
 !'\n' && 
	`is•a˚
(*end))

1338 ++
íd
;

1339 
	`vîify
(*
íd
 == '\n');

1341 *
vÆue

	`mÆloc
((
size_t
)*
nd©a
);

1342 
	`vîify
(*
vÆue
 !
NULL
);

1344 
	`execuã
(
	`ªåy_ªad
(*
vÆue
, (
size_t
)*
nd©a
));

1346 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 2));

1347 
	`vîify
(
	`memcmp
(
buf„r
, "\r\n", 2) == 0);

1349  
TEST_PASS
;

1350 
	}
}

1352 
ã°_ªtu∫
 
	$ascii_gë_vÆue
(c⁄° *
key
, c⁄° *
vÆue
)

1355 
buf„r
[1024];

1356 
size_t
 
d©asize

	`°æí
(
vÆue
);

1358 
	`vîify
(
d©asize
 < (
buf„r
));

1359 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1360 
	`vîify
(
	`°∫cmp
(
buf„r
, "VALUE ", 6) == 0);

1361 
	`vîify
(
	`°∫cmp
(
buf„r
 + 6, 
key
, 
	`°æí
(key)) == 0);

1362 *
±r

buf„r
 + 6 + 
	`°æí
(
key
) + 1;

1363 *
íd
;

1365 
vÆ

	`°πoul
(
±r
, &
íd
, 10);

1366 
	`vîify
(
±r
 !
íd
);

1367 
	`vîify
(
vÆ
 == 0);

1368 
	`vîify
(
íd
 !
NULL
);

1369 
vÆ

	`°πoul
(
íd
, &end, 10);

1370 
	`vîify
(
±r
 !
íd
);

1371 
	`vîify
(
vÆ
 =
d©asize
);

1372 
	`vîify
(
íd
 !
NULL
);

1373 *
íd
 !'\n' && 
	`is•a˚
(*end))

1374 ++
íd
;

1375 
	`vîify
(*
íd
 == '\n');

1377 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 
d©asize
));

1378 
	`vîify
(
	`memcmp
(
buf„r
, 
vÆue
, 
d©asize
) == 0);

1380 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 2));

1381 
	`vîify
(
	`memcmp
(
buf„r
, "\r\n", 2) == 0);

1383  
TEST_PASS
;

1384 
	}
}

1386 
ã°_ªtu∫
 
	$ascii_gë_ôem
(c⁄° *
key
, c⁄° *
vÆue
,

1387 
boﬁ
 
exi°
)

1389 
buf„r
[1024];

1390 
size_t
 
d©asize
= 0;

1391 i‡(
vÆue
 !
NULL
)

1392 
d©asize

	`°æí
(
vÆue
);

1394 
	`vîify
(
d©asize
 < (
buf„r
));

1395 
	`¢¥ötf
(
buf„r
, (buf„r), "gë %s\r\n", 
key
);

1396 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1398 i‡(
exi°
)

1399 
	`execuã
(
	`ascii_gë_vÆue
(
key
, 
vÆue
));

1401 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 5));

1402 
	`vîify
(
	`memcmp
(
buf„r
, "END\r\n", 5) == 0);

1404  
TEST_PASS
;

1405 
	}
}

1407 
ã°_ªtu∫
 
	$ascii_gës_vÆue
(c⁄° *
key
, c⁄° *
vÆue
,

1408 *
ˇs
)

1411 
buf„r
[1024];

1412 
size_t
 
d©asize

	`°æí
(
vÆue
);

1414 
	`vîify
(
d©asize
 < (
buf„r
));

1415 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1416 
	`vîify
(
	`°∫cmp
(
buf„r
, "VALUE ", 6) == 0);

1417 
	`vîify
(
	`°∫cmp
(
buf„r
 + 6, 
key
, 
	`°æí
(key)) == 0);

1418 *
±r

buf„r
 + 6 + 
	`°æí
(
key
) + 1;

1419 *
íd
;

1421 
vÆ

	`°πoul
(
±r
, &
íd
, 10);

1422 
	`vîify
(
±r
 !
íd
);

1423 
	`vîify
(
vÆ
 == 0);

1424 
	`vîify
(
íd
 !
NULL
);

1425 
vÆ

	`°πoul
(
íd
, &end, 10);

1426 
	`vîify
(
±r
 !
íd
);

1427 
	`vîify
(
vÆ
 =
d©asize
);

1428 
	`vîify
(
íd
 !
NULL
);

1429 *
ˇs

	`°πoul
(
íd
, &end, 10);

1430 
	`vîify
(
±r
 !
íd
);

1431 
	`vîify
(
vÆ
 =
d©asize
);

1432 
	`vîify
(
íd
 !
NULL
);

1434 *
íd
 !'\n' && 
	`is•a˚
(*end))

1435 ++
íd
;

1436 
	`vîify
(*
íd
 == '\n');

1438 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 
d©asize
));

1439 
	`vîify
(
	`memcmp
(
buf„r
, 
vÆue
, 
d©asize
) == 0);

1441 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 2));

1442 
	`vîify
(
	`memcmp
(
buf„r
, "\r\n", 2) == 0);

1444  
TEST_PASS
;

1445 
	}
}

1447 
ã°_ªtu∫
 
	$ascii_gës_ôem
(c⁄° *
key
, c⁄° *
vÆue
,

1448 
boﬁ
 
exi°
, *
ˇs
)

1450 
buf„r
[1024];

1451 
size_t
 
d©asize
= 0;

1452 i‡(
vÆue
 !
NULL
)

1453 
d©asize

	`°æí
(
vÆue
);

1455 
	`vîify
(
d©asize
 < (
buf„r
));

1456 
	`¢¥ötf
(
buf„r
, (buf„r), "gë†%s\r\n", 
key
);

1457 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1459 i‡(
exi°
)

1460 
	`execuã
(
	`ascii_gës_vÆue
(
key
, 
vÆue
, 
ˇs
));

1462 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 5));

1463 
	`vîify
(
	`memcmp
(
buf„r
, "END\r\n", 5) == 0);

1465  
TEST_PASS
;

1466 
	}
}

1468 
ã°_ªtu∫
 
	$ascii_£t_ôem
(c⁄° *
key
, c⁄° *
vÆue
)

1470 
buf„r
[300];

1471 
size_t
 
Àn

	`°æí
(
vÆue
);

1472 
	`¢¥ötf
(
buf„r
, (buf„r), "£à%†0 0 %u\r\n", 
key
, ()
Àn
);

1473 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1474 
	`execuã
(
	`ªåy_wrôe
(
vÆue
, 
Àn
));

1475 
	`execuã
(
	`£nd_°rög
("\r\n"));

1476 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1477  
TEST_PASS
;

1478 
	}
}

1480 
ã°_ªtu∫
 
	$ã°_ascii_ª∂a˚_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1482 
buf„r
[1024];

1483 
	`¢¥ötf
(
buf„r
, (buf„r), "ª∂a˚ %†0 0 5%s\r\nvÆue\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1484 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1486 i‡(
n‹ïly
)

1487 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1489 
	`execuã
(
	`ª˚ive_ª•⁄£
("NOT_STORED\r\n"));

1491 
	`execuã
(
	`ascii_£t_ôem
(
key
, "value"));

1492 
	`execuã
(
	`ascii_gë_ôem
(
key
, "vÆue", 
åue
));

1495 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1497 i‡(
n‹ïly
)

1498 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1500 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1502  
	`ã°_ascii_vîsi⁄
();

1503 
	}
}

1505 
ã°_ªtu∫
 
	$ã°_ascii_ª∂a˚
()

1507  
	`ã°_ascii_ª∂a˚_im∂
("ã°_ascii_ª∂a˚", 
Ál£
);

1508 
	}
}

1510 
ã°_ªtu∫
 
	$ã°_ascii_ª∂a˚_n‹ïly
()

1512  
	`ã°_ascii_ª∂a˚_im∂
("ã°_ascii_ª∂a˚_n‹ïly", 
åue
);

1513 
	}
}

1515 
ã°_ªtu∫
 
	$ã°_ascii_ˇs_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1517 
buf„r
[1024];

1518 
ˇs
;

1520 
	`execuã
(
	`ascii_£t_ôem
(
key
, "value"));

1521 
	`execuã
(
	`ascii_gës_ôem
(
key
, "vÆue", 
åue
, &
ˇs
));

1523 
	`¢¥ötf
(
buf„r
, (buf„r), "ˇ†%†0 0 6 %lu%s\r\nvÆue2\r\n", 
key
, 
ˇs
, 
n‹ïly
 ? "Çoreply" : "");

1524 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1526 i‡(
n‹ïly
)

1527 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1529 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1532 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1534 i‡(
n‹ïly
)

1535 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1537 
	`execuã
(
	`ª˚ive_ª•⁄£
("EXISTS\r\n"));

1539  
	`ã°_ascii_vîsi⁄
();

1540 
	}
}

1542 
ã°_ªtu∫
 
	$ã°_ascii_ˇs
()

1544  
	`ã°_ascii_ˇs_im∂
("ã°_ascii_ˇs", 
Ál£
);

1545 
	}
}

1547 
ã°_ªtu∫
 
	$ã°_ascii_ˇs_n‹ïly
()

1549  
	`ã°_ascii_ˇs_im∂
("ã°_ascii_ˇs_n‹ïly", 
åue
);

1550 
	}
}

1552 
ã°_ªtu∫
 
	$ã°_ascii_dñëe_im∂
(c⁄° *
key
, 
boﬁ
 
n‹ïly
)

1554 
	`execuã
(
	`ascii_£t_ôem
(
key
, "value"));

1556 
	`execuã
(
	`£nd_°rög
("delete\r\n"));

1557 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1559 
	`execuã
(
	`£nd_°rög
("deleteá b c dÉ\r\n"));

1560 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1562 
buf„r
[1024];

1563 
	`¢¥ötf
(
buf„r
, (buf„r), "dñëê%s%s\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1564 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1566 i‡(
n‹ïly
)

1567 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1569 
	`execuã
(
	`ª˚ive_ª•⁄£
("DELETED\r\n"));

1571 
	`execuã
(
	`ascii_gë_ôem
(
key
, "vÆue", 
Ál£
));

1572 
	`execuã
(
	`£nd_°rög
(
buf„r
));

1573 i‡(
n‹ïly
)

1574 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1576 
	`execuã
(
	`ª˚ive_ª•⁄£
("NOT_FOUND\r\n"));

1578  
TEST_PASS
;

1579 
	}
}

1581 
ã°_ªtu∫
 
	$ã°_ascii_dñëe
()

1583  
	`ã°_ascii_dñëe_im∂
("ã°_ascii_dñëe", 
Ál£
);

1584 
	}
}

1586 
ã°_ªtu∫
 
	$ã°_ascii_dñëe_n‹ïly
()

1588  
	`ã°_ascii_dñëe_im∂
("ã°_ascii_dñëe_n‹ïly", 
åue
);

1589 
	}
}

1591 
ã°_ªtu∫
 
	$ã°_ascii_gë
()

1593 
	`execuã
(
	`ascii_£t_ôem
("test_ascii_get", "value"));

1595 
	`execuã
(
	`£nd_°rög
("get\r\n"));

1596 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1597 
	`execuã
(
	`ascii_gë_ôem
("ã°_ascii_gë", "vÆue", 
åue
));

1598 
	`execuã
(
	`ascii_gë_ôem
("ã°_ascii_gë_nŸfound", "vÆue", 
Ál£
));

1600  
TEST_PASS
;

1601 
	}
}

1603 
ã°_ªtu∫
 
	$ã°_ascii_gës
()

1605 
	`execuã
(
	`ascii_£t_ôem
("test_ascii_gets", "value"));

1607 
	`execuã
(
	`£nd_°rög
("gets\r\n"));

1608 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1609 
ˇs
;

1610 
	`execuã
(
	`ascii_gës_ôem
("ã°_ascii_gës", "vÆue", 
åue
, &
ˇs
));

1611 
	`execuã
(
	`ascii_gës_ôem
("ã°_ascii_gës_nŸfound", "vÆue", 
Ál£
, &
ˇs
));

1613  
TEST_PASS
;

1614 
	}
}

1616 
ã°_ªtu∫
 
	$ã°_ascii_mgë
()

1618 c⁄° 
uöt32_t
 
nkeys
= 5;

1619 c⁄° * c⁄° 
keys
[]= {

1628 
uöt32_t
 
x
0; x < 
nkeys
; ++x)

1629 
	`execuã
(
	`ascii_£t_ôem
(
keys
[
x
], "value"));

1632 
	`execuã
(
	`£nd_°rög
("getÅest_ascii_mget1Åest_ascii_mget2Åest_ascii_mget3 "

1636 *
ªtu∫ed
[
nkeys
];

1638 
uöt32_t
 
x
0; x < 
nkeys
; ++x)

1640 
ssize_t
 
nbyãs
 = 0;

1641 *
v

NULL
;

1642 
	`execuã
(
	`ascii_gë_unknown_vÆue
(&
ªtu∫ed
[
x
], &
v
, &
nbyãs
));

1643 
	`vîify
(
nbyãs
 == 5);

1644 
	`vîify
(
	`memcmp
(
v
, "value", 5) == 0);

1645 
	`‰ì
(
v
);

1648 
buf„r
[5];

1649 
	`execuã
(
	`ªåy_ªad
(
buf„r
, 5));

1650 
	`vîify
(
	`memcmp
(
buf„r
, "END\r\n", 5) == 0);

1653 
uöt32_t
 
x
0; x < 
nkeys
; ++x)

1655 
boﬁ
 
found

Ál£
;

1656 
uöt32_t
 
y
0; y < 
nkeys
; ++y)

1658 i‡(
	`°rcmp
(
keys
[
x
], 
ªtu∫ed
[
y
]) == 0)

1660 
found
 = 
åue
;

1664 
	`vîify
(
found
);

1667 
uöt32_t
 
x
0; x < 
nkeys
; ++x)

1668 
	`‰ì
(
ªtu∫ed
[
x
]);

1670  
TEST_PASS
;

1671 
	}
}

1673 
ã°_ªtu∫
 
	$ã°_ascii_ö¸_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1675 
cmd
[300];

1676 
	`¢¥ötf
(
cmd
, (cmd), "ö¸ %†1%s\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1678 
	`execuã
(
	`ascii_£t_ôem
(
key
, "0"));

1679 
x
= 1; x < 11; ++x)

1681 
	`execuã
(
	`£nd_°rög
(
cmd
));

1683 i‡(
n‹ïly
)

1684 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1687 
buf„r
[80];

1688 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1689 
vÆ

	`©oi
(
buf„r
);

1690 
	`vîify
(
vÆ
 =
x
);

1694 
	`execuã
(
	`ascii_gë_ôem
(
key
, "10", 
åue
));

1696  
TEST_PASS
;

1697 
	}
}

1699 
ã°_ªtu∫
 
	$ã°_ascii_ö¸
()

1701  
	`ã°_ascii_ö¸_im∂
("ã°_ascii_ö¸", 
Ál£
);

1702 
	}
}

1704 
ã°_ªtu∫
 
	$ã°_ascii_ö¸_n‹ïly
()

1706  
	`ã°_ascii_ö¸_im∂
("ã°_ascii_ö¸_n‹ïly", 
åue
);

1707 
	}
}

1709 
ã°_ªtu∫
 
	$ã°_ascii_de¸_im∂
(c⁄° * 
key
, 
boﬁ
 
n‹ïly
)

1711 
cmd
[300];

1712 
	`¢¥ötf
(
cmd
, (cmd), "de¸ %†1%s\r\n", 
key
, 
n‹ïly
 ? "Çoreply" : "");

1714 
	`execuã
(
	`ascii_£t_ôem
(
key
, "9"));

1715 
x
= 8; x > -1; --x)

1717 
	`execuã
(
	`£nd_°rög
(
cmd
));

1719 i‡(
n‹ïly
)

1720 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1723 
buf„r
[80];

1724 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1725 
vÆ

	`©oi
(
buf„r
);

1726 
	`vîify
(
vÆ
 =
x
);

1730 
	`execuã
(
	`ascii_gë_ôem
(
key
, "0", 
åue
));

1733 
	`execuã
(
	`£nd_°rög
(
cmd
));

1734 i‡(
n‹ïly
)

1735 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1738 
buf„r
[80];

1739 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1741 
	`execuã
(
	`ascii_gë_ôem
(
key
, "0", 
åue
));

1743  
TEST_PASS
;

1744 
	}
}

1746 
ã°_ªtu∫
 
	$ã°_ascii_de¸
()

1748  
	`ã°_ascii_de¸_im∂
("ã°_ascii_de¸", 
Ál£
);

1749 
	}
}

1751 
ã°_ªtu∫
 
	$ã°_ascii_de¸_n‹ïly
()

1753  
	`ã°_ascii_de¸_im∂
("ã°_ascii_de¸_n‹ïly", 
åue
);

1754 
	}
}

1757 
ã°_ªtu∫
 
	$ã°_ascii_Êush_im∂
(c⁄° *
key
, 
boﬁ
 
n‹ïly
)

1762 
	`execuã
(
	`£nd_°rög
("flush_all foo bar\r\n"));

1763 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1766 
	`execuã
(
	`ascii_£t_ôem
(
key
, key));

1767 
	`execuã
(
	`ascii_gë_ôem
(
key
, key, 
åue
));

1769 i‡(
n‹ïly
)

1771 
	`execuã
(
	`£nd_°rög
("flush_allÇoreply\r\n"));

1772 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1776 
	`execuã
(
	`£nd_°rög
("flush_all\r\n"));

1777 
	`execuã
(
	`ª˚ive_ª•⁄£
("OK\r\n"));

1780 
	`execuã
(
	`ascii_gë_ôem
(
key
, key, 
Ál£
));

1782  
TEST_PASS
;

1783 
	}
}

1785 
ã°_ªtu∫
 
	$ã°_ascii_Êush
()

1787  
	`ã°_ascii_Êush_im∂
("ã°_ascii_Êush", 
Ál£
);

1788 
	}
}

1790 
ã°_ªtu∫
 
	$ã°_ascii_Êush_n‹ïly
()

1792  
	`ã°_ascii_Êush_im∂
("ã°_ascii_Êush_n‹ïly", 
åue
);

1793 
	}
}

1795 
ã°_ªtu∫
 
	$ã°_ascii_c⁄ˇt_im∂
(c⁄° *
key
,

1796 
boﬁ
 
≠≥nd
,

1797 
boﬁ
 
n‹ïly
)

1799 c⁄° *
vÆue
;

1801 i‡(
≠≥nd
)

1802 
vÆue
="hello";

1804 
vÆue
=" world";

1806 
	`execuã
(
	`ascii_£t_ôem
(
key
, 
vÆue
));

1808 i‡(
≠≥nd
)

1809 
vÆue
=" world";

1811 
vÆue
="hello";

1813 
cmd
[400];

1814 
	`¢¥ötf
(
cmd
, (cmd), "%s %s 0 0 %u%s\r\n%s\r\n",

1815 
≠≥nd
 ? "append" : "prepend",

1816 
key
, ()
	`°æí
(
vÆue
), 
n‹ïly
 ? "Çoreply" : "",

1817 
vÆue
);

1818 
	`execuã
(
	`£nd_°rög
(
cmd
));

1820 i‡(
n‹ïly
)

1821 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1823 
	`execuã
(
	`ª˚ive_ª•⁄£
("STORED\r\n"));

1825 
	`execuã
(
	`ascii_gë_ôem
(
key
, "hñlÿw‹ld", 
åue
));

1827 
	`¢¥ötf
(
cmd
, (cmd), "%s %s_notfound 0 0 %u%s\r\n%s\r\n",

1828 
≠≥nd
 ? "append" : "prepend",

1829 
key
, ()
	`°æí
(
vÆue
), 
n‹ïly
 ? "Çoreply" : "",

1830 
vÆue
);

1831 
	`execuã
(
	`£nd_°rög
(
cmd
));

1833 i‡(
n‹ïly
)

1834 
	`execuã
(
	`ã°_ascii_vîsi⁄
());

1836 
	`execuã
(
	`ª˚ive_ª•⁄£
("NOT_STORED\r\n"));

1838  
TEST_PASS
;

1839 
	}
}

1841 
ã°_ªtu∫
 
	$ã°_ascii_≠≥nd
()

1843  
	`ã°_ascii_c⁄ˇt_im∂
("ã°_ascii_≠≥nd", 
åue
, 
Ál£
);

1844 
	}
}

1846 
ã°_ªtu∫
 
	$ã°_ascii_¥ïíd
()

1848  
	`ã°_ascii_c⁄ˇt_im∂
("ã°_ascii_¥ïíd", 
Ál£
, false);

1849 
	}
}

1851 
ã°_ªtu∫
 
	$ã°_ascii_≠≥nd_n‹ïly
()

1853  
	`ã°_ascii_c⁄ˇt_im∂
("ã°_ascii_≠≥nd_n‹ïly", 
åue
,Årue);

1854 
	}
}

1856 
ã°_ªtu∫
 
	$ã°_ascii_¥ïíd_n‹ïly
()

1858  
	`ã°_ascii_c⁄ˇt_im∂
("ã°_ascii_¥ïíd_n‹ïly", 
Ál£
, 
åue
);

1859 
	}
}

1861 
ã°_ªtu∫
 
	$ã°_ascii_°©
()

1863 
	`execuã
(
	`£nd_°rög
("statsÇoreply\r\n"));

1864 
	`execuã
(
	`ª˚ive_îr‹_ª•⁄£
());

1865 
	`execuã
(
	`£nd_°rög
("stats\r\n"));

1866 
buf„r
[1024];

1868 
	`execuã
(
	`ª˚ive_löe
(
buf„r
, (buffer)));

1869 } 
	`°rcmp
(
buf„r
, "END\r\n") != 0);

1871  
TEST_PASS_RECONNECT
;

1872 
	}
}

1874 
	$ã°_ªtu∫
(*
	tTEST_FUNC
)();

1876 
	sã°ˇ£


1878 c⁄° *
des¸ùti⁄
;

1879 
TEST_FUNC
 
fun˘i⁄
;

1882 
ã°ˇ£
 
ã°ˇ£s
[]= {

1883 { "asciòquô", 
ã°_ascii_quô
 },

1884 { "asciòvîsi⁄", 
ã°_ascii_vîsi⁄
 },

1885 { "asciòvîbosôy", 
ã°_ascii_vîbosôy
 },

1886 { "asciò£t", 
ã°_ascii_£t
 },

1887 { "asciò£àn‹ïly", 
ã°_ascii_£t_n‹ïly
 },

1888 { "asciògë", 
ã°_ascii_gë
 },

1889 { "asciògës", 
ã°_ascii_gës
 },

1890 { "asciòmgë", 
ã°_ascii_mgë
 },

1891 { "asciòÊush", 
ã°_ascii_Êush
 },

1892 { "asciòÊushÇ‹ïly", 
ã°_ascii_Êush_n‹ïly
 },

1893 { "asciòadd", 
ã°_ascii_add
 },

1894 { "asciòaddÇ‹ïly", 
ã°_ascii_add_n‹ïly
 },

1895 { "asciòª∂a˚", 
ã°_ascii_ª∂a˚
 },

1896 { "asciòª∂a˚Ç‹ïly", 
ã°_ascii_ª∂a˚_n‹ïly
 },

1897 { "asciòˇs", 
ã°_ascii_ˇs
 },

1898 { "asciòˇ†n‹ïly", 
ã°_ascii_ˇs_n‹ïly
 },

1899 { "asciòdñëe", 
ã°_ascii_dñëe
 },

1900 { "asciòdñëên‹ïly", 
ã°_ascii_dñëe_n‹ïly
 },

1901 { "asciòö¸", 
ã°_ascii_ö¸
 },

1902 { "asciòö¸Ç‹ïly", 
ã°_ascii_ö¸_n‹ïly
 },

1903 { "asciòde¸", 
ã°_ascii_de¸
 },

1904 { "asciòde¸Ç‹ïly", 
ã°_ascii_de¸_n‹ïly
 },

1905 { "asciò≠≥nd", 
ã°_ascii_≠≥nd
 },

1906 { "asciò≠≥ndÇ‹ïly", 
ã°_ascii_≠≥nd_n‹ïly
 },

1907 { "asciò¥ïíd", 
ã°_ascii_¥ïíd
 },

1908 { "asciò¥ïídÇ‹ïly", 
ã°_ascii_¥ïíd_n‹ïly
 },

1909 { "asciò°©", 
ã°_ascii_°©
 },

1910 { "bö¨yÇo›", 
ã°_bö¨y_no›
 },

1911 { "bö¨y quô", 
ã°_bö¨y_quô
 },

1912 { "bö¨y quôq", 
ã°_bö¨y_quôq
 },

1913 { "bö¨y së", 
ã°_bö¨y_£t
 },

1914 { "bö¨y sëq", 
ã°_bö¨y_£tq
 },

1915 { "bö¨y flush", 
ã°_bö¨y_Êush
 },

1916 { "bö¨y flushq", 
ã°_bö¨y_Êushq
 },

1917 { "bö¨yádd", 
ã°_bö¨y_add
 },

1918 { "bö¨yáddq", 
ã°_bö¨y_addq
 },

1919 { "bö¨yÑïœ˚", 
ã°_bö¨y_ª∂a˚
 },

1920 { "bö¨yÑïœ˚q", 
ã°_bö¨y_ª∂a˚q
 },

1921 { "bö¨y dñëe", 
ã°_bö¨y_dñëe
 },

1922 { "bö¨y dñëeq", 
ã°_bö¨y_dñëeq
 },

1923 { "bö¨y gë", 
ã°_bö¨y_gë
 },

1924 { "bö¨y gëq", 
ã°_bö¨y_gëq
 },

1925 { "bö¨y gëk", 
ã°_bö¨y_gëk
 },

1926 { "bö¨y gëkq", 
ã°_bö¨y_gëkq
 },

1927 { "bö¨y in¸", 
ã°_bö¨y_ö¸
 },

1928 { "bö¨y in¸q", 
ã°_bö¨y_ö¸q
 },

1929 { "bö¨y de¸", 
ã°_bö¨y_de¸
 },

1930 { "bö¨y de¸q", 
ã°_bö¨y_de¸q
 },

1931 { "bö¨y vîsi⁄", 
ã°_bö¨y_vîsi⁄
 },

1932 { "bö¨yáµíd", 
ã°_bö¨y_≠≥nd
 },

1933 { "bö¨yáµídq", 
ã°_bö¨y_≠≥ndq
 },

1934 { "bö¨yÖª≥nd", 
ã°_bö¨y_¥ïíd
 },

1935 { "bö¨yÖª≥ndq", 
ã°_bö¨y_¥ïídq
 },

1936 { "bö¨y sèt", 
ã°_bö¨y_°©
 },

1937 { 
NULL
, NULL}

1938 
	}
};

1940 c⁄° 
	gascii_ã°s
 = 1;

1941 c⁄° 
	gbö¨y_ã°s
 = 2;

1943 
	sã°_ty≥_°


1945 
boﬁ
 
	mascii
;

1946 
boﬁ
 
	mbö¨y
;

1949 
	$maö
(
¨gc
, **
¨gv
)

1951 c⁄° * c⁄° 
°©us_msg
[]= {"[skip]", "[pass]", "[pass]", "[FAIL]"};

1952 
ã°_ty≥_°
 
ã°s
{ 
åue
,Årue };

1953 
tŸÆ
= 0;

1954 
Áûed
= 0;

1955 c⁄° *
ho°«me
= "localhost";

1956 c⁄° *
p‹t
= "11211";

1957 
cmd
;

1958 
boﬁ
 
¥om±

Ál£
;

1959 c⁄° *
ã°«me

NULL
;

1963 (
cmd

	`gë›t
(
¨gc
, 
¨gv
, "t:vch:p:PT:?ab")Ë!
EOF
)

1965 
cmd
) {

1967 
ã°s
.
ascii

åue
;

1968 
ã°s
.
bö¨y

Ál£
;

1971 
ã°s
.
ascii

Ál£
;

1972 
ã°s
.
bö¨y

åue
;

1975 
timeout

	`©oi
(
›èrg
);

1976 i‡(
timeout
 == 0)

1978 
	`Ârötf
(
°dîr
, "InvalidÅimeout. Please specifyáÇumber for -t\n");

1979  
EXIT_FAILURE
;

1982 'v': 
vîbo£

åue
;

1984 'c': 
do_c‹e

åue
;

1986 'h': 
ho°«me

›èrg
;

1988 'p': 
p‹t

›èrg
;

1990 'P': 
¥om±

åue
;

1992 'T': 
ã°«me

›èrg
;

1995 
	`Ârötf
(
°dîr
, "Usage: %s [-h hostname] [-pÖort] [-c] [-v] [-tÇ] [-P] [-TÅestname]'\n"

2006 
¨gv
[0]);

2007  
EXIT_FAILURE
;

2011 
	`öôülize_sockës
();

2012 
sock

	`c⁄√˘_£rvî
(
ho°«me
, 
p‹t
);

2013 i‡(
sock
 =
INVALID_SOCKET
)

2015 
	`Ârötf
(
°dîr
, "FailedÅo connectÅo <%s:%s>: %s\n",

2016 
ho°«me
, 
p‹t
, 
	`°ªº‹
(
	`gë_sockë_î∫o
()));

2017  
EXIT_FAILURE
;

2020 
ii
0; 
ã°ˇ£s
[ii].
des¸ùti⁄
 !
NULL
; ++ii)

2022 i‡(
ã°«me
 !
NULL
 && 
	`°rcmp
(
ã°ˇ£s
[
ii
].
des¸ùti⁄
,Åestname) != 0)

2025 i‡((
ã°ˇ£s
[
ii
].
des¸ùti⁄
[0] ='a' && (
ã°s
.
ascii
) == 0) ||

2026 (
ã°ˇ£s
[
ii
].
des¸ùti⁄
[0] ='b' && (
ã°s
.
bö¨y
) == 0))

2030 ++
tŸÆ
;

2031 
	`Ârötf
(
°dout
, "%-40s", 
ã°ˇ£s
[
ii
].
des¸ùti⁄
);

2032 
	`fÊush
(
°dout
);

2034 i‡(
¥om±
)

2036 
	`Ârötf
(
°dout
, "\nPress <return> when youáreÑeady? ");

2037 
buf„r
[80] = {0};

2038 i‡(
	`fgës
(
buf„r
, (buf„r), 
°dö
Ë!
NULL
) {

2039 i‡(
	`°∫cmp
(
buf„r
, "skip", 4) == 0)

2041 
	`Ârötf
(
°dout
, "%-40s%s\n", 
ã°ˇ£s
[
ii
].
des¸ùti⁄
,

2042 
°©us_msg
[
TEST_SKIP
]);

2043 
	`fÊush
(
°dout
);

2046 i‡(
	`°∫cmp
(
buf„r
, "quit", 4) == 0)

2047 
	`exô
(0);

2050 
	`Ârötf
(
°dout
, "%-40s", 
ã°ˇ£s
[
ii
].
des¸ùti⁄
);

2051 
	`fÊush
(
°dout
);

2054 
boﬁ
 
ªc⁄√˘

Ál£
;

2055 
ã°_ªtu∫
 
ªt

ã°ˇ£s
[
ii
].
	`fun˘i⁄
();

2056 i‡(
ªt
 =
TEST_FAIL
)

2058 
ªc⁄√˘

åue
;

2059 ++
Áûed
;

2060 i‡(
vîbo£
)

2061 
	`Ârötf
(
°dîr
, "\n");

2063 i‡(
ªt
 =
TEST_PASS_RECONNECT
)

2064 
ªc⁄√˘

åue
;

2066 
	`Ârötf
(
°dîr
, "%s\n", 
°©us_msg
[
ªt
]);

2067 i‡(
ªc⁄√˘
)

2069 
	`˛o£sockë
(
sock
);

2070 i‡((
sock

	`c⁄√˘_£rvî
(
ho°«me
, 
p‹t
)Ë=
INVALID_SOCKET
)

2072 
	`Ârötf
(
°dîr
, "FailedÅo connectÅo <%s:%s>: %s\n",

2073 
ho°«me
, 
p‹t
, 
	`°ªº‹
(
	`gë_sockë_î∫o
()));

2074 
	`Ârötf
(
°dîr
, "%d o‡%dÅe°†Áûed\n", 
Áûed
, 
tŸÆ
);

2075  
EXIT_FAILURE
;

2080 
	`˛o£sockë
(
sock
);

2081 i‡(
Áûed
 == 0)

2082 
	`Ârötf
(
°dout
, "AllÅestsÖassed\n");

2084 
	`Ârötf
(
°dîr
, "%d o‡%dÅe°†Áûed\n", 
Áûed
, 
tŸÆ
);

2086  (
Áûed
 == 0) ? 0 : 1;

2087 
	}
}

	@clients/memcat.c

12 
	~"c⁄fig.h
"

14 
	~<°dio.h
>

15 
	~<öây≥s.h
>

16 
	~<°rög.h
>

17 
	~<uni°d.h
>

18 
	~<gë›t.h
>

19 
	~<libmemˇched/memˇched.h
>

21 
	~"utûôõs.h
"

23 
	#PROGRAM_NAME
 "memˇt"

	)

24 
	#PROGRAM_DESCRIPTION
 "C©á së o‡key vÆue†tÿ°dout."

	)

28 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

30 
	g›t_bö¨y
= 0;

31 
	g›t_vîbo£
= 0;

32 
	g›t_di•œyÊag
= 0;

33 *
	g›t_£rvîs

NULL
;

34 *
	g›t_hash

NULL
;

35 *
	g›t_u£∫ame
;

36 *
	g›t_∑sswd
;

37 *
	g›t_fûe
;

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
memˇched_°
 *
memc
;

42 *
°rög
;

43 
size_t
 
°rög_Àngth
;

44 
uöt32_t
 
Êags
;

45 
memˇched_ªtu∫_t
 
rc
;

46 
memˇched_£rvî_°
 *
£rvîs
;

48 
ªtu∫_code
= 0;

50 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

51 
	`öôülize_sockës
();

53 i‡(!
›t_£rvîs
)

55 *
ãmp
;

57 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

58 
›t_£rvîs

	`°rdup
(
ãmp
);

61 
	`Ârötf
(
°dîr
, "No ServersÖrovided\n");

62 
	`exô
(1);

66 
memc

	`memˇched_¸óã
(
NULL
);

67 
	`¥o˚ss_hash_›ti⁄
(
memc
, 
›t_hash
);

69 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

71 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

72 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

73 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

74 (
uöt64_t
)
›t_bö¨y
);

76 i‡(!
	`öôülize_ß¶
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
))

78 
	`memˇched_‰ì
(
memc
);

79  
EXIT_FAILURE
;

82 
›töd
 < 
¨gc
)

84 
°rög

	`memˇched_gë
(
memc
, 
¨gv
[
›töd
], 
	`°æí
(argv[optind]),

85 &
°rög_Àngth
, &
Êags
, &
rc
);

86 i‡(
rc
 =
MEMCACHED_SUCCESS
)

88 i‡(
›t_di•œyÊag
)

90 i‡(
›t_vîbo£
)

91 
	`¥ötf
("key: %s\nÊags: ", 
¨gv
[
›töd
]);

92 
	`¥ötf
("%x\n", 
Êags
);

96 i‡(
›t_vîbo£
)

98 
	`¥ötf
("key: %s\nflags: %x\nlength: %zu\nvalue: ",

99 
¨gv
[
›töd
], 
Êags
, 
°rög_Àngth
);

102 i‡(
›t_fûe
)

104 
FILE
 *
Â
;

105 
size_t
 
wrôãn
;

107 
Â

	`f›í
(
›t_fûe
, "w");

108 i‡(!
Â
)

110 
	`≥º‹
("fopen");

111 
ªtu∫_code
= -1;

115 
wrôãn

	`fwrôe
(
°rög
, 1, 
°rög_Àngth
, 
Â
);

116 i‡(
wrôãn
 !
°rög_Àngth
)

118 
	`Ârötf
(
°dîr
, "îr‹ wrôög fûê(wrôã¿%zu, should bê%zu)\n", 
wrôãn
, 
°rög_Àngth
);

119 
ªtu∫_code
= -1;

123 i‡(
	`f˛o£
(
Â
))

125 
	`Ârötf
(
°dîr
, "error closing file\n");

126 
ªtu∫_code
= -1;

132 
	`¥ötf
("%.*s\n", ()
°rög_Àngth
, 
°rög
);

134 
	`‰ì
(
°rög
);

137 i‡(
rc
 !
MEMCACHED_NOTFOUND
)

139 
	`Ârötf
(
°dîr
, "memcat: %s: memcacheÉrror %s",

140 
¨gv
[
›töd
], 
	`memˇched_°ªº‹
(
memc
, 
rc
));

141 i‡(
	`memˇched_œ°_îr‹_î∫o
(
memc
))

143 
	`Ârötf
(
°dîr
, " sy°emÉº‹ %s", 
	`°ªº‹
(
	`memˇched_œ°_îr‹_î∫o
(
memc
)));

145 
	`Ârötf
(
°dîr
, "\n");

147 
ªtu∫_code
= -1;

152 
	`Ârötf
(
°dîr
, "memˇt: %†nŸ found\n", 
¨gv
[
›töd
]);

153 
ªtu∫_code
= -1;

155 
›töd
++;

158 
	`memˇched_‰ì
(
memc
);

160 i‡(
›t_£rvîs
)

161 
	`‰ì
(
›t_£rvîs
);

162 i‡(
›t_hash
)

163 
	`‰ì
(
›t_hash
);

165 
	`shutdown_ß¶
();

167  
ªtu∫_code
;

168 
	}
}

171 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

173 
›ti⁄_ödex
= 0;

174 
›ti⁄_rv
;

176 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

181 
›ti⁄
 
l⁄g_›ti⁄s
[]=

183 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

184 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

185 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

186 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

187 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

188 {(
OPTIONSTRING
)"Êag", 
no_¨gumít
, &
›t_di•œyÊag
, 
OPT_FLAG
},

189 {(
OPTIONSTRING
)"hash", 
ªquúed_¨gumít
, 
NULL
, 
OPT_HASH
},

190 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

191 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

192 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

193 {(
OPTIONSTRING
)"fûe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_FILE
},

199 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

200 i‡(
›ti⁄_rv
 == -1) ;

201 
›ti⁄_rv
)

205 
OPT_BINARY
:

206 
›t_bö¨y
 = 1;

208 
OPT_VERBOSE
:

209 
›t_vîbo£
 = 
OPT_VERBOSE
;

211 
OPT_DEBUG
:

212 
›t_vîbo£
 = 
OPT_DEBUG
;

214 
OPT_VERSION
:

215 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

217 
OPT_HELP
:

218 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

220 
OPT_SERVERS
:

221 
›t_£rvîs

	`°rdup
(
›èrg
);

223 
OPT_HASH
:

224 
›t_hash

	`°rdup
(
›èrg
);

226 
OPT_USERNAME
:

227 
›t_u£∫ame

›èrg
;

229 
OPT_PASSWD
:

230 
›t_∑sswd

›èrg
;

232 
OPT_FILE
:

233 
›t_fûe

›èrg
;

237 
	`exô
(1);

239 
	`ab‹t
();

242 
	}
}

	@clients/memcp.c

12 
	~"c⁄fig.h
"

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<öây≥s.h
>

17 
	~<uni°d.h
>

18 
	~<gë›t.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<f˙é.h
>

23 
	~<î∫o.h
>

24 
	~<°rögs.h
>

25 
	~<°rög.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<°dlib.h
>

28 
	~<limôs.h
>

31 
	~<libmemˇched/memˇched.h
>

33 
	~"˛õ¡_›ti⁄s.h
"

34 
	~"utûôõs.h
"

36 
	#PROGRAM_NAME
 "mem˝"

	)

37 
	#PROGRAM_DESCRIPTION
 "C›yá së o‡fûe†tÿ®memˇched clu°î."

	)

40 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

42 
	g›t_bö¨y
=0;

43 
	g›t_vîbo£
= 0;

44 *
	g›t_£rvîs

NULL
;

45 *
	g›t_hash

NULL
;

46 
	g›t_mëhod

OPT_SET
;

47 
uöt32_t
 
	g›t_Êags
= 0;

48 
time_t
 
	g›t_expúes
= 0;

49 *
	g›t_u£∫ame
;

50 *
	g›t_∑sswd
;

52 
	$°πﬁ_wøµî
(c⁄° *
≈å
, 
ba£
, 
boﬁ
 *
îr‹
)

54 
vÆ
;

55 *
íd±r
;

57 
î∫o
= 0;

58 
vÆ

	`°πﬁ
(
≈å
, &
íd±r
, 
ba£
);

62 i‡((
î∫o
 =
ERANGE
 && (
vÆ
 =
LONG_MAX
 || vÆ =
LONG_MIN
))

63 || (
î∫o
 !0 && 
vÆ
 == 0))

65 *
îr‹

åue
;

66  
EXIT_SUCCESS
;

69 i‡(
íd±r
 =
≈å
)

71 *
îr‹

åue
;

72  
EXIT_SUCCESS
;

75 *
îr‹

Ál£
;

76  
vÆ
;

77 
	}
}

79 
	$maö
(
¨gc
, *
¨gv
[])

81 
memˇched_°
 *
memc
;

82 
memˇched_ªtu∫_t
 
rc
;

83 
memˇched_£rvî_°
 *
£rvîs
;

85 
ªtu∫_code
= 0;

87 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

88 
	`öôülize_sockës
();

90 
memc

	`memˇched_¸óã
(
NULL
);

91 
	`¥o˚ss_hash_›ti⁄
(
memc
, 
›t_hash
);

93 i‡(!
›t_£rvîs
)

95 *
ãmp
;

97 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

99 
›t_£rvîs

	`°rdup
(
ãmp
);

103 
	`Ârötf
(
°dîr
, "No ServersÖrovided\n");

104 
	`exô
(1);

108 i‡(
›t_£rvîs
)

109 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

111 
£rvîs

	`memˇched_£rvîs_∑r£
(
¨gv
[--
¨gc
]);

113 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

114 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

115 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

116 (
uöt64_t
)
›t_bö¨y
);

117 i‡(!
	`öôülize_ß¶
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
))

119 
	`memˇched_‰ì
(
memc
);

120  
EXIT_FAILURE
;

123 
›töd
 < 
¨gc
)

125 
°©
 
sbuf
;

126 
fd
;

127 *
±r
;

128 
ssize_t
 
ªad_Àngth
;

129 *
fûe_buf„r_±r
;

131 
fd

	`›í
(
¨gv
[
›töd
], 
O_RDONLY
);

132 i‡(
fd
 < 0)

134 
	`Ârötf
(
°dîr
, "mem˝: %s: %s\n", 
¨gv
[
›töd
], 
	`°ªº‹
(
î∫o
));

135 
›töd
++;

139 ()
	`f°©
(
fd
, &
sbuf
);

141 
±r

	`rödex
(
¨gv
[
›töd
], '/');

142 i‡(
±r
)

143 
±r
++;

145 
±r

¨gv
[
›töd
];

147 i‡(
›t_vîbo£
)

149 c⁄° *
›°r
[] = { "set", "add", "replace" };

150 
	`¥ötf
("op: %s\nsource file: %s\nlength: %zu\n"

152 
›°r
[
›t_mëhod
 - 
OPT_SET
], 
¨gv
[
›töd
], (
size_t
)
sbuf
.
°_size
,

153 
±r
, 
›t_Êags
, ()
›t_expúes
);

156 i‡((
fûe_buf„r_±r
(*)
	`mÆloc
((Ë* (
size_t
)
sbuf
.
°_size
)Ë=
NULL
)

158 
	`Ârötf
(
°dîr
, "mÆloc: %s\n", 
	`°ªº‹
(
î∫o
));

159 
	`exô
(1);

162 i‡((
ªad_Àngth

	`ªad
(
fd
, 
fûe_buf„r_±r
, (
size_t
)
sbuf
.
°_size
)) == -1)

164 
	`Ârötf
(
°dîr
, "ªad: %s\n", 
	`°ªº‹
(
î∫o
));

165 
	`exô
(1);

168 i‡(
ªad_Àngth
 !
sbuf
.
°_size
)

170 
	`Ârötf
(
°dîr
, "FailureÑeading from file\n");

171 
	`exô
(1);

174 i‡(
›t_mëhod
 =
OPT_ADD
)

175 
rc

	`memˇched_add
(
memc
, 
±r
, 
	`°æí
(ptr),

176 
fûe_buf„r_±r
, (
size_t
)
sbuf
.
°_size
,

177 
›t_expúes
, 
›t_Êags
);

178 i‡(
›t_mëhod
 =
OPT_REPLACE
)

179 
rc

	`memˇched_ª∂a˚
(
memc
, 
±r
, 
	`°æí
(ptr),

180 
fûe_buf„r_±r
, (
size_t
)
sbuf
.
°_size
,

181 
›t_expúes
, 
›t_Êags
);

183 
rc

	`memˇched_£t
(
memc
, 
±r
, 
	`°æí
(ptr),

184 
fûe_buf„r_±r
, (
size_t
)
sbuf
.
°_size
,

185 
›t_expúes
, 
›t_Êags
);

187 i‡(
rc
 !
MEMCACHED_SUCCESS
)

189 
	`Ârötf
(
°dîr
, "memcp: %s: memcacheÉrror %s",

190 
±r
, 
	`memˇched_°ªº‹
(
memc
, 
rc
));

191 i‡(
	`memˇched_œ°_îr‹_î∫o
(
memc
))

192 
	`Ârötf
(
°dîr
, " sy°emÉº‹ %s", 
	`°ªº‹
(
	`memˇched_œ°_îr‹_î∫o
(
memc
)));

193 
	`Ârötf
(
°dîr
, "\n");

195 
ªtu∫_code
= -1;

198 
	`‰ì
(
fûe_buf„r_±r
);

199 
	`˛o£
(
fd
);

200 
›töd
++;

203 
	`memˇched_‰ì
(
memc
);

205 i‡(
›t_£rvîs
)

206 
	`‰ì
(
›t_£rvîs
);

207 i‡(
›t_hash
)

208 
	`‰ì
(
›t_hash
);

209 
	`shutdown_ß¶
();

211  
ªtu∫_code
;

212 
	}
}

214 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

216 
›ti⁄_ödex
= 0;

217 
›ti⁄_rv
;

219 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

224 
›ti⁄
 
l⁄g_›ti⁄s
[]=

226 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

227 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

228 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

229 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

230 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

231 {(
OPTIONSTRING
)"Êag", 
ªquúed_¨gumít
, 
NULL
, 
OPT_FLAG
},

232 {(
OPTIONSTRING
)"expúe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_EXPIRE
},

233 {(
OPTIONSTRING
)"£t", 
no_¨gumít
, 
NULL
, 
OPT_SET
},

234 {(
OPTIONSTRING
)"add", 
no_¨gumít
, 
NULL
, 
OPT_ADD
},

235 {(
OPTIONSTRING
)"ª∂a˚", 
no_¨gumít
, 
NULL
, 
OPT_REPLACE
},

236 {(
OPTIONSTRING
)"hash", 
ªquúed_¨gumít
, 
NULL
, 
OPT_HASH
},

237 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

238 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

239 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

245 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

247 i‡(
›ti⁄_rv
 == -1) ;

249 
›ti⁄_rv
)

253 
OPT_BINARY
:

254 
›t_bö¨y
 = 1;

256 
OPT_VERBOSE
:

257 
›t_vîbo£
 = 
OPT_VERBOSE
;

259 
OPT_DEBUG
:

260 
›t_vîbo£
 = 
OPT_DEBUG
;

262 
OPT_VERSION
:

263 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

265 
OPT_HELP
:

266 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

268 
OPT_SERVERS
:

269 
›t_£rvîs

	`°rdup
(
›èrg
);

271 
OPT_FLAG
:

273 
boﬁ
 
°πﬁ_îr‹
;

274 
›t_Êags
(
uöt32_t
)
	`°πﬁ_wøµî
(
›èrg
, 16, &
°πﬁ_îr‹
);

275 i‡(
°πﬁ_îr‹
 =
åue
)

277 
	`Ârötf
(
°dîr
, "Bad valueÖassed via --flag\n");

278 
	`exô
(1);

282 
OPT_EXPIRE
:

284 
boﬁ
 
°πﬁ_îr‹
;

285 
›t_expúes
(
time_t
)
	`°πﬁ_wøµî
(
›èrg
, 16, &
°πﬁ_îr‹
);

286 i‡(
°πﬁ_îr‹
 =
åue
)

288 
	`Ârötf
(
°dîr
, "Bad valueÖassed via --flag\n");

289 
	`exô
(1);

292 
OPT_SET
:

293 
›t_mëhod

OPT_SET
;

295 
OPT_REPLACE
:

296 
›t_mëhod

OPT_REPLACE
;

298 
OPT_ADD
:

299 
›t_mëhod

OPT_ADD
;

301 
OPT_HASH
:

302 
›t_hash

	`°rdup
(
›èrg
);

304 
OPT_USERNAME
:

305 
›t_u£∫ame

›èrg
;

307 
OPT_PASSWD
:

308 
›t_∑sswd

›èrg
;

312 
	`exô
(1);

314 
	`ab‹t
();

317 
	}
}

	@clients/memdump.c

12 
	~"c⁄fig.h
"

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<öây≥s.h
>

17 
	~<uni°d.h
>

18 
	~<gë›t.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<f˙é.h
>

23 
	~<î∫o.h
>

24 
	~<°rögs.h
>

25 
	~<°rög.h
>

27 
	~<libmemˇched/memˇched.h
>

29 
	~"˛õ¡_›ti⁄s.h
"

30 
	~"utûôõs.h
"

32 
	#PROGRAM_NAME
 "memdump"

	)

33 
	#PROGRAM_DESCRIPTION
 "Dum∞Æ»vÆue†‰om o√ o∏m™y sîvîs."

	)

36 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

38 
	g›t_bö¨y
=0;

39 
	g›t_vîbo£
= 0;

40 *
	g›t_£rvîs

NULL
;

41 *
	g›t_hash

NULL
;

42 *
	g›t_u£∫ame
;

43 *
	g›t_∑sswd
;

46 
memˇched_ªtu∫_t
 
	$key_¥öãr
(c⁄° 
memˇched_°
 *
±r
,

47 c⁄° *
key
, 
size_t
 
key_Àngth
,

48 *
c⁄ãxt
)

50 ()
±r
;()
c⁄ãxt
;

51 
	`¥ötf
("%.*s\n", (
uöt32_t
)
key_Àngth
, 
key
);

53  
MEMCACHED_SUCCESS
;

54 
	}
}

56 
	$maö
(
¨gc
, *
¨gv
[])

58 
memˇched_°
 *
memc
;

59 
memˇched_ªtu∫_t
 
rc
;

60 
memˇched_£rvî_°
 *
£rvîs
;

61 
memˇched_dump_‚
 
ˇŒbacks
[1];

63 
ˇŒbacks
[0]&
key_¥öãr
;

65 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

67 
memc

	`memˇched_¸óã
(
NULL
);

68 
	`¥o˚ss_hash_›ti⁄
(
memc
, 
›t_hash
);

70 i‡(!
›t_£rvîs
)

72 *
ãmp
;

74 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

75 
›t_£rvîs

	`°rdup
(
ãmp
);

78 
	`Ârötf
(
°dîr
, "No ServersÖrovided\n");

79 
	`exô
(1);

83 i‡(
›t_£rvîs
)

84 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

86 
£rvîs

	`memˇched_£rvîs_∑r£
(
¨gv
[--
¨gc
]);

88 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

89 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

90 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

91 (
uöt64_t
)
›t_bö¨y
);

92 i‡(!
	`öôülize_ß¶
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
))

94 
	`memˇched_‰ì
(
memc
);

95  
EXIT_FAILURE
;

98 
rc

	`memˇched_dump
(
memc
, 
ˇŒbacks
, 
NULL
, 1);

100 i‡(
rc
 !
MEMCACHED_SUCCESS
)

102 
	`Ârötf
(
°dîr
, "memdump: memˇchêîr‹ %s", 
	`memˇched_°ªº‹
(
memc
, 
rc
));

103 i‡(
	`memˇched_œ°_îr‹_î∫o
(
memc
))

104 
	`Ârötf
(
°dîr
, " sy°emÉº‹ %s", 
	`°ªº‹
(
	`memˇched_œ°_îr‹_î∫o
(
memc
)));

105 
	`Ârötf
(
°dîr
, "\n");

108 
	`memˇched_‰ì
(
memc
);

110 i‡(
›t_£rvîs
)

111 
	`‰ì
(
›t_£rvîs
);

112 i‡(
›t_hash
)

113 
	`‰ì
(
›t_hash
);

115 
	`shutdown_ß¶
();

117  
EXIT_SUCCESS
;

118 
	}
}

120 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

122 
›ti⁄_ödex
= 0;

123 
›ti⁄_rv
;

125 
›ti⁄
 
l⁄g_›ti⁄s
[]=

127 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

128 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

129 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

130 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

131 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

132 {(
OPTIONSTRING
)"hash", 
ªquúed_¨gumít
, 
NULL
, 
OPT_HASH
},

133 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

134 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

135 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

141 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

143 i‡(
›ti⁄_rv
 == -1) ;

145 
›ti⁄_rv
)

149 
OPT_BINARY
:

150 
›t_bö¨y
 = 1;

152 
OPT_VERBOSE
:

153 
›t_vîbo£
 = 
OPT_VERBOSE
;

155 
OPT_DEBUG
:

156 
›t_vîbo£
 = 
OPT_DEBUG
;

158 
OPT_VERSION
:

159 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

161 
OPT_HELP
:

162 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
NULL
);

164 
OPT_SERVERS
:

165 
›t_£rvîs

	`°rdup
(
›èrg
);

167 
OPT_HASH
:

168 
›t_hash

	`°rdup
(
›èrg
);

170 
OPT_USERNAME
:

171 
›t_u£∫ame

›èrg
;

173 
OPT_PASSWD
:

174 
›t_∑sswd

›èrg
;

178 
	`exô
(1);

180 
	`ab‹t
();

183 
	}
}

	@clients/memerror.c

11 
	~"c⁄fig.h
"

13 
	~<°dio.h
>

14 
	~<öây≥s.h
>

15 
	~<°rög.h
>

16 
	~<uni°d.h
>

17 
	~<gë›t.h
>

18 
	~<°dlib.h
>

19 
	~<libmemˇched/memˇched.h
>

21 
	~"utûôõs.h
"

23 
	#PROGRAM_NAME
 "memîr‹"

	)

24 
	#PROGRAM_DESCRIPTION
 "Tøn¶©ê®memˇchedÉºr‹ codêötÿ®°rög."

	)

28 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

30 
	g›t_vîbo£
= 0;

32 
	$maö
(
¨gc
, *
¨gv
[])

34 
vÆue
;

35 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

37 i‡(
¨gc
 != 2)

38  
EXIT_FAILURE
;

40 
vÆue

	`°πoul
(
¨gv
[1], (**Ë
NULL
, 10);

42 i‡(
vÆue
 < 
MEMCACHED_MAXIMUM_RETURN
)

44 
	`¥ötf
("%s\n", 
	`memˇched_°ªº‹
(
NULL
, (
memˇched_ªtu∫_t
)
vÆue
));

48 
	`Ârötf
(
°dîr
, "Unknown Error Code\n");

49  
EXIT_FAILURE
;

52  
EXIT_SUCCESS
;

53 
	}
}

56 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

58 
›ti⁄_ödex
= 0;

59 
›ti⁄_rv
;

61 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

66 
›ti⁄
 
l⁄g_›ti⁄s
[]=

68 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

69 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

70 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

71 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

77 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

78 i‡(
›ti⁄_rv
 == -1) ;

79 
›ti⁄_rv
)

83 
OPT_VERBOSE
:

84 
›t_vîbo£
 = 
OPT_VERBOSE
;

86 
OPT_DEBUG
:

87 
›t_vîbo£
 = 
OPT_DEBUG
;

89 
OPT_VERSION
:

90 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

92 
OPT_HELP
:

93 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

97 
	`exô
(1);

99 
	`ab‹t
();

102 
	}
}

	@clients/memflush.c

11 
	~"c⁄fig.h
"

13 
	~<°dio.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 
	~<gë›t.h
>

17 
	~<libmemˇched/memˇched.h
>

18 
	~"˛õ¡_›ti⁄s.h
"

19 
	~"utûôõs.h
"

21 
	g›t_bö¨y
= 0;

22 
	g›t_vîbo£
= 0;

23 
time_t
 
	g›t_expúe
= 0;

24 *
	g›t_£rvîs

NULL
;

25 *
	g›t_u£∫ame
;

26 *
	g›t_∑sswd
;

28 
	#PROGRAM_NAME
 "memÊush"

	)

29 
	#PROGRAM_DESCRIPTION
 "Eø£áŒ d©®öá sîvî o‡memˇched sîvîs."

	)

32 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

34 
	$maö
(
¨gc
, *
¨gv
[])

36 
memˇched_°
 *
memc
;

37 
memˇched_ªtu∫_t
 
rc
;

38 
memˇched_£rvî_°
 *
£rvîs
;

40 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

42 i‡(!
›t_£rvîs
)

44 *
ãmp
;

46 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

47 
›t_£rvîs

	`°rdup
(
ãmp
);

50 
	`Ârötf
(
°dîr
, "No ServersÖrovided\n");

51 
	`exô
(1);

55 
memc

	`memˇched_¸óã
(
NULL
);

57 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

58 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

59 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

60 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

61 (
uöt64_t
Ë
›t_bö¨y
);

63 i‡(!
	`öôülize_ß¶
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
))

65 
	`memˇched_‰ì
(
memc
);

66  
EXIT_FAILURE
;

69 
rc
 = 
	`memˇched_Êush
(
memc
, 
›t_expúe
);

70 i‡(
rc
 !
MEMCACHED_SUCCESS
)

72 
	`Ârötf
(
°dîr
, "memflush: memcacheÉrror %s",

73 
	`memˇched_°ªº‹
(
memc
, 
rc
));

74 i‡(
	`memˇched_œ°_îr‹_î∫o
(
memc
))

75 
	`Ârötf
(
°dîr
, " sy°emÉº‹ %s", 
	`°ªº‹
(
	`memˇched_œ°_îr‹_î∫o
(
memc
)));

76 
	`Ârötf
(
°dîr
, "\n");

79 
	`memˇched_‰ì
(
memc
);

81 
	`‰ì
(
›t_£rvîs
);

83 
	`shutdown_ß¶
();

85  
EXIT_SUCCESS
;

86 
	}
}

89 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

91 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

96 
›ti⁄
 
l⁄g_›ti⁄s
[]=

98 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

99 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

100 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

101 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

102 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

103 {(
OPTIONSTRING
)"expúe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_EXPIRE
},

104 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

105 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

106 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

109 
›ti⁄_ödex
= 0;

110 
›ti⁄_rv
;

114 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

115 i‡(
›ti⁄_rv
 == -1) ;

116 
›ti⁄_rv
)

120 
OPT_BINARY
:

121 
›t_bö¨y
 = 1;

123 
OPT_VERBOSE
:

124 
›t_vîbo£
 = 
OPT_VERBOSE
;

126 
OPT_DEBUG
:

127 
›t_vîbo£
 = 
OPT_DEBUG
;

129 
OPT_VERSION
:

130 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

132 
OPT_HELP
:

133 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

135 
OPT_SERVERS
:

136 
›t_£rvîs

	`°rdup
(
›èrg
);

138 
OPT_EXPIRE
:

139 
›t_expúe
(
time_t
)
	`°πﬁl
(
›èrg
, (**)
NULL
, 10);

141 
OPT_USERNAME
:

142 
›t_u£∫ame

›èrg
;

144 
OPT_PASSWD
:

145 
›t_∑sswd

›èrg
;

149 
	`exô
(1);

151 
	`ab‹t
();

154 
	}
}

	@clients/memparse.cc

38 
	~<c⁄fig.h
>

40 
	~<io°ªam
>

42 
	~<libmemˇched/memˇched.h
>

44 
	$maö
(
¨gc
, *
¨gv
[])

47 i‡(
¨gc
 < 2)

49 
°d
::
˚º
 << "Nÿ¨gumít†¥ovided." << std::
ídl
;

50  
EXIT_FAILURE
;

53 
x
1; x < 
¨gc
; x++)

55 
buf„r
[
BUFSIZ
];

56 
memˇched_ªtu∫_t
 
rc
;

57 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
¨gv
[
x
], 
	`°æí
◊rgv[x]), 
buf„r
, (buffer));

59 i‡(
rc
 !
MEMCACHED_SUCCESS
)

61 
°d
::
˚º
 << "FaûedÅÿ∑r£árgumíà#" << 
x
 << " " << 
¨gv
[x] << std::
ídl
;

62 
°d
::
˚º
 << "Eº‹ mesßgê‰omÖ¨£∏was:\t" << 
buf„r
 << std::
ídl
;

63  
EXIT_FAILURE
;

67  
EXIT_SUCCESS
;

68 
	}
}

	@clients/memrm.c

11 
	~"c⁄fig.h
"

13 
	~<°dio.h
>

14 
	~<uni°d.h
>

15 
	~<gë›t.h
>

16 
	~<libmemˇched/memˇched.h
>

17 
	~<°rög.h
>

18 
	~"˛õ¡_›ti⁄s.h
"

19 
	~"utûôõs.h
"

21 
	g›t_bö¨y
= 0;

22 
	g›t_vîbo£
= 0;

23 
time_t
 
	g›t_expúe
= 0;

24 *
	g›t_£rvîs

NULL
;

25 *
	g›t_hash

NULL
;

26 *
	g›t_u£∫ame
;

27 *
	g›t_∑sswd
;

29 
	#PROGRAM_NAME
 "memrm"

	)

30 
	#PROGRAM_DESCRIPTION
 "Eø£á key o∏£ào‡key†‰omá memˇched clu°î."

	)

33 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

35 
	$maö
(
¨gc
, *
¨gv
[])

37 
memˇched_°
 *
memc
;

38 
memˇched_ªtu∫_t
 
rc
;

39 
memˇched_£rvî_°
 *
£rvîs
;

41 
ªtu∫_code
= 0;

43 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

44 
	`öôülize_sockës
();

46 i‡(!
›t_£rvîs
)

48 *
ãmp
;

50 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

51 
›t_£rvîs

	`°rdup
(
ãmp
);

54 
	`Ârötf
(
°dîr
, "No ServersÖrovided\n");

55 
	`exô
(1);

59 
memc

	`memˇched_¸óã
(
NULL
);

60 
	`¥o˚ss_hash_›ti⁄
(
memc
, 
›t_hash
);

62 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

63 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

64 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

65 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

66 (
uöt64_t
Ë
›t_bö¨y
);

68 i‡(!
	`öôülize_ß¶
(
memc
, 
›t_u£∫ame
, 
›t_∑sswd
))

70 
	`memˇched_‰ì
(
memc
);

71  
EXIT_FAILURE
;

74 
›töd
 < 
¨gc
)

76 i‡(
›t_vîbo£
)

77 
	`¥ötf
("key: %s\√xpúes: %Œu\n", 
¨gv
[
›töd
], ()
›t_expúe
);

78 
rc
 = 
	`memˇched_dñëe
(
memc
, 
¨gv
[
›töd
], 
	`°æí
◊rgv[›töd]), 
›t_expúe
);

80 i‡(
rc
 !
MEMCACHED_SUCCESS
)

82 
	`Ârötf
(
°dîr
, "memrm: %s: memcacheÉrror %s",

83 
¨gv
[
›töd
], 
	`memˇched_°ªº‹
(
memc
, 
rc
));

84 i‡(
	`memˇched_œ°_îr‹_î∫o
(
memc
))

85 
	`Ârötf
(
°dîr
, " sy°emÉº‹ %s", 
	`°ªº‹
(
	`memˇched_œ°_îr‹_î∫o
(
memc
)));

86 
	`Ârötf
(
°dîr
, "\n");

88 
ªtu∫_code
= -1;

91 
›töd
++;

94 
	`memˇched_‰ì
(
memc
);

96 i‡(
›t_£rvîs
)

97 
	`‰ì
(
›t_£rvîs
);

99 i‡(
›t_hash
)

100 
	`‰ì
(
›t_hash
);

102 
	`shutdown_ß¶
();

104  
ªtu∫_code
;

105 
	}
}

108 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

110 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

115 
›ti⁄
 
l⁄g_›ti⁄s
[]=

117 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

118 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

119 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

120 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

121 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

122 {(
OPTIONSTRING
)"expúe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_EXPIRE
},

123 {(
OPTIONSTRING
)"hash", 
ªquúed_¨gumít
, 
NULL
, 
OPT_HASH
},

124 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

125 {(
OPTIONSTRING
)"u£∫ame", 
ªquúed_¨gumít
, 
NULL
, 
OPT_USERNAME
},

126 {(
OPTIONSTRING
)"∑ssw‹d", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PASSWD
},

129 
›ti⁄_ödex
= 0;

130 
›ti⁄_rv
;

134 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

135 i‡(
›ti⁄_rv
 == -1) ;

136 
›ti⁄_rv
)

140 
OPT_BINARY
:

141 
›t_bö¨y
 = 1;

143 
OPT_VERBOSE
:

144 
›t_vîbo£
 = 
OPT_VERBOSE
;

146 
OPT_DEBUG
:

147 
›t_vîbo£
 = 
OPT_DEBUG
;

149 
OPT_VERSION
:

150 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

152 
OPT_HELP
:

153 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

155 
OPT_SERVERS
:

156 
›t_£rvîs

	`°rdup
(
›èrg
);

158 
OPT_EXPIRE
:

159 
›t_expúe
(
time_t
)
	`°πﬁl
(
›èrg
, (**)
NULL
, 10);

161 
OPT_HASH
:

162 
›t_hash

	`°rdup
(
›èrg
);

164 
OPT_USERNAME
:

165 
›t_u£∫ame

›èrg
;

167 
OPT_PASSWD
:

168 
›t_∑sswd

›èrg
;

172 
	`exô
(1);

174 
	`ab‹t
();

177 
	}
}

	@clients/memslap.c

39 
	~<c⁄fig.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<sys/ty≥s.h
>

44 
	~<sys/°©.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/mm™.h
>

47 
	~<f˙é.h
>

48 
	~<sys/time.h
>

49 
	~<gë›t.h
>

50 
	~<±hªad.h
>

51 
	~<as£π.h
>

53 
	~<libmemˇched/memˇched.h
>

55 
	~"˛õ¡_›ti⁄s.h
"

56 
	~"utûôõs.h
"

57 
	~"gíî©‹.h
"

58 
	~"execuã.h
"

60 
	#DEFAULT_INITIAL_LOAD
 10000

	)

61 
	#DEFAULT_EXECUTE_NUMBER
 10000

	)

62 
	#DEFAULT_CONCURRENCY
 1

	)

64 
	#PROGRAM_NAME
 "mem¶≠"

	)

65 
	#PROGRAM_DESCRIPTION
 "Gíî©e†®lﬂdágaö°á memˇched cu°î o‡£rvîs."

	)

68 vﬁ©ûê
	gthªad_cou¡î
;

69 
±hªad_muãx_t
 
	gcou¡î_muãx
;

70 
±hªad_c⁄d_t
 
	gcou¡_thªshhﬁd
;

71 vﬁ©ûê
	gma°î_wakeup
;

72 
±hªad_muãx_t
 
	g¶ì≥r_muãx
;

73 
±hªad_c⁄d_t
 
	g¶ìp_thªshhﬁd
;

75 *
run_èsk
(*
p
);

78 
c⁄˛usi⁄s_°
 
	tc⁄˛usi⁄s_°
;

79 
thªad_c⁄ãxt_°
 
	tthªad_c⁄ãxt_°
;

81 
	mSET_TEST
,

82 
	mGET_TEST
,

83 
	mMGET_TEST


84 } 
	tã°_ty≥
;

86 
	sthªad_c⁄ãxt_°
 {

87 
	mkey_cou¡
;

88 
∑ús_°
 *
	möôül_∑ús
;

89 
	möôül_numbî
;

90 
∑ús_°
 *
	mexecuã_∑ús
;

91 
	mexecuã_numbî
;

92 **
	mkeys
;

93 
size_t
 *
	mkey_Àngths
;

94 
ã°_ty≥
 
	mã°
;

95 
memˇched_°
 *
	mmemc
;

98 
	sc⁄˛usi⁄s_°
 {

99 
	mlﬂd_time
;

100 
	mªad_time
;

101 
	mrows_lﬂded
;

102 
	mrows_ªad
;

106 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

107 
c⁄˛usi⁄s_¥öt
(
c⁄˛usi⁄s_°
 *
c⁄˛usi⁄
);

108 
scheduÀr
(
memˇched_£rvî_°
 *
£rvîs
, 
c⁄˛usi⁄s_°
 *
c⁄˛usi⁄
);

109 
∑ús_°
 *
lﬂd_¸óã_d©a
(
memˇched_°
 *
memc
, 
numbî_of
,

110 *
a˘uÆ_lﬂded
);

111 
Êush_Æl
(
memˇched_°
 *
memc
);

113 
	g›t_bö¨y
= 0;

114 
	g›t_vîbo£
= 0;

115 
	g›t_Êush
= 0;

116 
	g›t_n⁄_blockög_io
= 0;

117 
	g›t_t˝_nodñay
= 0;

118 
	g›t_execuã_numbî
= 0;

119 
	g›t_¸óãül_lﬂd
= 0;

120 
	g›t_c⁄cuºícy
= 0;

121 
	g›t_di•œyÊag
= 0;

122 *
	g›t_£rvîs

NULL
;

123 
	g›t_udp_io
= 0;

124 
ã°_ty≥
 
	g›t_ã°

SET_TEST
;

126 
	$maö
(
¨gc
, *
¨gv
[])

128 
c⁄˛usi⁄s_°
 
c⁄˛usi⁄
;

129 
memˇched_£rvî_°
 *
£rvîs
;

131 
	`mem£t
(&
c⁄˛usi⁄
, 0, (
c⁄˛usi⁄s_°
));

133 
	`§™dom
(()
	`time
(
NULL
));

134 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

136 i‡(!
›t_£rvîs
)

138 *
ãmp
;

140 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

141 
›t_£rvîs

	`°rdup
(
ãmp
);

144 
	`Ârötf
(
°dîr
, "No ServersÖrovided\n");

145 
	`exô
(1);

149 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

151 
	`±hªad_muãx_öô
(&
cou¡î_muãx
, 
NULL
);

152 
	`±hªad_c⁄d_öô
(&
cou¡_thªshhﬁd
, 
NULL
);

153 
	`±hªad_muãx_öô
(&
¶ì≥r_muãx
, 
NULL
);

154 
	`±hªad_c⁄d_öô
(&
¶ìp_thªshhﬁd
, 
NULL
);

156 
	`scheduÀr
(
£rvîs
, &
c⁄˛usi⁄
);

158 
	`‰ì
(
›t_£rvîs
);

160 ()
	`±hªad_muãx_de°roy
(&
cou¡î_muãx
);

161 ()
	`±hªad_c⁄d_de°roy
(&
cou¡_thªshhﬁd
);

162 ()
	`±hªad_muãx_de°roy
(&
¶ì≥r_muãx
);

163 ()
	`±hªad_c⁄d_de°roy
(&
¶ìp_thªshhﬁd
);

164 
	`c⁄˛usi⁄s_¥öt
(&
c⁄˛usi⁄
);

165 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

168 
	}
}

170 
	$scheduÀr
(
memˇched_£rvî_°
 *
£rvîs
, 
c⁄˛usi⁄s_°
 *
c⁄˛usi⁄
)

172 
a˘uÆ_lﬂded
= 0;

173 
memˇched_°
 *
memc
;

175 
timevÆ
 
°¨t_time
, 
íd_time
;

176 
±hªad_t
 
maöthªad
;

177 
±hªad_©å_t
 
©å
;

178 
∑ús_°
 *
∑ús

NULL
;

180 
	`±hªad_©å_öô
(&
©å
);

181 
	`±hªad_©å_£tdëach°©e
(&
©å
,

182 
PTHREAD_CREATE_DETACHED
);

184 
memc

	`memˇched_¸óã
(
NULL
);

187 i‡(
›t_udp_io
)

189 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_USE_UDP
,

190 (
uöt64_t
)
›t_udp_io
);

191 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_li°_cou¡
(
£rvîs
); x++ )

193 
£rvîs
[
x
].
ty≥

MEMCACHED_CONNECTION_UDP
;

196 
	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

198 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

199 (
uöt64_t
)
›t_bö¨y
);

201 i‡(
›t_Êush
)

202 
	`Êush_Æl
(
memc
);

203 i‡(
›t_¸óãül_lﬂd
)

204 
∑ús

	`lﬂd_¸óã_d©a
(
memc
, 
›t_¸óãül_lﬂd
, &
a˘uÆ_lﬂded
);

206 **
keys

	`ˇŒoc
(
a˘uÆ_lﬂded
, (*));

207 
size_t
 *
key_Àngths

	`ˇŒoc
(
a˘uÆ_lﬂded
, (size_t));

209 i‡(
keys
 =
NULL
 || 
key_Àngths
 == NULL)

211 
	`‰ì
(
keys
);

212 
	`‰ì
(
key_Àngths
);

213 
keys

NULL
;

214 
key_Àngths

NULL
;

218 
uöt32_t
 
x
0; x < 
a˘uÆ_lﬂded
; ++x)

220 
keys
[
x
]
∑ús
[x].
key
;

221 
key_Àngths
[
x
]
∑ús
[x].
key_Àngth
;

227 i‡(
›t_n⁄_blockög_io
)

228 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 1);

229 i‡(
›t_t˝_nodñay
)

230 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 1);

233 
	`±hªad_muãx_lock
(&
cou¡î_muãx
);

234 
thªad_cou¡î
= 0;

236 
	`±hªad_muãx_lock
(&
¶ì≥r_muãx
);

237 
ma°î_wakeup
= 1;

238 
	`±hªad_muãx_u∆ock
(&
¶ì≥r_muãx
);

240 
uöt32_t
 
x
0; x < 
›t_c⁄cuºícy
; x++)

242 
thªad_c⁄ãxt_°
 *
c⁄ãxt
;

243 
c⁄ãxt
(
thªad_c⁄ãxt_°
 *)
	`ˇŒoc
(1, (thread_context_st));

245 
c⁄ãxt
->
memc

	`memˇched_˛⁄e
(
NULL
, memc);

246 
c⁄ãxt
->
ã°

›t_ã°
;

248 
c⁄ãxt
->
öôül_∑ús

∑ús
;

249 
c⁄ãxt
->
öôül_numbî

a˘uÆ_lﬂded
;

250 
c⁄ãxt
->
keys
= keys;

251 
c⁄ãxt
->
key_Àngths
= key_lengths;

253 i‡(
›t_ã°
 =
SET_TEST
)

255 
c⁄ãxt
->
execuã_∑ús

	`∑ús_gíî©e
(
›t_execuã_numbî
, 400);

256 
c⁄ãxt
->
execuã_numbî

›t_execuã_numbî
;

260 i‡(
	`±hªad_¸óã
(&
maöthªad
, &
©å
, 
run_èsk
,

261 (*)
c⁄ãxt
) != 0)

263 
	`Ârötf
(
°dîr
,"CouldÇot createÅhread\n");

264 
	`exô
(1);

266 
thªad_cou¡î
++;

269 
	`±hªad_muãx_u∆ock
(&
cou¡î_muãx
);

270 
	`±hªad_©å_de°roy
(&
©å
);

272 
	`±hªad_muãx_lock
(&
¶ì≥r_muãx
);

273 
ma°î_wakeup
= 0;

274 
	`±hªad_muãx_u∆ock
(&
¶ì≥r_muãx
);

275 
	`±hªad_c⁄d_brﬂdˇ°
(&
¶ìp_thªshhﬁd
);

277 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

281 
	`±hªad_muãx_lock
(&
cou¡î_muãx
);

282 
thªad_cou¡î
)

283 
	`±hªad_c⁄d_waô
(&
cou¡_thªshhﬁd
, &
cou¡î_muãx
);

284 
	`±hªad_muãx_u∆ock
(&
cou¡î_muãx
);

286 
	`gëtimeofday
(&
íd_time
, 
NULL
);

288 
c⁄˛usi⁄
->
lﬂd_time

	`timedif
(
íd_time
, 
°¨t_time
);

289 
c⁄˛usi⁄
->
ªad_time

	`timedif
(
íd_time
, 
°¨t_time
);

290 
	`‰ì
(
keys
);

291 
	`‰ì
(
key_Àngths
);

292 
	`∑ús_‰ì
(
∑ús
);

293 
	`memˇched_‰ì
(
memc
);

294 
	}
}

296 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

298 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

303 
›ti⁄
 
l⁄g_›ti⁄s
[]=

305 {(
OPTIONSTRING
)"c⁄cuºícy", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SLAP_CONCURRENCY
},

306 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

307 {(
OPTIONSTRING
)"execuã-numbî", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SLAP_EXECUTE_NUMBER
},

308 {(
OPTIONSTRING
)"Êag", 
no_¨gumít
, &
›t_di•œyÊag
, 
OPT_FLAG
},

309 {(
OPTIONSTRING
)"Êush", 
no_¨gumít
, &
›t_Êush
, 
OPT_FLUSH
},

310 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

311 {(
OPTIONSTRING
)"öôül-lﬂd", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SLAP_INITIAL_LOAD
},

312 {(
OPTIONSTRING
)"n⁄-blockög", 
no_¨gumít
, &
›t_n⁄_blockög_io
, 
OPT_SLAP_NON_BLOCK
},

313 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

314 {(
OPTIONSTRING
)"t˝-nodñay", 
no_¨gumít
, &
›t_t˝_nodñay
, 
OPT_SLAP_TCP_NODELAY
},

315 {(
OPTIONSTRING
)"ã°", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SLAP_TEST
},

316 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

317 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

318 {(
OPTIONSTRING
)"bö¨y", 
no_¨gumít
, 
NULL
, 
OPT_BINARY
},

319 {(
OPTIONSTRING
)"udp", 
no_¨gumít
, 
NULL
, 
OPT_UDP
},

323 
›ti⁄_ödex
= 0;

324 
›ti⁄_rv
;

328 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

329 i‡(
›ti⁄_rv
 == -1) ;

330 
›ti⁄_rv
)

334 
OPT_UDP
:

335 i‡(
›t_ã°
 =
GET_TEST
)

337 
	`Ârötf
(
°dîr
, "You canÇotÑuná getÅest in UDP mode. UDP mode "

339 
	`exô
(1);

341 
›t_udp_io
= 1;

343 
OPT_BINARY
:

344 
›t_bö¨y
 = 1;

346 
OPT_VERBOSE
:

347 
›t_vîbo£
 = 
OPT_VERBOSE
;

349 
OPT_DEBUG
:

350 
›t_vîbo£
 = 
OPT_DEBUG
;

352 
OPT_VERSION
:

353 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

355 
OPT_HELP
:

356 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

358 
OPT_SERVERS
:

359 
›t_£rvîs

	`°rdup
(
›èrg
);

361 
OPT_SLAP_TEST
:

362 i‡(!
	`°rcmp
(
›èrg
, "get"))

364 i‡(
›t_udp_io
 == 1)

366 
	`Ârötf
(
°dîr
, "You canÇotÑuná getÅest in UDP mode. UDP mode "

368 
	`exô
(1);

370 
›t_ã°

GET_TEST
 ;

372 i‡(!
	`°rcmp
(
›èrg
, "set"))

373 
›t_ã°

SET_TEST
;

374 i‡(!
	`°rcmp
(
›èrg
, "mget"))

376 
›t_ã°

MGET_TEST
;

380 
	`Ârötf
(
°dîr
, "You∏ã°, %s, i†nŸá know¿ã°\n", 
›èrg
);

381 
	`exô
(1);

384 
OPT_SLAP_CONCURRENCY
:

385 
›t_c⁄cuºícy
()
	`°πoul
(
›èrg
, (**)
NULL
, 10);

387 
OPT_SLAP_EXECUTE_NUMBER
:

388 
›t_execuã_numbî
()
	`°πoul
(
›èrg
, (**)
NULL
, 10);

390 
OPT_SLAP_INITIAL_LOAD
:

391 
›t_¸óãül_lﬂd
()
	`°πoul
(
›èrg
, (**)
NULL
, 10);

395 
	`exô
(1);

397 
	`ab‹t
();

401 i‡((
›t_ã°
 =
GET_TEST
 || o±_ã° =
MGET_TEST
Ë&& 
›t_¸óãül_lﬂd
 == 0)

402 
›t_¸óãül_lﬂd

DEFAULT_INITIAL_LOAD
;

404 i‡(
›t_execuã_numbî
 == 0)

405 
›t_execuã_numbî

DEFAULT_EXECUTE_NUMBER
;

407 i‡(
›t_c⁄cuºícy
 == 0)

408 
›t_c⁄cuºícy

DEFAULT_CONCURRENCY
;

409 
	}
}

411 
	$c⁄˛usi⁄s_¥öt
(
c⁄˛usi⁄s_°
 *
c⁄˛usi⁄
)

413 
	`¥ötf
("\tThªad†c⁄√˘ögÅÿ£rvî†%u\n", 
›t_c⁄cuºícy
);

414 #ifde‡
NOT_FINISHED


415 
	`¥ötf
("\tLﬂded %uÑows\n", 
c⁄˛usi⁄
->
rows_lﬂded
);

416 
	`¥ötf
("\tRód %uÑows\n", 
c⁄˛usi⁄
->
rows_ªad
);

418 i‡(
›t_ã°
 =
SET_TEST
)

419 
	`¥ötf
("\tTook %ld.%03ld sec⁄d†tÿlﬂd d©a\n", 
c⁄˛usi⁄
->
lﬂd_time
 / 1000,

420 
c⁄˛usi⁄
->
lﬂd_time
 % 1000);

422 
	`¥ötf
("\tTook %ld.%03ld sec⁄d†tÿªad d©a\n", 
c⁄˛usi⁄
->
ªad_time
 / 1000,

423 
c⁄˛usi⁄
->
ªad_time
 % 1000);

424 
	}
}

426 *
	$run_èsk
(*
p
)

428 
thªad_c⁄ãxt_°
 *
c⁄ãxt
—hªad_c⁄ãxt_° *)
p
;

429 
memˇched_°
 *
memc
;

431 
memc

c⁄ãxt
->memc;

433 
	`±hªad_muãx_lock
(&
¶ì≥r_muãx
);

434 
ma°î_wakeup
)

436 
	`±hªad_c⁄d_waô
(&
¶ìp_thªshhﬁd
, &
¶ì≥r_muãx
);

438 
	`±hªad_muãx_u∆ock
(&
¶ì≥r_muãx
);

441 
c⁄ãxt
->
ã°
)

443 
SET_TEST
:

444 
	`as£π
(
c⁄ãxt
->
execuã_∑ús
);

445 
	`execuã_£t
(
memc
, 
c⁄ãxt
->
execuã_∑ús
, c⁄ãxt->
execuã_numbî
);

447 
GET_TEST
:

448 
	`execuã_gë
(
memc
, 
c⁄ãxt
->
öôül_∑ús
, c⁄ãxt->
öôül_numbî
);

450 
MGET_TEST
:

451 
	`execuã_mgë
(
memc
, (c⁄° *c⁄°*)
c⁄ãxt
->
keys
, c⁄ãxt->
key_Àngths
,

452 
c⁄ãxt
->
öôül_numbî
);

455 
	`WATCHPOINT_ASSERT
(
c⁄ãxt
->
ã°
);

459 
	`memˇched_‰ì
(
memc
);

461 i‡(
c⁄ãxt
->
execuã_∑ús
)

462 
	`∑ús_‰ì
(
c⁄ãxt
->
execuã_∑ús
);

464 
	`‰ì
(
c⁄ãxt
);

466 
	`±hªad_muãx_lock
(&
cou¡î_muãx
);

467 
thªad_cou¡î
--;

468 
	`±hªad_c⁄d_sig«l
(&
cou¡_thªshhﬁd
);

469 
	`±hªad_muãx_u∆ock
(&
cou¡î_muãx
);

471  
NULL
;

472 
	}
}

474 
	$Êush_Æl
(
memˇched_°
 *
memc
)

476 
	`memˇched_Êush
(
memc
, 0);

477 
	}
}

479 
∑ús_°
 *
	$lﬂd_¸óã_d©a
(
memˇched_°
 *
memc
, 
numbî_of
,

480 *
a˘uÆ_lﬂded
)

482 
memˇched_°
 *
memc_˛⁄e
;

483 
∑ús_°
 *
∑ús
;

485 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

487 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 0);

489 
∑ús

	`∑ús_gíî©e
(
numbî_of
, 400);

490 *
a˘uÆ_lﬂded

	`execuã_£t
(
memc_˛⁄e
, 
∑ús
, 
numbî_of
);

492 
	`memˇched_‰ì
(
memc_˛⁄e
);

494  
∑ús
;

495 
	}
}

	@clients/memstat.c

14 
	~"c⁄fig.h
"

16 
	~<°dio.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<f˙é.h
>

21 
	~<°rög.h
>

22 
	~<gë›t.h
>

23 
	~<sys/time.h
>

25 
	~<libmemˇched/memˇched.h
>

27 
	~"˛õ¡_›ti⁄s.h
"

28 
	~"utûôõs.h
"

30 
	#PROGRAM_NAME
 "mem°©"

	)

31 
	#PROGRAM_DESCRIPTION
 "Ouçuàthê°©êo‡®memˇched clu°î."

	)

34 
›ti⁄s_∑r£
(
¨gc
, *
¨gv
[]);

35 
run_™Æyzî
(
memˇched_°
 *
memc
, 
memˇched_°©_°
 *
memc_°©
);

36 
¥öt_™Æysis_ªp‹t
(
memˇched_°
 *
memc
,

37 
memˇched_™Æysis_°
 *
ªp‹t
);

39 
	g›t_vîbo£
= 0;

40 
	g›t_di•œyÊag
= 0;

41 
	g›t_™Æyze
= 0;

42 *
	g›t_£rvîs

NULL
;

43 *
	g°©_¨gs

NULL
;

44 *
	g™Æyze_mode

NULL
;

46 
›ti⁄
 
	gl⁄g_›ti⁄s
[]=

48 {(
OPTIONSTRING
)"¨gs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_STAT_ARGS
},

49 {(
OPTIONSTRING
)"vîsi⁄", 
no_¨gumít
, 
NULL
, 
OPT_VERSION
},

50 {(
OPTIONSTRING
)"hñp", 
no_¨gumít
, 
NULL
, 
OPT_HELP
},

51 {(
OPTIONSTRING
)"vîbo£", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_VERBOSE
},

52 {(
OPTIONSTRING
)"debug", 
no_¨gumít
, &
›t_vîbo£
, 
OPT_DEBUG
},

53 {(
OPTIONSTRING
)"£rvîs", 
ªquúed_¨gumít
, 
NULL
, 
OPT_SERVERS
},

54 {(
OPTIONSTRING
)"Êag", 
no_¨gumít
, &
›t_di•œyÊag
, 
OPT_FLAG
},

55 {(
OPTIONSTRING
)"™Æyze", 
›ti⁄Æ_¨gumít
, 
NULL
, 
OPT_ANALYZE
},

60 
memˇched_ªtu∫_t
 
	$°©_¥öãr
(
memˇched_£rvî_ö°™˚_°
 
ö°™˚
,

61 c⁄° *
key
, 
size_t
 
key_Àngth
,

62 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

63 *
c⁄ãxt
)

65 
memˇched_£rvî_ö°™˚_°
 
œ°

NULL
;

66 ()
c⁄ãxt
;

68 i‡(
œ°
 !
ö°™˚
)

70 
	`¥ötf
("Sîvî: %†(%u)\n", 
	`memˇched_£rvî_«me
(
ö°™˚
),

71 (
uöt32_t
)
	`memˇched_£rvî_p‹t
(
ö°™˚
));

72 
œ°

ö°™˚
;

75 
	`¥ötf
("\à%.*s: %.*s\n", ()
key_Àngth
, 
key
, ()
vÆue_Àngth
, 
vÆue
);

77  
MEMCACHED_SUCCESS
;

78 
	}
}

80 
	$maö
(
¨gc
, *
¨gv
[])

82 
memˇched_ªtu∫_t
 
rc
;

83 
memˇched_°
 *
memc
;

84 
memˇched_£rvî_°
 *
£rvîs
;

86 
	`›ti⁄s_∑r£
(
¨gc
, 
¨gv
);

87 
	`öôülize_sockës
();

89 i‡(! 
›t_£rvîs
)

91 *
ãmp
;

93 i‡((
ãmp

	`gëív
("MEMCACHED_SERVERS")))

94 
›t_£rvîs

	`°rdup
(
ãmp
);

97 
	`Ârötf
(
°dîr
, "No ServersÖrovided\n\n");

98 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 0);

99 
	`exô
(1);

103 
memc

	`memˇched_¸óã
(
NULL
);

105 
£rvîs

	`memˇched_£rvîs_∑r£
(
›t_£rvîs
);

106 
rc

	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

107 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

109 i‡(
rc
 !
MEMCACHED_SUCCESS
 &&Ñ¯!
MEMCACHED_SOME_ERRORS
)

111 
	`¥ötf
("FailureÅo communicate with servers (%s)\n",

112 
	`memˇched_°ªº‹
(
memc
, 
rc
));

113 
	`exô
(1);

116 i‡(
›t_™Æyze
)

118 
memˇched_°©_°
 *
memc_°©
;

120 
memc_°©

	`memˇched_°©
(
memc
, 
NULL
, &
rc
);

122 i‡(! 
memc_°©
)

123 
	`exô
(-1);

125 
	`run_™Æyzî
(
memc
, 
memc_°©
);

127 
	`memˇched_°©_‰ì
(
memc
, 
memc_°©
);

131 
rc

	`memˇched_°©_execuã
(
memc
, 
°©_¨gs
, 
°©_¥öãr
, 
NULL
);

134 
	`‰ì
(
›t_£rvîs
);

136 
	`memˇched_‰ì
(
memc
);

138  
rc
 =
MEMCACHED_SUCCESS
 ? 0: -1;

139 
	}
}

141 
	$run_™Æyzî
(
memˇched_°
 *
memc
, 
memˇched_°©_°
 *
memc_°©
)

143 
memˇched_ªtu∫_t
 
rc
;

145 i‡(
™Æyze_mode
 =
NULL
)

147 
memˇched_™Æysis_°
 *
ªp‹t
;

148 
ªp‹t

	`memˇched_™Æyze
(
memc
, 
memc_°©
, &
rc
);

149 i‡(
rc
 !
MEMCACHED_SUCCESS
 || 
ªp‹t
 =
NULL
)

151 
	`¥ötf
("FailureÅoánalyze servers (%s)\n",

152 
	`memˇched_°ªº‹
(
memc
, 
rc
));

153 
	`exô
(1);

155 
	`¥öt_™Æysis_ªp‹t
(
memc
, 
ªp‹t
);

156 
	`‰ì
(
ªp‹t
);

158 i‡(
	`°rcmp
(
™Æyze_mode
, "latency") == 0)

160 
memˇched_°
 **
£rvîs
;

161 
uöt32_t
 
Êags
, 
£rvî_cou¡

	`memˇched_£rvî_cou¡
(
memc
);

162 
uöt32_t
 
num_of_ã°s
= 32;

163 c⁄° *
ã°_key
= "libmemcached_test_key";

165 
£rvîs

	`mÆloc
((
memˇched_°
*Ë* 
£rvî_cou¡
);

166 i‡(!
£rvîs
)

168 
	`Ârötf
(
°dîr
, "FailedÅoállocate memory\n");

172 
uöt32_t
 
x
0; x < 
£rvî_cou¡
; x++)

174 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

175 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
x
);

177 i‡((
£rvîs
[
x
]
	`memˇched_¸óã
(
NULL
)) == NULL)

179 
	`Ârötf
(
°dîr
, "FailedÅo memcached_create()\n");

180 i‡(
x
 > 0)

181 
	`memˇched_‰ì
(
£rvîs
[0]);

182 
x
--;

183 ; 
x
 > 0; x--)

184 
	`memˇched_‰ì
(
£rvîs
[
x
]);

186 
	`‰ì
(
£rvîs
);

189 
	`memˇched_£rvî_add
(
£rvîs
[
x
],

190 
	`memˇched_£rvî_«me
(
ö°™˚
),

191 
	`memˇched_£rvî_p‹t
(
ö°™˚
));

194 
	`¥ötf
("Network Latency Test:\n\n");

195 
timevÆ
 
°¨t_time
, 
íd_time
;

196 
uöt32_t
 
¶owe°_£rvî
= 0;

197 
ñ≠£d_time
, 
¶owe°_time
= 0;

199 
uöt32_t
 
x
0; x < 
£rvî_cou¡
; x++)

201 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

202 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
x
);

203 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

205 
uöt32_t
 
y
0; y < 
num_of_ã°s
; y++)

207 
size_t
 
vÀn
;

208 *
vÆ

	`memˇched_gë
(
£rvîs
[
x
], 
ã°_key
, 
	`°æí
(test_key),

209 &
vÀn
, &
Êags
, &
rc
);

210 i‡(
rc
 !
MEMCACHED_NOTFOUND
 &&Ñ¯!
MEMCACHED_SUCCESS
)

212 
	`‰ì
(
vÆ
);

214 
	`gëtimeofday
(&
íd_time
, 
NULL
);

216 
ñ≠£d_time
(Ë
	`timedif
(
íd_time
, 
°¨t_time
);

217 
ñ≠£d_time
 /(Ë
num_of_ã°s
;

219 i‡(
ñ≠£d_time
 > 
¶owe°_time
)

221 
¶owe°_£rvî

x
;

222 
¶owe°_time

ñ≠£d_time
;

225 i‡(
rc
 !
MEMCACHED_NOTFOUND
 &&Ñ¯!
MEMCACHED_SUCCESS
)

227 
	`¥ötf
("\t %s (%d) => failedÅoÑeachÅhe server\n",

228 
	`memˇched_£rvî_«me
(
ö°™˚
),

229 
	`memˇched_£rvî_p‹t
(
ö°™˚
));

233 
	`¥ötf
("\t %s (%d) => %ld.%ld seconds\n",

234 
	`memˇched_£rvî_«me
(
ö°™˚
),

235 
	`memˇched_£rvî_p‹t
(
ö°™˚
),

236 
ñ≠£d_time
 / 1000,Élapsed_time % 1000);

240 i‡(
£rvî_cou¡
 > 1 && 
¶owe°_time
 > 0)

242 
memˇched_£rvî_ö°™˚_°
 
¶owe°
=

243 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
¶owe°_£rvî
);

245 
	`¥ötf
("---\n");

246 
	`¥ötf
("Slowest Server: %s (%d) => %ld.%ld seconds\n",

247 
	`memˇched_£rvî_«me
(
¶owe°
),

248 
	`memˇched_£rvî_p‹t
(
¶owe°
),

249 
¶owe°_time
 / 1000, slowest_time % 1000);

251 
	`¥ötf
("\n");

253 
uöt32_t
 
x
0; x < 
£rvî_cou¡
; x++)

254 
	`memˇched_‰ì
(
£rvîs
[
x
]);

256 
	`‰ì
(
£rvîs
);

257 
	`‰ì
(
™Æyze_mode
);

261 
	`Ârötf
(
°dîr
, "Invalid Analyzer OptionÖrovided\n");

262 
	`‰ì
(
™Æyze_mode
);

264 
	}
}

266 
	$¥öt_™Æysis_ªp‹t
(
memˇched_°
 *
memc
,

267 
memˇched_™Æysis_°
 *
ªp‹t
)

270 
uöt32_t
 
£rvî_cou¡

	`memˇched_£rvî_cou¡
(
memc
);

271 
memˇched_£rvî_ö°™˚_°
 
mo°_c⁄sumed_£rvî

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
ªp‹t
->most_consumed_server);

272 
memˇched_£rvî_ö°™˚_°
 
Àa°_‰ì_£rvî

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
ªp‹t
->least_free_server);

273 
memˇched_£rvî_ö°™˚_°
 
ﬁde°_£rvî

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
ªp‹t
->oldest_server);

275 
	`¥ötf
("Memcached Cluster Analysis Report\n\n");

277 
	`¥ötf
("\tNumbî o‡Sîvî†A«lyzed : %u\n", 
£rvî_cou¡
);

278 
	`¥ötf
("\tAverage Item Size (incl/overhead) : %u bytes\n",

279 
ªp‹t
->
avîage_ôem_size
);

281 i‡(
£rvî_cou¡
 == 1)

283 
	`¥ötf
("\nForá detailedÑeport, you must supply multiple servers.\n");

287 
	`¥ötf
("\n");

288 
	`¥ötf
("\tNode with most memory consumption : %s:%u (%llu bytes)\n",

289 
	`memˇched_£rvî_«me
(
mo°_c⁄sumed_£rvî
),

290 (
uöt32_t
)
	`memˇched_£rvî_p‹t
(
mo°_c⁄sumed_£rvî
),

291 ()
ªp‹t
->
mo°_u£d_byãs
);

292 
	`¥ötf
("\tNode withÜeast free space : %s:%u (%llu bytesÑemaining)\n",

293 
	`memˇched_£rvî_«me
(
Àa°_‰ì_£rvî
),

294 (
uöt32_t
)
	`memˇched_£rvî_p‹t
(
Àa°_‰ì_£rvî
),

295 ()
ªp‹t
->
Àa°_ªmaöög_byãs
);

296 
	`¥ötf
("\tNode withÜongest uptime : %s:%u (%us)\n",

297 
	`memˇched_£rvî_«me
(
ﬁde°_£rvî
),

298 (
uöt32_t
)
	`memˇched_£rvî_p‹t
(
ﬁde°_£rvî
),

299 
ªp‹t
->
l⁄ge°_u±ime
);

300 
	`¥ötf
("\tPoﬁ-widêHô R©iÿ : %1.f%%\n", 
ªp‹t
->
poﬁ_hô_øtio
);

301 
	`¥ötf
("\n");

302 
	}
}

304 
	$›ti⁄s_∑r£
(
¨gc
, *
¨gv
[])

306 
memˇched_¥ogøms_hñp_°
 
hñp_›ti⁄s
[]=

311 
›ti⁄_ödex
= 0;

312 
›ti⁄_rv
;

316 
›ti⁄_rv

	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vhvds:a", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

317 i‡(
›ti⁄_rv
 == -1) ;

318 
›ti⁄_rv
)

322 
OPT_VERBOSE
:

323 
›t_vîbo£
 = 
OPT_VERBOSE
;

325 
OPT_DEBUG
:

326 
›t_vîbo£
 = 
OPT_DEBUG
;

328 
OPT_VERSION
:

329 
	`vîsi⁄_comm™d
(
PROGRAM_NAME
);

331 
OPT_HELP
:

332 
	`hñp_comm™d
(
PROGRAM_NAME
, 
PROGRAM_DESCRIPTION
, 
l⁄g_›ti⁄s
, 
hñp_›ti⁄s
);

334 
OPT_SERVERS
:

335 
›t_£rvîs

	`°rdup
(
›èrg
);

337 
OPT_STAT_ARGS
:

338 
°©_¨gs

	`°rdup
(
›èrg
);

340 
OPT_ANALYZE
:

341 
›t_™Æyze

OPT_ANALYZE
;

342 
™Æyze_mode
(
›èrg
Ë? 
	`°rdup
(›èrgË: 
NULL
;

346 
	`exô
(1);

348 
	`ab‹t
();

351 
	}
}

	@clients/ms_atomic.h

12 #i‚de‡
CLIENTS_MS_ATOMIC_H


13 
	#CLIENTS_MS_ATOMIC_H


	)

15 #i‡
deföed
(
__SUNPRO_C
)

16 
	#_KERNEL


	)

17 
	~<©omic.h
>

18 #i‡
SIZEOF_SIZE_T
 == 8

19 
	#©omic_add_size
(
X
, 
Y
Ë
	`©omic_add_64
((X), (Y))

	)

20 
	#©omic_add_size_nv
(
X
, 
Y
Ë
	`©omic_add_64
((X), (Y))

	)

21 
	#©omic_dec_size
(
X
, 
Y
Ë
	`©omic_add_64
((X), (Y))

	)

22 
	#©omic_dec_size_nv
(
X
, 
Y
Ë
	`©omic_add_64
((X), (Y))

	)

24 
	#©omic_add_size
(
X
, 
Y
Ë
	`©omic_add_32
((X), (Y))

	)

25 
	#©omic_add_size_nv
(
X
, 
Y
Ë
	`©omic_add_32
((X), (Y))

	)

26 
	#©omic_dec_size
(
X
, 
Y
Ë
	`©omic_add_32
((X), (Y))

	)

27 
	#©omic_dec_size_nv
(
X
, 
Y
Ë
	`©omic_add_32
((X), (Y))

	)

29 #unde‡
_KERNEL


30 #ñi‡
HAVE_GCC_ATOMIC_BUILTINS


31 
	#©omic_add_8
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

32 
	#©omic_add_16
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

33 
	#©omic_add_32
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

34 
	#©omic_add_size
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

35 
	#©omic_dec_8
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

36 
	#©omic_dec_16
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

37 
	#©omic_dec_32
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

38 
	#©omic_dec_size
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

40 
	#©omic_add_8_nv
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

41 
	#©omic_add_16_nv
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

42 
	#©omic_add_32_nv
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

43 
	#©omic_add_size_nv
(
X
, 
Y
Ë
	`__sync_„tch_™d_add
((X), (Y))

	)

44 
	#©omic_dec_8_nv
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

45 
	#©omic_dec_16_nv
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

46 
	#©omic_dec_32_nv
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

47 
	#©omic_dec_size_nv
(
X
Ë
	`__sync_„tch_™d_sub
((X), 1)

	)

50 
	#©omic_add_8
(
X
, 
Y
)

	)

51 
	#©omic_add_16
(
X
, 
Y
)

	)

52 
	#©omic_add_32
(
X
, 
Y
)

	)

53 
	#©omic_add_size
(
X
, 
Y
)

	)

54 
	#©omic_dec_8
(
X
)

	)

55 
	#©omic_dec_16
(
X
)

	)

56 
	#©omic_dec_32
(
X
)

	)

57 
	#©omic_dec_size
(
X
)

	)

59 
	#©omic_add_8_nv
(
X
, 
Y
)

	)

60 
	#©omic_add_16_nv
(
X
, 
Y
)

	)

61 
	#©omic_add_32_nv
(
X
, 
Y
)

	)

62 
	#©omic_add_size_nv
(
X
, 
Y
)

	)

63 
	#©omic_dec_8_nv
(
X
)

	)

64 
	#©omic_dec_16_nv
(
X
)

	)

65 
	#©omic_dec_32_nv
(
X
)

	)

66 
	#©omic_dec_size_nv
(
X
)

	)

	@clients/ms_conn.c

12 
	~"c⁄fig.h
"

14 
	~<°dio.h
>

15 
	~<öây≥s.h
>

16 
	~<limôs.h
>

17 
	~<sys/uio.h
>

18 
	~<evít.h
>

19 
	~<f˙é.h
>

20 
	~<√töë/t˝.h
>

21 
	~<√töë/ö.h
>

22 
	~<¨∑/öë.h
>

23 #i‡
TIME_WITH_SYS_TIME


24 
	~<sys/time.h
>

25 
	~<time.h
>

27 #i‡
HAVE_SYS_TIME_H


28 
	~<sys/time.h
>

30 
	~<time.h
>

33 
	~"ms_£âög.h
"

34 
	~"ms_thªad.h
"

35 
	~"ms_©omic.h
"

37 #ifde‡
löux


43 #unde‡
¡ohs


44 #unde‡
¡ohl


45 #unde‡
ht⁄s


46 #unde‡
ht⁄l


50 
	#TRANSMIT_COMPLETE
 0

	)

51 
	#TRANSMIT_INCOMPLETE
 1

	)

52 
	#TRANSMIT_SOFT_ERROR
 2

	)

53 
	#TRANSMIT_HARD_ERROR
 3

	)

56 
	#KEY_PREFIX_BASE
 0x1010101010101010

	)

57 
	#KEY_PREFIX_MASK
 0x1010101010101010

	)

60 
	#KEY_TOKEN
 1

	)

61 
	#VALUELEN_TOKEN
 3

	)

64 
uöt64_t
 
	gkey_¥efix_£q

KEY_PREFIX_BASE
;

67 vﬁ©ûê
uöt32_t
 
	gudp_ªque°_id
= 0;

69 
±hªad_key_t
 
ms_thªad_key
;

72 
uöt32_t
 
ms_gë_udp_ªque°_id
();

76 
ms_èsk_öô
(
ms_c⁄n_t
 *
c
);

77 
ms_c⁄n_udp_öô
(
ms_c⁄n_t
 *
c
, c⁄° 
boﬁ
 
is_udp
);

78 
ms_c⁄n_sock_öô
(
ms_c⁄n_t
 *
c
);

79 
ms_c⁄n_evít_öô
(
ms_c⁄n_t
 *
c
);

80 
ms_c⁄n_öô
(
ms_c⁄n_t
 *
c
,

81 c⁄° 
öô_°©e
,

82 c⁄° 
ªad_buf„r_size
,

83 c⁄° 
boﬁ
 
is_udp
);

84 
ms_w¨mup_num_öô
(
ms_c⁄n_t
 *
c
);

85 
ms_ôem_wö_öô
(
ms_c⁄n_t
 *
c
);

89 
ms_c⁄n_‰ì
(
ms_c⁄n_t
 *
c
);

90 
ms_c⁄n_˛o£
(
ms_c⁄n_t
 *
c
);

94 
ms_√w_sockë
(
addröfo
 *
ai
);

95 
ms_maximize_¢dbuf
(c⁄° 
sfd
);

96 
ms_√tw‹k_c⁄√˘
(
ms_c⁄n_t
 *
c
,

97 *
§v_ho°_«me
,

98 c⁄° 
§v_p‹t
,

99 c⁄° 
boﬁ
 
is_udp
,

100 *
ªt_sfd
);

101 
ms_ªc⁄n
(
ms_c⁄n_t
 *
c
);

105 
ms_tokíize_comm™d
(*
comm™d
,

106 
tokí_t
 *
tokís
,

107 c⁄° 
max_tokís
);

108 
ms_ascii_¥o˚ss_löe
(
ms_c⁄n_t
 *
c
, *
comm™d
);

109 
ms_åy_ªad_löe
(
ms_c⁄n_t
 *
c
);

110 
ms_s‹t_udp_∑ckë
(
ms_c⁄n_t
 *
c
, *
buf
, 
rbyãs
);

111 
ms_udp_ªad
(
ms_c⁄n_t
 *
c
, *
buf
, 
Àn
);

112 
ms_åy_ªad_√tw‹k
(
ms_c⁄n_t
 *
c
);

113 
ms_vîify_vÆue
(
ms_c⁄n_t
 *
c
,

114 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem
,

115 *
vÆue
,

116 
vÀn
);

117 
ms_ascii_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
);

118 
ms_bö_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
);

119 
ms_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
);

123 
ms_add_msghdr
(
ms_c⁄n_t
 *
c
);

124 
ms_ísuª_iov_•a˚
(
ms_c⁄n_t
 *
c
);

125 
ms_add_iov
(
ms_c⁄n_t
 *
c
, c⁄° *
buf
, 
Àn
);

126 
ms_buûd_udp_hódîs
(
ms_c⁄n_t
 *
c
);

127 
ms_å™smô
(
ms_c⁄n_t
 *
c
);

131 
ms_c⁄n_shrök
(
ms_c⁄n_t
 *
c
);

132 
ms_c⁄n_£t_°©e
(
ms_c⁄n_t
 *
c
, 
°©e
);

133 
boﬁ
 
ms_upd©e_evít
(
ms_c⁄n_t
 *
c
, c⁄° 
√w_Êags
);

134 
uöt32_t
 
ms_gë_ªp_sock_ödex
(
ms_c⁄n_t
 *
c
, 
cmd
);

135 
uöt32_t
 
ms_gë_√xt_sock_ödex
(
ms_c⁄n_t
 *
c
);

136 
ms_upd©e_c⁄n_sock_evít
(
ms_c⁄n_t
 *
c
);

137 
boﬁ
 
ms_√ed_yõld
(
ms_c⁄n_t
 *
c
);

138 
ms_upd©e_°¨t_time
(
ms_c⁄n_t
 *
c
);

142 
ms_drive_machöe
(
ms_c⁄n_t
 *
c
);

143 
ms_evít_h™dÀr
(c⁄° 
fd
, c⁄° 
which
, *
¨g
);

147 
ms_buûd_ascii_wrôe_buf_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

148 
ms_buûd_ascii_wrôe_buf_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

149 
ms_buûd_ascii_wrôe_buf_mlgë
(
ms_c⁄n_t
 *
c
);

153 
ms_bö_¥o˚ss_ª•⁄£
(
ms_c⁄n_t
 *
c
);

154 
ms_add_bö_hódî
(
ms_c⁄n_t
 *
c
,

155 
uöt8_t
 
›code
,

156 
uöt8_t
 
hdr_Àn
,

157 
uöt16_t
 
key_Àn
,

158 
uöt32_t
 
body_Àn
);

159 
ms_add_key_to_iov
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

160 
ms_buûd_bö_wrôe_buf_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

161 
ms_buûd_bö_wrôe_buf_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

162 
ms_buûd_bö_wrôe_buf_mlgë
(
ms_c⁄n_t
 *
c
);

174 
uöt64_t
 
	$ms_gë_key_¥efix
()

176 
uöt64_t
 
key_¥efix
;

178 
	`±hªad_muãx_lock
(&
ms_globÆ
.
£q_muãx
);

179 
key_¥efix_£q
|
KEY_PREFIX_MASK
;

180 
key_¥efix

key_¥efix_£q
;

181 
key_¥efix_£q
++;

182 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
£q_muãx
);

184  
key_¥efix
;

185 
	}
}

193 
uöt32_t
 
	$ms_gë_udp_ªque°_id
()

195  
	`©omic_add_32_nv
(&
udp_ªque°_id
, 1);

196 
	}
}

204 
	$ms_èsk_öô
(
ms_c⁄n_t
 *
c
)

206 
c
->
cuº_èsk
.
cmd

CMD_NULL
;

207 
c
->
cuº_èsk
.
ôem
= 0;

208 
c
->
cuº_èsk
.
vîify

Ál£
;

209 
c
->
cuº_èsk
.
föish_vîify

åue
;

210 
c
->
cuº_èsk
.
gë_miss

åue
;

212 
c
->
cuº_èsk
.
gë_›t
= 0;

213 
c
->
cuº_èsk
.
£t_›t
= 0;

214 
c
->
cuº_èsk
.
cy˛e_undo_gë
= 0;

215 
c
->
cuº_èsk
.
cy˛e_undo_£t
= 0;

216 
c
->
cuº_èsk
.
vîifõd_gë
= 0;

217 
c
->
cuº_èsk
.
ovîwrôe_£t
= 0;

218 
	}
}

229 
	$ms_c⁄n_udp_öô
(
ms_c⁄n_t
 *
c
, c⁄° 
boﬁ
 
is_udp
)

231 
c
->
hdrbuf
= 0;

232 
c
->
rudpbuf
= 0;

233 
c
->
udµkt
= 0;

235 
c
->
rudpsize

UDP_DATA_BUFFER_SIZE
;

236 
c
->
hdrsize
= 0;

238 
c
->
rudpbyãs
= 0;

239 
c
->
∑ckës
= 0;

240 
c
->
ªcvpkt
= 0;

241 
c
->
pktcuº
= 0;

242 
c
->
‹dcuº
= 0;

244 
c
->
udp

is_udp
;

246 i‡(
c
->
udp
 || (! c->ud∞&& 
ms_£âög
.
Á˚book_ã°
))

248 
c
->
rudpbuf
(*)
	`mÆloc
((
size_t
)c->
rudpsize
);

249 
c
->
udµkt
(
ms_udµkt_t
 *)
	`mÆloc
(
MAX_UDP_PACKET
 * (ms_udppkt_t));

251 i‡((
c
->
rudpbuf
 =
NULL
Ë|| (c->
udµkt
 == NULL))

253 i‡(
c
->
rudpbuf
 !
NULL
)

254 
	`‰ì
(
c
->
rudpbuf
);

255 i‡(
c
->
udµkt
 !
NULL
)

256 
	`‰ì
(
c
->
udµkt
);

257 
	`Ârötf
(
°dîr
, "malloc()\n");

260 
	`mem£t
(
c
->
udµkt
, 0, 
MAX_UDP_PACKET
 * (
ms_udµkt_t
));

263  
EXIT_SUCCESS
;

264 
	}
}

277 
	$ms_c⁄n_öô
(
ms_c⁄n_t
 *
c
,

278 c⁄° 
öô_°©e
,

279 c⁄° 
ªad_buf„r_size
,

280 c⁄° 
boﬁ
 
is_udp
)

282 
	`as£π
(
c
 !
NULL
);

284 
c
->
rbuf
c->
wbuf
= 0;

285 
c
->
iov
= 0;

286 
c
->
msgli°
= 0;

288 
c
->
rsize

ªad_buf„r_size
;

289 
c
->
wsize

WRITE_BUFFER_SIZE
;

290 
c
->
iovsize

IOV_LIST_INITIAL
;

291 
c
->
msgsize

MSG_LIST_INITIAL
;

294 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

296 
c
->
tŸÆ_sfds

ms_£âög
.
§v_˙t
 * ms_£âög.
sock_≥r_c⁄n
;

300 
c
->
tŸÆ_sfds

ms_£âög
.
sock_≥r_c⁄n
;

302 
c
->
Æive_sfds
= 0;

304 
c
->
rbuf
(*)
	`mÆloc
((
size_t
)c->
rsize
);

305 
c
->
wbuf
(*)
	`mÆloc
((
size_t
)c->
wsize
);

306 
c
->
iov
(
iovec
 *)
	`mÆloc
((iovecË* (
size_t
)c->
iovsize
);

307 
c
->
msgli°
(
msghdr
 *)
	`mÆloc
(

308 (
msghdr
Ë* (
size_t
)
c
->
msgsize
);

309 i‡(
ms_£âög
.
mu…_key_num
 > 1)

311 
c
->
mlgë_èsk
.
mlgë_ôem
(
ms_mlgë_èsk_ôem_t
 *)

312 
	`mÆloc
(

313 (
ms_mlgë_èsk_ôem_t
Ë* (
size_t
)
ms_£âög
.
mu…_key_num
);

315 
c
->
t˝sfd
(*)
	`mÆloc
((
size_t
)c->
tŸÆ_sfds
 * ());

317 i‡((
c
->
rbuf
 =
NULL
Ë|| (c->
wbuf
 =NULLË|| (c->
iov
 == NULL)

318 || (
c
->
msgli°
 =
NULL
Ë|| (c->
t˝sfd
 == NULL)

319 || ((
ms_£âög
.
mu…_key_num
 > 1)

320 && (
c
->
mlgë_èsk
.
mlgë_ôem
 =
NULL
)))

322 i‡(
c
->
rbuf
 !
NULL
)

323 
	`‰ì
(
c
->
rbuf
);

324 i‡(
c
->
wbuf
 !
NULL
)

325 
	`‰ì
(
c
->
wbuf
);

326 i‡(
c
->
iov
 !
NULL
)

327 
	`‰ì
(
c
->
iov
);

328 i‡(
c
->
msgli°
 !
NULL
)

329 
	`‰ì
(
c
->
msgli°
);

330 i‡(
c
->
mlgë_èsk
.
mlgë_ôem
 !
NULL
)

331 
	`‰ì
(
c
->
mlgë_èsk
.
mlgë_ôem
);

332 i‡(
c
->
t˝sfd
 !
NULL
)

333 
	`‰ì
(
c
->
t˝sfd
);

334 
	`Ârötf
(
°dîr
, "malloc()\n");

338 
c
->
°©e

öô_°©e
;

339 
c
->
rvbyãs
= 0;

340 
c
->
rbyãs
= 0;

341 
c
->
rcuº
c->
rbuf
;

342 
c
->
wcuº
c->
wbuf
;

343 
c
->
iovu£d
= 0;

344 
c
->
msgcuº
= 0;

345 
c
->
msgu£d
= 0;

346 
c
->
cur_idx
c->
tŸÆ_sfds
;

348 
c
->
˘nwrôe

Ál£
;

349 
c
->
ªadvÆ

Ál£
;

350 
c
->
ch™ge_sfd

Ál£
;

352 
c
->
¥ecmd
.
cmd
c->
cuºcmd
.cmd
CMD_NULL
;

353 
c
->
¥ecmd
.
isföish

åue
;

354 
c
->
cuºcmd
.
isföish

Ál£
;

355 
c
->
¥ecmd
.
ªt°©
c->
cuºcmd
.ªt°©
MCD_FAILURE
;

356 
c
->
¥ecmd
.
key_¥efix
c->
cuºcmd
.key_prefix= 0;

358 
c
->
mlgë_èsk
.
mlgë_num
= 0;

359 
c
->
mlgë_èsk
.
vÆue_ödex
= -1;

361 i‡(
ms_£âög
.
bö¨y_¥Ÿ
)

363 
c
->
¥Ÿocﬁ

bö¨y_¥Ÿ
;

367 
c
->
¥Ÿocﬁ

ascii_¥Ÿ
;

371 i‡(
	`ms_c⁄n_udp_öô
(
c
, 
is_udp
) != 0)

377 
	`ms_èsk_öô
(
c
);

379 i‡(! (
ms_£âög
.
Á˚book_ã°
 && 
is_udp
))

381 
	`©omic_add_32
(&
ms_°©s
.
a˘ive_c⁄ns
, 1);

384  
EXIT_SUCCESS
;

385 
	}
}

395 
	$ms_w¨mup_num_öô
(
ms_c⁄n_t
 *
c
)

398 i‡(
ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
 < 
PROP_ERROR
)

400 
c
->
w¨mup_num
c->
wö_size
;

401 
c
->
ªmaö_w¨mup_num
c->
w¨mup_num
;

405 
c
->
w¨mup_num
= 0;

406 
c
->
ªmaö_w¨mup_num
c->
w¨mup_num
;

408 
	}
}

419 
	$ms_ôem_wö_öô
(
ms_c⁄n_t
 *
c
)

421 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

422 
exp_˙t
= 0;

424 
c
->
wö_size
()
ms_£âög
.win_size;

425 
c
->
£t_curs‹
= 0;

426 
c
->
exec_num

ms_thªad
->
thªad_˘x
->
exec_num_≥rc⁄n
;

427 
c
->
ªmaö_exec_num
c->
exec_num
;

429 
c
->
ôem_wö
(
ms_èsk_ôem_t
 *)
	`mÆloc
(

430 (
ms_èsk_ôem_t
Ë* (
size_t
)
c
->
wö_size
);

431 i‡(
c
->
ôem_wö
 =
NULL
)

433 
	`Ârötf
(
°dîr
, "Can'tállocateÅask itemárray for conn.\n");

436 
	`mem£t
(
c
->
ôem_wö
, 0, (
ms_èsk_ôem_t
Ë* (
size_t
)c->
wö_size
);

438 
i
0; i < 
c
->
wö_size
; i++)

440 
c
->
ôem_wö
[
i
].
key_size
()
ms_£âög
.
di°r
[i].key_size;

441 
c
->
ôem_wö
[
i
].
key_¥efix

	`ms_gë_key_¥efix
();

442 
c
->
ôem_wö
[
i
].
key_suffix_off£t

ms_£âög
.
di°r
[i].
key_off£t
;

443 
c
->
ôem_wö
[
i
].
vÆue_size
()
ms_£âög
.
di°r
[i].value_size;

444 
c
->
ôem_wö
[
i
].
vÆue_off£t

INVALID_OFFSET
;

445 
c
->
ôem_wö
[
i
].
˛õ¡_time
= 0;

448 i‡(
exp_˙t
 < 
ms_£âög
.
exp_vî_≥r
 * 
i
)

450 
c
->
ôem_wö
[
i
].
exp_time

FIXED_EXPIRE_TIME
;

451 
exp_˙t
++;

455 
c
->
ôem_wö
[
i
].
exp_time
= 0;

459 
	`ms_w¨mup_num_öô
(
c
);

461  
EXIT_SUCCESS
;

462 
	}
}

474 
	$ms_c⁄n_sock_öô
(
ms_c⁄n_t
 *
c
)

476 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

477 
uöt32_t
 
i
;

478 
ªt_sfd
;

479 
uöt32_t
 
§v_idx
= 0;

481 
	`as£π
(
c
 !
NULL
);

482 
	`as£π
(
c
->
t˝sfd
 !
NULL
);

484 
i
0; i < 
c
->
tŸÆ_sfds
; i++)

486 
ªt_sfd
= 0;

487 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

490 
§v_idx

i
 % 
ms_£âög
.
§v_˙t
;

495 
§v_idx

ms_thªad
->
thªad_˘x
->srv_idx;

498 i‡(
	`ms_√tw‹k_c⁄√˘
(
c
, 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

499 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
,

500 
ms_£âög
.
udp
, &
ªt_sfd
) != 0)

505 i‡(
i
 == 0)

507 
c
->
sfd

ªt_sfd
;

510 i‡(! 
ms_£âög
.
udp
)

512 
c
->
t˝sfd
[
i
]
ªt_sfd
;

515 
c
->
Æive_sfds
++;

519 i‡(
ms_£âög
.
Á˚book_ã°
)

521 
ªt_sfd
= 0;

522 i‡(
	`ms_√tw‹k_c⁄√˘
(
c
, 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

523 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
,

524 
åue
, &
ªt_sfd
) != 0)

526 
c
->
udpsfd
= 0;

530 
c
->
udpsfd

ªt_sfd
;

534 i‡((
i
 !
c
->
tŸÆ_sfds
Ë|| (
ms_£âög
.
Á˚book_ã°
 && (c->
udpsfd
 == 0)))

536 i‡(
ms_£âög
.
udp
)

538 
	`˛o£
(
c
->
sfd
);

542 
uöt32_t
 
j
0; j < 
i
; j++)

544 
	`˛o£
(
c
->
t˝sfd
[
j
]);

548 i‡(
c
->
udpsfd
 != 0)

550 
	`˛o£
(
c
->
udpsfd
);

556  
EXIT_SUCCESS
;

557 
	}
}

568 
	$ms_c⁄n_evít_öô
(
ms_c⁄n_t
 *
c
)

570 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

571 
evít_Êags

EV_WRITE
 | 
EV_PERSIST
;

573 
	`evít_£t
(&
c
->
evít
, c->
sfd
, 
evít_Êags
, 
ms_evít_h™dÀr
, (*)c);

574 
	`evít_ba£_£t
(
ms_thªad
->
ba£
, &
c
->
evít
);

575 
c
->
ev_Êags

evít_Êags
;

577 i‡(
	`evít_add
(&
c
->
evít
, 
NULL
) == -1)

582  
EXIT_SUCCESS
;

583 
	}
}

594 
	$ms_£tup_c⁄n
(
ms_c⁄n_t
 *
c
)

596 i‡(
	`ms_ôem_wö_öô
(
c
) != 0)

601 i‡(
	`ms_c⁄n_öô
(
c
, 
c⁄n_wrôe
, 
DATA_BUFFER_SIZE
, 
ms_£âög
.
udp
) != 0)

606 i‡(
	`ms_c⁄n_sock_öô
(
c
) != 0)

611 i‡(
	`ms_c⁄n_evít_öô
(
c
) != 0)

616  
EXIT_SUCCESS
;

617 
	}
}

625 
	$ms_c⁄n_‰ì
(
ms_c⁄n_t
 *
c
)

627 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

628 i‡(
c
 !
NULL
)

630 i‡(
c
->
hdrbuf
 !
NULL
)

631 
	`‰ì
(
c
->
hdrbuf
);

632 i‡(
c
->
msgli°
 !
NULL
)

633 
	`‰ì
(
c
->
msgli°
);

634 i‡(
c
->
rbuf
 !
NULL
)

635 
	`‰ì
(
c
->
rbuf
);

636 i‡(
c
->
wbuf
 !
NULL
)

637 
	`‰ì
(
c
->
wbuf
);

638 i‡(
c
->
iov
 !
NULL
)

639 
	`‰ì
(
c
->
iov
);

640 i‡(
c
->
mlgë_èsk
.
mlgë_ôem
 !
NULL
)

641 
	`‰ì
(
c
->
mlgë_èsk
.
mlgë_ôem
);

642 i‡(
c
->
rudpbuf
 !
NULL
)

643 
	`‰ì
(
c
->
rudpbuf
);

644 i‡(
c
->
udµkt
 !
NULL
)

645 
	`‰ì
(
c
->
udµkt
);

646 i‡(
c
->
ôem_wö
 !
NULL
)

647 
	`‰ì
(
c
->
ôem_wö
);

648 i‡(
c
->
t˝sfd
 !
NULL
)

649 
	`‰ì
(
c
->
t˝sfd
);

651 i‡(--
ms_thªad
->
«˘ive_c⁄n
 == 0)

653 
	`‰ì
(
ms_thªad
->
c⁄n
);

656 
	}
}

664 
	$ms_c⁄n_˛o£
(
ms_c⁄n_t
 *
c
)

666 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

667 
	`as£π
(
c
 !
NULL
);

670 
	`evít_dñ
(&
c
->
evít
);

672 
uöt32_t
 
i
0; i < 
c
->
tŸÆ_sfds
; i++)

674 i‡(
c
->
t˝sfd
[
i
] > 0)

676 
	`˛o£
(
c
->
t˝sfd
[
i
]);

679 
c
->
sfd
= 0;

681 i‡(
ms_£âög
.
Á˚book_ã°
)

683 
	`˛o£
(
c
->
udpsfd
);

686 
	`©omic_dec_32
(&
ms_°©s
.
a˘ive_c⁄ns
);

688 
	`ms_c⁄n_‰ì
(
c
);

690 i‡(
ms_£âög
.
run_time
 == 0)

692 
	`±hªad_muãx_lock
(&
ms_globÆ
.
run_lock
.
lock
);

693 
ms_globÆ
.
run_lock
.
cou¡
++;

694 
	`±hªad_c⁄d_sig«l
(&
ms_globÆ
.
run_lock
.
c⁄d
);

695 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
run_lock
.
lock
);

698 i‡(
ms_thªad
->
«˘ive_c⁄n
 == 0)

700 
	`±hªad_exô
(
NULL
);

702 
	}
}

712 
	$ms_√w_sockë
(
addröfo
 *
ai
)

714 
sfd
;

716 i‡((
sfd

	`sockë
(
ai
->
ai_Ámûy
,ái->
ai_sockty≥
,ái->
ai_¥Ÿocﬁ
)) == -1)

718 
	`Ârötf
(
°dîr
, "sockë(Ëîr‹: %s.\n", 
	`°ªº‹
(
î∫o
));

722  
sfd
;

723 
	}
}

731 
	$ms_maximize_¢dbuf
(c⁄° 
sfd
)

733 
sockÀn_t
 
ötsize
= ();

734 
œ°_good
= 0;

735 
mö
, 
max
, 
avg
;

736 
ﬁd_size
;

739 i‡(
	`gësock›t
(
sfd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
ﬁd_size
, &
ötsize
) != 0)

741 
	`Ârötf
(
°dîr
, "getsockopt(SO_SNDBUF)\n");

746 
mö

ﬁd_size
;

747 
max

MAX_SENDBUF_SIZE
;

749 
mö
 <
max
)

751 
avg
(()(
mö
 + 
max
)) / 2;

752 i‡(
	`£tsock›t
(
sfd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*)&
avg
, 
ötsize
) == 0)

754 
œ°_good

avg
;

755 
mö

avg
 + 1;

759 
max

avg
 - 1;

762 
	}
}

776 
	$ms_√tw‹k_c⁄√˘
(
ms_c⁄n_t
 *
c
,

777 *
§v_ho°_«me
,

778 c⁄° 
§v_p‹t
,

779 c⁄° 
boﬁ
 
is_udp
,

780 *
ªt_sfd
)

782 
sfd
;

783 
lögî
 
lög
=

787 
addröfo
 *
ai
;

788 
addröfo
 *
√xt
;

789 
addröfo
 
höts
;

790 
p‹t_buf
[
NI_MAXSERV
];

791 
îr‹
;

792 
suc˚ss
= 0;

794 
Êags
= 1;

800 
	`mem£t
(&
höts
, 0, (hints));

801 #ifde‡
AI_ADDRCONFIG


802 
höts
.
ai_Êags

AI_PASSIVE
 | 
AI_ADDRCONFIG
;

804 
höts
.
ai_Êags

AI_PASSIVE
;

806 i‡(
is_udp
)

808 
höts
.
ai_¥Ÿocﬁ

IPPROTO_UDP
;

809 
höts
.
ai_sockty≥

SOCK_DGRAM
;

810 
höts
.
ai_Ámûy

AF_INET
;

814 
höts
.
ai_Ámûy

AF_UNSPEC
;

815 
höts
.
ai_¥Ÿocﬁ

IPPROTO_TCP
;

816 
höts
.
ai_sockty≥

SOCK_STREAM
;

819 
	`¢¥ötf
(
p‹t_buf
, 
NI_MAXSERV
, "%d", 
§v_p‹t
);

820 
îr‹

	`gëaddröfo
(
§v_ho°_«me
, 
p‹t_buf
, &
höts
, &
ai
);

821 i‡(
îr‹
 != 0)

823 i‡(
îr‹
 !
EAI_SYSTEM
)

824 
	`Ârötf
(
°dîr
, "gëaddröfo(): %s.\n", 
	`gai_°ªº‹
(
îr‹
));

826 
	`≥º‹
("getaddrinfo()\n");

831 
√xt

ai
;Çext;Çext√xt->
ai_√xt
)

833 i‡((
sfd

	`ms_√w_sockë
(
√xt
)) == -1)

835 
	`‰ìaddröfo
(
ai
);

839 
	`£tsock›t
(
sfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
Êags
, (flags));

840 i‡(
is_udp
)

842 
	`ms_maximize_¢dbuf
(
sfd
);

846 
	`£tsock›t
(
sfd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
Êags
,

847 (
Êags
));

848 
	`£tsock›t
(
sfd
, 
SOL_SOCKET
, 
SO_LINGER
, (*)&
lög
, (ling));

849 
	`£tsock›t
(
sfd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*)&
Êags
,

850 (
Êags
));

853 i‡(
is_udp
)

855 
c
->
§v_ªcv_addr_size
(
sockaddr
);

856 
	`mem˝y
(&
c
->
§v_ªcv_addr
, 
√xt
->
ai_addr
, c->
§v_ªcv_addr_size
);

860 i‡(
	`c⁄√˘
(
sfd
, 
√xt
->
ai_addr
,Çext->
ai_addæí
) == -1)

862 
	`˛o£
(
sfd
);

863 
	`‰ìaddröfo
(
ai
);

868 i‡(((
Êags

	`f˙é
(
sfd
, 
F_GETFL
, 0)) < 0)

869 || (
	`f˙é
(
sfd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0))

871 
	`Ârötf
(
°dîr
, "setting O_NONBLOCK\n");

872 
	`˛o£
(
sfd
);

873 
	`‰ìaddröfo
(
ai
);

877 i‡(
ªt_sfd
 !
NULL
)

879 *
ªt_sfd

sfd
;

882 
suc˚ss
++;

885 
	`‰ìaddröfo
(
ai
);

888  
suc˚ss
 == 0;

889 
	}
}

899 
	$ms_ªc⁄n
(
ms_c⁄n_t
 *
c
)

901 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

902 
uöt32_t
 
§v_idx
= 0;

903 
uöt32_t
 
§v_c⁄n_˙t
= 0;

905 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

907 
§v_idx

c
->
cur_idx
 % 
ms_£âög
.
§v_˙t
;

908 
§v_c⁄n_˙t

ms_£âög
.
sock_≥r_c⁄n
 * ms_£âög.
nc⁄ns
;

912 
§v_idx

ms_thªad
->
thªad_˘x
->srv_idx;

913 
§v_c⁄n_˙t

ms_£âög
.
nc⁄ns
 / ms_£âög.
§v_˙t
;

917 
	`˛o£
(
c
->
sfd
);

918 
c
->
t˝sfd
[c->
cur_idx
]= 0;

920 i‡(
	`©omic_add_32_nv
(&
ms_£âög
.
£rvîs
[
§v_idx
].
disc⁄n_˙t
, 1)

921 % 
§v_c⁄n_˙t
 == 0)

923 
	`gëtimeofday
(&
ms_£âög
.
£rvîs
[
§v_idx
].
disc⁄n_time
, 
NULL
);

924 
	`Ârötf
(
°dîr
, "Server %s:%d disconnect\n",

925 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

926 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
);

929 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

931 
uöt32_t
 
i
= 0;

933 
i
0; i < 
c
->
tŸÆ_sfds
; i++)

935 i‡(
c
->
t˝sfd
[
i
] != 0)

942 i‡(
i
 =
c
->
tŸÆ_sfds
)

952 i‡(
	`ms_√tw‹k_c⁄√˘
(
c
, 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

953 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
,

954 
ms_£âög
.
udp
, &
c
->
sfd
) == 0)

956 
c
->
t˝sfd
[c->
cur_idx
]c->
sfd
;

957 i‡(
	`©omic_add_32_nv
(&
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_˙t
, 1)

958 % (
uöt32_t
)
§v_c⁄n_˙t
 == 0)

960 
	`gëtimeofday
(&
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_time
, 
NULL
);

961 
ªc⁄n_time
=

962 ()(
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_time
.
tv_£c


963 - 
ms_£âög
.
£rvîs
[
§v_idx
].
disc⁄n_time


964 .
tv_£c
);

965 
	`Ârötf
(
°dîr
, "Server %s:%dÑeconnectáfter %ds\n",

966 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

967 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
, 
ªc⁄n_time
);

972 i‡(
ms_£âög
.
ªp_wrôe_§v
 =0 && 
c
->
tŸÆ_sfds
 > 0)

975 
	`¶ìp
(1);

978 
ms_£âög
.
ªp_wrôe_§v
 =0 && 
c
->
tŸÆ_sfds
 > 0);

981 i‡((
c
->
tŸÆ_sfds
 > 1Ë&& (c->
t˝sfd
[c->
cur_idx
] == 0))

983 
c
->
sfd
= 0;

984 
c
->
Æive_sfds
--;

987  
EXIT_SUCCESS
;

988 
	}
}

1001 
	$ms_ªc⁄n_socks
(
ms_c⁄n_t
 *
c
)

1003 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

1004 
uöt32_t
 
§v_idx
= 0;

1005 
ªt_sfd
= 0;

1006 
uöt32_t
 
§v_c⁄n_˙t
= 0;

1007 
timevÆ
 
cur_time
;

1009 
	`as£π
(
c
 !
NULL
);

1011 i‡((
c
->
tŸÆ_sfds
 =1Ë|| (c->tŸÆ_sfd†=c->
Æive_sfds
))

1013  
EXIT_SUCCESS
;

1016 
uöt32_t
 
i
0; i < 
c
->
tŸÆ_sfds
; i++)

1018 i‡(
c
->
t˝sfd
[
i
] == 0)

1020 
	`gëtimeofday
(&
cur_time
, 
NULL
);

1028 i‡(
cur_time
.
tv_£c


1029 - 
ms_£âög
.
£rvîs
[
§v_idx
].
disc⁄n_time
.
tv_£c
 < 5)

1034 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

1036 
§v_idx

i
 % 
ms_£âög
.
§v_˙t
;

1037 
§v_c⁄n_˙t

ms_£âög
.
sock_≥r_c⁄n
 * ms_£âög.
nc⁄ns
;

1041 
§v_idx

ms_thªad
->
thªad_˘x
->srv_idx;

1042 
§v_c⁄n_˙t

ms_£âög
.
nc⁄ns
 / ms_£âög.
§v_˙t
;

1045 i‡(
	`ms_√tw‹k_c⁄√˘
(
c
, 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

1046 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
,

1047 
ms_£âög
.
udp
, &
ªt_sfd
) == 0)

1049 
c
->
t˝sfd
[
i
]
ªt_sfd
;

1050 
c
->
Æive_sfds
++;

1052 i‡(
	`©omic_add_32_nv
(&
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_˙t
, 1)

1053 % (
uöt32_t
)
§v_c⁄n_˙t
 == 0)

1055 
	`gëtimeofday
(&
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_time
, 
NULL
);

1056 
ªc⁄n_time
=

1057 ()(
ms_£âög
.
£rvîs
[
§v_idx
].
ªc⁄n_time
.
tv_£c


1058 - 
ms_£âög
.
£rvîs
[
§v_idx
].
disc⁄n_time


1059 .
tv_£c
);

1060 
	`Ârötf
(
°dîr
, "Server %s:%dÑeconnectáfter %ds\n",

1061 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_ho°_«me
,

1062 
ms_£âög
.
£rvîs
[
§v_idx
].
§v_p‹t
, 
ªc⁄n_time
);

1068  
EXIT_SUCCESS
;

1069 
	}
}

1095 
	$ms_tokíize_comm™d
(*
comm™d
,

1096 
tokí_t
 *
tokís
,

1097 c⁄° 
max_tokís
)

1099 *
s
, *
e
;

1100 
¡okís
= 0;

1102 
	`as£π
(
comm™d
 !
NULL
 && 
tokís
 !NULL && 
max_tokís
 > 1);

1104 
s

e

comm™d
; 
¡okís
 < 
max_tokís
 - 1; ++e)

1106 i‡(*
e
 == ' ')

1108 i‡(
s
 !
e
)

1110 
tokís
[
¡okís
].
vÆue

s
;

1111 
tokís
[
¡okís
].
Àngth
(
size_t
)(
e
 - 
s
);

1112 
¡okís
++;

1113 *
e
= '\0';

1115 
s

e
 + 1;

1117 i‡(*
e
 == '\0')

1119 i‡(
s
 !
e
)

1121 
tokís
[
¡okís
].
vÆue

s
;

1122 
tokís
[
¡okís
].
Àngth
(
size_t
)(
e
 - 
s
);

1123 
¡okís
++;

1130  
¡okís
;

1131 
	}
}

1143 
	$ms_ascii_¥o˚ss_löe
(
ms_c⁄n_t
 *
c
, *
comm™d
)

1145 
ªt
= 0;

1146 
öt64_t
 
vÆue_Àn
;

1147 *
buf„r

comm™d
;

1149 
	`as£π
(
c
 !
NULL
);

1156 
buf„r
[0])

1159 i‡(
buf„r
[1] == 'A')

1161 
tokí_t
 
tokís
[
MAX_TOKENS
];

1162 
	`ms_tokíize_comm™d
(
comm™d
, 
tokís
, 
MAX_TOKENS
);

1163 
vÆue_Àn

	`°πﬁ
(
tokís
[
VALUELEN_TOKEN
].
vÆue
, 
NULL
, 10);

1164 
c
->
cuºcmd
.
key_¥efix
*(
uöt64_t
 *)
tokís
[
KEY_TOKEN
].
vÆue
;

1173 
c
->
rvbyãs
()(
vÆue_Àn
 + 2);

1174 
c
->
ªadvÆ

åue
;

1175 
ªt
= -1;

1181 
c
->
cuºcmd
.
ªt°©

MCD_SUCCESS
;

1184 i‡(
buf„r
[2] == 'A')

1186 
c
->
cuºcmd
.
ªt°©

MCD_STAT
;

1188 i‡(
buf„r
[1] == 'E')

1191 
	`¥ötf
("<%d %s\n", 
c
->
sfd
, 
buf„r
);

1193 
c
->
cuºcmd
.
ªt°©

MCD_SERVER_ERROR
;

1195 i‡(
buf„r
[1] == 'T')

1198 
c
->
cuºcmd
.
ªt°©

MCD_STORED
;

1202 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

1207 i‡(
buf„r
[1] == 'E')

1209 
c
->
cuºcmd
.
ªt°©

MCD_DELETED
;

1213 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

1219 i‡(
buf„r
[4] == 'F')

1221 
c
->
cuºcmd
.
ªt°©

MCD_NOTFOUND
;

1223 i‡(
buf„r
[4] == 'S')

1225 
	`¥ötf
("<%d %s\n", 
c
->
sfd
, 
buf„r
);

1226 
c
->
cuºcmd
.
ªt°©

MCD_NOTSTORED
;

1230 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

1235 i‡(
buf„r
[1] == 'N')

1238 
c
->
cuºcmd
.
ªt°©

MCD_END
;

1240 i‡(
buf„r
[1] == 'R')

1242 
	`¥ötf
("<%d ERROR\n", 
c
->
sfd
);

1243 
c
->
cuºcmd
.
ªt°©

MCD_PROTOCOL_ERROR
;

1245 i‡(
buf„r
[1] == 'X')

1247 
c
->
cuºcmd
.
ªt°©

MCD_DATA_EXISTS
;

1248 
	`¥ötf
("<%d %s\n", 
c
->
sfd
, 
buf„r
);

1252 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

1257 
	`¥ötf
("<%d %s\n", 
c
->
sfd
, 
buf„r
);

1258 
c
->
cuºcmd
.
ªt°©

MCD_CLIENT_ERROR
;

1262 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

1266  
ªt
;

1267 
	}
}

1276 
	$ms_ª£t_c⁄n
(
ms_c⁄n_t
 *
c
, 
boﬁ
 
timeout
)

1278 
	`as£π
(
c
 !
NULL
);

1280 i‡(
c
->
udp
)

1282 i‡((
c
->
∑ckës
 > 0Ë&& (c->∑ckë†< 
MAX_UDP_PACKET
))

1284 
	`mem£t
(
c
->
udµkt
, 0, (
ms_udµkt_t
Ë* (
size_t
)c->
∑ckës
);

1287 
c
->
∑ckës
= 0;

1288 
c
->
ªcvpkt
= 0;

1289 
c
->
pktcuº
= 0;

1290 
c
->
‹dcuº
= 0;

1291 
c
->
rudpbyãs
= 0;

1293 
c
->
cuºcmd
.
isföish

åue
;

1294 
c
->
˘nwrôe

Ál£
;

1295 
c
->
rbyãs
= 0;

1296 
c
->
rcuº
c->
rbuf
;

1297 
c
->
msgcuº
 = 0;

1298 
c
->
msgu£d
 = 0;

1299 
c
->
iovu£d
 = 0;

1300 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_wrôe
);

1301 
	`mem˝y
(&
c
->
¥ecmd
, &c->
cuºcmd
, (
ms_cmd°©_t
));

1303 i‡(
timeout
)

1305 
	`ms_drive_machöe
(
c
);

1307 
	}
}

1317 
	$ms_åy_ªad_löe
(
ms_c⁄n_t
 *
c
)

1319 i‡(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
)

1322 i‡((
uöt64_t
)
c
->
rbyãs
 < (c->
bö¨y_hódî
))

1325  
EXIT_SUCCESS
;

1329 #ifde‡
NEED_ALIGN


1330 i‡((()(
c
->
rcuº
)) % 8 != 0)

1333 
	`memmove
(
c
->
rbuf
, c->
rcuº
, c->
rbyãs
);

1334 
c
->
rcuº
c->
rbuf
;

1335 i‡(
£âögs
.
vîbo£
)

1337 
	`Ârötf
(
°dîr
, "%d: Rólig¿öpuàbuf„r.\n", 
c
->
sfd
);

1341 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *
r•
;

1342 
r•
(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *)
c
->
rcuº
;

1344 
c
->
bö¨y_hódî
*
r•
;

1345 
c
->
bö¨y_hódî
.
ª•⁄£
.
exéí

r•
->response.extlen;

1346 
c
->
bö¨y_hódî
.
ª•⁄£
.
keyÀn

	`¡ohs
(
r•
->response.keylen);

1347 
c
->
bö¨y_hódî
.
ª•⁄£
.
bodyÀn

	`¡ohl
(
r•
->response.bodylen);

1348 
c
->
bö¨y_hódî
.
ª•⁄£
.
°©us

	`¡ohs
(
r•
->response.status);

1350 i‡(
c
->
bö¨y_hódî
.
ª•⁄£
.
magic
 !
PROTOCOL_BINARY_RES
)

1352 
	`Ârötf
(
°dîr
, "Invalid magic: %x\n",

1353 
c
->
bö¨y_hódî
.
ª•⁄£
.
magic
);

1354 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

1355  
EXIT_SUCCESS
;

1359 i‡(
	`ms_bö_¥o˚ss_ª•⁄£
(
c
) == 0)

1362 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

1367 
c
->
rbyãs
-(
öt32_t
)(c->
bö¨y_hódî
);

1368 
c
->
rcuº
+(c->
bö¨y_hódî
);

1374 *
ñ
, *
c⁄t
;

1376 
	`as£π
(
c
 !
NULL
);

1377 
	`as£π
(
c
->
rcuº
 <(c->
rbuf
 + c->
rsize
));

1379 i‡(
c
->
rbyãs
 == 0)

1380  
EXIT_SUCCESS
;

1382 
ñ

	`memchr
(
c
->
rcuº
, '\n', (
size_t
)c->
rbyãs
);

1383 i‡(! 
ñ
)

1384  
EXIT_SUCCESS
;

1386 
c⁄t

ñ
 + 1;

1387 i‡(((
ñ
 - 
c
->
rcuº
) > 1) && (*(el - 1) == '\r'))

1389 
ñ
--;

1391 *
ñ
= '\0';

1393 
	`as£π
(
c⁄t
 <(
c
->
rcuº
 + c->
rbyãs
));

1396 i‡(
	`ms_ascii_¥o˚ss_löe
(
c
, c->
rcuº
) == 0)

1399 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

1405 
c
->
rbyãs
-(
öt32_t
)(
c⁄t
 - c->
rcuº
);

1406 
c
->
rcuº

c⁄t
;

1409 
	`as£π
(
c
->
rcuº
 <(c->
rbuf
 + c->
rsize
));

1413 
	}
}

1427 
	$ms_s‹t_udp_∑ckë
(
ms_c⁄n_t
 *
c
, *
buf
, 
rbyãs
)

1429 
Àn
= 0;

1430 
wbyãs
= 0;

1431 
uöt16_t
 
ªq_id
= 0;

1432 
uöt16_t
 
£q_num
= 0;

1433 
uöt16_t
 
∑ckës
= 0;

1434 *
hódî

NULL
;

1437 
	`as£π
(
c
 !
NULL
);

1438 
	`as£π
(
buf
 !
NULL
);

1439 
	`as£π
(
c
->
rudpbyãs
 >
UDP_HEADER_SIZE
);

1442 i‡(
c
->
rudpbyãs
 % 
UDP_MAX_PAYLOAD_SIZE
 >
UDP_HEADER_SIZE
)

1445 
c
->
ªcvpkt
c->
rudpbyãs
 / 
UDP_MAX_PAYLOAD_SIZE
 + 1;

1449 
c
->
ªcvpkt
c->
rudpbyãs
 / 
UDP_MAX_PAYLOAD_SIZE
;

1453 i‡(
c
->
∑ckës
 == 0)

1455 
c
->
∑ckës

	`HEADER_TO_PACKETS
((*)c->
rudpbuf
);

1459 
i

c
->
pktcuº
; i < c->
ªcvpkt
; i++)

1461 
hódî
(*)
c
->
rudpbuf
 + 
i
 * 
UDP_MAX_PAYLOAD_SIZE
;

1462 
ªq_id
(
uöt16_t
)
	`HEADER_TO_REQID
(
hódî
);

1463 
	`as£π
(
ªq_id
 =
c
->
ªque°_id
 % (1 << 16));

1465 
∑ckës
(
uöt16_t
)
	`HEADER_TO_PACKETS
(
hódî
);

1466 
	`as£π
(
c
->
∑ckës
 =
	`HEADER_TO_PACKETS
(
hódî
));

1468 
£q_num
(
uöt16_t
)
	`HEADER_TO_SEQNUM
(
hódî
);

1469 
c
->
udµkt
[
£q_num
].
hódî
= header;

1470 
c
->
udµkt
[
£q_num
].
d©a
(*)
hódî
 + 
UDP_HEADER_SIZE
;

1472 i‡(
i
 =
c
->
ªcvpkt
 - 1)

1475 i‡(
c
->
rudpbyãs
 % 
UDP_MAX_PAYLOAD_SIZE
 == 0)

1477 
c
->
udµkt
[
£q_num
].
rbyãs

UDP_MAX_PAYLOAD_SIZE
 - 
UDP_HEADER_SIZE
;

1478 
c
->
pktcuº
++;

1482 
c
->
udµkt
[
£q_num
].
rbyãs
c->
rudpbyãs
 % 
UDP_MAX_PAYLOAD_SIZE


1483 - 
UDP_HEADER_SIZE
;

1488 
c
->
udµkt
[
£q_num
].
rbyãs

UDP_MAX_PAYLOAD_SIZE
 - 
UDP_HEADER_SIZE
;

1489 
c
->
pktcuº
++;

1493 
i

c
->
‹dcuº
; i < c->
ªcvpkt
; i++)

1496 i‡((
c
->
udµkt
[
i
].
d©a
 !
NULL
)

1497 && (
c
->
udµkt
[
i
].
c›ybyãs
 < c->udµkt[i].
rbyãs
))

1499 
hódî

c
->
udµkt
[
i
].header;

1500 
Àn

c
->
udµkt
[
i
].
rbyãs
 - c->udµkt[i].
c›ybyãs
;

1501 i‡(
Àn
 > 
rbyãs
 - 
wbyãs
)

1503 
Àn

rbyãs
 - 
wbyãs
;

1506 
	`as£π
(
Àn
 <
rbyãs
 - 
wbyãs
);

1507 
	`as£π
(
i
 =
	`HEADER_TO_SEQNUM
(
hódî
));

1509 
	`mem˝y
(
buf
 + 
wbyãs
, 
c
->
udµkt
[
i
].
d©a
 + c->udµkt[i].
c›ybyãs
,

1510 (
size_t
)
Àn
);

1511 
wbyãs
+
Àn
;

1512 
c
->
udµkt
[
i
].
c›ybyãs
+
Àn
;

1514 i‡((
c
->
udµkt
[
i
].
c›ybyãs
 =c->udµkt[i].
rbyãs
)

1515 && (
c
->
udµkt
[
i
].
rbyãs
 =
UDP_MAX_PAYLOAD_SIZE
 - 
UDP_HEADER_SIZE
))

1518 
c
->
‹dcuº
++;

1522 i‡((
c
->
ªcvpkt
 =c->
∑ckës
Ë&& (
i
 == c->recvpkt - 1)

1523 && (
c
->
udµkt
[
i
].
c›ybyãs
 =c->udµkt[i].
rbyãs
))

1529 i‡(
wbyãs
 >
rbyãs
)

1535 i‡((
i
 !
c
->
ªcvpkt
 - 1)

1536 && (
c
->
udµkt
[
i
].
rbyãs
 < 
UDP_MAX_PAYLOAD_SIZE
 - 
UDP_HEADER_SIZE
))

1548  
wbyãs
 == 0 ? -1 : wbytes;

1549 
	}
}

1562 
	$ms_udp_ªad
(
ms_c⁄n_t
 *
c
, *
buf
, 
Àn
)

1564 
ªs
= 0;

1565 
avaû
= 0;

1566 
rbyãs
= 0;

1567 
c›ybyãs
= 0;

1569 
	`as£π
(
c
->
udp
);

1573 i‡(
c
->
rudpbyãs
 + 
UDP_MAX_PAYLOAD_SIZE
 > c->
rudpsize
)

1575 *
√w_rbuf

	`ªÆloc
(
c
->
rudpbuf
, (
size_t
)c->
rudpsize
 * 2);

1576 i‡(! 
√w_rbuf
)

1578 
	`Ârötf
(
°dîr
, "Couldn'tÑealloc input buffer.\n");

1579 
c
->
rudpbyãs
= 0;

1582 
c
->
rudpbuf

√w_rbuf
;

1583 
c
->
rudpsize
*= 2;

1586 
avaû

c
->
rudpsize
 - c->
rudpbyãs
;

1588 
ªs
()
	`ªad
(
c
->
sfd
, c->
rudpbuf
 + c->
rudpbyãs
, (
size_t
)
avaû
);

1590 i‡(
ªs
 > 0)

1592 
	`©omic_add_size
(&
ms_°©s
.
byãs_ªad
, 
ªs
);

1593 
c
->
rudpbyãs
+
ªs
;

1594 
rbyãs
+
ªs
;

1595 i‡(
ªs
 =
avaû
)

1605 i‡(
ªs
 == 0)

1608  
ªs
;

1611 i‡(
ªs
 == -1)

1614  
ªs
;

1619 i‡(
rbyãs
 > 0)

1621 
c›ybyãs

	`ms_s‹t_udp_∑ckë
(
c
, 
buf
, 
Àn
);

1624 i‡(
c›ybyãs
 == -1)

1626 
	`©omic_add_size
(&
ms_°©s
.
pkt_dis‹dî
, 1);

1629  
c›ybyãs
;

1630 
	}
}

1653 
	$ms_åy_ªad_√tw‹k
(
ms_c⁄n_t
 *
c
)

1655 
gŸd©a
= 0;

1656 
ªs
;

1657 
öt64_t
 
avaû
;

1659 
	`as£π
(
c
 !
NULL
);

1661 i‡((
c
->
rcuº
 !c->
rbuf
)

1662 && (! 
c
->
ªadvÆ
 || (c->
rvbyãs
 > c->
rsize
 - (c->
rcuº
 - c->
rbuf
))

1663 || (
c
->
ªadvÆ
 && (c->
rcuº
 - c->
rbuf
 > c->
rbyãs
))))

1665 i‡(
c
->
rbyãs
 != 0)

1666 
	`memmove
(
c
->
rbuf
, c->
rcuº
, (
size_t
)c->
rbyãs
);

1667 
c
->
rcuº
c->
rbuf
;

1672 i‡(
c
->
rbyãs
 >c->
rsize
)

1674 *
√w_rbuf

	`ªÆloc
(
c
->
rbuf
, (
size_t
)c->
rsize
 * 2);

1675 i‡(! 
√w_rbuf
)

1677 
	`Ârötf
(
°dîr
, "Couldn'tÑealloc input buffer.\n");

1678 
c
->
rbyãs
= 0;

1681 
c
->
rcuº
c->
rbuf

√w_rbuf
;

1682 
c
->
rsize
*= 2;

1685 
avaû

c
->
rsize
 - c->
rbyãs
 - (c->
rcuº
 - c->
rbuf
);

1686 i‡(
avaû
 == 0)

1691 i‡(
c
->
udp
)

1693 
ªs
(
öt32_t
)
	`ms_udp_ªad
(
c
, c->
rcuº
 + c->
rbyãs
, (öt32_t)
avaû
);

1697 
ªs
()
	`ªad
(
c
->
sfd
, c->
rcuº
 + c->
rbyãs
, (
size_t
)
avaû
);

1700 i‡(
ªs
 > 0)

1702 i‡(! 
c
->
udp
)

1704 
	`©omic_add_size
(&
ms_°©s
.
byãs_ªad
, 
ªs
);

1706 
gŸd©a
= 1;

1707 
c
->
rbyãs
+
ªs
;

1708 i‡(
ªs
 =
avaû
)

1717 i‡(
ªs
 == 0)

1720 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

1723 i‡(
ªs
 == -1)

1725 i‡((
î∫o
 =
EAGAIN
Ë|| (î∫ÿ=
EWOULDBLOCK
))

1728 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

1733  
gŸd©a
;

1734 
	}
}

1746 
	$ms_vîify_vÆue
(
ms_c⁄n_t
 *
c
,

1747 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem
,

1748 *
vÆue
,

1749 
vÀn
)

1751 i‡(
c
->
cuº_èsk
.
vîify
)

1753 
	`as£π
(
c
->
cuº_èsk
.
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
);

1754 *
‹ignvÆ
&
ms_£âög
.
ch¨_block
[
c
->
cuº_èsk
.
ôem
->
vÆue_off£t
];

1755 *
‹ignkey
=

1756 &
ms_£âög
.
ch¨_block
[
c
->
cuº_èsk
.
ôem
->
key_suffix_off£t
];

1759 i‡(
c
->
cuº_èsk
.
ôem
->
exp_time
 > 0)

1761 
timevÆ
 
cuº_time
;

1762 
	`gëtimeofday
(&
cuº_time
, 
NULL
);

1765 i‡(
cuº_time
.
tv_£c
 - 
c
->
cuº_èsk
.
ôem
->
˛õ¡_time


1766 > 
c
->
cuº_èsk
.
ôem
->
exp_time
 + 
EXPIRE_TIME_ERROR
)

1768 
	`©omic_add_size
(&
ms_°©s
.
exp_gë
, 1);

1770 i‡(
ms_£âög
.
vîbo£
)

1772 
£t_time
[64];

1773 
cur_time
[64];

1774 
	`°r·ime
(
£t_time
, 64, "%Y-%m-%d %H:%M:%S",

1775 
	`loˇ…ime
(&
c
->
cuº_èsk
.
ôem
->
˛õ¡_time
));

1776 
	`°r·ime
(
cur_time
, 64, "%Y-%m-%d %H:%M:%S",

1777 
	`loˇ…ime
(&
cuº_time
.
tv_£c
));

1778 
	`Ârötf
(
°dîr
,

1782 "\tkey: %" 
PRIx64
 " %.*s\n"

1788 
c
->
sfd
,

1789 
c
->
cuº_èsk
.
ôem
->
key_size
,

1790 
c
->
cuº_èsk
.
ôem
->
key_¥efix
,

1791 
c
->
cuº_èsk
.
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

1792 
‹ignkey
,

1793 
£t_time
,

1794 
cur_time
,

1795 ()(
cuº_time
.
tv_£c
 - 
c
->
cuº_èsk
.
ôem
->
˛õ¡_time
),

1796 
c
->
cuº_èsk
.
ôem
->
exp_time
,

1797 
vÀn
,

1798 
vÀn
,

1799 
vÆue
);

1800 
	`fÊush
(
°dîr
);

1806 i‡((
c
->
cuº_èsk
.
ôem
->
vÆue_size
 !
vÀn
)

1807 || (
	`memcmp
(
‹ignvÆ
, 
vÆue
, (
size_t
)
vÀn
) != 0))

1809 
	`©omic_add_size
(&
ms_°©s
.
vef_Áûed
, 1);

1811 i‡(
ms_£âög
.
vîbo£
)

1813 
	`Ârötf
(
°dîr
,

1816 "\tkey: %" 
PRIx64
" %.*s\n"

1821 
c
->
sfd
,

1822 
c
->
cuº_èsk
.
ôem
->
key_size
,

1823 
c
->
cuº_èsk
.
ôem
->
key_¥efix
,

1824 
c
->
cuº_èsk
.
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

1825 
‹ignkey
,

1826 
c
->
cuº_èsk
.
ôem
->
vÆue_size
,

1827 
c
->
cuº_èsk
.
ôem
->
vÆue_size
,

1828 
‹ignvÆ
,

1829 
vÀn
,

1830 
vÀn
,

1831 
vÆue
);

1832 
	`fÊush
(
°dîr
);

1837 
c
->
cuº_èsk
.
föish_vîify

åue
;

1839 i‡(
mlgë_ôem
 !
NULL
)

1841 
mlgë_ôem
->
föish_vîify

åue
;

1844 
	}
}

1853 
	$ms_ascii_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
)

1855 
	`as£π
(
c
 !
NULL
);

1856 
	`as£π
(
c
->
rbyãs
 >c->
rvbyãs
);

1857 
	`as£π
(
c
->
¥Ÿocﬁ
 =
ascii_¥Ÿ
);

1858 i‡(
c
->
rvbyãs
 > 2)

1860 
	`as£π
(

1861 
c
->
rcuº
[c->
rvbyãs
 - 1] == '\n' && c->rcurr[c->rvbytes - 2] == '\r');

1865 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem

NULL
;

1866 i‡(((
ms_£âög
.
mu…_key_num
 > 1)

1867 && (
c
->
mlgë_èsk
.
mlgë_num
 >
ms_£âög
.
mu…_key_num
))

1868 || ((
c
->
ªmaö_exec_num
 =0Ë&& (c->
mlgë_èsk
.
mlgë_num
 > 0)))

1870 
c
->
mlgë_èsk
.
vÆue_ödex
++;

1871 
mlgë_ôem
&
c
->
mlgë_èsk
.mlgë_ôem[c->mlgë_èsk.
vÆue_ödex
];

1873 i‡(
mlgë_ôem
->
ôem
->
key_¥efix
 =
c
->
cuºcmd
.key_prefix)

1875 
c
->
cuº_èsk
.
ôem

mlgë_ôem
->item;

1876 
c
->
cuº_èsk
.
vîify

mlgë_ôem
->verify;

1877 
c
->
cuº_èsk
.
föish_vîify

mlgë_ôem
->finish_verify;

1878 
mlgë_ôem
->
gë_miss

Ál£
;

1883 
i
0; i < 
c
->
mlgë_èsk
.
mlgë_num
; i++)

1885 
mlgë_ôem
&
c
->
mlgë_èsk
.mlgë_ôem[
i
];

1886 i‡(
mlgë_ôem
->
ôem
->
key_¥efix
 =
c
->
cuºcmd
.key_prefix)

1888 
c
->
cuº_èsk
.
ôem

mlgë_ôem
->item;

1889 
c
->
cuº_èsk
.
vîify

mlgë_ôem
->verify;

1890 
c
->
cuº_èsk
.
föish_vîify

mlgë_ôem
->finish_verify;

1891 
mlgë_ôem
->
gë_miss

Ál£
;

1899 
	`ms_vîify_vÆue
(
c
, 
mlgë_ôem
, c->
rcuº
, c->
rvbyãs
 - 2);

1901 
c
->
cuº_èsk
.
gë_miss

Ál£
;

1902 
c
->
rbyãs
-c->
rvbyãs
;

1903 
c
->
rcuº
c->rcuº + c->
rvbyãs
;

1904 
	`as£π
(
c
->
rcuº
 <(c->
rbuf
 + c->
rsize
));

1905 
c
->
ªadvÆ

Ál£
;

1906 
c
->
rvbyãs
= 0;

1907 
	}
}

1916 
	$ms_bö_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
)

1918 
	`as£π
(
c
 !
NULL
);

1919 
	`as£π
(
c
->
rbyãs
 >c->
rvbyãs
);

1920 
	`as£π
(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
);

1922 
exéí

c
->
bö¨y_hódî
.
ª•⁄£
.extlen;

1923 
keyÀn

c
->
bö¨y_hódî
.
ª•⁄£
.keylen;

1924 
uöt8_t
 
›code

c
->
bö¨y_hódî
.
ª•⁄£
.opcode;

1927 i‡(((
›code
 !
PROTOCOL_BINARY_CMD_GET
)

1928 && (
›code
 !
PROTOCOL_BINARY_CMD_GETQ
))

1929 || (
c
->
rvbyãs
 <
exéí
 + 
keyÀn
))

1932 i‡(
c
->
bö¨y_hódî
.
ª•⁄£
.
›code
 =
PROTOCOL_BINARY_CMD_GET
)

1934 
c
->
cuºcmd
.
ªt°©

MCD_END
;

1935 
c
->
cuº_èsk
.
gë_miss

åue
;

1938 
c
->
ªadvÆ

Ál£
;

1939 
c
->
rvbyãs
= 0;

1940 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

1945 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem

NULL
;

1946 i‡(((
ms_£âög
.
mu…_key_num
 > 1)

1947 && (
c
->
mlgë_èsk
.
mlgë_num
 >
ms_£âög
.
mu…_key_num
))

1948 || ((
c
->
ªmaö_exec_num
 =0Ë&& (c->
mlgë_èsk
.
mlgë_num
 > 0)))

1950 
c
->
mlgë_èsk
.
vÆue_ödex
++;

1951 
mlgë_ôem
&
c
->
mlgë_èsk
.mlgë_ôem[c->mlgë_èsk.
vÆue_ödex
];

1953 
c
->
cuº_èsk
.
ôem

mlgë_ôem
->item;

1954 
c
->
cuº_èsk
.
vîify

mlgë_ôem
->verify;

1955 
c
->
cuº_èsk
.
föish_vîify

mlgë_ôem
->finish_verify;

1956 
mlgë_ôem
->
gë_miss

Ál£
;

1959 
	`ms_vîify_vÆue
(
c
,

1960 
mlgë_ôem
,

1961 
c
->
rcuº
 + 
exéí
 + 
keyÀn
,

1962 
c
->
rvbyãs
 - 
exéí
 - 
keyÀn
);

1964 
c
->
cuºcmd
.
ªt°©

MCD_END
;

1965 
c
->
cuº_èsk
.
gë_miss

Ál£
;

1966 
c
->
rbyãs
-c->
rvbyãs
;

1967 
c
->
rcuº
c->rcuº + c->
rvbyãs
;

1968 
	`as£π
(
c
->
rcuº
 <(c->
rbuf
 + c->
rsize
));

1969 
c
->
ªadvÆ

Ál£
;

1970 
c
->
rvbyãs
= 0;

1972 i‡(
ms_£âög
.
mu…_key_num
 > 1)

1975 i‡(
c
->
mlgë_èsk
.
vÆue_ödex
 =c->mlgë_èsk.
mlgë_num
 - 1)

1977 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

1983 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

1985 
	}
}

1993 
	$ms_com∂ëe_ƒód
(
ms_c⁄n_t
 *
c
)

1995 
	`as£π
(
c
 !
NULL
);

1996 
	`as£π
(
c
->
rbyãs
 >c->
rvbyãs
);

1997 
	`as£π
(
c
->
¥Ÿocﬁ
 =
ascii_¥Ÿ


1998 || 
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
);

2000 i‡(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
)

2002 
	`ms_bö_com∂ëe_ƒód
(
c
);

2006 
	`ms_ascii_com∂ëe_ƒód
(
c
);

2008 
	}
}

2018 
	$ms_add_msghdr
(
ms_c⁄n_t
 *
c
)

2020 
msghdr
 *
msg
;

2022 
	`as£π
(
c
 !
NULL
);

2024 i‡(
c
->
msgsize
 =c->
msgu£d
)

2026 
msg
=

2027 
	`ªÆloc
(
c
->
msgli°
, (
size_t
)c->
msgsize
 * 2 * (
msghdr
));

2028 i‡(! 
msg
)

2031 
c
->
msgli°

msg
;

2032 
c
->
msgsize
*= 2;

2035 
msg

c
->
msgli°
 + c->
msgu£d
;

2041 
	`mem£t
(
msg
, 0, (
msghdr
));

2043 
msg
->
msg_iov
&
c
->
iov
[c->
iovu£d
];

2045 i‡(
c
->
udp
 && (c->
§v_ªcv_addr_size
 > 0))

2047 
msg
->
msg_«me
&
c
->
§v_ªcv_addr
;

2048 
msg
->
msg_«mñí

c
->
§v_ªcv_addr_size
;

2051 
c
->
msgbyãs
= 0;

2052 
c
->
msgu£d
++;

2054 i‡(
c
->
udp
)

2057  
	`ms_add_iov
(
c
, 
NULL
, 
UDP_HEADER_SIZE
);

2060  
EXIT_SUCCESS
;

2061 
	}
}

2072 
	$ms_ísuª_iov_•a˚
(
ms_c⁄n_t
 *
c
)

2074 
	`as£π
(
c
 !
NULL
);

2076 i‡(
c
->
iovu£d
 >c->
iovsize
)

2078 
i
, 
iovnum
;

2079 
iovec
 *
√w_iov
(iove¯*)
	`ªÆloc
(
c
->
iov
,

2080 ((
size_t
)
c
->
iovsize


2082 * (
iovec
));

2083 i‡(! 
√w_iov
)

2086 
c
->
iov

√w_iov
;

2087 
c
->
iovsize
*= 2;

2090 
i
0, 
iovnum
0; i < 
c
->
msgu£d
; i++)

2092 
c
->
msgli°
[
i
].
msg_iov
&c->
iov
[
iovnum
];

2093 
iovnum
+()
c
->
msgli°
[
i
].
msg_iovÀn
;

2097  
EXIT_SUCCESS
;

2098 
	}
}

2111 
	$ms_add_iov
(
ms_c⁄n_t
 *
c
, c⁄° *
buf
, 
Àn
)

2113 
msghdr
 *
m
;

2114 
À·ovî
;

2115 
boﬁ
 
limô_to_mtu
;

2117 
	`as£π
(
c
 !
NULL
);

2121 
m
&
c
->
msgli°
[c->
msgu£d
 - 1];

2126 
limô_to_mtu

c
->
udp
;

2129 i‡((
m
->
msg_iovÀn
 =
IOV_MAX
)

2130 || (
limô_to_mtu
 && (
c
->
msgbyãs
 >
UDP_MAX_SEND_PAYLOAD_SIZE
)))

2132 
	`ms_add_msghdr
(
c
);

2133 
m
&
c
->
msgli°
[c->
msgu£d
 - 1];

2136 i‡(
	`ms_ísuª_iov_•a˚
(
c
) != 0)

2140 i‡(
limô_to_mtu
 && (
Àn
 + 
c
->
msgbyãs
 > 
UDP_MAX_SEND_PAYLOAD_SIZE
))

2142 
À·ovî

Àn
 + 
c
->
msgbyãs
 - 
UDP_MAX_SEND_PAYLOAD_SIZE
;

2143 
Àn
-
À·ovî
;

2147 
À·ovî
= 0;

2150 
m
&
c
->
msgli°
[c->
msgu£d
 - 1];

2151 
m
->
msg_iov
[m->
msg_iovÀn
].
iov_ba£
(*)
buf
;

2152 
m
->
msg_iov
[m->
msg_iovÀn
].
iov_Àn
(
size_t
)
Àn
;

2154 
c
->
msgbyãs
+
Àn
;

2155 
c
->
iovu£d
++;

2156 
m
->
msg_iovÀn
++;

2158 
buf
((*)bufË+ 
Àn
;

2159 
Àn

À·ovî
;

2161 
À·ovî
 > 0);

2163  
EXIT_SUCCESS
;

2164 
	}
}

2174 
	$ms_buûd_udp_hódîs
(
ms_c⁄n_t
 *
c
)

2176 
i
;

2177 *
hdr
;

2179 
	`as£π
(
c
 !
NULL
);

2181 
c
->
ªque°_id

	`ms_gë_udp_ªque°_id
();

2183 i‡(
c
->
msgu£d
 > c->
hdrsize
)

2185 *
√w_hdrbuf
;

2186 i‡(
c
->
hdrbuf
)

2187 
√w_hdrbuf

	`ªÆloc
(
c
->
hdrbuf
,

2188 (
size_t
)
c
->
msgu£d
 * 2 * 
UDP_HEADER_SIZE
);

2190 
√w_hdrbuf

	`mÆloc
((
size_t
)
c
->
msgu£d
 * 2 * 
UDP_HEADER_SIZE
);

2191 i‡(! 
√w_hdrbuf
)

2194 
c
->
hdrbuf
(*)
√w_hdrbuf
;

2195 
c
->
hdrsize
c->
msgu£d
 * 2;

2199 i‡(
c
->
udp
 && (c->
msgu£d
 > 1))

2201 
	`Ârötf
(
°dîr
, "multi-packetÑequest for UDPÇot supported.\n");

2205 
hdr

c
->
hdrbuf
;

2206 
i
0; i < 
c
->
msgu£d
; i++)

2208 
c
->
msgli°
[
i
].
msg_iov
[0].
iov_ba£
(*)
hdr
;

2209 
c
->
msgli°
[
i
].
msg_iov
[0].
iov_Àn

UDP_HEADER_SIZE
;

2210 *
hdr
++()(
c
->
ªque°_id
 / 256);

2211 *
hdr
++()(
c
->
ªque°_id
 % 256);

2212 *
hdr
++()(
i
 / 256);

2213 *
hdr
++()(
i
 % 256);

2214 *
hdr
++()(
c
->
msgu£d
 / 256);

2215 *
hdr
++()(
c
->
msgu£d
 % 256);

2216 *
hdr
++= ()1;

2217 *
hdr
++= ()0;

2218 
	`as£π
(
hdr
 ==

2219 ((*)
c
->
msgli°
[
i
].
msg_iov
[0].
iov_ba£


2220 + 
UDP_HEADER_SIZE
));

2223  
EXIT_SUCCESS
;

2224 
	}
}

2237 
	$ms_å™smô
(
ms_c⁄n_t
 *
c
)

2239 
	`as£π
(
c
 !
NULL
);

2241 i‡((
c
->
msgcuº
 < c->
msgu£d
)

2242 && (
c
->
msgli°
[c->
msgcuº
].
msg_iovÀn
 == 0))

2245 
c
->
msgcuº
++;

2248 i‡(
c
->
msgcuº
 < c->
msgu£d
)

2250 
ssize_t
 
ªs
;

2251 
msghdr
 *
m
&
c
->
msgli°
[c->
msgcuº
];

2253 
ªs

	`£ndmsg
(
c
->
sfd
, 
m
, 0);

2254 i‡(
ªs
 > 0)

2256 
	`©omic_add_size
(&
ms_°©s
.
byãs_wrôãn
, 
ªs
);

2260 
m
->
msg_iovÀn
 > 0 && 
ªs
 >(
ssize_t
)m->
msg_iov
->
iov_Àn
)

2262 
ªs
-(
ssize_t
)
m
->
msg_iov
->
iov_Àn
;

2263 
m
->
msg_iovÀn
--;

2264 
m
->
msg_iov
++;

2269 i‡(
ªs
 > 0)

2271 
m
->
msg_iov
->
iov_ba£
(*)((*)m->msg_iov->iov_ba£ + 
ªs
);

2272 
m
->
msg_iov
->
iov_Àn
-(
size_t
)
ªs
;

2274  
TRANSMIT_INCOMPLETE
;

2276 i‡((
ªs
 =-1Ë&& ((
î∫o
 =
EAGAIN
Ë|| (î∫ÿ=
EWOULDBLOCK
)))

2278 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_WRITE
 | 
EV_PERSIST
))

2280 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2281 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2282  
TRANSMIT_HARD_ERROR
;

2284  
TRANSMIT_SOFT_ERROR
;

2289 
	`Ârötf
(
°dîr
, "FailedÅo write,ándÇot dueÅo blocking.\n");

2291 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2292  
TRANSMIT_HARD_ERROR
;

2296  
TRANSMIT_COMPLETE
;

2298 
	}
}

2311 
	$ms_c⁄n_shrök
(
ms_c⁄n_t
 *
c
)

2313 
	`as£π
(
c
 !
NULL
);

2315 i‡(
c
->
udp
)

2318 i‡((
c
->
rsize
 > 
READ_BUFFER_HIGHWAT
Ë&& (c->
rbyãs
 < 
DATA_BUFFER_SIZE
))

2320 *
√wbuf
;

2322 i‡(
c
->
rcuº
 !c->
rbuf
)

2323 
	`memmove
(
c
->
rbuf
, c->
rcuº
, (
size_t
)c->
rbyãs
);

2325 
√wbuf
(*)
	`ªÆloc
((*)
c
->
rbuf
, 
DATA_BUFFER_SIZE
);

2327 i‡(
√wbuf
)

2329 
c
->
rbuf

√wbuf
;

2330 
c
->
rsize

DATA_BUFFER_SIZE
;

2332 
c
->
rcuº
c->
rbuf
;

2335 i‡(
c
->
udp
 && (c->
rudpsize
 > 
UDP_DATA_BUFFER_HIGHWAT
)

2336 && (
c
->
rudpbyãs
 + 
UDP_MAX_PAYLOAD_SIZE
 < 
UDP_DATA_BUFFER_SIZE
))

2338 *
√w_rbuf
(*)
	`ªÆloc
(
c
->
rudpbuf
, (
size_t
)c->
rudpsize
 * 2);

2339 i‡(! 
√w_rbuf
)

2341 
c
->
rudpbuf

√w_rbuf
;

2342 
c
->
rudpsize

UDP_DATA_BUFFER_SIZE
;

2347 i‡(
c
->
msgsize
 > 
MSG_LIST_HIGHWAT
)

2349 
msghdr
 *
√wbuf
(msghd∏*)
	`ªÆloc
(

2350 (*)
c
->
msgli°
,

2351 
MSG_LIST_INITIAL


2352 * (
c
->
msgli°
[0]));

2353 i‡(
√wbuf
)

2355 
c
->
msgli°

√wbuf
;

2356 
c
->
msgsize

MSG_LIST_INITIAL
;

2361 i‡(
c
->
iovsize
 > 
IOV_LIST_HIGHWAT
)

2363 
iovec
 *
√wbuf
(iove¯*)
	`ªÆloc
((*)
c
->
iov
,

2364 
IOV_LIST_INITIAL


2365 * (
c
->
iov
[0]));

2366 i‡(
√wbuf
)

2368 
c
->
iov

√wbuf
;

2369 
c
->
iovsize

IOV_LIST_INITIAL
;

2373 
	}
}

2384 
	$ms_c⁄n_£t_°©e
(
ms_c⁄n_t
 *
c
, 
°©e
)

2386 
	`as£π
(
c
 !
NULL
);

2388 i‡(
°©e
 !
c
->state)

2390 i‡(
°©e
 =
c⁄n_ªad
)

2392 
	`ms_c⁄n_shrök
(
c
);

2394 
c
->
°©e
= state;

2396 
	}
}

2409 
boﬁ
 
	$ms_upd©e_evít
(
ms_c⁄n_t
 *
c
, c⁄° 
√w_Êags
)

2411 
	`as£π
(
c
 !
NULL
);

2413 
evít_ba£
 *
ba£

c
->
evít
.
ev_ba£
;

2414 i‡((
c
->
ev_Êags
 =
√w_Êags
Ë&& (
ms_£âög
.
ªp_wrôe_§v
 == 0)

2415 && (! 
ms_£âög
.
Á˚book_ã°
 || (
c
->
tŸÆ_sfds
 == 1)))

2417  
åue
;

2420 i‡(
	`evít_dñ
(&
c
->
evít
) == -1)

2423 i‡(
	`evít_dñ
(&
c
->
evít
) == -1)

2425  
Ál£
;

2429 
	`evít_£t
(&
c
->
evít
,

2430 
c
->
sfd
,

2431 ()
√w_Êags
,

2432 
ms_evít_h™dÀr
,

2433 (*)
c
);

2434 
	`evít_ba£_£t
(
ba£
, &
c
->
evít
);

2435 
c
->
ev_Êags
()
√w_Êags
;

2437 i‡(
	`evít_add
(&
c
->
evít
, 
NULL
) == -1)

2439  
Ál£
;

2442  
åue
;

2443 
	}
}

2456 
boﬁ
 
	$ms_√ed_yõld
(
ms_c⁄n_t
 *
c
)

2458 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

2459 
öt64_t
 
çs
= 0;

2460 
öt64_t
 
time_diff
= 0;

2461 
timevÆ
 
cuº_time
;

2462 
ms_èsk_t
 *
èsk
&
c
->
cuº_èsk
;

2464 i‡(
ms_£âög
.
ex≥˘ed_çs
 > 0)

2466 
	`gëtimeofday
(&
cuº_time
, 
NULL
);

2467 
time_diff

	`ms_time_diff
(&
ms_thªad
->
°¨tup_time
, &
cuº_time
);

2468 
çs
=

2469 (
öt64_t
)((
èsk
->
gë_›t


2470 + 
èsk
->
£t_›t
Ë/ ((
uöt64_t
)
time_diff
 / 1000000));

2473 i‡(
çs
 > 
ms_thªad
->
thªad_˘x
->
çs_≥rc⁄n
)

2475  
åue
;

2479  
Ál£
;

2480 
	}
}

2488 
	$ms_upd©e_°¨t_time
(
ms_c⁄n_t
 *
c
)

2490 
ms_èsk_ôem_t
 *
ôem

c
->
cuº_èsk
.item;

2492 i‡((
ms_£âög
.
°©_‰eq
 > 0Ë|| 
c
->
udp


2493 || ((
c
->
cuºcmd
.
cmd
 =
CMD_SET
Ë&& (
ôem
->
exp_time
 > 0)))

2495 
	`gëtimeofday
(&
c
->
°¨t_time
, 
NULL
);

2496 i‡((
c
->
cuºcmd
.
cmd
 =
CMD_SET
Ë&& (
ôem
->
exp_time
 > 0))

2499 
ôem
->
˛õ¡_time

c
->
°¨t_time
.
tv_£c
;

2502 
	}
}

2510 
	$ms_drive_machöe
(
ms_c⁄n_t
 *
c
)

2512 
boﬁ
 
°›

Ál£
;

2514 
	`as£π
(
c
 !
NULL
);

2516 ! 
°›
)

2518 
c
->
°©e
)

2520 
c⁄n_ªad
:

2521 i‡(
c
->
ªadvÆ
)

2523 i‡(
c
->
rbyãs
 >c->
rvbyãs
)

2525 
	`ms_com∂ëe_ƒód
(
c
);

2531 i‡(
	`ms_åy_ªad_löe
(
c
) != 0)

2537 i‡(
	`ms_åy_ªad_√tw‹k
(
c
) != 0)

2543 i‡(! 
c
->
cuºcmd
.
isföish
)

2545 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_READ
 | 
EV_PERSIST
))

2547 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2548 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2551 
°›

åue
;

2556 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_wrôe
);

2557 
	`mem˝y
(&
c
->
¥ecmd
, &c->
cuºcmd
, (
ms_cmd°©_t
));

2561 
c⁄n_wrôe
:

2562 i‡(! 
c
->
˘nwrôe
 && 
	`ms_√ed_yõld
(c))

2564 
	`u¶ìp
(10);

2566 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_WRITE
 | 
EV_PERSIST
))

2568 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2569 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2572 
°›

åue
;

2576 i‡(! 
c
->
˘nwrôe
 && (
	`ms_exec_èsk
(c) != 0))

2578 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2583 i‡(! 
c
->
˘nwrôe
 || (c->
ch™ge_sfd
 && c->ctnwrite))

2585 i‡(
c
->
ch™ge_sfd
)

2587 
c
->
ch™ge_sfd

Ál£
;

2589 
	`ms_upd©e_°¨t_time
(
c
);

2593 i‡(
c
->
ch™ge_sfd
)

2595 
c
->
˘nwrôe

åue
;

2596 
°›

åue
;

2601 i‡(! 
c
->
˘nwrôe
 && (c->
msgcuº
 =c->
msgu£d
))

2603 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_WRITE
 | 
EV_PERSIST
))

2605 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2606 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2609 
°›

åue
;

2613 
	`ms_å™smô
(
c
))

2615 
TRANSMIT_COMPLETE
:

2617 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_READ
 | 
EV_PERSIST
))

2619 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2620 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2621 
c
->
˘nwrôe

Ál£
;

2624 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_ªad
);

2625 
c
->
˘nwrôe

Ál£
;

2626 
°›

åue
;

2629 
TRANSMIT_INCOMPLETE
:

2630 
c
->
˘nwrôe

åue
;

2633 
TRANSMIT_HARD_ERROR
:

2634 
c
->
˘nwrôe

Ál£
;

2637 
TRANSMIT_SOFT_ERROR
:

2638 
c
->
˘nwrôe

åue
;

2639 
°›

åue
;

2648 
c⁄n_˛osög
:

2650 i‡(
ms_£âög
.
ªc⁄√˘
 && (! 
ms_globÆ
.
time_out


2651 || ((
ms_£âög
.
run_time
 == 0)

2652 && (
c
->
ªmaö_exec_num
 > 0))))

2654 i‡(
	`ms_ªc⁄n
(
c
) != 0)

2656 
	`ms_c⁄n_˛o£
(
c
);

2657 
°›

åue
;

2661 
	`ms_ª£t_c⁄n
(
c
, 
Ál£
);

2663 i‡(
c
->
tŸÆ_sfds
 == 1)

2665 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_WRITE
 | 
EV_PERSIST
))

2667 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2668 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2677 
	`ms_c⁄n_˛o£
(
c
);

2678 
°›

åue
;

2683 
	`as£π
(0);

2686 
	}
}

2696 
	$ms_evít_h™dÀr
(c⁄° 
fd
, c⁄° 
which
, *
¨g
)

2698 
ms_c⁄n_t
 *
c
(ms_c⁄n_à*)
¨g
;

2700 
	`as£π
(
c
 !
NULL
);

2702 
c
->
which
= which;

2705 i‡(
fd
 !
c
->
sfd
)

2707 
	`Ârötf
(
°dîr
,

2709 
fd
,

2710 
c
->
sfd
);

2711 
	`ms_c⁄n_˛o£
(
c
);

2712 
	`exô
(1);

2714 
	`as£π
(
fd
 =
c
->
sfd
);

2716 
	`ms_drive_machöe
(
c
);

2719 
	}
}

2730 
uöt32_t
 
	$ms_gë_ªp_sock_ödex
(
ms_c⁄n_t
 *
c
, 
cmd
)

2732 
uöt32_t
 
sock_ödex
= 0;

2733 
uöt32_t
 
i
= 0;

2735 i‡(
c
->
tŸÆ_sfds
 == 1)

2737  
EXIT_SUCCESS
;

2740 i‡(
ms_£âög
.
ªp_wrôe_§v
 == 0)

2742  
sock_ödex
;

2747 i‡(
cmd
 =
CMD_SET
)

2749 
i
0; i < 
ms_£âög
.
ªp_wrôe_§v
; i++)

2751 i‡(
c
->
t˝sfd
[
i
] > 0)

2757 i‡(
i
 =
ms_£âög
.
ªp_wrôe_§v
)

2760 
sock_ödex
(
uöt32_t
)
	`øndom
(Ë% 
c
->
tŸÆ_sfds
;

2765 
sock_ödex
(
uöt32_t
)
	`øndom
(Ë% 
ms_£âög
.
ªp_wrôe_§v
;

2768 i‡(
cmd
 =
CMD_GET
)

2771 
sock_ödex
(
uöt32_t
)
	`øndom
(Ë% 
c
->
tŸÆ_sfds
;

2774 
c
->
t˝sfd
[
sock_ödex
] == 0);

2776  
sock_ödex
;

2777 
	}
}

2787 
uöt32_t
 
	$ms_gë_√xt_sock_ödex
(
ms_c⁄n_t
 *
c
)

2789 
uöt32_t
 
sock_ödex
= 0;

2793 
sock_ödex
(++
c
->
cur_idx
 =c->
tŸÆ_sfds
) ? 0 : c->cur_idx;

2795 
c
->
t˝sfd
[
sock_ödex
] == 0);

2797  
sock_ödex
;

2798 
	}
}

2808 
	$ms_upd©e_c⁄n_sock_evít
(
ms_c⁄n_t
 *
c
)

2810 
	`as£π
(
c
 !
NULL
);

2812 
c
->
cuºcmd
.
cmd
)

2814 
CMD_SET
:

2815 i‡(
ms_£âög
.
Á˚book_ã°
 && 
c
->
udp
)

2817 
c
->
sfd
c->
t˝sfd
[0];

2818 
c
->
udp

Ál£
;

2819 
c
->
ch™ge_sfd

åue
;

2823 
CMD_GET
:

2824 i‡(
ms_£âög
.
Á˚book_ã°
 && ! 
c
->
udp
)

2826 
c
->
sfd
c->
udpsfd
;

2827 
c
->
udp

åue
;

2828 
c
->
ch™ge_sfd

åue
;

2836 i‡(! 
c
->
udp
 && (c->
tŸÆ_sfds
 > 1))

2838 i‡(
c
->
cur_idx
 !c->
tŸÆ_sfds
)

2840 i‡(
ms_£âög
.
ªp_wrôe_§v
 == 0)

2842 
c
->
cur_idx

	`ms_gë_√xt_sock_ödex
(c);

2846 
c
->
cur_idx

	`ms_gë_ªp_sock_ödex
(c, c->
cuºcmd
.
cmd
);

2852 
c
->
cur_idx
= 0;

2855 
c
->
sfd
c->
t˝sfd
[c->
cur_idx
];

2856 
	`as£π
(
c
->
sfd
 != 0);

2857 
c
->
ch™ge_sfd

åue
;

2860 i‡(
c
->
ch™ge_sfd
)

2862 i‡(! 
	`ms_upd©e_evít
(
c
, 
EV_WRITE
 | 
EV_PERSIST
))

2864 
	`Ârötf
(
°dîr
, "Couldn't updateÉvent.\n");

2865 
	`ms_c⁄n_£t_°©e
(
c
, 
c⁄n_˛osög
);

2870  
EXIT_SUCCESS
;

2871 
	}
}

2884 
	$ms_buûd_ascii_wrôe_buf_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

2886 
vÆue_off£t
;

2887 
wrôe_Àn
;

2888 *
buf„r

c
->
wbuf
;

2890 
wrôe_Àn

	`¢¥ötf
(
buf„r
,

2891 
c
->
wsize
,

2894 
ôem
->
exp_time
,

2895 
ôem
->
vÆue_size
);

2897 i‡(
wrôe_Àn
 > 
c
->
wsize
 || write_len < 0)

2900 
	`Ârötf
(
°dîr
, "output commandÜineÅooÜong.\n");

2904 i‡(
ôem
->
vÆue_off£t
 =
INVALID_OFFSET
)

2906 
vÆue_off£t

ôem
->
key_suffix_off£t
;

2910 
vÆue_off£t

ôem
->value_offset;

2913 i‡((
	`ms_add_iov
(
c
, "set ", 4) != 0)

2914 || (
	`ms_add_iov
(
c
, (*)&
ôem
->
key_¥efix
,

2915 ()
KEY_PREFIX_SIZE
) != 0)

2916 || (
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
],

2917 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
) != 0)

2918 || (
	`ms_add_iov
(
c
, 
buf„r
, 
wrôe_Àn
) != 0)

2919 || (
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
vÆue_off£t
],

2920 
ôem
->
vÆue_size
) != 0)

2921 || (
	`ms_add_iov
(
c
, "\r\n", 2) != 0)

2922 || (
c
->
udp
 && (
	`ms_buûd_udp_hódîs
(c) != 0)))

2927  
EXIT_SUCCESS
;

2928 
	}
}

2940 
	$ms_mcd_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

2942 
	`as£π
(
c
 !
NULL
);

2944 
c
->
cuºcmd
.
cmd

CMD_SET
;

2945 
c
->
cuºcmd
.
isföish

Ál£
;

2946 
c
->
cuºcmd
.
ªt°©

MCD_FAILURE
;

2948 i‡(
	`ms_upd©e_c⁄n_sock_evít
(
c
) != 0)

2953 
c
->
msgcuº
= 0;

2954 
c
->
msgu£d
= 0;

2955 
c
->
iovu£d
= 0;

2956 i‡(
	`ms_add_msghdr
(
c
) != 0)

2958 
	`Ârötf
(
°dîr
, "Out of memoryÖreparingÑequest.");

2963 i‡(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
)

2965 i‡(
	`ms_buûd_bö_wrôe_buf_£t
(
c
, 
ôem
) != 0)

2972 i‡(
	`ms_buûd_ascii_wrôe_buf_£t
(
c
, 
ôem
) != 0)

2978 
	`©omic_add_size
(&
ms_°©s
.
obj_byãs
,

2979 
ôem
->
key_size
 + iãm->
vÆue_size
);

2980 
	`©omic_add_size
(&
ms_°©s
.
cmd_£t
, 1);

2982  
EXIT_SUCCESS
;

2983 
	}
}

2996 
	$ms_buûd_ascii_wrôe_buf_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

2998 i‡((
	`ms_add_iov
(
c
, "get ", 4) != 0)

2999 || (
	`ms_add_iov
(
c
, (*)&
ôem
->
key_¥efix
,

3000 ()
KEY_PREFIX_SIZE
) != 0)

3001 || (
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
],

3002 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
) != 0)

3003 || (
	`ms_add_iov
(
c
, "\r\n", 2) != 0)

3004 || (
c
->
udp
 && (
	`ms_buûd_udp_hódîs
(c) != 0)))

3009  
EXIT_SUCCESS
;

3010 
	}
}

3022 
	$ms_mcd_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

3024 
	`as£π
(
c
 !
NULL
);

3026 
c
->
cuºcmd
.
cmd

CMD_GET
;

3027 
c
->
cuºcmd
.
isföish

Ál£
;

3028 
c
->
cuºcmd
.
ªt°©

MCD_FAILURE
;

3030 i‡(
	`ms_upd©e_c⁄n_sock_evít
(
c
) != 0)

3035 
c
->
msgcuº
= 0;

3036 
c
->
msgu£d
= 0;

3037 
c
->
iovu£d
= 0;

3038 i‡(
	`ms_add_msghdr
(
c
) != 0)

3040 
	`Ârötf
(
°dîr
, "Out of memoryÖreparingÑequest.");

3045 i‡(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
)

3047 i‡(
	`ms_buûd_bö_wrôe_buf_gë
(
c
, 
ôem
) != 0)

3054 i‡(
	`ms_buûd_ascii_wrôe_buf_gë
(
c
, 
ôem
) != 0)

3060 
	`©omic_add_size
(&
ms_°©s
.
cmd_gë
, 1);

3062  
EXIT_SUCCESS
;

3063 
	}
}

3074 
	$ms_buûd_ascii_wrôe_buf_mlgë
(
ms_c⁄n_t
 *
c
)

3076 
ms_èsk_ôem_t
 *
ôem
;

3078 i‡(
	`ms_add_iov
(
c
, "get", 3) != 0)

3083 
i
0; i < 
c
->
mlgë_èsk
.
mlgë_num
; i++)

3085 
ôem

c
->
mlgë_èsk
.
mlgë_ôem
[
i
].item;

3086 
	`as£π
(
ôem
 !
NULL
);

3087 i‡((
	`ms_add_iov
(
c
, " ", 1) != 0)

3088 || (
	`ms_add_iov
(
c
, (*)&
ôem
->
key_¥efix
,

3089 ()
KEY_PREFIX_SIZE
) != 0)

3090 || (
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
],

3091 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
) != 0))

3097 i‡((
	`ms_add_iov
(
c
, "\r\n", 2) != 0)

3098 || (
c
->
udp
 && (
	`ms_buûd_udp_hódîs
(c) != 0)))

3103  
EXIT_SUCCESS
;

3104 
	}
}

3114 
	$ms_mcd_mlgë
(
ms_c⁄n_t
 *
c
)

3116 
ms_èsk_ôem_t
 *
ôem
;

3118 
	`as£π
(
c
 !
NULL
);

3119 
	`as£π
(
c
->
mlgë_èsk
.
mlgë_num
 >= 1);

3121 
c
->
cuºcmd
.
cmd

CMD_GET
;

3122 
c
->
cuºcmd
.
isföish

Ál£
;

3123 
c
->
cuºcmd
.
ªt°©

MCD_FAILURE
;

3125 i‡(
	`ms_upd©e_c⁄n_sock_evít
(
c
) != 0)

3130 
c
->
msgcuº
= 0;

3131 
c
->
msgu£d
= 0;

3132 
c
->
iovu£d
= 0;

3133 i‡(
	`ms_add_msghdr
(
c
) != 0)

3135 
	`Ârötf
(
°dîr
, "Out of memoryÖreparingÑequest.");

3140 i‡(
c
->
¥Ÿocﬁ
 =
bö¨y_¥Ÿ
)

3142 i‡(
	`ms_buûd_bö_wrôe_buf_mlgë
(
c
) != 0)

3149 i‡(
	`ms_buûd_ascii_wrôe_buf_mlgë
(
c
) != 0)

3156 
i
0; i < 
c
->
mlgë_èsk
.
mlgë_num
; i++)

3158 
ôem

c
->
mlgë_èsk
.
mlgë_ôem
[
i
].item;

3159 
	`©omic_add_size
(&
ms_°©s
.
cmd_gë
, 1);

3162  
EXIT_SUCCESS
;

3163 
	}
}

3177 
	$ms_bö_¥o˚ss_ª•⁄£
(
ms_c⁄n_t
 *
c
)

3179 c⁄° *
îr°r

NULL
;

3181 
	`as£π
(
c
 !
NULL
);

3183 
uöt32_t
 
bodyÀn

c
->
bö¨y_hódî
.
ª•⁄£
.bodylen;

3184 
uöt8_t
 
›code

c
->
bö¨y_hódî
.
ª•⁄£
.opcode;

3185 
uöt16_t
 
°©us

c
->
bö¨y_hódî
.
ª•⁄£
.status;

3187 i‡(
bodyÀn
 > 0)

3189 
c
->
rvbyãs
(
öt32_t
)
bodyÀn
;

3190 
c
->
ªadvÆ

åue
;

3191  
EXIT_FAILURE
;

3195 
°©us
)

3197 
PROTOCOL_BINARY_RESPONSE_SUCCESS
:

3198 i‡(
›code
 =
PROTOCOL_BINARY_CMD_SET
)

3200 
c
->
cuºcmd
.
ªt°©

MCD_STORED
;

3202 i‡(
›code
 =
PROTOCOL_BINARY_CMD_DELETE
)

3204 
c
->
cuºcmd
.
ªt°©

MCD_DELETED
;

3206 i‡(
›code
 =
PROTOCOL_BINARY_CMD_GET
)

3208 
c
->
cuºcmd
.
ªt°©

MCD_END
;

3212 
PROTOCOL_BINARY_RESPONSE_ENOMEM
:

3213 
îr°r
= "Out of memory";

3214 
c
->
cuºcmd
.
ªt°©

MCD_SERVER_ERROR
;

3217 
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
:

3218 
îr°r
= "Unknown command";

3219 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

3222 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
:

3223 
îr°r
= "Not found";

3224 
c
->
cuºcmd
.
ªt°©

MCD_NOTFOUND
;

3227 
PROTOCOL_BINARY_RESPONSE_EINVAL
:

3228 
îr°r
= "Invalidárguments";

3229 
c
->
cuºcmd
.
ªt°©

MCD_PROTOCOL_ERROR
;

3232 
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
:

3233 
îr°r
= "DataÉxists for key.";

3236 
PROTOCOL_BINARY_RESPONSE_E2BIG
:

3237 
îr°r
= "TooÜarge.";

3238 
c
->
cuºcmd
.
ªt°©

MCD_SERVER_ERROR
;

3241 
PROTOCOL_BINARY_RESPONSE_NOT_STORED
:

3242 
îr°r
= "Not stored.";

3243 
c
->
cuºcmd
.
ªt°©

MCD_NOTSTORED
;

3247 
îr°r
= "UnknownÉrror";

3248 
c
->
cuºcmd
.
ªt°©

MCD_UNKNOWN_READ_FAILURE
;

3252 i‡(
îr°r
 !
NULL
)

3254 
	`Ârötf
(
°dîr
, "%s\n", 
îr°r
);

3258  
EXIT_SUCCESS
;

3259 
	}
}

3273 
	$ms_add_bö_hódî
(
ms_c⁄n_t
 *
c
,

3274 
uöt8_t
 
›code
,

3275 
uöt8_t
 
hdr_Àn
,

3276 
uöt16_t
 
key_Àn
,

3277 
uöt32_t
 
body_Àn
)

3279 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
;

3281 
	`as£π
(
c
 !
NULL
);

3283 
hódî
(
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *)
c
->
wcuº
;

3285 
hódî
->
ªque°
.
magic
(
uöt8_t
)
PROTOCOL_BINARY_REQ
;

3286 
hódî
->
ªque°
.
›code
(
uöt8_t
)opcode;

3287 
hódî
->
ªque°
.
keyÀn

	`ht⁄s
(
key_Àn
);

3289 
hódî
->
ªque°
.
exéí
(
uöt8_t
)
hdr_Àn
;

3290 
hódî
->
ªque°
.
d©©y≥
(
uöt8_t
)
PROTOCOL_BINARY_RAW_BYTES
;

3291 
hódî
->
ªque°
.
vbuckë
= 0;

3293 
hódî
->
ªque°
.
bodyÀn

	`ht⁄l
(
body_Àn
);

3294 
hódî
->
ªque°
.
›aque
= 0;

3295 
hódî
->
ªque°
.
ˇs
= 0;

3297 
	`ms_add_iov
(
c
, c->
wcuº
, (
hódî
->
ªque°
));

3298 
	}
}

3308 
	$ms_add_key_to_iov
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

3310 
	`ms_add_iov
(
c
, (*)&
ôem
->
key_¥efix
, ()
KEY_PREFIX_SIZE
);

3311 
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
],

3312 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
);

3313 
	}
}

3326 
	$ms_buûd_bö_wrôe_buf_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

3328 
	`as£π
(
c
->
wbuf
 =c->
wcuº
);

3330 
vÆue_off£t
;

3331 
¥Ÿocﬁ_bö¨y_ªque°_£t
 *
ªp
’rŸocﬁ_bö¨y_ªque°_£à*)
c
->
wcuº
;

3332 
uöt16_t
 
keyÀn
(uöt16_t)
ôem
->
key_size
;

3333 
uöt32_t
 
bodyÀn
(uöt32_t)(
ªp
->
mesßge
.
body
)

3334 + (
uöt32_t
)
keyÀn
 + (uöt32_t)
ôem
->
vÆue_size
;

3336 
	`ms_add_bö_hódî
(
c
,

3337 
PROTOCOL_BINARY_CMD_SET
,

3338 (
ªp
->
mesßge
.
body
),

3339 
keyÀn
,

3340 
bodyÀn
);

3341 
ªp
->
mesßge
.
body
.
Êags
= 0;

3342 
ªp
->
mesßge
.
body
.
expú©i⁄

	`ht⁄l
((
uöt32_t
)
ôem
->
exp_time
);

3343 
	`ms_add_iov
(
c
, &
ªp
->
mesßge
.
body
, (rep->message.body));

3344 
	`ms_add_key_to_iov
(
c
, 
ôem
);

3346 i‡(
ôem
->
vÆue_off£t
 =
INVALID_OFFSET
)

3348 
vÆue_off£t

ôem
->
key_suffix_off£t
;

3352 
vÆue_off£t

ôem
->value_offset;

3354 
	`ms_add_iov
(
c
, &
ms_£âög
.
ch¨_block
[
vÆue_off£t
], 
ôem
->
vÆue_size
);

3356  
EXIT_SUCCESS
;

3357 
	}
}

3370 
	$ms_buûd_bö_wrôe_buf_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

3372 
	`as£π
(
c
->
wbuf
 =c->
wcuº
);

3374 
	`ms_add_bö_hódî
(
c
, 
PROTOCOL_BINARY_CMD_GET
, 0, (
uöt16_t
)
ôem
->
key_size
,

3375 (
uöt32_t
)
ôem
->
key_size
);

3376 
	`ms_add_key_to_iov
(
c
, 
ôem
);

3378  
EXIT_SUCCESS
;

3379 
	}
}

3392 
	$ms_buûd_bö_wrôe_buf_mlgë
(
ms_c⁄n_t
 *
c
)

3394 
ms_èsk_ôem_t
 *
ôem
;

3396 
	`as£π
(
c
->
wbuf
 =c->
wcuº
);

3398 
i
0; i < 
c
->
mlgë_èsk
.
mlgë_num
; i++)

3400 
ôem

c
->
mlgë_èsk
.
mlgë_ôem
[
i
].item;

3401 
	`as£π
(
ôem
 !
NULL
);

3403 
	`ms_add_bö_hódî
(
c
,

3404 
PROTOCOL_BINARY_CMD_GET
,

3406 (
uöt16_t
)
ôem
->
key_size
,

3407 (
uöt32_t
)
ôem
->
key_size
);

3408 
	`ms_add_key_to_iov
(
c
, 
ôem
);

3409 
c
->
wcuº
+(
¥Ÿocﬁ_bö¨y_ªque°_gë
);

3412 
c
->
wcuº
c->
wbuf
;

3414  
EXIT_SUCCESS
;

3415 
	}
}

	@clients/ms_conn.h

11 #i‚de‡
MS_CONN_H


12 
	#MS_CONN_H


	)

14 
	~<sys/sockë.h
>

15 
	~<√töë/ö.h
>

16 
	~<evít.h
>

17 
	~<√tdb.h
>

19 
	~"ms_èsk.h
"

20 
	~<libmemˇched/memˇched/¥Ÿocﬁ_bö¨y.h
>

22 #ifde‡
__˝lu•lus


26 
	#DATA_BUFFER_SIZE
 (1024 * 1024 + 2048Ë

	)

27 
	#WRITE_BUFFER_SIZE
 (32 * 1024Ë

	)

28 
	#UDP_DATA_BUFFER_SIZE
 (1 * 1024 * 1024Ë

	)

29 
	#UDP_MAX_PAYLOAD_SIZE
 1400

	)

30 
	#UDP_MAX_SEND_PAYLOAD_SIZE
 1400

	)

31 
	#UDP_HEADER_SIZE
 8

	)

32 
	#MAX_SENDBUF_SIZE
 (256 * 1024 * 1024Ë

	)

33 
	#SOCK_WAIT_TIMEOUT
 30

	)

34 
	#MAX_UDP_PACKET
 (1 << 16Ë

	)

37 
	#IOV_LIST_INITIAL
 400

	)

40 
	#MSG_LIST_INITIAL
 10

	)

43 
	#READ_BUFFER_HIGHWAT
 (2 * 
DATA_BUFFER_SIZE
)

	)

44 
	#UDP_DATA_BUFFER_HIGHWAT
 (4 * 
UDP_DATA_BUFFER_SIZE
)

	)

45 
	#IOV_LIST_HIGHWAT
 600

	)

46 
	#MSG_LIST_HIGHWAT
 100

	)

49 
	#HEADER_TO_REQID
(
±r
Ë((
uöt16_t
)*ptr * 256 \

50 + (
uöt16_t
)*(
±r
 + 1))

	)

51 
	#HEADER_TO_SEQNUM
(
±r
Ë((
uöt16_t
)*(ptr \

53 + (
uöt16_t
)*(
±r
 + 3))

	)

54 
	#HEADER_TO_PACKETS
(
±r
Ë((
uöt16_t
)*(ptr \

56 + (
uöt16_t
)*(
±r
 + 5))

	)

59 
	ec⁄n_°©es


61 
c⁄n_ªad
,

62 
c⁄n_wrôe
,

63 
c⁄n_˛osög
,

67 
	emcd_ªt


69 
MCD_SUCCESS
,

70 
MCD_FAILURE
,

71 
MCD_UNKNOWN_READ_FAILURE
,

72 
MCD_PROTOCOL_ERROR
,

73 
MCD_CLIENT_ERROR
,

74 
MCD_SERVER_ERROR
,

75 
MCD_DATA_EXISTS
,

76 
MCD_NOTSTORED
,

77 
MCD_STORED
,

78 
MCD_NOTFOUND
,

79 
MCD_END
,

80 
MCD_DELETED
,

81 
MCD_STAT
,

85 
	scmd°©


87 
cmd
;

88 
ªt°©
;

89 
boﬁ
 
isföish
;

90 
uöt64_t
 
key_¥efix
;

91 } 
	tms_cmd°©_t
;

94 
	sudµkt


96 
uöt8_t
 *
hódî
;

97 *
d©a
;

98 
rbyãs
;

99 
c›ybyãs
;

100 } 
	tms_udµkt_t
;

103 
	e¥Ÿocﬁ


105 
ascii_¥Ÿ
 = 3,

106 
bö¨y_¥Ÿ
,

118 
	sc⁄n


120 
uöt32_t
 
c⁄n_idx
;

121 
sfd
;

122 
udpsfd
;

123 
°©e
;

124 
evít
Évent;

125 
ev_Êags
;

126 
which
;

127 
boﬁ
 
ch™ge_sfd
;

129 *
t˝sfd
;

130 
uöt32_t
 
tŸÆ_sfds
;

131 
uöt32_t
 
Æive_sfds
;

132 
uöt32_t
 
cur_idx
;

134 
ms_cmd°©_t
 
¥ecmd
;

135 
ms_cmd°©_t
 
cuºcmd
;

137 *
rbuf
;

138 *
rcuº
;

139 
rsize
;

140 
rbyãs
;

142 
boﬁ
 
ªadvÆ
;

143 
rvbyãs
;

145 *
wbuf
;

146 *
wcuº
;

147 
wsize
;

148 
boﬁ
 
˘nwrôe
;

151 
iovec
 *
iov
;

152 
iovsize
;

153 
iovu£d
;

155 
msghdr
 *
msgli°
;

156 
msgsize
;

157 
msgu£d
;

158 
msgcuº
;

159 
msgbyãs
;

162 
boﬁ
 
udp
;

163 
uöt32_t
 
ªque°_id
;

164 
uöt8_t
 *
hdrbuf
;

165 
hdrsize
;

166 
sockaddr
 
§v_ªcv_addr
;

167 
sockÀn_t
 
§v_ªcv_addr_size
;

170 *
rudpbuf
;

171 
rudpsize
;

172 
rudpbyãs
;

175 
ms_udµkt_t
 *
udµkt
;

176 
∑ckës
;

177 
ªcvpkt
;

178 
pktcuº
;

179 
‹dcuº
;

181 
ms_èsk_ôem_t
 *
ôem_wö
;

182 
wö_size
;

183 
uöt64_t
 
£t_curs‹
;

184 
ms_èsk_t
 
cuº_èsk
;

185 
ms_mlgë_èsk_t
 
mlgë_èsk
;

187 
w¨mup_num
;

188 
ªmaö_w¨mup_num
;

189 
öt64_t
 
exec_num
;

190 
öt64_t
 
ªmaö_exec_num
;

193 
timevÆ
 
°¨t_time
;

194 
timevÆ
 
íd_time
;

197 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
bö¨y_hódî
;

198 
¥Ÿocﬁ
Örotocol;

199 } 
	tms_c⁄n_t
;

202 
uöt64_t
 
ms_gë_key_¥efix
();

209 
ms_£tup_c⁄n
(
ms_c⁄n_t
 *
c
);

213 
ms_ª£t_c⁄n
(
ms_c⁄n_t
 *
c
, 
boﬁ
 
timeout
);

222 
ms_ªc⁄n_socks
(
ms_c⁄n_t
 *
c
);

226 
ms_mcd_£t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

230 
ms_mcd_gë
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

234 
ms_mcd_mlgë
(
ms_c⁄n_t
 *
c
);

237 #ifde‡
__˝lu•lus


	@clients/ms_memslap.h

11 #i‚de‡
MS_MEMSLAP_H


12 
	#MS_MEMSLAP_H


	)

14 
	~<°dlib.h
>

15 
	~<°dio.h
>

16 
	~<î∫o.h
>

17 
	~<°rög.h
>

18 
	~<as£π.h
>

19 
	~<uni°d.h
>

20 
	~<°döt.h
>

21 
	~<±hªad.h
>

22 #i‡!
deföed
(
__˝lu•lus
)

23 
	~<°dboﬁ.h
>

25 
	~<m©h.h
>

27 
	~"ms_°©s.h
"

29 #ifde‡
__˝lu•lus


36 
OPT_VERSION
= 'V',

37 
OPT_HELP
= 'h',

38 
OPT_UDP
= 'U',

39 
OPT_SERVERS
= 's',

40 
OPT_EXECUTE_NUMBER
= 'x',

41 
OPT_THREAD_NUMBER
= 'T',

42 
OPT_CONCURRENCY
= 'c',

43 
OPT_FIXED_LTH
= 'X',

44 
OPT_VERIFY
= 'v',

45 
OPT_GETS_DIVISION
= 'd',

46 
OPT_TIME
= 't',

47 
OPT_CONFIG_CMD
= 'F',

48 
OPT_WINDOW_SIZE
= 'w',

49 
OPT_EXPIRE
= 'e',

50 
OPT_STAT_FREQ
= 'S',

51 
OPT_RECONNECT
= 'R',

52 
OPT_VERBOSE
= 'b',

53 
OPT_FACEBOOK_TEST
= 'a',

54 
OPT_SOCK_PER_CONN
= 'n',

55 
OPT_BINARY_PROTOCOL
= 'B',

56 
OPT_OVERWRITE
= 'o',

57 
OPT_TPS
= 'P',

58 
OPT_REP_WRITE_SRV
= 'p',

59 } 
	tms_›ti⁄s_t
;

62 
	s°©i°ic


64 
±hªad_muãx_t
 
°©_muãx
;

66 
ms_°©_t
 
gë_°©
;

67 
ms_°©_t
 
£t_°©
;

68 
ms_°©_t
 
tŸÆ_°©
;

69 } 
	tms_°©i°ic_t
;

72 
	s°©s


74 vﬁ©ûê
uöt32_t
 
a˘ive_c⁄ns
;

75 
size_t
 
byãs_ªad
;

76 
size_t
 
byãs_wrôãn
;

77 
size_t
 
obj_byãs
;

78 
size_t
 
¥e_cmd_gë
;

79 
size_t
 
¥e_cmd_£t
;

80 
size_t
 
cmd_gë
;

81 
size_t
 
cmd_£t
;

82 
size_t
 
gë_mis£s
;

83 
size_t
 
vef_miss
;

84 
size_t
 
vef_Áûed
;

85 
size_t
 
u√xp_ungë
;

86 
size_t
 
exp_gë
;

87 vﬁ©ûê
size_t
 
pkt_dis‹dî
;

88 
size_t
 
pkt_dr›
;

89 
size_t
 
udp_timeout
;

90 } 
	tms_°©s_t
;

93 
	ssync_lock


95 
uöt32_t
 
cou¡
;

96 
±hªad_muãx_t
 
lock
;

97 
±hªad_c⁄d_t
 
c⁄d
;

98 } 
	tms_sync_lock_t
;

101 
	sglobÆ


104 
ms_sync_lock_t
 
öô_lock
;

105 
ms_sync_lock_t
 
w¨mup_lock
;

106 
ms_sync_lock_t
 
run_lock
;

109 
±hªad_muãx_t
 
quô_muãx
;

112 
±hªad_muãx_t
 
£q_muãx
;

115 
boﬁ
 
föish_w¨mup
;

116 
boﬁ
 
time_out
;

117 } 
	tms_globÆ_t
;

120 
ms_globÆ_t
 
ms_globÆ
;

123 
ms_°©s_t
 
ms_°©s
;

126 
ms_°©i°ic_t
 
ms_°©i°ic
;

128 #ifde‡
__˝lu•lus


	@clients/ms_setting.c

12 
	~"c⁄fig.h
"

14 
	~<libmemˇched/memˇched.h
>

16 
	~<˘y≥.h
>

17 
	~<öây≥s.h
>

18 
	~<limôs.h
>

19 
	~<pwd.h
>

20 
	~<°rögs.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<uni°d.h
>

26 
	~"ms_£âög.h
"

27 
	~"ms_c⁄n.h
"

29 
	#MAX_EXEC_NUM
 0x4000000000000000

	)

30 
	#ADDR_ALIGN
(
addr
Ë(◊dd∏+ 15Ë& ~(16 - 1)Ë

	)

31 
	#RAND_CHAR_SIZE
 (10 * 1024 * 1024Ë

	)

32 
	#RESERVED_RAND_CHAR_SIZE
 (2 * 1024 * 1024Ë

	)

34 
	#DEFAULT_CONFIG_NAME
 ".mem¶≠.˙f"

	)

36 
	#DEFAULT_THREADS_NUM
 1

	)

37 
	#DEFAULT_CONNS_NUM
 16

	)

38 
	#DEFAULT_EXE_NUM
 0

	)

39 
	#DEFAULT_VERIFY_RATE
 0.0

	)

40 
	#DEFAULT_OVERWRITE_RATE
 0.0

	)

41 
	#DEFAULT_DIV
 1

	)

42 
	#DEFAULT_RUN_TIME
 600

	)

43 
	#DEFAULT_WINDOW_SIZE
 (10 * 
UNIT_ITEMS_COUNT
Ë

	)

44 
	#DEFAULT_SOCK_PER_CONN
 1

	)

47 
	#CHAR_COUNT
 64

	)

48 c⁄° 
	gALPHANUMBERICS
[]=

51 
ms_£âög_°
 
	gms_£âög
;

55 
ms_gë_£rvîli°
(*
°r
);

56 
uöt32_t
 
ms_gë_˝u_cou¡
();

57 
ms_c⁄f_ty≥_t
 
ms_gë_c⁄f_ty≥
(*
löe
);

58 
ms_is_löe_d©a
(*
löe
);

59 
ms_ªad_is_d©a
(*
löe
, 
ssize_t
 
ƒód
);

60 
ms_no_c⁄fig_fûe
();

61 
ms_∑r£_cfg_fûe
(*
cfg_fûe
);

65 
ms_öô_øndom_block
();

66 
ms_ˇlc_avg_size
();

67 
ms_shufÊe_di°r
(
ms_di°r_t
 *
di°r
, 
Àngth
);

68 
ms_buûd_di°r
();

69 
ms_¥öt_£âög
();

70 
ms_£âög_¶≠mode_öô_¥e
();

71 
ms_£âög_¶≠mode_öô_po°
();

73 #i‡!
deföed
(
HAVE_GETLINE
)

74 
	~<limôs.h
>

75 
ssize_t
 
	$gëlöe
 (**
löe
, 
size_t
 *
löe_size
, 
FILE
 *
Â
)

77 
dñim
= '\n';

78 
ssize_t
 
ªsu…
= 0;

79 
size_t
 
cur_Àn
= 0;

81 i‡(
löe
 =
NULL
 || 
löe_size
 =NULL || 
Â
 == NULL)

83 
î∫o
 = 
EINVAL
;

87 i‡(*
löe
 =
NULL
 || *
löe_size
 == 0)

89 *
√w_löe
;

90 *
löe_size
 = 120;

91 
√w_löe
(*Ë
	`ªÆloc
 (*
löe
, *
löe_size
);

92 i‡(
√w_löe
 =
NULL
)

94 
ªsu…
= -1;

95  
ªsu…
;

97 *
löe

√w_löe
;

102 
i

	`gëc
(
Â
);

103 i‡(
i
 =
EOF
)

105 
ªsu…
 = -1;

110 i‡(
cur_Àn
 + 1 >*
löe_size
)

112 
size_t
 
√eded_max
=

113 
SSIZE_MAX
 < 
SIZE_MAX
 ? (
size_t
) SSIZE_MAX + 1 : SIZE_MAX;

114 
size_t
 
√eded
(2 * (*
löe_size
)) + 1;

115 *
√w_löe
;

117 i‡(
√eded_max
 < 
√eded
)

118 
√eded

√eded_max
;

119 i‡(
cur_Àn
 + 1 >
√eded
)

121 
ªsu…
= -1;

122 
î∫o

EOVERFLOW
;

123  
ªsu…
;

126 
√w_löe
(*)
	`ªÆloc
(*
löe
, 
√eded
);

127 i‡(
√w_löe
 =
NULL
)

129 
ªsu…
= -1;

130  
ªsu…
;

133 *
löe

√w_löe
;

134 *
löe_size

√eded
;

137 (*
löe
)[
cur_Àn
]()
i
;

138 
cur_Àn
++;

140 i‡(
i
 =
dñim
)

143 (*
löe
)[
cur_Àn
] = '\0';

144 i‡(
cur_Àn
 != 0)

145  (
ssize_t
)
cur_Àn
;

146  
ªsu…
;

147 
	}
}

157 
	$ms_gë_£rvîli°
(*
°r
)

159 
ms_mcd_£rvî_t
 *
§vs

NULL
;

165 
memˇched_£rvî_°
 *
£rvî_poﬁ
;

166 
£rvî_poﬁ
 = 
	`memˇched_£rvîs_∑r£
(
°r
);

168 
uöt32_t
 
lo›
0;Üo› < 
	`memˇched_£rvî_li°_cou¡
(
£rvî_poﬁ
);Üoop++)

170 
	`as£π
(
ms_£âög
.
§v_˙t
 < ms_£âög.
tŸÆ_§v_˙t
);

171 
	`°r˝y
(
ms_£âög
.
£rvîs
[ms_£âög.
§v_˙t
].
§v_ho°_«me
, 
£rvî_poﬁ
[
lo›
].
ho°«me
);

172 
ms_£âög
.
£rvîs
[ms_£âög.
§v_˙t
].
§v_p‹t

£rvî_poﬁ
[
lo›
].
p‹t
;

173 
ms_£âög
.
£rvîs
[ms_£âög.
§v_˙t
].
disc⁄n_˙t
= 0;

174 
ms_£âög
.
£rvîs
[ms_£âög.
§v_˙t
].
ªc⁄n_˙t
= 0;

175 
ms_£âög
.
§v_˙t
++;

177 i‡(
ms_£âög
.
§v_˙t
 >ms_£âög.
tŸÆ_§v_˙t
)

179 
§vs
(
ms_mcd_£rvî_t
 *)
	`ªÆloc
–
ms_£âög
.
£rvîs
,

180 (
size_t
)
ms_£âög
.
tŸÆ_§v_˙t
 * (
ms_mcd_£rvî_t
) * 2);

181 i‡(
§vs
 =
NULL
)

183 
	`Ârötf
(
°dîr
, "Can'tÑeallocate servers structure.\n");

184 
	`exô
(1);

186 
ms_£âög
.
£rvîs

§vs
;

187 
ms_£âög
.
tŸÆ_§v_˙t
*= 2;

191 
	`memˇched_£rvî_‰ì
(
£rvî_poﬁ
);

192 
	}
}

200 
uöt32_t
 
	$ms_gë_˝u_cou¡
()

202 #ifde‡
HAVE__SC_NPROCESSORS_ONLN


203  
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

206 #ifde‡
HAVE_CPU_SET_T


207 
˝u_cou¡
= 0;

208 
˝u_£t_t
 
˝u_£t
;

210 
	`sched_gëafföôy
(0, (
˝u_£t_t
), &
˝u_£t
);

212 
i
0; i < ((
˝u_£t_t
) * 8); i++)

214 i‡(
	`CPU_ISSET
(
i
, &
˝u_£t
))

216 
˝u_cou¡
++;

220  
˝u_cou¡
;

226  
EXIT_FAILURE
;

227 
	}
}

238 
ms_c⁄f_ty≥_t
 
	$ms_gë_c⁄f_ty≥
(*
löe
)

240 i‡(! 
	`memcmp
(
löe
, "key", 
	`°æí
("key")))

242  
CONF_KEY
;

244 i‡(! 
	`memcmp
(
löe
, "vÆue", 
	`°æí
("value")))

246  
CONF_VALUE
;

248 i‡(! 
	`memcmp
(
löe
, "cmd", 
	`°æí
("cmd")))

250  
CONF_CMD
;

254  
CONF_NULL
;

256 
	}
}

267 
	$ms_is_löe_d©a
(*
löe
)

269 
	`as£π
(
löe
 !
NULL
);

271 *
begö_±r

löe
;

273 
	`is•a˚
(*
begö_±r
))

275 
begö_±r
++;

277 i‡((
begö_±r
[0] == '\0') || (begin_ptr[0] == '#'))

278  
EXIT_SUCCESS
;

280  
EXIT_FAILURE
;

281 
	}
}

292 
	$ms_ªad_is_d©a
(*
löe
, 
ssize_t
 
ƒód
)

294 i‡((
ƒód
 =
EOF
Ë|| ! 
	`ms_is_löe_d©a
(
löe
))

295  
EXIT_SUCCESS
;

297  
EXIT_FAILURE
;

298 
	}
}

305 
	$ms_no_c⁄fig_fûe
()

307 
u£Ω©h
[
PATH_MAX
];

308 
∑sswd
 *
u§

NULL
;

309 
FILE
 *
fd
;

311 
u§

	`gëpwuid
(
	`gëuid
());

313 
	`¢¥ötf
(
u£Ω©h
, 
PATH_MAX
, "%s/%s", 
u§
->
pw_dú
, 
DEFAULT_CONFIG_NAME
);

315 i‡(
	`ac˚ss
 (
u£Ω©h
, 
F_OK
 | 
R_OK
) == 0)

316 
exô
;

318 
fd

	`f›í
(
u£Ω©h
, "w+");

320 i‡(
fd
 =
NULL
)

322 
	`Ârötf
(
°dîr
, "CouldÇŸ cª©êdeÁu… c⁄figuª fûê%s\n", 
u£Ω©h
);

323 
	`≥º‹
(
	`°ªº‹
(
î∫o
));

324 
	`exô
(1);

326 
	`Ârötf
(
fd
, "%s", 
DEFAULT_CONGIF_STR
);

327 
	`f˛o£
(
fd
);

329 
exô
:

330 
ms_£âög
.
cfg_fûe

	`°rdup
(
u£Ω©h
);

331 
	}
}

339 
	$ms_∑r£_cfg_fûe
(*
cfg_fûe
)

341 
FILE
 *
f
;

342 
size_t
 
°¨t_Àn
, 
íd_Àn
;

343 
¥›‹ti⁄
;

344 *
löe

NULL
;

345 
size_t
 
ªad_Àn
;

346 
ssize_t
 
ƒód
;

347 
cmd_ty≥
;

348 
ms_c⁄f_ty≥_t
 
c⁄f_ty≥
;

349 
íd_of_fûe
= 0;

350 
ms_key_di°r_t
 *
key_di°r

NULL
;

351 
ms_vÆue_di°r_t
 *
vÆ_di°r

NULL
;

353 i‡(
cfg_fûe
 =
NULL
)

355 
	`ms_no_c⁄fig_fûe
();

356 
cfg_fûe

ms_£âög
.cfg_file;

360 i‡((
f

	`f›í
(
cfg_fûe
, "r")Ë=
NULL
)

362 
	`Ârötf
(
°dîr
, "C™ÇŸ o≥¿fûe: '%s'.\n", 
cfg_fûe
);

363 
	`exô
(1);

368 i‡((((
ƒód

	`gëlöe
(&
löe
, &
ªad_Àn
, 
f
)) == 1)

369 || ! 
	`ms_ªad_is_d©a
(
löe
, 
ƒód
)Ë&& (ƒód !
EOF
))

372 i‡(
ƒód
 =
EOF
)

374 
	`Ârötf
(
°dîr
, "Bad configuration file,Ço configuration find.\n");

375 
	`exô
(1);

377 
c⁄f_ty≥

	`ms_gë_c⁄f_ty≥
(
löe
);

381 ! 
íd_of_fûe
)

383 
c⁄f_ty≥
)

385 
CONF_KEY
:

388 i‡((((
ƒód

	`gëlöe
(&
löe
, &
ªad_Àn
, 
f
)) == 1)

389 || ! 
	`ms_ªad_is_d©a
(
löe
, 
ƒód
)Ë&& (ƒód !
EOF
))

392 i‡(
ƒód
 !
EOF
)

394 i‡(
	`ssˇnf
(
löe
, "%zu %zu %l‡", &
°¨t_Àn
,

395 &
íd_Àn
, &
¥›‹ti⁄
) != 3)

397 
c⁄f_ty≥

	`ms_gë_c⁄f_ty≥
(
löe
);

400 
ms_£âög
.
key_di°r
[ms_£âög.
key_∫g_˙t
].
°¨t_Àn
= start_len;

401 
ms_£âög
.
key_di°r
[ms_£âög.
key_∫g_˙t
].
íd_Àn
=Énd_len;

402 
ms_£âög
.
key_di°r
[ms_£âög.
key_∫g_˙t
].
key_¥›

¥›‹ti⁄
;

403 
ms_£âög
.
key_∫g_˙t
++;

405 i‡(
ms_£âög
.
key_∫g_˙t
 >ms_£âög.
tŸÆ_key_∫g_˙t
)

407 
key_di°r
(
ms_key_di°r_t
 *)
	`ªÆloc
(

408 
ms_£âög
.
key_di°r
,

409 (
size_t
)
ms_£âög
.

410 
tŸÆ_key_∫g_˙t
 * (
ms_key_di°r_t
) * 2);

411 i‡(
key_di°r
 =
NULL
)

413 
	`Ârötf
(
°dîr
,

415 
	`exô
(1);

417 
ms_£âög
.
key_di°r
= key_distr;

418 
ms_£âög
.
tŸÆ_key_∫g_˙t
*= 2;

422 
íd_of_fûe
= 1;

427 
CONF_VALUE
:

430 i‡((((
ƒód

	`gëlöe
(&
löe
, &
ªad_Àn
, 
f
)) == 1)

431 || ! 
	`ms_ªad_is_d©a
(
löe
, 
ƒód
)Ë&& (ƒód !
EOF
))

434 i‡(
ƒód
 !
EOF
)

436 i‡(
	`ssˇnf
(
löe
, "%zu %zu %lf", &
°¨t_Àn
, &
íd_Àn
,

437 &
¥›‹ti⁄
) != 3)

439 
c⁄f_ty≥

	`ms_gë_c⁄f_ty≥
(
löe
);

442 
ms_£âög
.
vÆue_di°r
[ms_£âög.
vÆ_∫g_˙t
].
°¨t_Àn
=

443 
°¨t_Àn
;

444 
ms_£âög
.
vÆue_di°r
[ms_£âög.
vÆ_∫g_˙t
].
íd_Àn
=Énd_len;

445 
ms_£âög
.
vÆue_di°r
[ms_£âög.
vÆ_∫g_˙t
].
vÆue_¥›
=

446 
¥›‹ti⁄
;

447 
ms_£âög
.
vÆ_∫g_˙t
++;

449 i‡(
ms_£âög
.
vÆ_∫g_˙t
 >ms_£âög.
tŸÆ_vÆ_∫g_˙t
)

451 
vÆ_di°r
(
ms_vÆue_di°r_t
 *)
	`ªÆloc
(

452 
ms_£âög
.
vÆue_di°r
,

453 (
size_t
)
ms_£âög
.

454 
tŸÆ_vÆ_∫g_˙t
 * (
ms_vÆue_di°r_t
) * 2);

455 i‡(
vÆ_di°r
 =
NULL
)

457 
	`Ârötf
(
°dîr
,

459 
	`exô
(1);

461 
ms_£âög
.
vÆue_di°r

vÆ_di°r
;

462 
ms_£âög
.
tŸÆ_vÆ_∫g_˙t
*= 2;

466 
íd_of_fûe
= 1;

471 
CONF_CMD
:

474 i‡((((
ƒód

	`gëlöe
(&
löe
, &
ªad_Àn
, 
f
)) == 1)

475 || ! 
	`ms_ªad_is_d©a
(
löe
, 
ƒód
)Ë&& (ƒód !
EOF
))

478 i‡(
ƒód
 !
EOF
)

480 i‡(
	`ssˇnf
(
löe
, "%d %lf", &
cmd_ty≥
, &
¥›‹ti⁄
) != 2)

482 
c⁄f_ty≥

	`ms_gë_c⁄f_ty≥
(
löe
);

485 i‡(
cmd_ty≥
 >
CMD_NULL
)

489 
ms_£âög
.
cmd_di°r
[ms_£âög.
cmd_u£d_cou¡
].
cmd_ty≥
=

490 
cmd_ty≥
;

491 
ms_£âög
.
cmd_di°r
[ms_£âög.
cmd_u£d_cou¡
].
cmd_¥›
=

492 
¥›‹ti⁄
;

493 
ms_£âög
.
cmd_u£d_cou¡
++;

496 
íd_of_fûe
= 1;

500 
CONF_NULL
:

503 i‡((((
ƒód

	`gëlöe
(&
löe
, &
ªad_Àn
, 
f
)) == 1)

504 || ! 
	`ms_ªad_is_d©a
(
löe
, 
ƒód
)Ë&& (ƒód !
EOF
))

507 i‡(
ƒód
 !
EOF
)

509 i‡((
c⁄f_ty≥

	`ms_gë_c⁄f_ty≥
(
löe
)Ë!
CONF_NULL
)

515 
íd_of_fûe
= 1;

521 
	`as£π
(0);

526 
	`f˛o£
(
f
);

528 i‡(
löe
 !
NULL
)

530 
	`‰ì
(
löe
);

532 
	}
}

536 
	$ms_ˇlc_avg_size
()

538 
avg_vÆ_size
= 0.0;

539 
avg_key_size
= 0.0;

540 
vÆ_¥o
= 0.0;

541 
key_¥o
= 0.0;

542 
avîge_Àn
= 0.0;

543 
size_t
 
°¨t_Àn
= 0;

544 
size_t
 
íd_Àn
= 0;

546 
j
0; j < 
ms_£âög
.
vÆ_∫g_˙t
; j++)

548 
vÆ_¥o

ms_£âög
.
vÆue_di°r
[
j
].
vÆue_¥›
;

549 
°¨t_Àn

ms_£âög
.
vÆue_di°r
[
j
].start_len;

550 
íd_Àn

ms_£âög
.
vÆue_di°r
[
j
].end_len;

552 
avîge_Àn

vÆ_¥o
 * (()(
°¨t_Àn
 + 
íd_Àn
)) / 2;

553 
avg_vÆ_size
+
avîge_Àn
;

556 
j
0; j < 
ms_£âög
.
key_∫g_˙t
; j++)

558 
key_¥o

ms_£âög
.
key_di°r
[
j
].
key_¥›
;

559 
°¨t_Àn

ms_£âög
.
key_di°r
[
j
].start_len;

560 
íd_Àn

ms_£âög
.
key_di°r
[
j
].end_len;

562 
avîge_Àn

key_¥o
 * (()(
°¨t_Àn
 + 
íd_Àn
)) / 2;

563 
avg_key_size
+
avîge_Àn
;

566 
ms_£âög
.
avg_vÆ_size
(
size_t
)avg_val_size;

567 
ms_£âög
.
avg_key_size
(
size_t
)avg_key_size;

568 
	}
}

580 
	$ms_shufÊe_di°r
(
ms_di°r_t
 *
di°r
, 
Àngth
)

582 
i
, 
j
;

583 
tmp_off£t
;

584 
size_t
 
tmp_size
;

585 
öt64_t
 
∫d
;

587 
i
0; i < 
Àngth
; i++)

589 
∫d

	`øndom
();

590 
j
()(
∫d
 % (
Àngth
 - 
i
)) + i;

592 
∫d
 % 3)

595 
tmp_size

di°r
[
j
].
key_size
;

596 
di°r
[
j
].
key_size
di°r[
i
].key_size;

597 
di°r
[
i
].
key_size

tmp_size
;

601 
tmp_off£t

di°r
[
j
].
key_off£t
;

602 
di°r
[
j
].
key_off£t
di°r[
i
].key_offset;

603 
di°r
[
i
].
key_off£t

tmp_off£t
;

607 
tmp_size

di°r
[
j
].
vÆue_size
;

608 
di°r
[
j
].
vÆue_size
di°r[
i
].value_size;

609 
di°r
[
i
].
vÆue_size

tmp_size
;

617  
EXIT_SUCCESS
;

618 
	}
}

628 
	$ms_buûd_di°r
()

630 
off£t
= 0;

631 
íd
= 0;

632 
key_˙t
= 0;

633 
vÆue_˙t
= 0;

634 
size_t
 
avîage_Àn
= 0;

635 
size_t
 
diff_Àn
= 0;

636 
size_t
 
°¨t_Àn
= 0;

637 
size_t
 
íd_Àn
= 0;

638 
∫d
= 0;

639 
ms_di°r_t
 *
di°r

NULL
;

640 
unôs
()
ms_£âög
.
wö_size
 / 
UNIT_ITEMS_COUNT
;

643 
	`ms_ˇlc_avg_size
();

645 
ms_£âög
.
ch¨_blk_size

RAND_CHAR_SIZE
;

646 
key_sc›e_size
=

647 ()((
ms_£âög
.
ch¨_blk_size
 - 
RESERVED_RAND_CHAR_SIZE
)

648 / 
UNIT_ITEMS_COUNT
);

650 
ms_£âög
.
di°r
(
ms_di°r_t
 *)
	`mÆloc
(

651 (
ms_di°r_t
Ë* 
ms_£âög
.
wö_size
);

652 i‡(
ms_£âög
.
di°r
 =
NULL
)

654 
	`Ârötf
(
°dîr
, "Can'tállocate distributionárray.");

655 
	`exô
(1);

663 
m
0; m < 
unôs
; m++)

665 
i
0; i < 
UNIT_ITEMS_COUNT
; i++)

667 
ms_£âög
.
di°r
[
m
 * 
UNIT_ITEMS_COUNT
 + 
i
].
key_off£t
=

668 
	`ADDR_ALIGN
(
key_sc›e_size
 * 
i
);

673 
m
0; m < 
unôs
; m++)

675 
j
0; j < 
ms_£âög
.
key_∫g_˙t
; j++)

677 
key_˙t
()(
UNIT_ITEMS_COUNT
 * 
ms_£âög
.
key_di°r
[
j
].
key_¥›
);

678 
°¨t_Àn

ms_£âög
.
key_di°r
[
j
].start_len;

679 
íd_Àn

ms_£âög
.
key_di°r
[
j
].end_len;

680 i‡((
°¨t_Àn
 < 
MIN_KEY_SIZE
Ë|| (
íd_Àn
 < MIN_KEY_SIZE))

682 
	`Ârötf
(
°dîr
, "keyÜength must be greaterÅhan 16 bytes.\n");

683 
	`exô
(1);

686 i‡(! 
ms_£âög
.
bö¨y_¥Ÿ


687 && ((
°¨t_Àn
 > 
MAX_KEY_SIZE
Ë|| (
íd_Àn
 > MAX_KEY_SIZE)))

689 
	`Ârötf
(
°dîr
, "keyÜength must beÜessÅhan 250 bytes.\n");

690 
	`exô
(1);

693 
avîage_Àn
(
°¨t_Àn
 + 
íd_Àn
) / 2;

694 
diff_Àn
(
íd_Àn
 - 
°¨t_Àn
) / 2;

695 
k
0; k < 
key_˙t
; k++)

697 i‡(
off£t
 >(
m
 + 1Ë* 
UNIT_ITEMS_COUNT
)

701 
∫d
()
	`øndom
();

702 i‡(
k
 % 2 == 0)

704 
ms_£âög
.
di°r
[
off£t
].
key_size
=

705 (
diff_Àn
 =0Ë? 
avîage_Àn
 :

706 
avîage_Àn
 + (
size_t
)
∫d


707 % 
diff_Àn
;

711 
ms_£âög
.
di°r
[
off£t
].
key_size
=

712 (
diff_Àn
 =0Ë? 
avîage_Àn
 :

713 
avîage_Àn
 - (
size_t
)
∫d


714 % 
diff_Àn
;

716 
off£t
++;

720 i‡(
off£t
 < (
m
 + 1Ë* 
UNIT_ITEMS_COUNT
)

722 
íd
(
m
 + 1Ë* 
UNIT_ITEMS_COUNT
 - 
off£t
;

723 
i
0; i < 
íd
; i++)

725 
ms_£âög
.
di°r
[
off£t
].
key_size
ms_£âög.
avg_key_size
;

726 
off£t
++;

730 
off£t
= 0;

733 i‡(
ms_£âög
.
fixed_vÆue_size
 != 0)

735 
i
0; i < 
unôs
 * 
UNIT_ITEMS_COUNT
; i++)

737 
ms_£âög
.
di°r
[
i
].
vÆue_size
ms_£âög.
fixed_vÆue_size
;

742 
m
0; m < 
unôs
; m++)

744 
j
0; j < 
ms_£âög
.
vÆ_∫g_˙t
; j++)

746 
vÆue_˙t
=

747 ()(
UNIT_ITEMS_COUNT
 * 
ms_£âög
.
vÆue_di°r
[
j
].
vÆue_¥›
);

748 
°¨t_Àn

ms_£âög
.
vÆue_di°r
[
j
].start_len;

749 
íd_Àn

ms_£âög
.
vÆue_di°r
[
j
].end_len;

750 i‡((
°¨t_Àn
 <0Ë|| (
íd_Àn
 <= 0))

752 
	`Ârötf
(
°dîr
, "valueÜength must be greaterÅhan 0 bytes.\n");

753 
	`exô
(1);

756 i‡((
°¨t_Àn
 > 
MAX_VALUE_SIZE
Ë|| (
íd_Àn
 > MAX_VALUE_SIZE))

758 
	`Ârötf
(
°dîr
, "keyÜength must beÜessÅhan orÉqualÅo 1M.\n");

759 
	`exô
(1);

762 
avîage_Àn
(
°¨t_Àn
 + 
íd_Àn
) / 2;

763 
diff_Àn
(
íd_Àn
 - 
°¨t_Àn
) / 2;

764 
k
0; k < 
vÆue_˙t
; k++)

766 i‡(
off£t
 >(
m
 + 1Ë* 
UNIT_ITEMS_COUNT
)

770 
∫d
()
	`øndom
();

771 i‡(
k
 % 2 == 0)

773 
ms_£âög
.
di°r
[
off£t
].
vÆue_size
=

774 (
diff_Àn
 =0Ë? 
avîage_Àn
 :

775 
avîage_Àn


776 + (
size_t
)
∫d
 % 
diff_Àn
;

780 
ms_£âög
.
di°r
[
off£t
].
vÆue_size
=

781 (
diff_Àn
 =0Ë? 
avîage_Àn
 :

782 
avîage_Àn


783 - (
size_t
)
∫d
 % 
diff_Àn
;

785 
off£t
++;

789 i‡(
off£t
 < (
m
 + 1Ë* 
UNIT_ITEMS_COUNT
)

791 
íd
(
m
 + 1Ë* 
UNIT_ITEMS_COUNT
 - 
off£t
;

792 
i
0; i < 
íd
; i++)

794 
ms_£âög
.
di°r
[
off£t
++].
vÆue_size
ms_£âög.
avg_vÆ_size
;

801 
i
0; i < 
unôs
; i++)

803 
di°r
&
ms_£âög
.di°r[
i
 * 
UNIT_ITEMS_COUNT
];

804 
j
= 0; j < 4; j++)

806 
	`ms_shufÊe_di°r
(
di°r
, 
UNIT_ITEMS_COUNT
);

809 
	}
}

819 
	$ms_öô_øndom_block
()

821 *
±r

NULL
;

823 
	`as£π
(
ms_£âög
.
ch¨_blk_size
 > 0);

825 
ms_£âög
.
ch¨_block
(*)
	`mÆloc
(ms_£âög.
ch¨_blk_size
);

826 i‡(
ms_£âög
.
ch¨_block
 =
NULL
)

828 
	`Ârötf
(
°dîr
, "Can'tállocate global char block.");

829 
	`exô
(1);

831 
±r

ms_£âög
.
ch¨_block
;

833 
i
0; (
size_t
)ò< 
ms_£âög
.
ch¨_blk_size
; i++)

835 *(
±r
++)
ALPHANUMBERICS
[
	`øndom
(Ë% 
CHAR_COUNT
];

837 
	}
}

844 
	$ms_¥öt_£âög
()

846 
	`Ârötf
(
°dout
, "£rvî†: %s\n", 
ms_£âög
.
§v_°r
);

847 
	`Ârötf
(
°dout
, "thªad†cou¡: %d\n", 
ms_£âög
.
¡hªads
);

848 
	`Ârötf
(
°dout
, "c⁄cuºícy: %d\n", 
ms_£âög
.
nc⁄ns
);

849 i‡(
ms_£âög
.
run_time
 > 0)

851 
	`Ârötf
(
°dout
, "ru¿time: %ds\n", 
ms_£âög
.
run_time
);

855 
	`Ârötf
(
°dout
, "execuãÇumbî: %" 
PRId64
 "\n", 
ms_£âög
.
exec_num
);

857 
	`Ârötf
(
°dout
, "wödow†size: %" 
PRId64
 "k\n",

858 (
öt64_t
)(
ms_£âög
.
wö_size
 / 1024));

859 
	`Ârötf
(
°dout
, "setÖroportion: set_prop=%.2f\n",

860 
ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
);

861 
	`Ârötf
(
°dout
, "getÖroportion: get_prop=%.2f\n",

862 
ms_£âög
.
cmd_di°r
[
CMD_GET
].
cmd_¥›
);

863 
	`fÊush
(
°dout
);

864 
	}
}

870 
	$ms_£âög_¶≠mode_öô_¥e
()

872 
ms_£âög
.
exec_num

DEFAULT_EXE_NUM
;

873 
ms_£âög
.
vîify_≥r˚¡

DEFAULT_VERIFY_RATE
;

874 
ms_£âög
.
exp_vî_≥r

DEFAULT_VERIFY_RATE
;

875 
ms_£âög
.
ovîwrôe_≥r˚¡

DEFAULT_OVERWRITE_RATE
;

876 
ms_£âög
.
mu…_key_num

DEFAULT_DIV
;

877 
ms_£âög
.
fixed_vÆue_size
= 0;

878 
ms_£âög
.
wö_size

DEFAULT_WINDOW_SIZE
;

879 
ms_£âög
.
udp

Ál£
;

880 
ms_£âög
.
ªc⁄√˘

Ál£
;

881 
ms_£âög
.
vîbo£

Ál£
;

882 
ms_£âög
.
Á˚book_ã°

Ál£
;

883 
ms_£âög
.
bö¨y_¥Ÿ

Ál£
;

884 
ms_£âög
.
°©_‰eq
= 0;

885 
ms_£âög
.
§v_°r

NULL
;

886 
ms_£âög
.
cfg_fûe

NULL
;

887 
ms_£âög
.
sock_≥r_c⁄n

DEFAULT_SOCK_PER_CONN
;

888 
ms_£âög
.
ex≥˘ed_çs
= 0;

889 
ms_£âög
.
ªp_wrôe_§v
= 0;

890 
	}
}

896 
	$ms_£âög_öô_¥e
()

898 
	`mem£t
(&
ms_£âög
, 0, (ms_setting));

901 
ms_£âög
.
n˝u

	`ms_gë_˝u_cou¡
();

902 
ms_£âög
.
¡hªads

DEFAULT_THREADS_NUM
;

903 
ms_£âög
.
nc⁄ns

DEFAULT_CONNS_NUM
;

904 
ms_£âög
.
run_time

DEFAULT_RUN_TIME
;

905 
ms_£âög
.
tŸÆ_§v_˙t

MCD_SRVS_NUM_INIT
;

906 
ms_£âög
.
£rvîs
(
ms_mcd_£rvî_t
 *)
	`mÆloc
(

907 (
size_t
)
ms_£âög
.
tŸÆ_§v_˙t


908 * (
ms_mcd_£rvî_t
));

909 i‡(
ms_£âög
.
£rvîs
 =
NULL
)

911 
	`Ârötf
(
°dîr
, "Can'tállocate servers structure.\n");

912 
	`exô
(1);

915 
	`ms_£âög_¶≠mode_öô_¥e
();

916 
	}
}

922 
	$ms_£âög_¶≠mode_öô_po°
()

924 
ms_£âög
.
tŸÆ_key_∫g_˙t

KEY_RANGE_COUNT_INIT
;

925 
ms_£âög
.
key_di°r
=

926 (
ms_key_di°r_t
 *)
	`mÆloc
((
size_t
)
ms_£âög
.
tŸÆ_key_∫g_˙t
 * (ms_key_distr_t));

928 i‡(
ms_£âög
.
key_di°r
 =
NULL
)

930 
	`Ârötf
(
°dîr
, "Can'tállocate key distribution structure.\n");

931 
	`exô
(1);

934 
ms_£âög
.
tŸÆ_vÆ_∫g_˙t

VALUE_RANGE_COUNT_INIT
;

936 
ms_£âög
.
vÆue_di°r
=

937 (
ms_vÆue_di°r_t
 *)
	`mÆloc
((
size_t
)
ms_£âög
.
tŸÆ_vÆ_∫g_˙t
 * ( ms_value_distr_t));

939 i‡(
ms_£âög
.
vÆue_di°r
 =
NULL
)

941 
	`Ârötf
(
°dîr
, "Can'tállocate value distribution structure.\n");

942 
	`exô
(1);

945 
	`ms_∑r£_cfg_fûe
(
ms_£âög
.
cfg_fûe
);

948 i‡((
ms_£âög
.
exec_num
 =0Ë&& (ms_£âög.
run_time
 != 0))

950 
ms_£âög
.
exec_num
(
öt64_t
)
MAX_EXEC_NUM
;

955 
ms_£âög
.
run_time
= 0;

958 i‡(
ms_£âög
.
ªp_wrôe_§v
 > 0)

961 
ms_£âög
.
ªc⁄√˘

åue
;

964 i‡(
ms_£âög
.
Á˚book_ã°
 && (ms_£âög.
mu…_key_num
 < 2))

966 
	`Ârötf
(
°dîr
, "facebookÅest must work with multi-get, "

969 
	`exô
(1);

972 i‡(
ms_£âög
.
Á˚book_ã°
 && ms_£âög.
udp
)

974 
	`Ârötf
(
°dîr
, "facebookÅest couldn't work with UDP.\n");

975 
	`exô
(1);

978 i‡(
ms_£âög
.
udp
 && (ms_£âög.
sock_≥r_c⁄n
 > 1))

980 
	`Ârötf
(
°dîr
, "UDP doesn't support multi-socks "

982 
	`exô
(1);

985 i‡((
ms_£âög
.
ªp_wrôe_§v
 > 0Ë&& (ms_£âög.
§v_˙t
 < 2))

987 
	`Ârötf
(
°dîr
, "Please specify 2 serversátÜeast forÑeplication\n");

988 
	`exô
(1);

991 i‡((
ms_£âög
.
ªp_wrôe_§v
 > 0)

992 && (
ms_£âög
.
§v_˙t
 < ms_£âög.
ªp_wrôe_§v
))

994 
	`Ârötf
(
°dîr
, "ServersÅo doÑeplication writing "

996 
	`exô
(1);

999 i‡(
ms_£âög
.
udp
 && (ms_£âög.
ªp_wrôe_§v
 > 0))

1001 
	`Ârötf
(
°dîr
, "UDP doesn't supportÑeplication.\n");

1002 
	`exô
(1);

1005 i‡(
ms_£âög
.
Á˚book_ã°
 && (ms_£âög.
ªp_wrôe_§v
 > 0))

1007 
	`Ârötf
(
°dîr
, "facebookÅest couldn't work withÑeplication.\n");

1008 
	`exô
(1);

1011 
	`ms_buûd_di°r
();

1014 
	`ms_öô_øndom_block
();

1015 
	`ms_¥öt_£âög
();

1016 
	}
}

1022 
	$ms_£âög_öô_po°
()

1024 
	`ms_gë_£rvîli°
(
ms_£âög
.
§v_°r
);

1025 
	`ms_£âög_¶≠mode_öô_po°
();

1026 
	}
}

1032 
	$ms_£âög_˛ónup
()

1034 i‡(
ms_£âög
.
di°r
 !
NULL
)

1036 
	`‰ì
(
ms_£âög
.
di°r
);

1039 i‡(
ms_£âög
.
ch¨_block
 !
NULL
)

1041 
	`‰ì
(
ms_£âög
.
ch¨_block
);

1044 i‡(
ms_£âög
.
§v_°r
 !
NULL
)

1046 
	`‰ì
(
ms_£âög
.
§v_°r
);

1049 i‡(
ms_£âög
.
cfg_fûe
 !
NULL
)

1051 
	`‰ì
(
ms_£âög
.
cfg_fûe
);

1054 i‡(
ms_£âög
.
£rvîs
 !
NULL
)

1056 
	`‰ì
(
ms_£âög
.
£rvîs
);

1059 i‡(
ms_£âög
.
key_di°r
 !
NULL
)

1061 
	`‰ì
(
ms_£âög
.
key_di°r
);

1064 i‡(
ms_£âög
.
vÆue_di°r
 !
NULL
)

1066 
	`‰ì
(
ms_£âög
.
vÆue_di°r
);

1068 
	}
}

	@clients/ms_setting.h

11 #i‚de‡
MS_SETTING_H


12 
	#MS_SETTING_H


	)

14 
	~"ms_mem¶≠.h
"

16 #ifde‡
__˝lu•lus


20 
	#MCD_SRVS_NUM_INIT
 8

	)

21 
	#MCD_HOST_LENGTH
 64

	)

22 
	#KEY_RANGE_COUNT_INIT
 8

	)

23 
	#VALUE_RANGE_COUNT_INIT
 8

	)

24 
	#PROP_ERROR
 0.001

	)

26 
	#MIN_KEY_SIZE
 16

	)

27 
	#MAX_KEY_SIZE
 250

	)

28 
	#MAX_VALUE_SIZE
 (1024 * 1024)

	)

31 
	#DEFAULT_CONGIF_STR
 \

38 "1 0.9"

	)

41 
	stokí_s


43 *
vÆue
;

44 
size_t
 
Àngth
;

45 } 
	ttokí_t
;

47 
	#MAX_TOKENS
 10

	)

50 
	smcd_£vî


52 
§v_ho°_«me
[
MCD_HOST_LENGTH
];

53 
§v_p‹t
;

56 vﬁ©ûê
uöt32_t
 
disc⁄n_˙t
;

57 vﬁ©ûê
uöt32_t
 
ªc⁄n_˙t
;

58 
timevÆ
 
disc⁄n_time
;

59 
timevÆ
 
ªc⁄n_time
;

60 } 
	tms_mcd_£rvî_t
;

63 
	sdi°r


65 
size_t
 
key_size
;

66 
key_off£t
;

67 
size_t
 
vÆue_size
;

68 } 
	tms_di°r_t
;

71 
	skey_di°r


73 
size_t
 
°¨t_Àn
;

74 
size_t
 
íd_Àn
;

75 
key_¥›
;

76 } 
	tms_key_di°r_t
;

79 
	svÆue_di°r


81 
size_t
 
°¨t_Àn
;

82 
size_t
 
íd_Àn
;

83 
vÆue_¥›
;

84 } 
	tms_vÆue_di°r_t
;

87 
	ecmd_ty≥


89 
CMD_SET
,

90 
CMD_GET
,

91 
CMD_NULL
,

92 } 
	tms_cmd_ty≥_t
;

95 
	ec⁄f_ty≥


97 
CONF_KEY
,

98 
CONF_VALUE
,

99 
CONF_CMD
,

100 
CONF_NULL
,

101 } 
	tms_c⁄f_ty≥_t
;

104 
	scmd_di°r


106 
ms_cmd_ty≥_t
 
cmd_ty≥
;

107 
cmd_¥›
;

108 } 
	tms_cmd_di°r_t
;

111 
	s£âög


113 
uöt32_t
 
n˝u
;

114 
uöt32_t
 
¡hªads
;

115 
uöt32_t
 
nc⁄ns
;

116 
öt64_t
 
exec_num
;

117 
run_time
;

119 
uöt32_t
 
ch¨_blk_size
;

120 *
ch¨_block
;

121 
ms_di°r_t
 *
di°r
;

123 *
§v_°r
;

124 *
cfg_fûe
;

126 
ms_mcd_£rvî_t
 *
£rvîs
;

127 
uöt32_t
 
tŸÆ_§v_˙t
;

128 
uöt32_t
 
§v_˙t
;

130 
ms_key_di°r_t
 *
key_di°r
;

131 
tŸÆ_key_∫g_˙t
;

132 
key_∫g_˙t
;

134 
ms_vÆue_di°r_t
 *
vÆue_di°r
;

135 
tŸÆ_vÆ_∫g_˙t
;

136 
vÆ_∫g_˙t
;

138 
ms_cmd_di°r_t
 
cmd_di°r
[
CMD_NULL
];

139 
cmd_u£d_cou¡
;

141 
size_t
 
fixed_vÆue_size
;

142 
size_t
 
avg_vÆ_size
;

143 
size_t
 
avg_key_size
;

145 
vîify_≥r˚¡
;

146 
exp_vî_≥r
;

147 
ovîwrôe_≥r˚¡
;

148 
mu…_key_num
;

149 
size_t
 
wö_size
;

150 
boﬁ
 
udp
;

151 
°©_‰eq
;

152 
boﬁ
 
ªc⁄√˘
;

153 
boﬁ
 
vîbo£
;

154 
boﬁ
 
Á˚book_ã°
;

155 
uöt32_t
 
sock_≥r_c⁄n
;

156 
boﬁ
 
bö¨y_¥Ÿ
;

157 
ex≥˘ed_çs
;

158 
uöt32_t
 
ªp_wrôe_§v
;

159 } 
	tms_£âög_°
;

161 
ms_£âög_°
 
ms_£âög
;

164 
ms_£âög_öô_¥e
();

168 
ms_£âög_öô_po°
();

172 
ms_£âög_˛ónup
();

175 
	#UNUSED_ARGUMENT
(
x
Ë()
	)
x

177 #ifde‡
__˝lu•lus


	@clients/ms_sigsegv.c

15 
	~"c⁄fig.h
"

17 
	~<mem‹y.h
>

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<sig«l.h
>

21 
	~<±hªad.h
>

23 
	~"ms_mem¶≠.h
"

24 
	~"ms_£âög.h
"

27 
ms_£tup_sig£gv
();

28 
ms_£tup_sigpùe
();

29 
ms_£tup_sigöt
();

33 
	$ms_sig«l_£gv
(
signum
, 
sigöfo_t
 *
öfo
, *
±r
)

35 
	`UNUSED_ARGUMENT
(
signum
);

36 
	`UNUSED_ARGUMENT
(
öfo
);

37 
	`UNUSED_ARGUMENT
(
±r
);

39 
	`±hªad_muãx_lock
(&
ms_globÆ
.
quô_muãx
);

40 
	`Ârötf
(
°dîr
, "Segmentation fault occurred.\nStackÅrace:\n");

41 
	`∑nd‹a_¥öt_ˇŒ°ack
(
°dîr
);

42 
	`Ârötf
(
°dîr
, "End of stackÅrace\n");

43 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
quô_muãx
);

44 
	`ab‹t
();

45 
	}
}

48 
	$ms_sig«l_öt
(
signum
, 
sigöfo_t
 *
öfo
, *
±r
)

50 
	`UNUSED_ARGUMENT
(
signum
);

51 
	`UNUSED_ARGUMENT
(
öfo
);

52 
	`UNUSED_ARGUMENT
(
±r
);

54 
	`±hªad_muãx_lock
(&
ms_globÆ
.
quô_muãx
);

55 
	`Ârötf
(
°dîr
, "SIGINT handled.\n");

56 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
quô_muãx
);

57 
	`exô
(1);

58 
	}
}

66 
	$ms_£tup_sig£gv
()

68 
siga˘i⁄
 
a˘i⁄
;

70 
	`mem£t
(&
a˘i⁄
, 0, (action));

71 
a˘i⁄
.
ß_siga˘i⁄

ms_sig«l_£gv
;

72 
a˘i⁄
.
ß_Êags

SA_SIGINFO
;

73 i‡(
	`siga˘i⁄
(
SIGSEGV
, &
a˘i⁄
, 
NULL
) < 0)

75 
	`≥º‹
("sigaction");

76  
EXIT_SUCCESS
;

80 
	}
}

88 
	$ms_£tup_sigpùe
()

91 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

94 
	}
}

102 
	$ms_£tup_sigöt
()

104 
siga˘i⁄
 
a˘i⁄_3
;

106 
	`mem£t
(&
a˘i⁄_3
, 0, (action_3));

107 
a˘i⁄_3
.
ß_siga˘i⁄

ms_sig«l_öt
;

108 
a˘i⁄_3
.
ß_Êags

SA_SIGINFO
;

109 i‡(
	`siga˘i⁄
(
SIGINT
, &
a˘i⁄_3
, 
NULL
) < 0)

111 
	`≥º‹
("sigaction");

112  
EXIT_SUCCESS
;

116 
	}
}

119 #i‚de‡
SIGSEGV_NO_AUTO_INIT


120 
__©åibuã
((
c⁄°ru˘‹
)Ë
	$ms_öô
()

122 
	`ms_£tup_sig£gv
();

123 
	`ms_£tup_sigpùe
();

124 
	`ms_£tup_sigöt
();

125 
	}
}

	@clients/ms_sigsegv.h

11 #i‚de‡
MS_SIGSEGV_H


12 
	#MS_SIGSEGV_H


	)

14 #ifde‡
__˝lu•lus


19 
ms_£tup_sig£gv
();

23 
ms_£tup_sigpùe
();

27 
ms_£tup_sigöt
();

30 #ifde‡
__˝lu•lus


	@clients/ms_stats.c

12 
	~"c⁄fig.h
"

14 
	~<öây≥s.h
>

15 
	~"ms_°©s.h
"

17 
	#¨øy_size
(
x
Ë((xË/ ((x)[0]))

	)

19 
ms_loˇl_log2
(
uöt64_t
 
vÆue
);

20 
uöt64_t
 
ms_gë_evíts
(
ms_°©_t
 *
°©
);

30 
	$ms_loˇl_log2
(
uöt64_t
 
vÆue
)

32 
ªsu…
= 0;

34 
ªsu…
 <63 && ((
uöt64_t
)1 <<Ñesu…Ë< 
vÆue
)

36 
ªsu…
++;

39  
ªsu…
;

40 
	}
}

49 
	$ms_öô_°©s
(
ms_°©_t
 *
°©
, c⁄° *
«me
)

51 
	`mem£t
(
°©
, 0, (*stat));

53 
°©
->
«me
= (*)name;

54 
°©
->
mö_time
(
uöt64_t
)-1;

55 
°©
->
max_time
= 0;

56 
°©
->
≥riod_mö_time
(
uöt64_t
)-1;

57 
°©
->
≥riod_max_time
= 0;

58 
°©
->
log_¥odu˘
= 0;

59 
°©
->
tŸÆ_time
= 0;

60 
°©
->
¥e_tŸÆ_time
= 0;

61 
°©
->
squ¨es
= 0;

62 
°©
->
¥e_squ¨es
= 0;

63 
°©
->
¥e_evíts
= 0;

64 
°©
->
¥e_log_¥odu˘
= 0;

65 
°©
->
gë_miss
= 0;

66 
°©
->
¥e_gë_miss
= 0;

67 
	}
}

77 
	$ms_ªc‹d_evít
(
ms_°©_t
 *
°©
, 
uöt64_t
 
tŸÆ_time
, 
gë_miss
)

79 
°©
->
tŸÆ_time
+=Åotal_time;

81 i‡(
tŸÆ_time
 < 
°©
->
mö_time
)

83 
°©
->
mö_time

tŸÆ_time
;

86 i‡(
tŸÆ_time
 > 
°©
->
max_time
)

88 
°©
->
max_time

tŸÆ_time
;

91 i‡(
tŸÆ_time
 < 
°©
->
≥riod_mö_time
)

93 
°©
->
≥riod_mö_time

tŸÆ_time
;

96 i‡(
tŸÆ_time
 > 
°©
->
≥riod_max_time
)

98 
°©
->
≥riod_max_time

tŸÆ_time
;

101 i‡(
gë_miss
)

103 
°©
->
gë_miss
++;

106 
°©
->
di°
[
	`ms_loˇl_log2
(
tŸÆ_time
)]++;

107 
°©
->
squ¨es
+()(
tŸÆ_time
 *Åotal_time);

109 i‡(
tŸÆ_time
 != 0)

111 
°©
->
log_¥odu˘
+
	`log
(()
tŸÆ_time
);

113 
	}
}

123 
uöt64_t
 
	$ms_gë_evíts
(
ms_°©_t
 *
°©
)

125 
uöt64_t
 
evíts
= 0;

127 
uöt32_t
 
i
0; i < 
	`¨øy_size
(
°©
->
di°
); i++)

129 
evíts
+
°©
->
di°
[
i
];

132  
evíts
;

133 
	}
}

141 
	$ms_dump_°©s
(
ms_°©_t
 *
°©
)

143 
uöt64_t
 
evíts
= 0;

144 
max_n⁄_zîo
= 0;

145 
mö_n⁄_zîo
= 0;

146 
avîage
= 0;

148 
uöt32_t
 
i
0; i < 
	`¨øy_size
(
°©
->
di°
); i++)

150 
evíts
+
°©
->
di°
[
i
];

151 i‡(
°©
->
di°
[
i
] != 0)

153 
max_n⁄_zîo
()
i
;

157 i‡(
evíts
 == 0)

161 
avîage
()(
°©
->
tŸÆ_time
 / 
evíts
);

163 
	`¥ötf
("%†Sèti°ic†(%ŒdÉvíts)\n", 
°©
->
«me
, ()
evíts
);

164 
	`¥ötf
(" Mö: %8Œd\n", ()
°©
->
mö_time
);

165 
	`¥ötf
(" Max: %8Œd\n", ()
°©
->
max_time
);

166 
	`¥ötf
(" Avg: %8Œd\n", ()(
°©
->
tŸÆ_time
 / 
evíts
));

167 
	`¥ötf
(" Geo: %8.2lf\n", 
	`exp
(
°©
->
log_¥odu˘
 / ()
evíts
));

169 i‡(
evíts
 > 1)

171 
	`¥ötf
(" Std: %8.2lf\n",

172 
	`sqπ
((
°©
->
squ¨es
 - ()
evíts
 * 
avîage


173 * 
avîage
Ë/ (()
evíts
 - 1)));

175 
	`¥ötf
(" Log2 Dist:");

177 
i
0; i <
max_n⁄_zîo
 - 4; i+= 4)

179 i‡((
°©
->
di°
[
i
 + 0] != 0)

180 || (
°©
->
di°
[
i
 + 1] != 0)

181 || (
°©
->
di°
[
i
 + 2] != 0)

182 || (
°©
->
di°
[
i
 + 3] != 0))

184 
mö_n⁄_zîo

i
;

189 
i

mö_n⁄_zîo
; i <
max_n⁄_zîo
; i++)

191 i‡((
i
 % 4) == 0)

193 
	`¥ötf
("\¿ %2d:", ()
i
);

195 
	`¥ötf
(" %6" 
PRIu64
 , 
°©
->
di°
[
i
]);

198 
	`¥ötf
("\n\n");

199 
	}
}

210 
	$ms_dump_f‹m©_°©s
(
ms_°©_t
 *
°©
,

211 
run_time
,

212 
‰eq
,

213 
obj_size
)

215 
uöt64_t
 
evíts
= 0;

216 
globÆ_avîage
= 0;

217 
uöt64_t
 
globÆ_çs
= 0;

218 
globÆ_øã
= 0;

219 
globÆ_°d
= 0;

220 
globÆ_log
= 0;

222 
uöt64_t
 
diff_time
= 0;

223 
uöt64_t
 
diff_evíts
= 0;

224 
diff_squ¨es
= 0;

225 
diff_log_¥odu˘
= 0;

226 
≥riod_avîage
= 0;

227 
uöt64_t
 
≥riod_çs
= 0;

228 
≥riod_øã
= 0;

229 
≥riod_°d
= 0;

230 
≥riod_log
= 0;

232 i‡((
evíts

	`ms_gë_evíts
(
°©
)) == 0)

237 
globÆ_avîage
()(
°©
->
tŸÆ_time
 / 
evíts
);

238 
globÆ_çs

evíts
 / (
uöt64_t
)
run_time
;

239 
globÆ_øã
()
evíts
 * 
obj_size
 / 1024 / 1024 / 
run_time
;

240 
globÆ_°d

	`sqπ
((
°©
->
squ¨es
 - ()
evíts
 * 
globÆ_avîage


241 * 
globÆ_avîage
Ë/ ()(
evíts
 - 1));

242 
globÆ_log

	`exp
(
°©
->
log_¥odu˘
 / ()
evíts
);

244 
diff_time

°©
->
tŸÆ_time
 - sèt->
¥e_tŸÆ_time
;

245 
diff_evíts

evíts
 - 
°©
->
¥e_evíts
;

246 i‡(
diff_evíts
 >= 1)

248 
≥riod_avîage
()(
diff_time
 / 
diff_evíts
);

249 
≥riod_çs

diff_evíts
 / (
uöt64_t
)
‰eq
;

250 
≥riod_øã
()
diff_evíts
 * 
obj_size
 / 1024 / 1024 / 
‰eq
;

251 
diff_squ¨es
()
°©
->
squ¨es
 - ()°©->
¥e_squ¨es
;

252 
≥riod_°d

	`sqπ
((
diff_squ¨es
 - ()
diff_evíts
 * 
≥riod_avîage


253 * 
≥riod_avîage
Ë/ ()(
diff_evíts
 - 1));

254 
diff_log_¥odu˘

°©
->
log_¥odu˘
 - sèt->
¥e_log_¥odu˘
;

255 
≥riod_log

	`exp
(
diff_log_¥odu˘
 / ()
diff_evíts
);

258 
	`¥ötf
("%†Sèti°ics\n", 
°©
->
«me
);

259 
	`¥ötf
("%-8s %-8s %-12s %-12s %-10s %-10s %-8s %-10s %-10s %-10s %-10s\n",

272 
	`¥ötf
(

275 
‰eq
,

276 ()
diff_evíts
,

277 ()
≥riod_çs
,

278 
globÆ_øã
,

279 ()(
°©
->
gë_miss
 - sèt->
¥e_gë_miss
),

280 ()
°©
->
≥riod_mö_time
,

281 ()
°©
->
≥riod_max_time
,

282 ()
≥riod_avîage
,

283 
≥riod_°d
,

284 
≥riod_log
);

286 
	`¥ötf
(

289 
run_time
,

290 ()
evíts
,

291 ()
globÆ_çs
,

292 
≥riod_øã
,

293 ()
°©
->
gë_miss
,

294 ()
°©
->
mö_time
,

295 ()
°©
->
max_time
,

296 ()
globÆ_avîage
,

297 
globÆ_°d
,

298 
globÆ_log
);

300 
°©
->
¥e_evíts

evíts
;

301 
°©
->
¥e_squ¨es
(
uöt64_t
)°©->
squ¨es
;

302 
°©
->
¥e_tŸÆ_time
°©->
tŸÆ_time
;

303 
°©
->
¥e_log_¥odu˘
°©->
log_¥odu˘
;

304 
°©
->
≥riod_mö_time
(
uöt64_t
)-1;

305 
°©
->
≥riod_max_time
= 0;

306 
°©
->
¥e_gë_miss
°©->
gë_miss
;

307 
	}
}

	@clients/ms_stats.h

11 #i‚de‡
MS_STAT_H


12 
	#MS_STAT_H


	)

14 
	~<m©h.h
>

15 
	~<uni°d.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°döt.h
>

19 
	~<°rög.h
>

21 #ifde‡
__˝lu•lus


28 *
«me
;

29 
uöt64_t
 
tŸÆ_time
;

30 
uöt64_t
 
mö_time
;

31 
uöt64_t
 
max_time
;

32 
uöt64_t
 
gë_miss
;

33 
uöt64_t
 
di°
[65];

34 
squ¨es
;

35 
log_¥odu˘
;

37 
uöt64_t
 
≥riod_mö_time
;

38 
uöt64_t
 
≥riod_max_time
;

39 
uöt64_t
 
¥e_gë_miss
;

40 
uöt64_t
 
¥e_evíts
;

41 
uöt64_t
 
¥e_tŸÆ_time
;

42 
uöt64_t
 
¥e_squ¨es
;

43 
¥e_log_¥odu˘
;

44 } 
	tms_°©_t
;

47 
ms_öô_°©s
(
ms_°©_t
 *
°©
, c⁄° *
«me
);

51 
ms_ªc‹d_evít
(
ms_°©_t
 *
°©
, 
uöt64_t
 
time
, 
gë_miss
);

55 
ms_dump_°©s
(
ms_°©_t
 *
°©
);

59 
ms_dump_f‹m©_°©s
(
ms_°©_t
 *
°©
,

60 
run_time
,

61 
‰eq
,

62 
obj_size
);

65 #ifde‡
__˝lu•lus


	@clients/ms_task.c

12 
	~"c⁄fig.h
"

14 
	~<öây≥s.h
>

15 #i‡
TIME_WITH_SYS_TIME


16 
	~<sys/time.h
>

17 
	~<time.h
>

19 #i‡
HAVE_SYS_TIME_H


20 
	~<sys/time.h
>

22 
	~<time.h
>

26 
	~"ms_thªad.h
"

27 
	~"ms_£âög.h
"

28 
	~"ms_©omic.h
"

31 
	#CMD_DISTR_ADJUST_CYCLE
 1000

	)

32 
	#DISADJUST_FACTOR
 0.03

	)

40 
ms_èsk_ôem_t
 *
ms_gë_cur_›t_ôem
(
ms_c⁄n_t
 *
c
);

41 
ms_èsk_ôem_t
 *
ms_gë_√xt_gë_ôem
(
ms_c⁄n_t
 *
c
);

42 
ms_èsk_ôem_t
 *
ms_gë_√xt_£t_ôem
(
ms_c⁄n_t
 *
c
);

43 
ms_èsk_ôem_t
 *
ms_gë_øndom_ovîwrôe_ôem
(
ms_c⁄n_t
 *
c
);

47 
ms_£À˘_›t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_t
 *
èsk
);

51 
boﬁ
 
ms_is_£t_too_Á°
(
ms_èsk_t
 *
èsk
);

52 
boﬁ
 
ms_is_gë_too_Á°
(
ms_èsk_t
 *
èsk
);

53 
ms_kick_out_ôem
(
ms_èsk_ôem_t
 *
ôem
);

57 
boﬁ
 
ms_√ed_ovîwrôe_ôem
(
ms_èsk_t
 *
èsk
);

58 
boﬁ
 
ms_adju°_›t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_t
 *
èsk
);

62 
ms_èsk_d©a_vîify_öô
(
ms_èsk_t
 *
èsk
);

63 
ms_èsk_expúe_vîify_öô
(
ms_èsk_t
 *
èsk
);

67 
ms_èsk_t
 *
ms_gë_èsk
(
ms_c⁄n_t
 *
c
, 
boﬁ
 
w¨mup
);

71 
ms_upd©e_£t_ªsu…
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

72 
ms_upd©e_°©_ªsu…
(
ms_c⁄n_t
 *
c
);

73 
ms_upd©e_mu…i_gë_ªsu…
(
ms_c⁄n_t
 *
c
);

74 
ms_upd©e_sögÀ_gë_ªsu…
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
);

75 
ms_upd©e_èsk_ªsu…
(
ms_c⁄n_t
 *
c
);

76 
ms_sögÀ_gë£t_èsk_sch
(
ms_c⁄n_t
 *
c
);

77 
ms_mu…i_gë£t_èsk_sch
(
ms_c⁄n_t
 *
c
);

78 
ms_£nd_sig«l
(
ms_sync_lock_t
 *
sync_lock
);

79 
ms_w¨mup_£rvî
(
ms_c⁄n_t
 *
c
);

80 
ms_run_gë£t_èsk
(
ms_c⁄n_t
 *
c
);

90 
ms_èsk_ôem_t
 *
	$ms_gë_cur_›t_ôem
(
ms_c⁄n_t
 *
c
)

92  
c
->
cuº_èsk
.
ôem
;

93 
	}
}

104 
ms_èsk_ôem_t
 *
	$ms_gë_√xt_gë_ôem
(
ms_c⁄n_t
 *
c
)

106 
ms_èsk_ôem_t
 *
ôem

NULL
;

108 i‡(
c
->
£t_curs‹
 <= 0)

111 
ôem
&
c
->
ôem_wö
[0];

113 i‡(
c
->
£t_curs‹
 > 0 && c->£t_curs‹ < (
uöt32_t
)c->
wö_size
)

116 
ôem
&
c
->
ôem_wö
[
	`øndom
(Ë% (
öt64_t
)c->
£t_curs‹
];

121 
ôem
&
c
->
ôem_wö
[
	`øndom
(Ë% c->
wö_size
];

124  
ôem
;

125 
	}
}

136 
ms_èsk_ôem_t
 *
	$ms_gë_√xt_£t_ôem
(
ms_c⁄n_t
 *
c
)

143  &
c
->
ôem_wö
[(
öt64_t
)c->
£t_curs‹
 % c->
wö_size
];

144 
	}
}

157 
ms_èsk_ôem_t
 *
	$ms_gë_øndom_ovîwrôe_ôem
(
ms_c⁄n_t
 *
c
)

159  
	`ms_gë_√xt_gë_ôem
(
c
);

160 
	}
}

169 
	$ms_£À˘_›t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_t
 *
èsk
)

171 
gë_¥›

ms_£âög
.
cmd_di°r
[
CMD_GET
].
cmd_¥›
;

172 
£t_¥›

ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
;

175 i‡((
èsk
->
cy˛e_undo_gë
 =0Ë|| (èsk->
cy˛e_undo_£t
 == 0))

177 
èsk
->
cy˛e_undo_gë
+()(
CMD_DISTR_ADJUST_CYCLE
 * 
gë_¥›
);

178 
èsk
->
cy˛e_undo_£t
+()(
CMD_DISTR_ADJUST_CYCLE
 * 
£t_¥›
);

186 i‡((
£t_¥›
 > 
PROP_ERROR
)

187 && (()
èsk
->
gë_›t
 * 
£t_¥›
 >(Èask->
£t_›t


188 * 
gë_¥›
))

190 
èsk
->
cmd

CMD_SET
;

191 
èsk
->
ôem

	`ms_gë_√xt_£t_ôem
(
c
);

195 
èsk
->
cmd

CMD_GET
;

196 
èsk
->
ôem

	`ms_gë_√xt_gë_ôem
(
c
);

198 
	}
}

209 
boﬁ
 
	$ms_is_gë_too_Á°
(
ms_èsk_t
 *
èsk
)

211 
gë_¥›

ms_£âög
.
cmd_di°r
[
CMD_GET
].
cmd_¥›
;

212 
£t_¥›

ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
;

215 i‡(
gë_¥›
 < 
PROP_ERROR
)

217  
Ál£
;

220 
max_undo_£t
()(
£t_¥›
 / 
gë_¥›
 * (1.0 + 
DISADJUST_FACTOR
))

221 * 
èsk
->
cy˛e_undo_gë
;

223 i‡((()
èsk
->
gë_›t
 * 
£t_¥›
 > (Èask->
£t_›t
 * 
gë_¥›
)

224 && (
èsk
->
cy˛e_undo_£t
 > 
max_undo_£t
))

226  
åue
;

229  
Ál£
;

230 
	}
}

241 
boﬁ
 
	$ms_is_£t_too_Á°
(
ms_èsk_t
 *
èsk
)

243 
gë_¥›

ms_£âög
.
cmd_di°r
[
CMD_GET
].
cmd_¥›
;

244 
£t_¥›

ms_£âög
.
cmd_di°r
[
CMD_SET
].
cmd_¥›
;

247 i‡(
£t_¥›
 < 
PROP_ERROR
)

249  
Ál£
;

253 
max_undo_gë
()((
gë_¥›
 / 
£t_¥›
 * (1.0 + 
DISADJUST_FACTOR
))

254 * ()
èsk
->
cy˛e_undo_£t
);

256 i‡((()
èsk
->
gë_›t
 * 
£t_¥›
 < (Èask->
£t_›t
 * 
gë_¥›
)

257 && (
èsk
->
cy˛e_undo_gë
 > 
max_undo_gë
))

259  
åue
;

262  
Ál£
;

263 
	}
}

276 
	$ms_kick_out_ôem
(
ms_èsk_ôem_t
 *
ôem
)

279 
ôem
->
key_¥efix

	`ms_gë_key_¥efix
();

281 
ôem
->
key_suffix_off£t
++;

282 
ôem
->
vÆue_off£t

INVALID_OFFSET
;

283 
ôem
->
˛õ¡_time
= 0;

284 
	}
}

296 
boﬁ
 
	$ms_√ed_ovîwrôe_ôem
(
ms_èsk_t
 *
èsk
)

298 
ms_èsk_ôem_t
 *
ôem

èsk
->item;

300 
	`as£π
(
ôem
 !
NULL
);

301 
	`as£π
(
èsk
->
cmd
 =
CMD_SET
);

307 i‡(
èsk
->
ovîwrôe_£t
 < (Èask->
£t_›t


308 * 
ms_£âög
.
ovîwrôe_≥r˚¡
)

310  
åue
;

313  
Ál£
;

314 
	}
}

328 
boﬁ
 
	$ms_adju°_›t
(
ms_c⁄n_t
 *
c
, 
ms_èsk_t
 *
èsk
)

330 
ms_èsk_ôem_t
 *
ôem

èsk
->item;

332 
	`as£π
(
ôem
 !
NULL
);

334 i‡(
èsk
->
cmd
 =
CMD_SET
)

337 i‡(
	`ms_is_£t_too_Á°
(
èsk
))

340 i‡(
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
)

342 
èsk
->
cmd

CMD_GET
;

343  
åue
;

348 i‡(
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
)

350 i‡(
	`ms_√ed_ovîwrôe_ôem
(
èsk
))

353 
èsk
->
ovîwrôe_£t
++;

358 
	`ms_kick_out_ôem
(
ôem
);

364 i‡(
	`ms_√ed_ovîwrôe_ôem
(
èsk
))

370 
c
->
£t_curs‹
--;

372 
ôem

	`ms_gë_øndom_ovîwrôe_ôem
(
c
);

373 i‡(
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
)

375 
èsk
->
ôem
= item;

376 
èsk
->
ovîwrôe_£t
++;

381 
èsk
->
ôem
= item;

385 
èsk
->
cmd

CMD_SET
;

386  
åue
;

390 i‡(
ôem
->
vÆue_off£t
 =
INVALID_OFFSET
)

392 
èsk
->
cmd

CMD_SET
;

393  
åue
;

400 i‡(
	`ms_is_gë_too_Á°
(
èsk
))

403 i‡(! 
	`ms_is_£t_too_Á°
(
èsk
))

405 
	`ms_kick_out_ôem
(
ôem
);

406 
èsk
->
cmd

CMD_SET
;

407  
åue
;

411  
Ál£
;

415 
	`as£π
(
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
);

417 
èsk
->
cmd

CMD_GET
;

418  
åue
;

420 
	}
}

428 
	$ms_èsk_d©a_vîify_öô
(
ms_èsk_t
 *
èsk
)

430 
ms_èsk_ôem_t
 *
ôem

èsk
->item;

432 
	`as£π
(
ôem
 !
NULL
);

433 
	`as£π
(
èsk
->
cmd
 =
CMD_GET
);

439 i‡(
èsk
->
vîifõd_gë
 < (Èask->
gë_›t


440 * 
ms_£âög
.
vîify_≥r˚¡
)

446 i‡((
èsk
->
ôem
->
vÆue_off£t
 !
INVALID_OFFSET
)

447 && (
ôem
->
exp_time
 == 0))

449 
èsk
->
vîify

åue
;

450 
èsk
->
föish_vîify

Ál£
;

451 
èsk
->
vîifõd_gë
++;

454 
	}
}

462 
	$ms_èsk_expúe_vîify_öô
(
ms_èsk_t
 *
èsk
)

464 
ms_èsk_ôem_t
 *
ôem

èsk
->item;

466 
	`as£π
(
ôem
 !
NULL
);

467 
	`as£π
(
èsk
->
cmd
 =
CMD_GET
);

468 
	`as£π
(
ôem
->
exp_time
 > 0);

470 
èsk
->
vîify

åue
;

471 
èsk
->
föish_vîify

Ál£
;

472 
	}
}

485 
ms_èsk_t
 *
	$ms_gë_èsk
(
ms_c⁄n_t
 *
c
, 
boﬁ
 
w¨mup
)

487 
ms_èsk_t
 *
èsk
&
c
->
cuº_èsk
;

491 
èsk
->
vîify

Ál£
;

492 
èsk
->
föish_vîify

åue
;

493 
èsk
->
gë_miss

åue
;

495 i‡(
w¨mup
)

497 
èsk
->
cmd

CMD_SET
;

498 
èsk
->
ôem

	`ms_gë_√xt_£t_ôem
(
c
);

500  
èsk
;

504 
	`ms_£À˘_›t
(
c
, 
èsk
);

506 i‡(! 
	`ms_adju°_›t
(
c
, 
èsk
))

511 i‡((
ms_£âög
.
vîify_≥r˚¡
 > 0Ë&& (
èsk
->
cmd
 =
CMD_GET
))

513 
	`ms_èsk_d©a_vîify_öô
(
èsk
);

516 i‡((
ms_£âög
.
exp_vî_≥r
 > 0Ë&& (
èsk
->
cmd
 =
CMD_GET
)

517 && (
èsk
->
ôem
->
exp_time
 > 0))

519 
	`ms_èsk_expúe_vîify_öô
(
èsk
);

529 i‡(
èsk
->
cmd
 =
CMD_GET
)

531 
èsk
->
gë_›t
++;

532 
èsk
->
cy˛e_undo_gë
--;

535  
èsk
;

536 
	}
}

544 
	$ms_£nd_sig«l
(
ms_sync_lock_t
 *
sync_lock
)

546 
	`±hªad_muãx_lock
(&
sync_lock
->
lock
);

547 
sync_lock
->
cou¡
++;

548 
	`±hªad_c⁄d_sig«l
(&
sync_lock
->
c⁄d
);

549 
	`±hªad_muãx_u∆ock
(&
sync_lock
->
lock
);

550 
	}
}

560 
	$ms_w¨mup_£rvî
(
ms_c⁄n_t
 *
c
)

562 
ms_èsk_t
 *
èsk
;

563 
ms_èsk_ôem_t
 *
ôem
;

569 i‡((
c
->
ªmaö_w¨mup_num
 >= 0)

570 && (
c
->
ªmaö_w¨mup_num
 !c->
w¨mup_num
))

572 
ôem

	`ms_gë_cur_›t_ôem
(
c
);

574 i‡((
c
->
¥ecmd
.
cmd
 =
CMD_SET
Ë&& (c->¥ecmd.
ªt°©
 =
MCD_STORED
))

576 
ôem
->
vÆue_off£t
ôem->
key_suffix_off£t
;

578 
c
->
£t_curs‹
++;

580 i‡(
c
->
¥ecmd
.
cmd
 =
CMD_SET
 && c->¥ecmd.
ªt°©
 !
MCD_STORED
)

582 
	`¥ötf
("key: %" 
PRIx64
 " didn'à£àsuc˚ss\n", 
ôem
->
key_¥efix
);

587 i‡(
c
->
ªmaö_w¨mup_num
-- > 0)

590 
èsk

	`ms_gë_èsk
(
c
, 
åue
);

591 
ôem

èsk
->item;

592 
	`ms_mcd_£t
(
c
, 
ôem
);

600 i‡(
c
->
ªmaö_w¨mup_num
 == -1)

602 
	`ms_£nd_sig«l
(&
ms_globÆ
.
w¨mup_lock
);

603 
c
->
ªmaö_w¨mup_num
--;

605 
	}
}

613 
	$ms_sögÀ_gë£t_èsk_sch
(
ms_c⁄n_t
 *
c
)

615 
ms_èsk_t
 *
èsk
;

616 
ms_èsk_ôem_t
 *
ôem
;

619 i‡(
c
->
ªmaö_exec_num
-- > 0)

621 
èsk

	`ms_gë_èsk
(
c
, 
Ál£
);

622 
ôem

èsk
->item;

623 i‡(
èsk
->
cmd
 =
CMD_SET
)

625 
	`ms_mcd_£t
(
c
, 
ôem
);

627 i‡(
èsk
->
cmd
 =
CMD_GET
)

629 
	`as£π
(
èsk
->
cmd
 =
CMD_GET
);

630 
	`ms_mcd_gë
(
c
, 
ôem
);

633 
	}
}

641 
	$ms_mu…i_gë£t_èsk_sch
(
ms_c⁄n_t
 *
c
)

643 
ms_èsk_t
 *
èsk
;

644 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem
;

648 i‡(
c
->
ªmaö_exec_num
-- > 0)

650 
èsk

	`ms_gë_èsk
(
c
, 
Ál£
);

651 i‡(
èsk
->
cmd
 =
CMD_SET
)

653 
	`ms_mcd_£t
(
c
, 
èsk
->
ôem
);

658 
	`as£π
(
èsk
->
cmd
 =
CMD_GET
);

659 
mlgë_ôem
&
c
->
mlgë_èsk
.mlgë_ôem[c->mlgë_èsk.
mlgë_num
];

660 
mlgë_ôem
->
ôem

èsk
->item;

661 
mlgë_ôem
->
vîify

èsk
->verify;

662 
mlgë_ôem
->
föish_vîify

èsk
->finish_verify;

663 
mlgë_ôem
->
gë_miss

èsk
->get_miss;

664 
c
->
mlgë_èsk
.
mlgë_num
++;

667 i‡((
c
->
mlgë_èsk
.
mlgë_num
 >
ms_£âög
.
mu…_key_num
)

668 || ((
c
->
ªmaö_exec_num
 =0Ë&& (c->
mlgë_èsk
.
mlgë_num
 > 0)))

670 
	`ms_mcd_mlgë
(
c
);

677 i‡((
c
->
ªmaö_exec_num
 <0Ë&& (c->
mlgë_èsk
.
mlgë_num
 > 0))

679 
	`ms_mcd_mlgë
(
c
);

684 
	}
}

695 
öt64_t
 
	$ms_time_diff
(
timevÆ
 *
°¨t_time
, timevÆ *
íd_time
)

697 
öt64_t
 
ídtime

íd_time
->
tv_£c
 * 1000000 +Énd_time->
tv_u£c
;

698 
öt64_t
 
°¨âime

°¨t_time
->
tv_£c
 * 1000000 + sèπ_time->
tv_u£c
;

700 
	`as£π
(
ídtime
 >
°¨âime
);

702  
ídtime
 - 
°¨âime
;

703 
	}
}

713 
	$ms_upd©e_mu…i_gë_ªsu…
(
ms_c⁄n_t
 *
c
)

715 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem
;

716 
ms_èsk_ôem_t
 *
ôem
;

717 *
‹ignvÆ

NULL
;

718 *
‹ignkey

NULL
;

720 i‡(
c
 =
NULL
)

724 
	`as£π
(
c
 !
NULL
);

726 
i
0; i < 
c
->
mlgë_èsk
.
mlgë_num
; i++)

728 
mlgë_ôem
&
c
->
mlgë_èsk
.mlgë_ôem[
i
];

729 
ôem

mlgë_ôem
->item;

730 
‹ignvÆ
&
ms_£âög
.
ch¨_block
[
ôem
->
vÆue_off£t
];

731 
‹ignkey
&
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
];

734 i‡(
mlgë_ôem
->
gë_miss
)

736 
	`©omic_add_size
(&
ms_°©s
.
gë_mis£s
, 1);

740 i‡(
mlgë_ôem
->
vîify
 && ! mlgë_ôem->
föish_vîify
)

743 i‡(
ôem
->
exp_time
 > 0)

745 
timevÆ
 
cuº_time
;

746 
	`gëtimeofday
(&
cuº_time
, 
NULL
);

749 i‡(
cuº_time
.
tv_£c
 - 
ôem
->
˛õ¡_time


750 < 
ôem
->
exp_time
 - 
EXPIRE_TIME_ERROR
)

752 
	`©omic_add_size
(&
ms_°©s
.
u√xp_ungë
, 1);

754 i‡(
ms_£âög
.
vîbo£
)

756 
£t_time
[64];

757 
cur_time
[64];

758 
	`°r·ime
(
£t_time
, 64, "%Y-%m-%d %H:%M:%S",

759 
	`loˇ…ime
(&
ôem
->
˛õ¡_time
));

760 
	`°r·ime
(
cur_time
, 64, "%Y-%m-%d %H:%M:%S",

761 
	`loˇ…ime
(&
cuº_time
.
tv_£c
));

762 
	`Ârötf
(
°dîr
,

766 "\tkey: %" 
PRIx64
 " %.*s\n"

772 
c
->
sfd
,

773 
ôem
->
key_size
,

774 
ôem
->
key_¥efix
,

775 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

776 
‹ignkey
,

777 
£t_time
,

778 
cur_time
,

779 ()(
cuº_time
.
tv_£c
 - 
ôem
->
˛õ¡_time
),

780 
ôem
->
exp_time
,

781 
ôem
->
vÆue_size
,

782 
ôem
->
vÆue_size
,

783 
‹ignvÆ
);

784 
	`fÊush
(
°dîr
);

790 
	`©omic_add_size
(&
ms_°©s
.
vef_miss
, 1);

792 i‡(
ms_£âög
.
vîbo£
)

794 
	`Ârötf
(
°dîr
, "\n<%d data verification failed\n"

796 "\tkey: %" 
PRIx64
 " %.*s\n"

800 
c
->
sfd
, 
ôem
->
key_size
, iãm->
key_¥efix
,

801 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

802 
‹ignkey
, 
ôem
->
vÆue_size
, iãm->vÆue_size, 
‹ignvÆ
);

803 
	`fÊush
(
°dîr
);

808 
c
->
mlgë_èsk
.
mlgë_num
= 0;

809 
c
->
mlgë_èsk
.
vÆue_ödex

INVALID_OFFSET
;

810 
	}
}

822 
	$ms_upd©e_sögÀ_gë_ªsu…
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

824 *
‹ignvÆ

NULL
;

825 *
‹ignkey

NULL
;

827 i‡((
c
 =
NULL
Ë|| (
ôem
 == NULL))

831 
	`as£π
(
c
 !
NULL
);

832 
	`as£π
(
ôem
 !
NULL
);

834 
‹ignvÆ
&
ms_£âög
.
ch¨_block
[
ôem
->
vÆue_off£t
];

835 
‹ignkey
&
ms_£âög
.
ch¨_block
[
ôem
->
key_suffix_off£t
];

838 i‡((
c
->
¥ecmd
.
cmd
 =
CMD_GET
Ë&& c->
cuº_èsk
.
gë_miss
)

840 
	`©omic_add_size
(&
ms_°©s
.
gë_mis£s
, 1);

844 i‡((
c
->
¥ecmd
.
cmd
 =
CMD_GET
Ë&& c->
cuº_èsk
.
vîify


845 && ! 
c
->
cuº_èsk
.
föish_vîify
)

848 i‡(
ôem
->
exp_time
 > 0)

850 
timevÆ
 
cuº_time
;

851 
	`gëtimeofday
(&
cuº_time
, 
NULL
);

854 i‡(
cuº_time
.
tv_£c
 - 
ôem
->
˛õ¡_time


855 < 
ôem
->
exp_time
 - 
EXPIRE_TIME_ERROR
)

857 
	`©omic_add_size
(&
ms_°©s
.
u√xp_ungë
, 1);

859 i‡(
ms_£âög
.
vîbo£
)

861 
£t_time
[64];

862 
cur_time
[64];

863 
	`°r·ime
(
£t_time
, 64, "%Y-%m-%d %H:%M:%S",

864 
	`loˇ…ime
(&
ôem
->
˛õ¡_time
));

865 
	`°r·ime
(
cur_time
, 64, "%Y-%m-%d %H:%M:%S",

866 
	`loˇ…ime
(&
cuº_time
.
tv_£c
));

867 
	`Ârötf
(
°dîr
,

871 "\tkey: %" 
PRIx64
 " %.*s\n"

877 
c
->
sfd
,

878 
ôem
->
key_size
,

879 
ôem
->
key_¥efix
,

880 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

881 
‹ignkey
,

882 
£t_time
,

883 
cur_time
,

884 ()(
cuº_time
.
tv_£c
 - 
ôem
->
˛õ¡_time
),

885 
ôem
->
exp_time
,

886 
ôem
->
vÆue_size
,

887 
ôem
->
vÆue_size
,

888 
‹ignvÆ
);

889 
	`fÊush
(
°dîr
);

895 
	`©omic_add_size
(&
ms_°©s
.
vef_miss
, 1);

897 i‡(
ms_£âög
.
vîbo£
)

899 
	`Ârötf
(
°dîr
, "\n<%d data verification failed\n"

901 "\tkey: %" 
PRIx64
 " %.*s\n"

905 
c
->
sfd
, 
ôem
->
key_size
, iãm->
key_¥efix
,

906 
ôem
->
key_size
 - ()
KEY_PREFIX_SIZE
,

907 
‹ignkey
, 
ôem
->
vÆue_size
, iãm->vÆue_size, 
‹ignvÆ
);

908 
	`fÊush
(
°dîr
);

912 
	}
}

923 
	$ms_upd©e_£t_ªsu…
(
ms_c⁄n_t
 *
c
, 
ms_èsk_ôem_t
 *
ôem
)

925 i‡((
c
 =
NULL
Ë|| (
ôem
 == NULL))

929 
	`as£π
(
c
 !
NULL
);

930 
	`as£π
(
ôem
 !
NULL
);

932 i‡(
c
->
¥ecmd
.
cmd
 =
CMD_SET
)

934 
c
->
¥ecmd
.
ªt°©
)

936 
MCD_STORED
:

937 i‡(
ôem
->
vÆue_off£t
 =
INVALID_OFFSET
)

940 
ôem
->
vÆue_off£t
ôem->
key_suffix_off£t
;

945 
ôem
->
vÆue_off£t
+= 1;

949 
c
->
£t_curs‹
++;

950 
c
->
cuº_èsk
.
£t_›t
++;

951 
c
->
cuº_èsk
.
cy˛e_undo_£t
--;

954 
MCD_SERVER_ERROR
:

959 
	}
}

967 
	$ms_upd©e_°©_ªsu…
(
ms_c⁄n_t
 *
c
)

969 
boﬁ
 
gë_miss

Ál£
;

971 i‡(
c
 =
NULL
)

975 
	`as£π
(
c
 !
NULL
);

977 
	`gëtimeofday
(&
c
->
íd_time
, 
NULL
);

978 
uöt64_t
 
time_diff
(uöt64_t)
	`ms_time_diff
(&
c
->
°¨t_time
, &c->
íd_time
);

980 
	`±hªad_muãx_lock
(&
ms_°©i°ic
.
°©_muãx
);

982 
c
->
¥ecmd
.
cmd
)

984 
CMD_SET
:

985 
	`ms_ªc‹d_evít
(&
ms_°©i°ic
.
£t_°©
, 
time_diff
, 
Ál£
);

988 
CMD_GET
:

989 i‡(
c
->
cuº_èsk
.
gë_miss
)

991 
gë_miss

åue
;

993 
	`ms_ªc‹d_evít
(&
ms_°©i°ic
.
gë_°©
, 
time_diff
, 
gë_miss
);

1000 
	`ms_ªc‹d_evít
(&
ms_°©i°ic
.
tŸÆ_°©
, 
time_diff
, 
gë_miss
);

1001 
	`±hªad_muãx_u∆ock
(&
ms_°©i°ic
.
°©_muãx
);

1002 
	}
}

1012 
	$ms_upd©e_èsk_ªsu…
(
ms_c⁄n_t
 *
c
)

1014 
ms_èsk_ôem_t
 *
ôem
;

1016 i‡(
c
 =
NULL
)

1020 
	`as£π
(
c
 !
NULL
);

1022 
ôem

	`ms_gë_cur_›t_ôem
(
c
);

1023 i‡(
ôem
 =
NULL
)

1027 
	`as£π
(
ôem
 !
NULL
);

1029 
	`ms_upd©e_£t_ªsu…
(
c
, 
ôem
);

1031 i‡((
ms_£âög
.
°©_‰eq
 > 0)

1032 && ((
c
->
¥ecmd
.
cmd
 =
CMD_SET
Ë|| (c->¥ecmd.cmd =
CMD_GET
)))

1034 
	`ms_upd©e_°©_ªsu…
(
c
);

1038 i‡(((
ms_£âög
.
mu…_key_num
 > 1)

1039 && (
c
->
mlgë_èsk
.
mlgë_num
 >
ms_£âög
.
mu…_key_num
))

1040 || ((
c
->
ªmaö_exec_num
 =0Ë&& (c->
mlgë_èsk
.
mlgë_num
 > 0)))

1042 
	`ms_upd©e_mu…i_gë_ªsu…
(
c
);

1046 
	`ms_upd©e_sögÀ_gë_ªsu…
(
c
, 
ôem
);

1048 
	}
}

1058 
	$ms_run_gë£t_èsk
(
ms_c⁄n_t
 *
c
)

1064 i‡((
c
->
ªmaö_exec_num
 >= 0)

1065 && (
c
->
ªmaö_exec_num
 !c->
exec_num
))

1067 
	`ms_upd©e_èsk_ªsu…
(
c
);

1071 i‡(
ms_£âög
.
mu…_key_num
 > 1)

1074 
	`ms_mu…i_gë£t_èsk_sch
(
c
);

1079 
	`ms_sögÀ_gë£t_èsk_sch
(
c
);

1083 i‡((
c
->
ªmaö_exec_num
 =-1Ë|| 
ms_globÆ
.
time_out
)

1088  
EXIT_SUCCESS
;

1089 
	}
}

1099 
	$ms_exec_èsk
(
c⁄n
 *
c
)

1101 i‡(! 
ms_globÆ
.
föish_w¨mup
)

1103 
	`ms_w¨mup_£rvî
(
c
);

1107 i‡(
	`ms_run_gë£t_èsk
(
c
) != 0)

1113  
EXIT_SUCCESS
;

1114 
	}
}

	@clients/ms_task.h

11 #i‚de‡
MS_TASK_H


12 
	#MS_TASK_H


	)

14 
	~<sys/ty≥s.h
>

15 
	~<°döt.h
>

16 #i‡!
deföed
(
__˝lu•lus
)

17 
	~<°dboﬁ.h
>

19 
	~<time.h
>

21 #ifde‡
__˝lu•lus


25 
	#UNIT_ITEMS_COUNT
 1024

	)

26 
	#KEY_PREFIX_SIZE
 ((
uöt64_t
)Ë

	)

27 
	#INVALID_OFFSET
 (-1Ë

	)

28 
	#FIXED_EXPIRE_TIME
 60

	)

29 
	#EXPIRE_TIME_ERROR
 5

	)

32 
	sèsk_ôem


34 
uöt64_t
 
key_¥efix
;

35 
key_size
;

36 
key_suffix_off£t
;

38 
vÆue_size
;

39 
vÆue_off£t
;

41 
time_t
 
˛õ¡_time
;

42 
exp_time
;

43 } 
	tms_èsk_ôem_t
;

46 
	smlgë_èsk_ôem


48 
ms_èsk_ôem_t
 *
ôem
;

49 
boﬁ
 
vîify
;

50 
boﬁ
 
föish_vîify
;

51 
boﬁ
 
gë_miss
;

52 } 
	tms_mlgë_èsk_ôem_t
;

55 
	smlgë_èsk


57 
ms_mlgë_èsk_ôem_t
 *
mlgë_ôem
;

58 
mlgë_num
;

59 
vÆue_ödex
;

60 } 
	tms_mlgë_èsk_t
;

63 
	sèsk


65 
cmd
;

66 
boﬁ
 
vîify
;

67 
boﬁ
 
föish_vîify
;

68 
boﬁ
 
gë_miss
;

69 
ms_èsk_ôem_t
 *
ôem
;

72 
uöt64_t
 
gë_›t
;

73 
uöt64_t
 
£t_›t
;

74 
cy˛e_undo_gë
;

75 
cy˛e_undo_£t
;

76 
uöt64_t
 
vîifõd_gë
;

77 
uöt64_t
 
ovîwrôe_£t
;

78 } 
	tms_èsk_t
;

80 
c⁄n
;

83 
ms_exec_èsk
(
c⁄n
 *
c
);

87 
öt64_t
 
ms_time_diff
(
timevÆ
 *
°¨t_time
, timevÆ *
íd_time
);

90 #ifde‡
__˝lu•lus


	@clients/ms_thread.c

12 
	~"c⁄fig.h
"

14 #i‡
TIME_WITH_SYS_TIME


15 
	~<sys/time.h
>

16 
	~<time.h
>

18 #i‡
HAVE_SYS_TIME_H


19 
	~<sys/time.h
>

21 
	~<time.h
>

24 
	~"ms_thªad.h
"

25 
	~"ms_£âög.h
"

26 
	~"ms_©omic.h
"

29 
±hªad_key_t
 
	gms_thªad_key
;

32 
ms_thªad_˘x_t
 *
	gms_thªad_˘x
;

35 
ms_£t_cuºít_time
();

36 
ms_check_sock_timeout
();

37 
ms_˛ock_h™dÀr
(c⁄° 
fd
, c⁄° 
which
, *
¨g
);

38 
uöt32_t
 
ms_£t_thªad_˝u_afföôy
(uöt32_à
˝u
);

39 
ms_£tup_thªad
(
ms_thªad_˘x_t
 *
thªad_˘x
);

40 *
ms_w‹kî_libevít
(*
¨g
);

41 
ms_¸óã_w‹kî
(*(*
func
)(*), *
¨g
);

48 
	$ms_£t_cuºít_time
()

50 
timevÆ
 
timî
;

51 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

53 
	`gëtimeofday
(&
timî
, 
NULL
);

54 
ms_thªad
->
cuº_time
(
ªl_time_t
)
timî
.
tv_£c
;

55 
	}
}

62 
	$ms_check_sock_timeout
()

64 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

65 
ms_c⁄n_t
 *
c

NULL
;

66 
time_diff
= 0;

68 
uöt32_t
 
i
0; i < 
ms_thªad
->
thªad_˘x
->
nc⁄ns
; i++)

70 
c
&
ms_thªad
->
c⁄n
[
i
];

72 i‡(
c
->
udp
)

74 
time_diff
()(
ms_thªad
->
cuº_time
 - (
ªl_time_t
)
c
->
°¨t_time
.
tv_£c
);

77 i‡(
time_diff
 > 
SOCK_WAIT_TIMEOUT
)

80 i‡(
c
->
ªcvpkt
 > 0)

82 
	`©omic_add_size
(&
ms_°©s
.
pkt_dr›
, 
c
->
∑ckës
 - c->
ªcvpkt
);

85 
	`©omic_add_size
(&
ms_°©s
.
udp_timeout
, 1);

86 
	`ms_ª£t_c⁄n
(
c
, 
åue
);

90 
	}
}

94 
	$ms_ªc⁄n_thªad_socks
()

96 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

97 
uöt32_t
 
i
0; i < 
ms_thªad
->
thªad_˘x
->
nc⁄ns
; i++)

99 
	`ms_ªc⁄n_socks
(&
ms_thªad
->
c⁄n
[
i
]);

101 
	}
}

111 
	$ms_˛ock_h™dÀr
(c⁄° 
fd
, c⁄° 
which
, *
¨g
)

113 
ms_thªad_t
 *
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

114 
timevÆ
 
t
=

116 .
tv_£c
1, .
tv_u£c
= 0

119 
	`UNUSED_ARGUMENT
(
fd
);

120 
	`UNUSED_ARGUMENT
(
which
);

121 
	`UNUSED_ARGUMENT
(
¨g
);

123 
	`ms_£t_cuºít_time
();

125 i‡(
ms_thªad
->
öôülized
)

128 
	`evtimî_dñ
(&
ms_thªad
->
˛ock_evít
);

129 
	`ms_check_sock_timeout
();

133 
ms_thªad
->
öôülized

åue
;

136 
	`ms_ªc⁄n_thªad_socks
();

138 
	`evtimî_£t
(&
ms_thªad
->
˛ock_evít
, 
ms_˛ock_h™dÀr
, 0);

139 
	`evít_ba£_£t
(
ms_thªad
->
ba£
, &ms_thªad->
˛ock_evít
);

140 
	`evtimî_add
(&
ms_thªad
->
˛ock_evít
, &
t
);

141 
	}
}

151 
uöt32_t
 
	$ms_£t_thªad_˝u_afföôy
(
uöt32_t
 
˝u
)

153 
uöt32_t
 
ªt
= 0;

155 #ifde‡
HAVE_CPU_SET_T


156 
˝u_£t_t
 
˝u_£t
;

157 
	`CPU_ZERO
(&
˝u_£t
);

158 
	`CPU_SET
(
˝u
, &
˝u_£t
);

160 i‡(
	`sched_£èfföôy
(0, (
˝u_£t_t
), &
˝u_£t
) == -1)

162 
	`Ârötf
(
°dîr
, "WARNING: CouldÇot set CPU Affinity, continuing...\n");

163 
ªt
= 1;

166 
	`UNUSED_ARGUMENT
(
˝u
);

169  
ªt
;

170 
	}
}

180 
	$ms_£tup_thªad
(
ms_thªad_˘x_t
 *
thªad_˘x
)

183 
ms_thªad_t
 *
ms_thªad
(ms_thªad_à*)
	`ˇŒoc
((*ms_thread), 1);

184 
	`±hªad_£t•ecific
(
ms_thªad_key
, (*)
ms_thªad
);

186 
ms_thªad
->
thªad_˘x
=Åhread_ctx;

187 
ms_thªad
->
«˘ive_c⁄n

thªad_˘x
->
nc⁄ns
;

188 
ms_thªad
->
öôülized

Ál£
;

189 vﬁ©ûê
uöt32_t
 
˙t
= 0;

191 
	`gëtimeofday
(&
ms_thªad
->
°¨tup_time
, 
NULL
);

193 
ms_thªad
->
ba£

	`evít_öô
();

194 i‡(
ms_thªad
->
ba£
 =
NULL
)

196 i‡(
	`©omic_add_32_nv
(&
˙t
, 1) == 0)

198 
	`Ârötf
(
°dîr
, "Can'tállocateÉvent base.\n");

204 
ms_thªad
->
c⁄n
=

205 (
ms_c⁄n_t
 *)
	`mÆloc
((
size_t
)
thªad_˘x
->
nc⁄ns
 * (ms_conn_t));

206 i‡(
ms_thªad
->
c⁄n
 =
NULL
)

208 i‡(
	`©omic_add_32_nv
(&
˙t
, 1) == 0)

210 
	`Ârötf
(

211 
°dîr
,

217 
	`mem£t
(
ms_thªad
->
c⁄n
, 0, (
size_t
)
thªad_˘x
->
nc⁄ns
 * (
ms_c⁄n_t
));

219 
uöt32_t
 
i
0; i < 
thªad_˘x
->
nc⁄ns
; i++)

221 
ms_thªad
->
c⁄n
[
i
].
c⁄n_idx
= i;

222 i‡(
	`ms_£tup_c⁄n
(&
ms_thªad
->
c⁄n
[
i
]) != 0)

225 i‡(
	`©omic_add_32_nv
(&
˙t
, 1) == 0)

227 
	`Ârötf
(
°dîr
, "Initializing connection failed.\n");

234  
EXIT_SUCCESS
;

235 
	}
}

245 *
	$ms_w‹kî_libevít
(*
¨g
)

247 
ms_thªad_t
 *
ms_thªad

NULL
;

248 
ms_thªad_˘x_t
 *
thªad_˘x
(ms_thªad_˘x_à*)
¨g
;

254 i‡(
ms_£âög
.
n˝u
 > 1)

256 
	`ms_£t_thªad_˝u_afföôy
(
thªad_˘x
->
thd_idx
 % 
ms_£âög
.
n˝u
);

259 i‡(
	`ms_£tup_thªad
(
thªad_˘x
) != 0)

261 
	`exô
(1);

265 
	`ms_˛ock_h™dÀr
(0, 0, 0);

267 
	`±hªad_muãx_lock
(&
ms_globÆ
.
öô_lock
.
lock
);

268 
ms_globÆ
.
öô_lock
.
cou¡
++;

269 
	`±hªad_c⁄d_sig«l
(&
ms_globÆ
.
öô_lock
.
c⁄d
);

270 
	`±hªad_muãx_u∆ock
(&
ms_globÆ
.
öô_lock
.
lock
);

272 
ms_thªad

	`±hªad_gë•ecific
(
ms_thªad_key
);

273 
	`evít_ba£_lo›
(
ms_thªad
->
ba£
, 0);

275  
NULL
;

276 
	}
}

285 
	$ms_¸óã_w‹kî
(*(*
func
)(*), *
¨g
)

287 
±hªad_t
 
thªad
;

288 
±hªad_©å_t
 
©å
;

289 
ªt
;

291 
	`±hªad_©å_öô
(&
©å
);

293 i‡((
ªt

	`±hªad_¸óã
(&
thªad
, &
©å
, 
func
, 
¨g
)) != 0)

295 
	`Ârötf
(
°dîr
, "C™'à¸óãÅhªad: %s.\n", 
	`°ªº‹
(
ªt
));

296 
	`exô
(1);

298 
	}
}

302 
	$ms_thªad_öô
()

304 
ms_thªad_˘x
=

305 (
ms_thªad_˘x_t
 *)
	`mÆloc
(

306 (
ms_thªad_˘x_t
Ë* (
size_t
)
ms_£âög
.
¡hªads
);

307 i‡(
ms_thªad_˘x
 =
NULL
)

309 
	`Ârötf
(
°dîr
, "Can'tállocateÅhread descriptors.");

310 
	`exô
(1);

313 
uöt32_t
 
i
0; i < 
ms_£âög
.
¡hªads
; i++)

315 
ms_thªad_˘x
[
i
].
thd_idx
= i;

316 
ms_thªad_˘x
[
i
].
nc⁄ns

ms_£âög
.nc⁄n†/ ms_£âög.
¡hªads
;

323 
ms_thªad_˘x
[
i
].
§v_idx
ò% 
ms_£âög
.
§v_˙t
;

324 
ms_thªad_˘x
[
i
].
çs_≥rc⁄n

ms_£âög
.
ex≥˘ed_çs


325 / ()
ms_£âög
.
nc⁄ns
;

326 
ms_thªad_˘x
[
i
].
exec_num_≥rc⁄n

ms_£âög
.
exec_num


327 / 
ms_£âög
.
nc⁄ns
;

330 i‡(
	`±hªad_key_¸óã
(&
ms_thªad_key
, 
NULL
))

332 
	`Ârötf
(
°dîr
, "Can't createÖthread keys. Major malfunction!\n");

333 
	`exô
(1);

336 
uöt32_t
 
i
0; i < 
ms_£âög
.
¡hªads
; i++)

338 
	`ms_¸óã_w‹kî
(
ms_w‹kî_libevít
, (*)&
ms_thªad_˘x
[
i
]);

340 
	}
}

344 
	$ms_thªad_˛ónup
()

346 i‡(
ms_thªad_˘x
 !
NULL
)

348 
	`‰ì
(
ms_thªad_˘x
);

350 
	`±hªad_key_dñëe
(
ms_thªad_key
);

351 
	}
}

	@clients/ms_thread.h

27 #i‚de‡
MS_THREAD_H


28 
	#MS_THREAD_H


	)

30 
	~<sched.h
>

31 
	~"ms_c⁄n.h
"

33 #ifde‡
__˝lu•lus


38 
	tªl_time_t
;

41 
	sthªad_˘x


43 
uöt32_t
 
thd_idx
;

44 
uöt32_t
 
nc⁄ns
;

45 
uöt32_t
 
§v_idx
;

46 
çs_≥rc⁄n
;

47 
öt64_t
 
exec_num_≥rc⁄n
;

48 } 
	tms_thªad_˘x_t
;

51 
	sthªad


53 
ms_c⁄n_t
 *
c⁄n
;

54 
uöt32_t
 
«˘ive_c⁄n
;

56 
ms_thªad_˘x_t
 *
thªad_˘x
;

57 
evít_ba£
 *
ba£
;

59 
ªl_time_t
 
cuº_time
;

60 
evít
 
˛ock_evít
;

61 
boﬁ
 
öôülized
;

63 
timevÆ
 
°¨tup_time
;

64 } 
	tms_thªad_t
;

67 
ms_thªad_öô
();

71 
ms_thªad_˛ónup
();

74 #ifde‡
__˝lu•lus


	@clients/utilities.c

11 
	~"c⁄fig.h
"

13 
	~<°dio.h
>

14 
	~<˘y≥.h
>

15 
	~<°rög.h
>

16 
	~"utûôõs.h
"

19 
	$timedif
(
timevÆ
 
a
, timevÆ 
b
)

21 
us
, 
s
;

23 
us
 = ()(
a
.
tv_u£c
 - 
b
.tv_usec);

24 
us
 /= 1000;

25 
s
 = ()(
a
.
tv_£c
 - 
b
.tv_sec);

26 
s
 *= 1000;

27  
s
 + 
us
;

28 
	}
}

30 
	$vîsi⁄_comm™d
(c⁄° *
comm™d_«me
)

32 
	`¥ötf
("%†v%u.%u\n", 
comm™d_«me
, 1U, 0U);

33 
	`exô
(0);

34 
	}
}

36 c⁄° *
	$lookup_hñp
(
memˇched_›ti⁄s
 
›ti⁄
)

38 
›ti⁄
)

40 
OPT_SERVERS
: ("List which servers you wishÅo connectÅo.");

41 
OPT_VERSION
: ("DisplayÅhe version ofÅheápplicationándÅhenÉxit.");

42 
OPT_HELP
: ("DisplayÅhis messageándÅhenÉxit.");

43 
OPT_VERBOSE
: ("Give more details onÅheÖrogression ofÅheápplication.");

44 
OPT_DEBUG
: ("Provide output only useful for debugging.");

45 
OPT_FLAG
: ("Provide flag information for storage operation.");

46 
OPT_EXPIRE
: ("SetÅheÉxpire option forÅhe object.");

47 
OPT_SET
: ("Use set command with memcached when storing.");

48 
OPT_REPLACE
: ("UseÑeplace command with memcached when storing.");

49 
OPT_ADD
: ("Useádd command with memcached when storing.");

50 
OPT_SLAP_EXECUTE_NUMBER
: ("Number ofÅimesÅoÉxecuteÅhe givenÅest.");

51 
OPT_SLAP_INITIAL_LOAD
: ("Number of keyÖairsÅoÜoad beforeÉxecutingÅests.");

52 
OPT_SLAP_TEST
: ("TestÅoÑun (currently \"get\" or \"set\").");

53 
OPT_SLAP_CONCURRENCY
: ("Number of usersÅo simulate withÜoad.");

54 
OPT_SLAP_NON_BLOCK
: ("Set TCP upÅo useÇon-blocking IO.");

55 
OPT_SLAP_TCP_NODELAY
: ("Set TCP socket upÅo useÇodelay.");

56 
OPT_FLUSH
: ("Flush servers beforeÑunningÅests.");

57 
OPT_HASH
: ("Select hashÅype.");

58 
OPT_BINARY
: ("SwitchÅo binaryÖrotocol.");

59 
OPT_ANALYZE
: ("AnalyzeÅheÖrovided servers.");

60 
OPT_UDP
: ("Use UDPÖrotocol when communicating with server.");

61 
OPT_USERNAME
:  "UsernameÅo use for SASLáuthentication";

62 
OPT_PASSWD
:  "PasswordÅo use for SASLáuthentication";

63 
OPT_FILE
:  "PathÅo file in whichÅo saveÑesult";

64 
OPT_STAT_ARGS
:  "Argument for statistics";

65 : 
	`WATCHPOINT_ASSERT
(0);

68 
	`WATCHPOINT_ASSERT
(0);

70 
	}
}

72 
	$hñp_comm™d
(c⁄° *
comm™d_«me
, c⁄° *
des¸ùti⁄
,

73 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
,

74 
memˇched_¥ogøms_hñp_°
 *
›ti⁄s
)

76 
x
;

77 ()
›ti⁄s
;

79 
	`¥ötf
("%†v%u.%u\n\n", 
comm™d_«me
, 1U, 0U);

80 
	`¥ötf
("\t%s\n\n", 
des¸ùti⁄
);

81 
	`¥ötf
("Current options. A '=' meansÅhe optionÅakesá value.\n\n");

83 
x
0; 
l⁄g_›ti⁄s
[x].
«me
; x++)

85 c⁄° *
hñp_mesßge
;

87 
	`¥ötf
("\à--%s%c\n", 
l⁄g_›ti⁄s
[
x
].
«me
,

88 
l⁄g_›ti⁄s
[
x
].
has_¨g
 ? '=' : ' ');

89 i‡((
hñp_mesßge

	`lookup_hñp
(
l⁄g_›ti⁄s
[
x
].
vÆ
)))

90 
	`¥ötf
("\t\t%s\n", 
hñp_mesßge
);

93 
	`¥ötf
("\n");

94 
	`exô
(0);

95 
	}
}

97 
	$¥o˚ss_hash_›ti⁄
(
memˇched_°
 *
memc
, *
›t_hash
)

99 
uöt64_t
 
£t
;

100 
memˇched_ªtu∫_t
 
rc
;

102 i‡(
›t_hash
 =
NULL
)

105 
£t

MEMCACHED_HASH_DEFAULT
;

106 i‡(!
	`°rˇ£cmp
(
›t_hash
, "CRC"))

107 
£t

MEMCACHED_HASH_CRC
;

108 i‡(!
	`°rˇ£cmp
(
›t_hash
, "FNV1_64"))

109 
£t

MEMCACHED_HASH_FNV1_64
;

110 i‡(!
	`°rˇ£cmp
(
›t_hash
, "FNV1A_64"))

111 
£t

MEMCACHED_HASH_FNV1A_64
;

112 i‡(!
	`°rˇ£cmp
(
›t_hash
, "FNV1_32"))

113 
£t

MEMCACHED_HASH_FNV1_32
;

114 i‡(!
	`°rˇ£cmp
(
›t_hash
, "FNV1A_32"))

115 
£t

MEMCACHED_HASH_FNV1A_32
;

118 
	`Ârötf
(
°dîr
, "hash:Åy≥ÇŸÑecognized %s\n", 
›t_hash
);

119 
	`exô
(1);

122 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, 
£t
);

123 i‡(
rc
 !
MEMCACHED_SUCCESS
)

125 
	`Ârötf
(
°dîr
, "hash: memˇchêîr‹ %s\n", 
	`memˇched_°ªº‹
(
memc
, 
rc
));

126 
	`exô
(1);

128 
	}
}

130 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


131 *
	gu£∫ame
;

132 *
	g∑sswd
;

134 
	$gë_u£∫ame
(*
c⁄ãxt
, 
id
, c⁄° **
ªsu…
,

135 *
Àn
)

137 ()
c⁄ãxt
;

138 i‡(!
ªsu…
 || (
id
 !
SASL_CB_USER
 && id !
SASL_CB_AUTHNAME
))

139  
SASL_BADPARAM
;

141 *
ªsu…

u£∫ame
;

142 i‡(
Àn
)

143 *
Àn
(
u£∫ame
 =
NULL
Ë? 0 : ()
	`°æí
(username);

145  
SASL_OK
;

146 
	}
}

148 
	$gë_∑ssw‹d
(
ß¶_c⁄n_t
 *
c⁄n
, *
c⁄ãxt
, 
id
,

149 
ß¶_£¸ë_t
 **
p£¸ë
)

151 ()
c⁄ãxt
;

152 
ß¶_£¸ë_t
* 
±r
;

154 i‡(!
c⁄n
 || ! 
p£¸ë
 || 
id
 !
SASL_CB_PASS
)

155  
SASL_BADPARAM
;

157 i‡(
∑sswd
 =
NULL
)

159 *
p£¸ë

NULL
;

160  
SASL_OK
;

163 
size_t
 
Àn

	`°æí
(
∑sswd
);

164 
±r

	`mÆloc
((
ß¶_£¸ë_t
Ë+ 
Àn
 +1);

165 i‡(! 
±r
)

166  
SASL_NOMEM
;

168 
±r
->
Àn
=Üen;

169 
	`mem˝y
(
±r
->
d©a
, 
∑sswd
, 
Àn
);

170 
±r
->
d©a
[
Àn
]= 0;

172 *
p£¸ë

±r
;

173  
SASL_OK
;

174 
	}
}

177 
ß¶_ˇŒback_t
 
	gß¶_ˇŒbacks
[] = {

179 
SASL_CB_USER
, &
gë_u£∫ame
, 
NULL


181 
SASL_CB_AUTHNAME
, &
gë_u£∫ame
, 
NULL


183 
SASL_CB_PASS
, &
gë_∑ssw‹d
, 
NULL


185 
SASL_CB_LIST_END
, 
NULL
, NULL

190 
boﬁ
 
	$öôülize_ß¶
(
memˇched_°
 *
memc
, *
u£r
, *
∑ssw‹d
)

192 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


193 i‡(
u£r
 !
NULL
 && 
∑ssw‹d
 != NULL)

195 
u£∫ame

u£r
;

196 
∑sswd

∑ssw‹d
;

198 i‡(
	`ß¶_˛õ¡_öô
(
NULL
Ë!
SASL_OK
)

200 
	`Ârötf
(
°dîr
, "FailedÅo initialize saslÜibrary!\n");

201  
Ál£
;

203 
	`memˇched_£t_ß¶_ˇŒbacks
(
memc
, 
ß¶_ˇŒbacks
);

206 ()
memc
;

207 ()
u£r
;

208 ()
∑ssw‹d
;

211  
åue
;

212 
	}
}

214 
	$shutdown_ß¶
()

216 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


217 i‡(
u£∫ame
 !
NULL
 || 
∑sswd
 != NULL)

218 
	`ß¶_d⁄e
();

220 
	}
}

222 
	$öôülize_sockës
()

225 #ifde‡
WIN32


226 
WSADATA
 
wßD©a
;

227 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,0), &
wßD©a
) != 0)

229 
	`Ârötf
(
°dîr
, "Socket Initialization Error. Programáborted\n");

230 
	`exô
(
EXIT_FAILURE
);

233 
	}
}

	@clients/utilities.h

12 
	~<gë›t.h
>

13 
	~<libmemˇched/memˇched.h
>

14 
	~"libmemˇched/w©chpoöt.h
"

15 
	~"˛õ¡_›ti⁄s.h
"

17 #i‡
TIME_WITH_SYS_TIME


18 
	~<sys/time.h
>

19 
	~<time.h
>

21 #i‡
HAVE_SYS_TIME_H


22 
	~<sys/time.h
>

24 
	~<time.h
>

28 #ifde‡
__sun


32 
	#OPTIONSTRING
 *

	)

34 
	#OPTIONSTRING
 c⁄° *

	)

37 
memˇched_¥ogøms_hñp_°
 
	tmemˇched_¥ogøms_hñp_°
;

39 
	smemˇched_¥ogøms_hñp_°


41 *
	mnŸ_u£d_yë
;

44 *
°rdup_˛ónup
(c⁄° *
°r
);

45 
˛ónup
();

46 
timedif
(
timevÆ
 
a
, timevÆ 
b
);

47 
vîsi⁄_comm™d
(c⁄° *
comm™d_«me
);

48 
hñp_comm™d
(c⁄° *
comm™d_«me
, c⁄° *
des¸ùti⁄
,

49 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
,

50 
memˇched_¥ogøms_hñp_°
 *
›ti⁄s
);

51 
¥o˚ss_hash_›ti⁄
(
memˇched_°
 *
memc
, *
›t_hash
);

52 
boﬁ
 
öôülize_ß¶
(
memˇched_°
 *
memc
, *
u£r
, *
∑ssw‹d
);

53 
shutdown_ß¶
();

54 
öôülize_sockës
();

	@example/interface_v0.c

7 
	~"c⁄fig.h
"

8 
	~<as£π.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<f˙é.h
>

13 
	~<î∫o.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

17 
	~<libmemˇched/¥Ÿocﬁ_h™dÀr.h
>

18 
	~<libmemˇched/byã‹dî.h
>

19 
	~"°‹age.h
"

20 
	~"memˇched_light.h
"

22 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$no›_comm™d_h™dÀr
(c⁄° *
cookõ
,

23 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

24 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

26 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

27 .
mesßge
.
hódî
.
ª•⁄£
= {

28 .
magic

PROTOCOL_BINARY_RES
,

29 .
›code

PROTOCOL_BINARY_CMD_NOOP
,

30 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

31 .
›aque

hódî
->
ªque°
.opaque

35  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

36 
	}
}

38 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$quô_comm™d_h™dÀr
(c⁄° *
cookõ
,

39 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

40 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

42 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

43 .
mesßge
.
hódî
.
ª•⁄£
= {

44 .
magic

PROTOCOL_BINARY_RES
,

45 .
›code

PROTOCOL_BINARY_CMD_QUIT
,

46 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

47 .
›aque

hódî
->
ªque°
.opaque

51 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_QUIT
)

52 
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

55  
PROTOCOL_BINARY_RESPONSE_EINTERNAL
;

56 
	}
}

58 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$gë_comm™d_h™dÀr
(c⁄° *
cookõ
,

59 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

60 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

62 
uöt8_t
 
›code

hódî
->
ªque°
.opcode;

64 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
ª•⁄£
;

65 
buf„r
[4096];

66 } 
msg
= {

67 .
ª•⁄£
.
mesßge
.
hódî
.response= {

68 .
magic

PROTOCOL_BINARY_RES
,

69 .
›code
= opcode,

70 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

71 .
›aque

hódî
->
ªque°
.opaque

75 
ôem
 *ôem
	`gë_ôem
(
hódî
 + 1, 
	`¡ohs
(hódî->
ªque°
.
keyÀn
));

76 i‡(
ôem
)

78 
msg
.
ª•⁄£
.
mesßge
.
body
.
Êags

	`ht⁄l
(
ôem
->flags);

79 *
±r
(*)(
msg
.
ª•⁄£
.
byãs
 + (*
hódî
) + 4);

80 
uöt32_t
 
bodysize
= 4;

81 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
ˇs

	`ht⁄Œ
(
ôem
->cas);

82 i‡(
›code
 =
PROTOCOL_BINARY_CMD_GETK
 || opcodê=
PROTOCOL_BINARY_CMD_GETKQ
)

84 
	`mem˝y
(
±r
, 
ôem
->
key
, iãm->
nkey
);

85 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
keyÀn

	`ht⁄s
((
uöt16_t
)
ôem
->
nkey
);

86 
±r
 +
ôem
->
nkey
;

87 
bodysize
 +(
uöt32_t
)
ôem
->
nkey
;

89 
	`mem˝y
(
±r
, 
ôem
->
d©a
, iãm->
size
);

90 
bodysize
 +(
uöt32_t
)
ôem
->
size
;

91 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
bodyÀn

	`ht⁄l
(
bodysize
);

92 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
exéí
= 4;

94 
	`ªÀa£_ôem
(
ôem
);

95  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
msg
);

97 i‡(
›code
 =
PROTOCOL_BINARY_CMD_GET
 || opcodê=
PROTOCOL_BINARY_CMD_GETK
)

99 
msg
.
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
);

100  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
msg
);

104  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

105 
	}
}

107 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$dñëe_comm™d_h™dÀr
(c⁄° *
cookõ
,

108 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

109 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

111 
size_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

112 *
key
((*)
hódî
) + (*header);

113 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

114 .
mesßge
.
hódî
.
ª•⁄£
= {

115 .
magic

PROTOCOL_BINARY_RES
,

116 .
›code

hódî
->
ªque°
.opcode,

117 .
›aque

hódî
->
ªque°
.opaque

121 i‡(!
	`dñëe_ôem
(
key
, 
keyÀn
))

123 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
);

124  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

126 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_DELETE
)

129 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
);

130  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

133  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

134 
	}
}

136 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$Êush_comm™d_h™dÀr
(c⁄° *
cookõ
,

137 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

138 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

140 
uöt8_t
 
›code

hódî
->
ªque°
.opcode;

143 
	`Êush
(0);

145 i‡(
›code
 =
PROTOCOL_BINARY_CMD_FLUSH
)

147 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

148 .
mesßge
.
hódî
.
ª•⁄£
= {

149 .
magic

PROTOCOL_BINARY_RES
,

150 .
›code
= opcode,

151 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

152 .
›aque

hódî
->
ªque°
.opaque

155  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

158  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

159 
	}
}

161 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$¨ôhmëic_comm™d_h™dÀr
(c⁄° *
cookõ
,

162 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

163 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

165 
¥Ÿocﬁ_bö¨y_ªque°_ö¸
 *
ªq
(*)
hódî
;

166 
¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
 
ª•⁄£
= {

167 .
mesßge
.
hódî
.
ª•⁄£
= {

168 .
magic

PROTOCOL_BINARY_RES
,

169 .
›code

hódî
->
ªque°
.opcode,

170 .
›aque

hódî
->
ªque°
.opaque,

174 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

175 
uöt64_t
 
öôül

	`¡ohŒ
(
ªq
->
mesßge
.
body
.initial);

176 
uöt64_t
 
dñè

	`¡ohŒ
(
ªq
->
mesßge
.
body
.delta);

177 
uöt32_t
 
expú©i⁄

	`¡ohl
(
ªq
->
mesßge
.
body
.expiration);

178 
uöt32_t
 
Êags
= 0;

179 *
key

ªq
->
byãs
 + (req->bytes);

180 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

182 
uöt64_t
 
vÆue

öôül
;

184 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

185 i‡(
ôem
 !
NULL
)

187 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_INCREMENT
 ||

188 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_INCREMENTQ
)

190 
vÆue
(*(
uöt64_t
*)
ôem
->
d©a
Ë+ 
dñè
;

194 i‡(
dñè
 > *(
uöt64_t
*)
ôem
->
d©a
)

196 
vÆue
= 0;

200 
vÆue
*(
uöt64_t
*)
ôem
->
d©a
 - 
dñè
;

203 
expú©i⁄
(
uöt32_t
)
ôem
->
exp
;

204 
Êags

ôem
->flags;

206 
	`ªÀa£_ôem
(
ôem
);

207 
	`dñëe_ôem
(
key
, 
keyÀn
);

210 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, (
vÆue
), 
Êags
, (
time_t
)
expú©i⁄
);

211 i‡(
ôem
 =
NULL
)

213 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

217 
	`mem˝y
(
ôem
->
d©a
, &
vÆue
, (value));

218 
	`put_ôem
(
ôem
);

221 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
rvÆ
);

222 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

224 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
bodyÀn

	`¡ohl
(8);

225 
ª•⁄£
.
mesßge
.
body
.
vÆue

	`¡ohŒ
((*(
uöt64_t
*)
ôem
->
d©a
));

226 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
ˇs

	`¡ohŒ
(
ôem
->cas);

228 
	`ªÀa£_ôem
(
ôem
);

229 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_INCREMENTQ
 ||

230 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_DECREMENTQ
)

232  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

236  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

237 
	}
}

239 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$vîsi⁄_comm™d_h™dÀr
(c⁄° *
cookõ
,

240 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

241 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

243 c⁄° *
vîsi⁄°rög
= "1.0.0";

245 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
∑ckë
;

246 
buf„r
[256];

247 } 
ª•⁄£
= {

248 .
∑ckë
.
ª•⁄£
= {

249 .
magic

PROTOCOL_BINARY_RES
,

250 .
›code

PROTOCOL_BINARY_CMD_VERSION
,

251 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

252 .
›aque

hódî
->
ªque°
.opaque,

253 .
bodyÀn

	`ht⁄l
((
uöt32_t
)
	`°æí
(
vîsi⁄°rög
))

257 
	`mem˝y
(
ª•⁄£
.
buf„r
 + ‘e•⁄£.
∑ckë
), 
vîsi⁄°rög
, 
	`°æí
(versionstring));

259  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

260 
	}
}

262 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$c⁄ˇt_comm™d_h™dÀr
(c⁄° *
cookõ
,

263 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

264 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

266 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

267 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

268 
uöt64_t
 
ˇs

	`¡ohŒ
(
hódî
->
ªque°
.cas);

269 *
key

hódî
 + 1;

270 
uöt32_t
 
vÆÀn

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
;

271 *
vÆ
(*)
key
 + 
keyÀn
;

273 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

274 
ôem
 *
nôem

NULL
;

276 i‡(
ôem
 =
NULL
)

278 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

280 i‡(
ˇs
 !0 && ca†!
ôem
->cas)

282 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

284 i‡((
nôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, 
ôem
->
size
 + 
vÆÀn
,

285 
ôem
->
Êags
, iãm->
exp
)Ë=
NULL
)

287 
	`ªÀa£_ôem
(
ôem
);

288 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

292 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_APPEND
 ||

293 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_APPENDQ
)

295 
	`mem˝y
(
nôem
->
d©a
, 
ôem
->d©a, iãm->
size
);

296 
	`mem˝y
(((*)(
nôem
->
d©a
)Ë+ 
ôem
->
size
, 
vÆ
, 
vÆÀn
);

300 
	`mem˝y
(
nôem
->
d©a
, 
vÆ
, 
vÆÀn
);

301 
	`mem˝y
(((*)(
nôem
->
d©a
)Ë+ 
vÆÀn
, 
ôem
->d©a, iãm->
size
);

303 
	`ªÀa£_ôem
(
ôem
);

304 
	`dñëe_ôem
(
key
, 
keyÀn
);

305 
	`put_ôem
(
nôem
);

306 
ˇs

nôem
->cas;

307 
	`ªÀa£_ôem
(
nôem
);

309 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_APPEND
 ||

310 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_PREPEND
)

312 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

313 .
mesßge
= {

314 .
hódî
.
ª•⁄£
= {

315 .
magic

PROTOCOL_BINARY_RES
,

316 .
›code

hódî
->
ªque°
.opcode,

317 .
°©us

	`ht⁄s
(
rvÆ
),

318 .
›aque

hódî
->
ªque°
.opaque,

319 .
ˇs

	`ht⁄Œ
(cas),

323  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

327  
rvÆ
;

328 
	}
}

330 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$£t_comm™d_h™dÀr
(c⁄° *
cookõ
,

331 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

332 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

334 
size_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

335 
size_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

336 
¥Ÿocﬁ_bö¨y_ªque°_ª∂a˚
 *
ªque°
(*)
hódî
;

337 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

338 
time_t
 
timeout
—ime_t)
	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

339 *
key
((*)
hódî
) + (*header) + 8;

340 *
d©a

key
 + 
keyÀn
;

342 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

343 .
mesßge
= {

344 .
hódî
.
ª•⁄£
= {

345 .
magic

PROTOCOL_BINARY_RES
,

346 .
›code

hódî
->
ªque°
.opcode,

347 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

348 .
›aque

hódî
->
ªque°
.opaque

353 i‡(
hódî
->
ªque°
.
ˇs
 != 0)

356 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

357 i‡(
ôem
 !
NULL
)

359 i‡(
ôem
->
ˇs
 !
	`¡ohŒ
(
hódî
->
ªque°
.cas))

361 
	`ªÀa£_ôem
(
ôem
);

362 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
);

363  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

365 
	`ªÀa£_ôem
(
ôem
);

369 
	`dñëe_ôem
(
key
, 
keyÀn
);

370 
ôem
* iãm
	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, 
timeout
);

371 i‡(
ôem
 =
NULL
)

373 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_ENOMEM
);

377 
	`put_ôem
(
ôem
);

379 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_SET
)

381 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
ˇs

	`ht⁄Œ
(
ôem
->cas);

382 
	`ªÀa£_ôem
(
ôem
);

383  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

385 
	`ªÀa£_ôem
(
ôem
);

387  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

390  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

391 
	}
}

393 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$add_comm™d_h™dÀr
(c⁄° *
cookõ
,

394 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

395 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

397 
size_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

398 
size_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

399 
¥Ÿocﬁ_bö¨y_ªque°_add
 *
ªque°
(*)
hódî
;

400 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

401 
time_t
 
timeout
—ime_t)
	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

402 *
key
((*)
hódî
) + (*header) + 8;

403 *
d©a

key
 + 
keyÀn
;

405 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

406 .
mesßge
= {

407 .
hódî
.
ª•⁄£
= {

408 .
magic

PROTOCOL_BINARY_RES
,

409 .
›code

hódî
->
ªque°
.opcode,

410 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

411 .
›aque

hódî
->
ªque°
.opaque

416 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

417 i‡(
ôem
 =
NULL
)

419 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, 
timeout
);

420 i‡(
ôem
 =
NULL
)

421 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_ENOMEM
);

424 
	`put_ôem
(
ôem
);

426 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_ADD
)

428 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
ˇs

	`ht⁄Œ
(
ôem
->cas);

429 
	`ªÀa£_ôem
(
ôem
);

430  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

432 
	`ªÀa£_ôem
(
ôem
);

433  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

438 
	`ªÀa£_ôem
(
ôem
);

439 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
);

442  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

443 
	}
}

445 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$ª∂a˚_comm™d_h™dÀr
(c⁄° *
cookõ
,

446 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

447 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

449 
size_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

450 
size_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

451 
¥Ÿocﬁ_bö¨y_ªque°_ª∂a˚
 *
ªque°
(*)
hódî
;

452 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

453 
time_t
 
timeout
—ime_t)
	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

454 *
key
((*)
hódî
) + (*header) + 8;

455 *
d©a

key
 + 
keyÀn
;

457 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

458 .
mesßge
= {

459 .
hódî
.
ª•⁄£
= {

460 .
magic

PROTOCOL_BINARY_RES
,

461 .
›code

hódî
->
ªque°
.opcode,

462 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

463 .
›aque

hódî
->
ªque°
.opaque

468 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

469 i‡(
ôem
 =
NULL
)

470 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
);

471 i‡(
hódî
->
ªque°
.
ˇs
 =0 || 
	`¡ohŒ
(hódî->ªque°.ˇsË=
ôem
->cas)

473 
	`ªÀa£_ôem
(
ôem
);

474 
	`dñëe_ôem
(
key
, 
keyÀn
);

475 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, 
timeout
);

476 i‡(
ôem
 =
NULL
)

477 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_ENOMEM
);

480 
	`put_ôem
(
ôem
);

482 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_REPLACE
)

484 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
ˇs

	`ht⁄Œ
(
ôem
->cas);

485 
	`ªÀa£_ôem
(
ôem
);

486  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

488 
	`ªÀa£_ôem
(
ôem
);

489  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

494 
ª•⁄£
.
mesßge
.
hódî
.ª•⁄£.
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
);

495 
	`ªÀa£_ôem
(
ôem
);

498  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

499 
	}
}

501 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$°©_comm™d_h™dÀr
(c⁄° *
cookõ
,

502 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

503 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

506 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

507 .
mesßge
= {

508 .
hódî
.
ª•⁄£
= {

509 .
magic

PROTOCOL_BINARY_RES
,

510 .
›code

PROTOCOL_BINARY_CMD_STAT
,

511 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

512 .
›aque

hódî
->
ªque°
.opaque

517  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

518 
	}
}

520 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 
	göãrÁ˚_v0_im∂
= {

521 .
öãrÁ˚_vîsi⁄

MEMCACHED_PROTOCOL_HANDLER_V0
,

522 #ifde‡
FUTURE


529 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_GET
]
gë_comm™d_h™dÀr
,

530 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_SET
]
£t_comm™d_h™dÀr
,

531 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_ADD
]
add_comm™d_h™dÀr
,

532 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_REPLACE
]
ª∂a˚_comm™d_h™dÀr
,

533 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_DELETE
]
dñëe_comm™d_h™dÀr
,

534 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_INCREMENT
]
¨ôhmëic_comm™d_h™dÀr
,

535 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_DECREMENT
]
¨ôhmëic_comm™d_h™dÀr
,

536 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_QUIT
]
quô_comm™d_h™dÀr
,

537 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_FLUSH
]
Êush_comm™d_h™dÀr
,

538 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_GETQ
]
gë_comm™d_h™dÀr
,

539 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_NOOP
]
no›_comm™d_h™dÀr
,

540 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_VERSION
]
vîsi⁄_comm™d_h™dÀr
,

541 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_GETK
]
gë_comm™d_h™dÀr
,

542 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_GETKQ
]
gë_comm™d_h™dÀr
,

543 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_APPEND
]
c⁄ˇt_comm™d_h™dÀr
,

544 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_PREPEND
]
c⁄ˇt_comm™d_h™dÀr
,

545 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_STAT
]
°©_comm™d_h™dÀr
,

546 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_SETQ
]
£t_comm™d_h™dÀr
,

547 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_ADDQ
]
add_comm™d_h™dÀr
,

548 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_REPLACEQ
]
ª∂a˚_comm™d_h™dÀr
,

549 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_DELETEQ
]
dñëe_comm™d_h™dÀr
,

550 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_INCREMENTQ
]
¨ôhmëic_comm™d_h™dÀr
,

551 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_DECREMENTQ
]
¨ôhmëic_comm™d_h™dÀr
,

552 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_QUITQ
]
quô_comm™d_h™dÀr
,

553 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_FLUSHQ
]
Êush_comm™d_h™dÀr
,

554 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_APPENDQ
]
c⁄ˇt_comm™d_h™dÀr
,

555 .
	göãrÁ˚
.
	gv0
.
	gcomcode
[
PROTOCOL_BINARY_CMD_PREPENDQ
]
c⁄ˇt_comm™d_h™dÀr
,

559 
	$öôülize_öãrÁ˚_v0_h™dÀr
()

561 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_GET
]
gë_comm™d_h™dÀr
;

562 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_SET
]
£t_comm™d_h™dÀr
;

563 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_ADD
]
add_comm™d_h™dÀr
;

564 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_REPLACE
]
ª∂a˚_comm™d_h™dÀr
;

565 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_DELETE
]
dñëe_comm™d_h™dÀr
;

566 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_INCREMENT
]
¨ôhmëic_comm™d_h™dÀr
;

567 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_DECREMENT
]
¨ôhmëic_comm™d_h™dÀr
;

568 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_QUIT
]
quô_comm™d_h™dÀr
;

569 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_FLUSH
]
Êush_comm™d_h™dÀr
;

570 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_GETQ
]
gë_comm™d_h™dÀr
;

571 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_NOOP
]
no›_comm™d_h™dÀr
;

572 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_VERSION
]
vîsi⁄_comm™d_h™dÀr
;

573 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_GETK
]
gë_comm™d_h™dÀr
;

574 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_GETKQ
]
gë_comm™d_h™dÀr
;

575 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_APPEND
]
c⁄ˇt_comm™d_h™dÀr
;

576 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_PREPEND
]
c⁄ˇt_comm™d_h™dÀr
;

577 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_STAT
]
°©_comm™d_h™dÀr
;

578 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_SETQ
]
£t_comm™d_h™dÀr
;

579 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_ADDQ
]
add_comm™d_h™dÀr
;

580 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_REPLACEQ
]
ª∂a˚_comm™d_h™dÀr
;

581 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_DELETEQ
]
dñëe_comm™d_h™dÀr
;

582 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_INCREMENTQ
]
¨ôhmëic_comm™d_h™dÀr
;

583 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_DECREMENTQ
]
¨ôhmëic_comm™d_h™dÀr
;

584 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_QUITQ
]
quô_comm™d_h™dÀr
;

585 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_FLUSHQ
]
Êush_comm™d_h™dÀr
;

586 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_APPENDQ
]
c⁄ˇt_comm™d_h™dÀr
;

587 
öãrÁ˚_v0_im∂
.
öãrÁ˚
.
v0
.
comcode
[
PROTOCOL_BINARY_CMD_PREPENDQ
]
c⁄ˇt_comm™d_h™dÀr
;

588 
	}
}

	@example/interface_v1.c

11 
	~"c⁄fig.h
"

12 
	~<as£π.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<°dio.h
>

15 
	~<uni°d.h
>

16 
	~<f˙é.h
>

17 
	~<î∫o.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

21 
	~<libmemˇched/¥Ÿocﬁ_h™dÀr.h
>

22 
	~<libmemˇched/byã‹dî.h
>

23 
	~"°‹age.h
"

25 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$add_h™dÀr
(c⁄° *
cookõ
,

26 c⁄° *
key
,

27 
uöt16_t
 
keyÀn
,

28 c⁄° *
d©a
,

29 
uöt32_t
 
d©Æí
,

30 
uöt32_t
 
Êags
,

31 
uöt32_t
 
ex±ime
,

32 
uöt64_t
 *
ˇs
)

34 ()
cookõ
;

35 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

36 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

37 i‡(
ôem
 =
NULL
)

39 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, (
time_t
)
ex±ime
);

40 i‡(
ôem
 == 0)

42 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

46 
	`put_ôem
(
ôem
);

47 *
ˇs

ôem
->cas;

48 
	`ªÀa£_ôem
(
ôem
);

53 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

56  
rvÆ
;

57 
	}
}

59 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$≠≥nd_h™dÀr
(c⁄° *
cookõ
,

60 c⁄° *
key
,

61 
uöt16_t
 
keyÀn
,

62 c⁄° * 
vÆ
,

63 
uöt32_t
 
vÆÀn
,

64 
uöt64_t
 
ˇs
,

65 
uöt64_t
 *
ªsu…_ˇs
)

67 ()
cookõ
;

68 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

70 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

71 
ôem
 *
nôem
;

73 i‡(
ôem
 =
NULL
)

75 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

77 i‡(
ˇs
 !0 && ca†!
ôem
->cas)

79 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

81 i‡((
nôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, 
ôem
->
size
 + 
vÆÀn
,

82 
ôem
->
Êags
, iãm->
exp
)Ë=
NULL
)

84 
	`ªÀa£_ôem
(
ôem
);

85 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

89 
	`mem˝y
(
nôem
->
d©a
, 
ôem
->d©a, iãm->
size
);

90 
	`mem˝y
(((*)(
nôem
->
d©a
)Ë+ 
ôem
->
size
, 
vÆ
, 
vÆÀn
);

91 
	`ªÀa£_ôem
(
ôem
);

92 
	`dñëe_ôem
(
key
, 
keyÀn
);

93 
	`put_ôem
(
nôem
);

94 *
ªsu…_ˇs

nôem
->
ˇs
;

95 
	`ªÀa£_ôem
(
nôem
);

98  
rvÆ
;

99 
	}
}

101 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$de¸emít_h™dÀr
(c⁄° *
cookõ
,

102 c⁄° *
key
,

103 
uöt16_t
 
keyÀn
,

104 
uöt64_t
 
dñè
,

105 
uöt64_t
 
öôül
,

106 
uöt32_t
 
expú©i⁄
,

107 
uöt64_t
 *
ªsu…
,

108 
uöt64_t
 *
ªsu…_ˇs
) {

109 ()
cookõ
;

110 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

111 
uöt64_t
 
vÆ

öôül
;

112 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

114 i‡(
ôem
 !
NULL
)

116 i‡(
dñè
 > *(
uöt64_t
*)
ôem
->
d©a
)

117 
vÆ
= 0;

119 
vÆ
*(
uöt64_t
*)
ôem
->
d©a
 - 
dñè
;

121 
expú©i⁄
(
uöt32_t
)
ôem
->
exp
;

122 
	`ªÀa£_ôem
(
ôem
);

123 
	`dñëe_ôem
(
key
, 
keyÀn
);

126 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, (
öôül
), 0, (
time_t
)
expú©i⁄
);

127 i‡(
ôem
 == 0)

129 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

133 
	`mem˝y
(
ôem
->
d©a
, &
vÆ
, (val));

134 
	`put_ôem
(
ôem
);

135 *
ªsu…

vÆ
;

136 *
ªsu…_ˇs

ôem
->
ˇs
;

137 
	`ªÀa£_ôem
(
ôem
);

140  
rvÆ
;

141 
	}
}

143 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$dñëe_h™dÀr
(c⁄° *
cookõ
,

144 c⁄° *
key
,

145 
uöt16_t
 
keyÀn
,

146 
uöt64_t
 
ˇs
) {

147 ()
cookõ
;

148 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

150 i‡(
ˇs
 != 0)

152 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

153 i‡(
ôem
 !
NULL
)

155 i‡(
ôem
->
ˇs
 != cas)

157 
	`ªÀa£_ôem
(
ôem
);

158  
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

160 
	`ªÀa£_ôem
(
ôem
);

164 i‡(!
	`dñëe_ôem
(
key
, 
keyÀn
))

166 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

169  
rvÆ
;

170 
	}
}

173 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$Êush_h™dÀr
(c⁄° *
cookõ
,

174 
uöt32_t
 
whí
) {

176 ()
cookõ
;

177 
	`Êush
(
whí
);

178  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

179 
	}
}

181 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$gë_h™dÀr
(c⁄° *
cookõ
,

182 c⁄° *
key
,

183 
uöt16_t
 
keyÀn
,

184 
memˇched_bö¨y_¥Ÿocﬁ_gë_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
) {

185 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

187 i‡(
ôem
 =
NULL
)

189  
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

192 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rc
;

193 
rc

	`ª•⁄£_h™dÀr
(
cookõ
, 
key
, (
uöt16_t
)
keyÀn
,

194 
ôem
->
d©a
, (
uöt32_t
)ôem->
size
, iãm->
Êags
,

195 
ôem
->
ˇs
);

196 
	`ªÀa£_ôem
(
ôem
);

197  
rc
;

198 
	}
}

200 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$ö¸emít_h™dÀr
(c⁄° *
cookõ
,

201 c⁄° *
key
,

202 
uöt16_t
 
keyÀn
,

203 
uöt64_t
 
dñè
,

204 
uöt64_t
 
öôül
,

205 
uöt32_t
 
expú©i⁄
,

206 
uöt64_t
 *
ªsu…
,

207 
uöt64_t
 *
ªsu…_ˇs
) {

208 ()
cookõ
;

209 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

210 
uöt64_t
 
vÆ

öôül
;

211 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

213 i‡(
ôem
 !
NULL
)

215 
vÆ
(*(
uöt64_t
*)
ôem
->
d©a
Ë+ 
dñè
;

216 
expú©i⁄
(
uöt32_t
)
ôem
->
exp
;

217 
	`ªÀa£_ôem
(
ôem
);

218 
	`dñëe_ôem
(
key
, 
keyÀn
);

221 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, (
öôül
), 0, (
time_t
)
expú©i⁄
);

222 i‡(
ôem
 =
NULL
)

224 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

228 
buf„r
[1024] = {0};

229 
	`mem˝y
(
buf„r
, 
key
, 
keyÀn
);

230 
	`mem˝y
(
ôem
->
d©a
, &
vÆ
, (val));

231 
	`put_ôem
(
ôem
);

232 *
ªsu…

vÆ
;

233 *
ªsu…_ˇs

ôem
->
ˇs
;

234 
	`ªÀa£_ôem
(
ôem
);

237  
rvÆ
;

238 
	}
}

240 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$no›_h™dÀr
(c⁄° *
cookõ
) {

241 ()
cookõ
;

242  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

243 
	}
}

245 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$¥ïíd_h™dÀr
(c⁄° *
cookõ
,

246 c⁄° *
key
,

247 
uöt16_t
 
keyÀn
,

248 c⁄° * 
vÆ
,

249 
uöt32_t
 
vÆÀn
,

250 
uöt64_t
 
ˇs
,

251 
uöt64_t
 *
ªsu…_ˇs
) {

252 ()
cookõ
;

253 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

255 
ôem
 *ôem
	`gë_ôem
(
key
, 
keyÀn
);

256 
ôem
 *
nôem

NULL
;

258 i‡(
ôem
 =
NULL
)

260 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

262 i‡(
ˇs
 !0 && ca†!
ôem
->cas)

264 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

266 i‡((
nôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
NULL
, 
ôem
->
size
 + 
vÆÀn
,

267 
ôem
->
Êags
, iãm->
exp
)Ë=
NULL
)

269 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

273 
	`mem˝y
(
nôem
->
d©a
, 
vÆ
, 
vÆÀn
);

274 
	`mem˝y
(((*)(
nôem
->
d©a
)Ë+ 
vÆÀn
, 
ôem
->d©a, iãm->
size
);

275 
	`ªÀa£_ôem
(
ôem
);

276 
ôem

NULL
;

277 
	`dñëe_ôem
(
key
, 
keyÀn
);

278 
	`put_ôem
(
nôem
);

279 *
ªsu…_ˇs

nôem
->
ˇs
;

282 i‡(
ôem
)

283 
	`ªÀa£_ôem
(
ôem
);

285 i‡(
nôem
)

286 
	`ªÀa£_ôem
(
nôem
);

288  
rvÆ
;

289 
	}
}

291 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$quô_h™dÀr
(c⁄° *
cookõ
) {

292 ()
cookõ
;

293  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

294 
	}
}

296 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$ª∂a˚_h™dÀr
(c⁄° *
cookõ
,

297 c⁄° *
key
,

298 
uöt16_t
 
keyÀn
,

299 c⁄° * 
d©a
,

300 
uöt32_t
 
d©Æí
,

301 
uöt32_t
 
Êags
,

302 
uöt32_t
 
ex±ime
,

303 
uöt64_t
 
ˇs
,

304 
uöt64_t
 *
ªsu…_ˇs
) {

305 ()
cookõ
;

306 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

307 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

309 i‡(
ôem
 =
NULL
)

311 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
;

313 i‡(
ˇs
 =0 || ca†=
ôem
->cas)

315 
	`ªÀa£_ôem
(
ôem
);

316 
	`dñëe_ôem
(
key
, 
keyÀn
);

317 
ôem

	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, (
time_t
)
ex±ime
);

318 i‡(
ôem
 == 0)

320 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

324 
	`put_ôem
(
ôem
);

325 *
ªsu…_ˇs

ôem
->
ˇs
;

326 
	`ªÀa£_ôem
(
ôem
);

331 
rvÆ

PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

332 
	`ªÀa£_ôem
(
ôem
);

335  
rvÆ
;

336 
	}
}

338 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$£t_h™dÀr
(c⁄° *
cookõ
,

339 c⁄° *
key
,

340 
uöt16_t
 
keyÀn
,

341 c⁄° * 
d©a
,

342 
uöt32_t
 
d©Æí
,

343 
uöt32_t
 
Êags
,

344 
uöt32_t
 
ex±ime
,

345 
uöt64_t
 
ˇs
,

346 
uöt64_t
 *
ªsu…_ˇs
) {

347 ()
cookõ
;

348 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

350 i‡(
ˇs
 != 0)

352 
ôem
* iãm
	`gë_ôem
(
key
, 
keyÀn
);

353 i‡(
ôem
 !
NULL
 && 
ˇs
 != item->cas)

356 
	`ªÀa£_ôem
(
ôem
);

357  
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
;

361 
	`dñëe_ôem
(
key
, 
keyÀn
);

362 
ôem
* iãm
	`¸óã_ôem
(
key
, 
keyÀn
, 
d©a
, 
d©Æí
, 
Êags
, (
time_t
)
ex±ime
);

363 i‡(
ôem
 == 0)

365 
rvÆ

PROTOCOL_BINARY_RESPONSE_ENOMEM
;

369 
	`put_ôem
(
ôem
);

370 *
ªsu…_ˇs

ôem
->
ˇs
;

371 
	`ªÀa£_ôem
(
ôem
);

374  
rvÆ
;

375 
	}
}

377 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$°©_h™dÀr
(c⁄° *
cookõ
,

378 c⁄° *
key
,

379 
uöt16_t
 
keyÀn
,

380 
memˇched_bö¨y_¥Ÿocﬁ_°©_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
) {

381 ()
key
;

382 ()
keyÀn
;

384  
	`ª•⁄£_h™dÀr
(
cookõ
, 
NULL
, 0, NULL, 0);

385 
	}
}

387 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$vîsi⁄_h™dÀr
(c⁄° *
cookõ
,

388 
memˇched_bö¨y_¥Ÿocﬁ_vîsi⁄_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
) {

389 c⁄° *
vîsi⁄
= "0.1.1";

390  
	`ª•⁄£_h™dÀr
(
cookõ
, 
vîsi⁄
, (
uöt32_t
)
	`°æí
(version));

391 
	}
}

393 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 
	göãrÁ˚_v1_im∂
= {

394 .
öãrÁ˚_vîsi⁄

MEMCACHED_PROTOCOL_HANDLER_V1
,

395 .
	göãrÁ˚
.
	gv1
= {

396 .
add

add_h™dÀr
,

397 .
	g≠≥nd

≠≥nd_h™dÀr
,

398 .
	gde¸emít

de¸emít_h™dÀr
,

399 .
	gdñëe

dñëe_h™dÀr
,

400 .
	gÊush

Êush_h™dÀr
,

401 .
	ggë

gë_h™dÀr
,

402 .
	gö¸emít

ö¸emít_h™dÀr
,

403 .
	gno›

no›_h™dÀr
,

404 .
	g¥ïíd

¥ïíd_h™dÀr
,

405 .
	gquô

quô_h™dÀr
,

406 .
	gª∂a˚

ª∂a˚_h™dÀr
,

407 .
	g£t

£t_h™dÀr
,

408 .
	g°©

°©_h™dÀr
,

409 .
	gvîsi⁄

vîsi⁄_h™dÀr


	@example/memcached_light.c

26 
	~"c⁄fig.h
"

27 
	~<as£π.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<°dio.h
>

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<î∫o.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<evít.h
>

37 
	~<libmemˇched/¥Ÿocﬁ_h™dÀr.h
>

38 
	~<libmemˇched/byã‹dî.h
>

39 
	~"°‹age.h
"

40 
	~"memˇched_light.h
"

42 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 
öãrÁ˚_v0_im∂
;

43 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 
öãrÁ˚_v1_im∂
;

45 
memˇched_sockë_t
 
	g£rvî_sockës
[1024];

46 
	gnum_£rvî_sockës
= 0;

48 
	sc⁄√˘i⁄


50 *
	mu£rd©a
;

51 
evít
 
	mevít
;

55 
	gmaxc⁄ns
 = 1024;

57 
c⁄√˘i⁄
 *
	gsockë_u£rd©a_m≠
;

58 
boﬁ
 
	gvîbo£

Ál£
;

59 
evít_ba£
 *
	gevít_ba£
;

61 
	s›ti⁄s_°
 {

62 *
	mpid_fûe
;

63 
boﬁ
 
	mhas_p‹t
;

64 
ö_p‹t_t
 
	mp‹t
;

65 } 
	gglobÆ_›ti⁄s
;

67 
›ti⁄s_°
 
	t›ti⁄s_°
;

75 
	$drive_˛õ¡
(
memˇched_sockë_t
 
fd
, 
which
, *
¨g
)

77 ()
which
;

78 
c⁄√˘i⁄
 *
˛õ¡

¨g
;

79 
memˇched_¥Ÿocﬁ_˛õ¡_°
* 
c

˛õ¡
->
u£rd©a
;

80 
	`as£π
(
c
 !
NULL
);

82 
memˇched_¥Ÿocﬁ_evít_t
 
evíts

	`memˇched_¥Ÿocﬁ_˛õ¡_w‹k
(
c
);

83 i‡(
evíts
 & 
MEMCACHED_PROTOCOL_ERROR_EVENT
)

85 
	`memˇched_¥Ÿocﬁ_˛õ¡_de°roy
(
c
);

86 
	`˛o£sockë
(
fd
);

88 
Êags
 = 0;

89 i‡(
evíts
 & 
MEMCACHED_PROTOCOL_WRITE_EVENT
)

91 
Êags

EV_WRITE
;

94 i‡(
evíts
 & 
MEMCACHED_PROTOCOL_READ_EVENT
)

96 
Êags
|
EV_READ
;

99 
	`evít_£t
(&
˛õ¡
->
evít
, (
öçå_t
)
fd
, 
Êags
, 
drive_˛õ¡
, client);

100 
	`evít_ba£_£t
(
evít_ba£
, &
˛õ¡
->
evít
);

102 i‡(
	`evít_add
(&
˛õ¡
->
evít
, 0) == -1)

104 ()
	`Ârötf
(
°dîr
, "FaûedÅÿaddÉvíàf‹ %d\n", 
fd
);

105 
	`memˇched_¥Ÿocﬁ_˛õ¡_de°roy
(
c
);

106 
	`˛o£sockë
(
fd
);

109 
	}
}

117 
	$ac˚±_h™dÀr
(
memˇched_sockë_t
 
fd
, 
which
, *
¨g
)

119 ()
which
;

120 
c⁄√˘i⁄
 *
£rvî

¨g
;

122 
sockaddr_°‹age
 
addr
;

123 
sockÀn_t
 
addæí
(
addr
);

124 
memˇched_sockë_t
 
sock

	`ac˚±
(
fd
, (
sockaddr
 *)&
addr
, &
addæí
);

126 i‡(
sock
 =
INVALID_SOCKET
)

128 
	`≥º‹
("FailedÅoáccept client");

132 #i‚de‡
WIN32


133 i‡(
sock
 >
maxc⁄ns
)

135 ()
	`Ârötf
(
°dîr
, "Client outside socketÑange (specified with -c)\n");

136 
	`˛o£sockë
(
sock
);

141 
memˇched_¥Ÿocﬁ_˛õ¡_°
* 
c
;

142 
c

	`memˇched_¥Ÿocﬁ_¸óã_˛õ¡
(
£rvî
->
u£rd©a
, 
sock
);

143 i‡(
c
 =
NULL
)

145 ()
	`Ârötf
(
°dîr
, "FailedÅo create client\n");

146 
	`˛o£sockë
(
sock
);

150 
c⁄√˘i⁄
 *
˛õ¡
 = &
sockë_u£rd©a_m≠
[
sock
];

151 
˛õ¡
->
u£rd©a

c
;

153 
	`evít_£t
(&
˛õ¡
->
evít
, (
öçå_t
)
sock
, 
EV_READ
, 
drive_˛õ¡
, client);

154 
	`evít_ba£_£t
(
evít_ba£
, &
˛õ¡
->
evít
);

155 i‡(
	`evít_add
(&
˛õ¡
->
evít
, 0) == -1)

157 ()
	`Ârötf
(
°dîr
, "FaûedÅÿaddÉvíàf‹ %d\n", 
sock
);

158 
	`memˇched_¥Ÿocﬁ_˛õ¡_de°roy
(
c
);

159 
	`˛o£sockë
(
sock
);

162 
	}
}

168 
	$£rvî_sockë
(c⁄° *
p‹t
)

170 
addröfo
 *
ai
;

171 
addröfo
 
höts
{ .
ai_Êags

AI_PASSIVE
,

172 .
ai_Ámûy

AF_UNSPEC
,

173 .
ai_sockty≥

SOCK_STREAM
 };

175 
îr‹

	`gëaddröfo
("127.0.0.1", 
p‹t
, &
höts
, &
ai
);

176 i‡(
îr‹
 != 0)

178 i‡(
îr‹
 !
EAI_SYSTEM
)

179 
	`Ârötf
(
°dîr
, "gëaddröfo(): %s\n", 
	`gai_°ªº‹
(
îr‹
));

181 
	`≥º‹
("getaddrinfo()");

186 
lögî
 
lög
= {0, 0};

188 
addröfo
 *
√xt

ai
;Çext;Çext√xt->
ai_√xt
)

190 
memˇched_sockë_t
 
sock

	`sockë
(
ai
->
ai_Ámûy
,ái->
ai_sockty≥
,ái->
ai_¥Ÿocﬁ
);

191 i‡(
sock
 =
INVALID_SOCKET
)

193 
	`≥º‹
("FailedÅo create socket");

197 
Êags
;

198 #ifde‡
WIN32


199 
u_l⁄g
 
¨g
 = 1;

200 i‡(
	`io˘lsockë
(
sock
, 
FIONBIO
, &
¨g
Ë=
SOCKET_ERROR
)

202 
	`≥º‹
("FailedÅo setÇonblocking io");

203 
	`˛o£sockë
(
sock
);

207 
Êags

	`f˙é
(
sock
, 
F_GETFL
, 0);

208 i‡(
Êags
 == -1)

210 
	`≥º‹
("FailedÅo get socket flags");

211 
	`˛o£sockë
(
sock
);

215 i‡((
Êags
 & 
O_NONBLOCK
) != O_NONBLOCK)

217 i‡(
	`f˙é
(
sock
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1)

219 
	`≥º‹
("FailedÅo set socketÅoÇonblocking mode");

220 
	`˛o£sockë
(
sock
);

226 
Êags
= 1;

227 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
Êags
, (flags)) != 0)

228 
	`≥º‹
("FailedÅo set SO_REUSEADDR");

230 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
Êags
, (flags)) != 0)

231 
	`≥º‹
("FailedÅo set SO_KEEPALIVE");

233 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_LINGER
, (*)&
lög
, (ling)) != 0)

234 
	`≥º‹
("FailedÅo set SO_LINGER");

236 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*)&
Êags
, (flags)) != 0)

237 
	`≥º‹
("FailedÅo set TCP_NODELAY");

239 i‡(
	`böd
(
sock
, 
√xt
->
ai_addr
,Çext->
ai_addæí
Ë=
SOCKET_ERROR
)

241 i‡(
	`gë_sockë_î∫o
(Ë!
EADDRINUSE
)

243 
	`≥º‹
("bind()");

244 
	`‰ìaddröfo
(
ai
);

246 
	`˛o£sockë
(
sock
);

250 i‡(
	`li°í
(
sock
, 1024Ë=
SOCKET_ERROR
)

252 
	`≥º‹
("listen()");

253 
	`˛o£sockë
(
sock
);

257 
£rvî_sockës
[
num_£rvî_sockës
++]
sock
;

260 
	`‰ìaddröfo
(
ai
);

262  (
num_£rvî_sockës
 > 0) ? 0 : 1;

263 
	}
}

270 c⁄° * 
	$comcode2°r
(
uöt8_t
 
cmd
)

272 c⁄° * c⁄° 
ãxt
[] = {

281 i‡(
cmd
 <
PROTOCOL_BINARY_CMD_PREPENDQ
)

282  
ãxt
[
cmd
];

284  
NULL
;

285 
	}
}

290 
	$¥e_execuã
(c⁄° *
cookõ
,

291 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
)

293 i‡(
vîbo£
)

295 c⁄° *
cmd

	`comcode2°r
(
hódî
->
ªque°
.
›code
);

296 i‡(
cmd
 !
NULL
)

297 
	`Ârötf
(
°dîr
, "¥e_execuã from %p: %s\n", 
cookõ
, 
cmd
);

299 
	`Ârötf
(
°dîr
, "¥e_execuã from %p: 0x%02x\n", 
cookõ
, 
hódî
->
ªque°
.
›code
);

301 
	}
}

306 
	$po°_execuã
(c⁄° *
cookõ
,

307 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
)

309 i‡(
vîbo£
)

311 c⁄° *
cmd

	`comcode2°r
(
hódî
->
ªque°
.
›code
);

312 i‡(
cmd
 !
NULL
)

313 
	`Ârötf
(
°dîr
, "po°_execuã from %p: %s\n", 
cookõ
, 
cmd
);

315 
	`Ârötf
(
°dîr
, "po°_execuã from %p: 0x%02x\n", 
cookõ
, 
hódî
->
ªque°
.
›code
);

317 
	}
}

323 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$unknown
(c⁄° *
cookõ
,

324 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

325 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

327 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

328 .
mesßge
= {

329 .
hódî
.
ª•⁄£
= {

330 .
magic

PROTOCOL_BINARY_RES
,

331 .
›code

hódî
->
ªque°
.opcode,

332 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
),

333 .
›aque

hódî
->
ªque°
.opaque

338  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

339 
	}
}

348 
	$maö
(
¨gc
, **
¨gv
)

350 
cmd
;

351 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
öãrÁ˚
&
öãrÁ˚_v0_im∂
;

353 
	`mem£t
(&
globÆ_›ti⁄s
, 0, (global_options));

355 
evít_ba£

	`evít_öô
();

356 i‡(
evít_ba£
 =
NULL
)

358 
	`Ârötf
(
°dîr
, "FailedÅo createán instance ofÜibevent\n");

359  
EXIT_FAILURE
;

366 
	`öôülize_öãrÁ˚_v0_h™dÀr
();

368 (
cmd

	`gë›t
(
¨gc
, 
¨gv
, "v1p:P:?hc:")Ë!
EOF
)

370 
cmd
) {

372 
öãrÁ˚
&
öãrÁ˚_v1_im∂
;

375 
globÆ_›ti⁄s
.
pid_fûe

	`°rdup
(
›èrg
);

378 
globÆ_›ti⁄s
.
has_p‹t

åue
;

379 ()
	`£rvî_sockë
(
›èrg
);

382 
vîbo£

åue
;

385 
maxc⁄ns

	`©oi
(
›èrg
);

390 ()
	`Ârötf
(
°dîr
, "Usage: %s [-pÖort] [-v] [-1] [-c #clients] [-PÖidfile]\n",

391 
¨gv
[0]);

392  
EXIT_FAILURE
;

396 i‡(! 
	`öôülize_°‹age
())

399  
EXIT_FAILURE
;

402 i‡(! 
globÆ_›ti⁄s
.
has_p‹t
)

403 ()
	`£rvî_sockë
("9999");

405 i‡(
globÆ_›ti⁄s
.
pid_fûe
)

407 
FILE
 *
pid_fûe
;

408 
uöt32_t
 
pid
;

410 
pid_fûe

	`f›í
(
globÆ_›ti⁄s
.pid_file, "w+");

412 i‡(
pid_fûe
 =
NULL
)

414 
	`≥º‹
(
	`°ªº‹
(
	`gë_sockë_î∫o
()));

415 
	`ab‹t
();

418 
pid
(
uöt32_t
)
	`gëpid
();

419 
	`Ârötf
(
pid_fûe
, "%u\n", 
pid
);

420 
	`f˛o£
(
pid_fûe
);

423 i‡(
num_£rvî_sockës
 == 0)

425 
	`Ârötf
(
°dîr
, "I don't haveány server sockets\n");

426  
EXIT_FAILURE
;

434 
öãrÁ˚
->
¥e_execuã
=Öre_execute;

435 
öãrÁ˚
->
po°_execuã
=Öost_execute;

436 
öãrÁ˚
->
unknown
= unknown;

438 
memˇched_¥Ÿocﬁ_°
 *
¥Ÿocﬁ_h™dÀ
;

439 i‡((
¥Ÿocﬁ_h™dÀ

	`memˇched_¥Ÿocﬁ_¸óã_ö°™˚
()Ë=
NULL
)

441 
	`Ârötf
(
°dîr
, "FailedÅoállocateÖrotocol handle\n");

442  
EXIT_FAILURE
;

445 
sockë_u£rd©a_m≠

	`ˇŒoc
((
size_t
)(
maxc⁄ns
), (
c⁄√˘i⁄
));

446 i‡(
sockë_u£rd©a_m≠
 =
NULL
)

448 
	`Ârötf
(
°dîr
, "FailedÅoállocateÑoom for connections\n");

449  
EXIT_FAILURE
;

452 
	`memˇched_bö¨y_¥Ÿocﬁ_£t_ˇŒbacks
(
¥Ÿocﬁ_h™dÀ
, 
öãrÁ˚
);

453 
	`memˇched_bö¨y_¥Ÿocﬁ_£t_≥d™tic
(
¥Ÿocﬁ_h™dÀ
, 
åue
);

455 
xx
0; xx < 
num_£rvî_sockës
; ++xx)

457 
c⁄√˘i⁄
 *
c⁄n
&
sockë_u£rd©a_m≠
[
£rvî_sockës
[
xx
]];

458 
c⁄n
->
u£rd©a

¥Ÿocﬁ_h™dÀ
;

459 
	`evít_£t
(&
c⁄n
->
evít
, (
öçå_t
)
£rvî_sockës
[
xx
], 
EV_READ
 | 
EV_PERSIST
,

460 
ac˚±_h™dÀr
, 
c⁄n
);

461 
	`evít_ba£_£t
(
evít_ba£
, &
c⁄n
->
evít
);

462 i‡(
	`evít_add
(&
c⁄n
->
evít
, 0) == -1)

464 
	`Ârötf
(
°dîr
, "FaûedÅÿaddÉvíàf‹ %d\n", 
£rvî_sockës
[
xx
]);

465 
	`˛o£sockë
(
£rvî_sockës
[
xx
]);

470 
	`evít_ba£_lo›
(
evít_ba£
, 0);

473  
EXIT_SUCCESS
;

474 
	}
}

	@example/memcached_light.h

2 #i‚de‡
MEMCACHED_LIGHT_H


3 
	#MEMCACHED_LIGHT_H


	)

5 
öôülize_öãrÁ˚_v0_h™dÀr
();

	@example/storage.c

2 
	~"c⁄fig.h
"

3 
	~<°dlib.h
>

4 
	~<öây≥s.h
>

5 
	~<time.h
>

6 
	~<°dboﬁ.h
>

7 
	~<°rög.h
>

8 
	~"°‹age.h
"

10 
	sli°_íåy
 {

11 
ôem
 
	môem
;

12 
li°_íåy
 *
	m√xt
;

13 
li°_íåy
 *
	m¥ev
;

16 
li°_íåy
 *
	groŸ
;

17 
uöt64_t
 
	gˇs
;

19 
boﬁ
 
	$öôülize_°‹age
()

21  
åue
;

22 
	}
}

24 
	$shutdown_°‹age
()

27 
	}
}

29 
	$put_ôem
(
ôem
* item)

31 
li°_íåy
* 
íåy
(*)
ôem
;

33 
	`upd©e_ˇs
(
ôem
);

35 i‡(
roŸ
 =
NULL
)

37 
íåy
->
√xt
íåy->
¥ev
=Éntry;

41 
íåy
->
¥ev

roŸ
->prev;

42 
íåy
->
√xt

roŸ
;

43 
íåy
->
¥ev
->
√xt
=Éntry;

44 
íåy
->
√xt
->
¥ev
=Éntry;

47 
roŸ

íåy
;

48 
	}
}

50 
ôem
* 
	$gë_ôem
(c⁄° * 
key
, 
size_t
 
nkey
)

52 
li°_íåy
 *
wÆkî

roŸ
;

54 i‡(
roŸ
 =
NULL
)

56  
NULL
;

61 i‡(((
ôem
*)
wÆkî
)->
nkey
 ==Çkey &&

62 
	`memcmp
(((
ôem
*)
wÆkî
)->
key
, key, 
nkey
) == 0)

64  (
ôem
*)
wÆkî
;

66 
wÆkî
wÆkî->
√xt
;

67 } 
wÆkî
 !
roŸ
);

69  
NULL
;

70 
	}
}

72 
ôem
* 
	$¸óã_ôem
(c⁄° * 
key
, 
size_t
 
nkey
, c⁄° * 
d©a
,

73 
size_t
 
size
, 
uöt32_t
 
Êags
, 
time_t
 
exp
)

75 
ôem
* 
ªt

	`ˇŒoc
(1, (
li°_íåy
));

77 i‡(
ªt
 !
NULL
)

79 
ªt
->
key

	`mÆloc
(
nkey
);

80 i‡(
size
 > 0)

82 
ªt
->
d©a

	`mÆloc
(
size
);

85 i‡(
ªt
->
key
 =
NULL
 || (
size
 > 0 &&Ñë->
d©a
 == NULL))

87 
	`‰ì
(
ªt
->
key
);

88 
	`‰ì
(
ªt
->
d©a
);

89 
	`‰ì
(
ªt
);

90  
NULL
;

93 
	`mem˝y
(
ªt
->
key
, key, 
nkey
);

94 i‡(
d©a
 !
NULL
)

96 
	`mem˝y
(
ªt
->
d©a
, d©a, 
size
);

99 
ªt
->
nkey
=Çkey;

100 
ªt
->
size
= size;

101 
ªt
->
Êags
= flags;

102 
ªt
->
exp
=Éxp;

105  
ªt
;

106 
	}
}

108 
boﬁ
 
	$dñëe_ôem
(c⁄° * 
key
, 
size_t
 
nkey
)

110 
ôem
* iãm
	`gë_ôem
(
key
, 
nkey
);

111 
boﬁ
 
ªt

Ál£
;

113 i‡(
ôem
)

116 
li°_íåy
 *
íåy
(*)
ôem
;

118 i‡(
íåy
->
√xt
 ==Éntry)

121 
roŸ

NULL
;

127 
roŸ

íåy
->
√xt
;

128 
íåy
->
¥ev
->
√xt
=Éntry->next;

129 
íåy
->
√xt
->
¥ev
=Éntry->prev;

132 
	`‰ì
(
ôem
->
key
);

133 
	`‰ì
(
ôem
->
d©a
);

134 
	`‰ì
(
ôem
);

135 
ªt

åue
;

138  
ªt
;

139 
	}
}

141 
	$Êush
(
uöt32_t
 
whí
)

144 ()
whí
;

146 i‡(
roŸ
 =
NULL
)

151 
roŸ
->
¥ev
->
√xt

NULL
;

152 
roŸ
 !
NULL
)

154 
ôem
* 
tmp
(*)
roŸ
;

155 
roŸ
roŸ->
√xt
;

157 
	`‰ì
(
tmp
->
key
);

158 
	`‰ì
(
tmp
->
d©a
);

159 
	`‰ì
(
tmp
);

161 
	}
}

163 
	$upd©e_ˇs
(
ôem
* item)

165 
ôem
->
ˇs
= ++cas;

166 
	}
}

168 
	$ªÀa£_ôem
(
ôem
* item)

170 ()
ôem
;

172 
	}
}

	@example/storage.h

2 #i‚de‡
STORAGE_H


3 
	#STORAGE_H


	)

5 
	sôem
 {

6 
uöt64_t
 
	mˇs
;

7 * 
	mkey
;

8 
size_t
 
	mnkey
;

9 * 
	md©a
;

10 
size_t
 
	msize
;

11 
uöt32_t
 
	mÊags
;

12 
time_t
 
	mexp
;

15 
boﬁ
 
öôülize_°‹age
();

16 
shutdown_°‹age
();

18 
upd©e_ˇs
(
ôem
* item);

19 
put_ôem
(
ôem
* item);

20 
ôem
* 
gë_ôem
(c⁄° * 
key
, 
size_t
 
nkey
);

21 
ôem
* 
¸óã_ôem
(c⁄° * 
key
, 
size_t
 
nkey
, c⁄° *
d©a
,

22 
size_t
 
size
, 
uöt32_t
 
Êags
, 
time_t
 
exp
);

23 
boﬁ
 
dñëe_ôem
(c⁄° * 
key
, 
size_t
 
nkey
);

24 
Êush
(
uöt32_t
 
whí
);

25 
ªÀa£_ôem
(
ôem
* item);

	@example/storage_innodb.c

2 
	~<°dlib.h
>

3 
	~<öây≥s.h
>

4 
	~<time.h
>

5 
	~<°dboﬁ.h
>

6 
	~<°rög.h
>

7 
	~<uni°d.h
>

8 
	~<as£π.h
>

9 
	~<embedded_önodb-1.0/önodb.h
>

11 
	~"°‹age.h
"

13 c⁄° *
	gèbÀ«me
= "memcached/items";

15 
	#key_cﬁ_idx
 0

	)

16 
	#d©a_cﬁ_idx
 1

	)

17 
	#Êags_cﬁ_idx
 2

	)

18 
	#ˇs_cﬁ_idx
 3

	)

19 
	#exp_cﬁ_idx
 4

	)

21 
uöt64_t
 
	gˇs
;

34 
	#checked
(
ex¥essi⁄
) \

36 
ib_îr_t
 
checked_îr

ex¥essi⁄
; \

37 i‡(
checked_îr
 !
DB_SUCCESS
) \

39 
	`Ârötf
(
°dîr
, "ERROR: %sát %u: Failed: <%s>\n\t%s\n", \

40 
__FILE__
, 
__LINE__
, #expression, \

41 
	`ib_°ªº‹
(
checked_îr
)); \

42 
îr‹_exô
; \

44 } 0);

	)

51 
boﬁ
 
	$¸óã_schema
()

53 
ib_tbl_sch_t
 
schema

NULL
;

54 
ib_idx_sch_t
 
dbödex

NULL
;

56 i‡(
	`ib_d©aba£_¸óã
("memˇched"Ë!
IB_TRUE
)

58 
	`Ârötf
(
°dîr
, "FailedÅo create database\n");

59  
Ál£
;

62 
ib_åx_t
 
å™ß˘i⁄

	`ib_åx_begö
(
IB_TRX_SERIALIZABLE
);

63 
ib_id_t
 
èbÀ_id
;

65 
	`checked
(
	`ib_èbÀ_schema_¸óã
(
èbÀ«me
, &
schema
, 
IB_TBL_COMPACT
, 0));

66 
	`checked
(
	`ib_èbÀ_schema_add_cﬁ
(
schema
, "key", 
IB_BLOB
,

67 
IB_COL_NOT_NULL
, 0, 32767));

68 
	`checked
(
	`ib_èbÀ_schema_add_cﬁ
(
schema
, "d©a", 
IB_BLOB
,

69 
IB_COL_NONE
, 0, 1024*1024));

70 
	`checked
(
	`ib_èbÀ_schema_add_cﬁ
(
schema
, "Êags", 
IB_INT
,

71 
IB_COL_UNSIGNED
, 0, 4));

72 
	`checked
(
	`ib_èbÀ_schema_add_cﬁ
(
schema
, "ˇs", 
IB_INT
,

73 
IB_COL_UNSIGNED
, 0, 8));

74 
	`checked
(
	`ib_èbÀ_schema_add_cﬁ
(
schema
, "exp", 
IB_INT
,

75 
IB_COL_UNSIGNED
, 0, 4));

76 
	`checked
(
	`ib_èbÀ_schema_add_ödex
(
schema
, "PRIMARY_KEY", &
dbödex
));

77 
	`checked
(
	`ib_ödex_schema_add_cﬁ
(
dbödex
, "key", 0));

78 
	`checked
(
	`ib_ödex_schema_£t_˛u°îed
(
dbödex
));

79 
	`checked
(
	`ib_schema_lock_ex˛usive
(
å™ß˘i⁄
));

80 
	`checked
(
	`ib_èbÀ_¸óã
(
å™ß˘i⁄
, 
schema
, &
èbÀ_id
));

81 
	`checked
(
	`ib_åx_commô
(
å™ß˘i⁄
));

82 
	`ib_èbÀ_schema_dñëe
(
schema
);

84  
åue
;

86 
îr‹_exô
:

89 
ib_îr_t
 
îr‹

	`ib_åx_rﬁlback
(
å™ß˘i⁄
);

90 i‡(
îr‹
 !
DB_SUCCESS
)

91 
	`Ârötf
(
°dîr
, "FailedÅoÑoll backÅheÅransaction:\n\t%s\n",

92 
	`ib_°ªº‹
(
îr‹
));

94  
Ál£
;

95 
	}
}

105 
boﬁ
 
	$do_put_ôem
(
ib_åx_t
 
åx
, 
ôem
* item)

107 
	`upd©e_ˇs
(
ôem
);

109 
ib_¸§_t
 
curs‹

NULL
;

110 
ib_çl_t
 
tu∂e

NULL
;

111 
boﬁ
 
ªtvÆ

Ál£
;

113 
	`checked
(
	`ib_curs‹_›í_èbÀ
(
èbÀ«me
, 
åx
, &
curs‹
));

114 
	`checked
(
	`ib_curs‹_lock
(
curs‹
, 
IB_LOCK_X
));

115 
tu∂e

	`ib_˛u°_ªad_tu∂e_¸óã
(
curs‹
);

117 
	`checked
(
	`ib_cﬁ_£t_vÆue
(
tu∂e
, 
key_cﬁ_idx
, 
ôem
->
key
, iãm->
nkey
));

118 
	`checked
(
	`ib_cﬁ_£t_vÆue
(
tu∂e
, 
d©a_cﬁ_idx
, 
ôem
->
d©a
, iãm->
size
));

119 
	`checked
(
	`ib_tu∂e_wrôe_u32
(
tu∂e
, 
Êags_cﬁ_idx
, 
ôem
->
Êags
));

120 
	`checked
(
	`ib_tu∂e_wrôe_u64
(
tu∂e
, 
ˇs_cﬁ_idx
, 
ôem
->
ˇs
));

121 
	`checked
(
	`ib_tu∂e_wrôe_u32
(
tu∂e
, 
exp_cﬁ_idx
, (
ib_u32_t
)
ôem
->
exp
));

122 
	`checked
(
	`ib_curs‹_ö£π_row
(
curs‹
, 
tu∂e
));

124 
ªtvÆ

åue
;

128 
îr‹_exô
:

129 i‡(
tu∂e
 !
NULL
)

130 
	`ib_tu∂e_dñëe
(
tu∂e
);

132 
ib_îr_t
 
cuºs‹_îr‹
;

133 i‡(
curs‹
 !
NULL
)

134 
cuºs‹_îr‹

	`ib_curs‹_˛o£
(
curs‹
);

136  
ªtvÆ
;

137 
	}
}

150 
boﬁ
 
	$do_loˇã_ôem
(
ib_åx_t
 
åx
,

151 c⁄° * 
key
,

152 
size_t
 
nkey
,

153 
ib_¸§_t
 *
curs‹
)

155 
ªs
;

156 
ib_çl_t
 
tu∂e

NULL
;

158 *
curs‹

NULL
;

160 
	`checked
(
	`ib_curs‹_›í_èbÀ
(
èbÀ«me
, 
åx
, 
curs‹
));

161 
tu∂e

	`ib_˛u°_£¨ch_tu∂e_¸óã
(*
curs‹
);

162 i‡(
tu∂e
 =
NULL
)

164 
	`Ârötf
(
°dîr
, "FailedÅoállocateÅuple object\n");

165 
îr‹_exô
;

168 
	`checked
(
	`ib_cﬁ_£t_vÆue
(
tu∂e
, 
key_cﬁ_idx
, 
key
, 
nkey
));

169 
ib_îr_t
 
îr

	`ib_curs‹_movëo
(*
curs‹
, 
tu∂e
, 
IB_CUR_GE
, &
ªs
);

171 i‡(
îr
 =
DB_SUCCESS
 && 
ªs
 == 0)

173 
	`ib_tu∂e_dñëe
(
tu∂e
);

174  
åue
;

176 i‡(
îr
 !
DB_SUCCESS
 &&

177 
îr
 !
DB_RECORD_NOT_FOUND
 &&

178 
îr
 !
DB_END_OF_INDEX
)

180 
	`Ârötf
(
°dîr
, "ERROR: ib_curs‹_movëo(): %s\n", 
	`ib_°ªº‹
(
îr
));

183 
îr‹_exô
:

184 i‡(
tu∂e
 !
NULL
)

185 
	`ib_tu∂e_dñëe
(
tu∂e
);

187 
ib_îr_t
 
curs‹_îr‹
;

188 i‡(*
curs‹
 !
NULL
)

189 
curs‹_îr‹

	`ib_curs‹_˛o£
(*
curs‹
);

191 *
curs‹

NULL
;

193  
Ál£
;

194 
	}
}

204 
ôem
* 
	$do_gë_ôem
(
ib_åx_t
 
åx
, c⁄° * 
key
, 
size_t
 
nkey
)

206 
ib_¸§_t
 
curs‹

NULL
;

207 
ib_çl_t
 
tu∂e

NULL
;

208 
ôem
* 
ªtvÆ

NULL
;

210 i‡(
	`do_loˇã_ôem
(
åx
, 
key
, 
nkey
, &
curs‹
))

212 
tu∂e

	`ib_˛u°_ªad_tu∂e_¸óã
(
curs‹
);

213 i‡(
tu∂e
 =
NULL
)

215 
	`Ârötf
(
°dîr
, "FailedÅo createÑeadÅuple\n");

216 
îr‹_exô
;

218 
	`checked
(
	`ib_curs‹_ªad_row
(
curs‹
, 
tu∂e
));

219 
ib_cﬁ_mëa_t
 
mëa
;

220 
ib_ulöt_t
 
d©Æí

	`ib_cﬁ_gë_mëa
(
tu∂e
, 
d©a_cﬁ_idx
, &
mëa
);

221 
ib_ulöt_t
 
ÊagÀn

	`ib_cﬁ_gë_mëa
(
tu∂e
, 
Êags_cﬁ_idx
, &
mëa
);

222 
ib_ulöt_t
 
ˇ¶í

	`ib_cﬁ_gë_mëa
(
tu∂e
, 
ˇs_cﬁ_idx
, &
mëa
);

223 
ib_ulöt_t
 
ex∂í

	`ib_cﬁ_gë_mëa
(
tu∂e
, 
exp_cﬁ_idx
, &
mëa
);

224 c⁄° *
d©≠å

	`ib_cﬁ_gë_vÆue
(
tu∂e
, 
d©a_cﬁ_idx
);

226 
ªtvÆ

	`¸óã_ôem
(
key
, 
nkey
, 
d©≠å
, 
d©Æí
, 0, 0);

227 i‡(
ªtvÆ
 =
NULL
)

229 
	`Ârötf
(
°dîr
, "FailedÅoállocate memory\n");

230 
îr‹_exô
;

233 i‡(
ÊagÀn
 != 0)

235 
ib_u32_t
 
vÆ
;

236 
	`checked
(
	`ib_tu∂e_ªad_u32
(
tu∂e
, 
Êags_cﬁ_idx
, &
vÆ
));

237 
ªtvÆ
->
Êags
(
uöt32_t
)
vÆ
;

239 i‡(
ˇ¶í
 != 0)

241 
ib_u64_t
 
vÆ
;

242 
	`checked
(
	`ib_tu∂e_ªad_u64
(
tu∂e
, 
ˇs_cﬁ_idx
, &
vÆ
));

243 
ªtvÆ
->
ˇs
(
uöt64_t
)
vÆ
;

245 i‡(
ex∂í
 != 0)

247 
ib_u32_t
 
vÆ
;

248 
	`checked
(
	`ib_tu∂e_ªad_u32
(
tu∂e
, 
exp_cﬁ_idx
, &
vÆ
));

249 
ªtvÆ
->
exp
(
time_t
)
vÆ
;

256 
îr‹_exô
:

257 i‡(
tu∂e
 !
NULL
)

258 
	`ib_tu∂e_dñëe
(
tu∂e
);

260 
ib_îr_t
 
curs‹_îr‹
;

261 i‡(
curs‹
 !
NULL
)

262 
curs‹_îr‹

	`ib_curs‹_˛o£
(
curs‹
);

264  
ªtvÆ
;

265 
	}
}

275 
boﬁ
 
	$do_dñëe_ôem
(
ib_åx_t
 
åx
, c⁄° * 
key
, 
size_t
 
nkey
) {

276 
ib_¸§_t
 
curs‹

NULL
;

277 
boﬁ
 
ªtvÆ

Ál£
;

279 i‡(
	`do_loˇã_ôem
(
åx
, 
key
, 
nkey
, &
curs‹
))

281 
	`checked
(
	`ib_curs‹_lock
(
curs‹
, 
IB_LOCK_X
));

282 
	`checked
(
	`ib_curs‹_dñëe_row
(
curs‹
));

283 
ªtvÆ

åue
;

288 
îr‹_exô
:

289 i‡(
curs‹
 !
NULL
)

291 
ib_îr_t
 
curs‹_îr‹
;

292 
curs‹_îr‹

	`ib_curs‹_˛o£
(
curs‹
);

295  
ªtvÆ
;

296 
	}
}

307 
boﬁ
 
	$öôülize_°‹age
()

309 
ib_îr_t
 
îr‹
;

310 
ib_id_t
 
tid
;

312 
	`checked
(
	`ib_öô
());

313 
	`checked
(
	`ib_cfg_£t_ãxt
("data_home_dir", "/tmp/memcached_light"));

314 
	`checked
(
	`ib_cfg_£t_ãxt
("log_group_home_dir", "/tmp/memcached_light"));

315 
	`checked
(
	`ib_cfg_£t_boﬁ_⁄
("file_per_table"));

316 
	`checked
(
	`ib_°¨tup
("barracuda"));

319 
îr‹

	`ib_èbÀ_gë_id
(
èbÀ«me
, &
tid
);

320 i‡(
îr‹
 =
DB_TABLE_NOT_FOUND
)

322 i‡(!
	`¸óã_schema
())

324  
Ál£
;

327 i‡(
îr‹
 !
DB_SUCCESS
)

329 
	`Ârötf
(
°dîr
, "FaûedÅÿgëÅabÀ id: %s\n", 
	`ib_°ªº‹
(
îr‹
));

330  
Ál£
;

333  
åue
;

335 
îr‹_exô
:

337  
Ál£
;

338 
	}
}

343 
	$shutdown_°‹age
()

345 
	`checked
(
	`ib_shutdown
(
IB_SHUTDOWN_NORMAL
));

346 
îr‹_exô
:

348 
	}
}

355 
	$put_ôem
(
ôem
* item)

357 
ib_åx_t
 
å™ß˘i⁄

	`ib_åx_begö
(
IB_TRX_SERIALIZABLE
);

358 i‡(
	`do_put_ôem
(
å™ß˘i⁄
, 
ôem
))

360 
ib_îr_t
 
îr‹

	`ib_åx_commô
(
å™ß˘i⁄
);

361 i‡(
îr‹
 !
DB_SUCCESS
)

363 
	`Ârötf
(
°dîr
, "FailedÅo store key:\n\t%s\n",

364 
	`ib_°ªº‹
(
îr‹
));

369 
ib_îr_t
 
îr‹

	`ib_åx_rﬁlback
(
å™ß˘i⁄
);

370 i‡(
îr‹
 !
DB_SUCCESS
)

371 
	`Ârötf
(
°dîr
, "FailedÅoÑoll backÅheÅransaction:\n\t%s\n",

372 
	`ib_°ªº‹
(
îr‹
));

374 
	}
}

382 
ôem
* 
	$gë_ôem
(c⁄° * 
key
, 
size_t
 
nkey
)

384 
ib_åx_t
 
å™ß˘i⁄

	`ib_åx_begö
(
IB_TRX_SERIALIZABLE
);

385 
ôem
* 
ªt

	`do_gë_ôem
(
å™ß˘i⁄
, 
key
, 
nkey
);

386 
ib_îr_t
 
îr‹

	`ib_åx_rﬁlback
(
å™ß˘i⁄
);

388 i‡(
îr‹
 !
DB_SUCCESS
)

389 
	`Ârötf
(
°dîr
, "FailedÅoÑoll backÅheÅransaction:\n\t%s\n",

390 
	`ib_°ªº‹
(
îr‹
));

392  
ªt
;

393 
	}
}

406 
ôem
* 
	$¸óã_ôem
(c⁄° * 
key
, 
size_t
 
nkey
, c⁄° * 
d©a
,

407 
size_t
 
size
, 
uöt32_t
 
Êags
, 
time_t
 
exp
)

409 
ôem
* 
ªt

	`ˇŒoc
(1, (*ret));

410 i‡(
ªt
 !
NULL
)

412 
ªt
->
key

	`mÆloc
(
nkey
);

413 i‡(
size
 > 0)

415 
ªt
->
d©a

	`mÆloc
(
size
);

418 i‡(
ªt
->
key
 =
NULL
 || (
size
 > 0 &&Ñë->
d©a
 == NULL))

420 
	`‰ì
(
ªt
->
key
);

421 
	`‰ì
(
ªt
->
d©a
);

422 
	`‰ì
(
ªt
);

423  
NULL
;

426 
	`mem˝y
(
ªt
->
key
, key, 
nkey
);

427 i‡(
d©a
 !
NULL
)

429 
	`mem˝y
(
ªt
->
d©a
, d©a, 
size
);

432 
ªt
->
nkey
=Çkey;

433 
ªt
->
size
= size;

434 
ªt
->
Êags
= flags;

435 
ªt
->
exp
=Éxp;

438  
ªt
;

439 
	}
}

447 
boﬁ
 
	$dñëe_ôem
(c⁄° * 
key
, 
size_t
 
nkey
) {

448 
ib_åx_t
 
å™ß˘i⁄

	`ib_åx_begö
(
IB_TRX_REPEATABLE_READ
);

450 
boﬁ
 
ªt

	`do_dñëe_ôem
(
å™ß˘i⁄
, 
key
, 
nkey
);

452 i‡(
ªt
)

455 
ib_îr_t
 
îr‹

	`ib_åx_commô
(
å™ß˘i⁄
);

456 i‡(
îr‹
 !
DB_SUCCESS
)

458 
	`Ârötf
(
°dîr
, "FailedÅo delete key:\n\t%s\n",

459 
	`ib_°ªº‹
(
îr‹
));

460 
ªt

Ál£
;

465 
ib_îr_t
 
îr‹

	`ib_åx_rﬁlback
(
å™ß˘i⁄
);

466 i‡(
îr‹
 !
DB_SUCCESS
)

467 
	`Ârötf
(
°dîr
, "FailedÅoÑoll backÅheÅransaction:\n\t%s\n",

468 
	`ib_°ªº‹
(
îr‹
));

471  
ªt
;

472 
	}
}

478 
Êush
(
uöt32_t
 
whí
 
__©åibuã__
((
unu£d
)))

481 
ib_åx_t
 
	gå™ß˘i⁄

ib_åx_begö
(
IB_TRX_REPEATABLE_READ
);

482 
ib_¸§_t
 
	gcurs‹

NULL
;

483 
ib_îr_t
 
	gîr

DB_SUCCESS
;

485 
checked
(
ib_curs‹_›í_èbÀ
(
èbÀ«me
, 
å™ß˘i⁄
, &
curs‹
));

486 
checked
(
ib_curs‹_fú°
(
curs‹
));

487 
checked
(
ib_curs‹_lock
(
curs‹
, 
IB_LOCK_X
));

491 
checked
(
ib_curs‹_dñëe_row
(
curs‹
));

492 } (
	gîr

ib_curs‹_√xt
(
curs‹
)Ë=
DB_SUCCESS
);

494 i‡(
	gîr
 !
DB_END_OF_INDEX
)

496 
Ârötf
(
°dîr
, "FaûedÅÿÊushÅhêˇche: %s\n", 
ib_°ªº‹
(
îr
));

497 
	gîr‹_exô
;

499 
ib_îr_t
 
	gcurs‹_îr‹
;

500 
	gcurs‹_îr‹

ib_curs‹_˛o£
(
curs‹
);

501 
	gcurs‹

NULL
;

502 
checked
(
ib_åx_commô
(
å™ß˘i⁄
));

505 
	gîr‹_exô
:

506 i‡(
curs‹
 !
NULL
)

508 
curs‹_îr‹

ib_curs‹_˛o£
(
curs‹
);

511 
ib_îr_t
 
	gîr‹

ib_åx_rﬁlback
(
å™ß˘i⁄
);

512 i‡(
	gîr‹
 !
DB_SUCCESS
)

513 
Ârötf
(
°dîr
, "FailedÅoÑoll backÅheÅransaction:\n\t%s\n",

514 
ib_°ªº‹
(
îr‹
));

521 
	$upd©e_ˇs
(
ôem
* item)

523 
ôem
->
ˇs
= ++cas;

524 
	}
}

530 
	$ªÀa£_ôem
(
ôem
* item)

532 
	`‰ì
(
ôem
->
key
);

533 
	`‰ì
(
ôem
->
d©a
);

534 
	`‰ì
(
ôem
);

535 
	}
}

	@libhashkit/algorithm.c

9 
	~<libhashkô/comm⁄.h
>

11 
uöt32_t
 
	$libhashkô_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
)

13  
	`hashkô_⁄e_©_a_time
(
key
, 
key_Àngth
, 
NULL
);

14 
	}
}

16 
uöt32_t
 
	$libhashkô_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
)

18  
	`hashkô_‚v1_64
(
key
, 
key_Àngth
, 
NULL
);

19 
	}
}

21 
uöt32_t
 
	$libhashkô_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
)

23  
	`hashkô_‚v1a_64
(
key
, 
key_Àngth
, 
NULL
);

24 
	}
}

26 
uöt32_t
 
	$libhashkô_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

28  
	`hashkô_‚v1_32
(
key
, 
key_Àngth
, 
NULL
);

29 
	}
}

31 
uöt32_t
 
	$libhashkô_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

33  
	`hashkô_‚v1a_32
(
key
, 
key_Àngth
, 
NULL
);

34 
	}
}

36 
uöt32_t
 
	$libhashkô_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

38  
	`hashkô_¸c32
(
key
, 
key_Àngth
, 
NULL
);

39 
	}
}

41 #ifde‡
HAVE_HSIEH_HASH


42 
uöt32_t
 
	$libhashkô_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
)

44  
	`hashkô_hsõh
(
key
, 
key_Àngth
, 
NULL
);

45 
	}
}

48 #ifde‡
HAVE_MURMUR_HASH


49 
uöt32_t
 
	$libhashkô_murmur
(c⁄° *
key
, 
size_t
 
key_Àngth
)

51  
	`hashkô_murmur
(
key
, 
key_Àngth
, 
NULL
);

52 
	}
}

55 
uöt32_t
 
	$libhashkô_jíkös
(c⁄° *
key
, 
size_t
 
key_Àngth
)

57  
	`hashkô_jíkös
(
key
, 
key_Àngth
, 
NULL
);

58 
	}
}

60 
uöt32_t
 
	$libhashkô_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
)

62  
	`hashkô_md5
(
key
, 
key_Àngth
, 
NULL
);

63 
	}
}

65 
	$libhashkô_md5_sig«tuª
(c⁄° *
key
, 
size_t
 
Àngth
, *
ªsu…
)

67 
	`md5_sig«tuª
(
key
, (
uöt32_t
)
Àngth
, 
ªsu…
);

68 
	}
}

	@libhashkit/algorithm.h

14 #i‚de‡
HASHKIT_ALGORITHM_H


15 
	#HASHKIT_ALGORITHM_H


	)

17 #ifde‡
__˝lu•lus


21 
HASHKIT_API


22 
uöt32_t
 
libhashkô_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
);

24 
HASHKIT_API


25 
uöt32_t
 
libhashkô_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
);

27 
HASHKIT_API


28 
uöt32_t
 
libhashkô_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
);

30 
HASHKIT_API


31 
uöt32_t
 
libhashkô_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

33 
HASHKIT_API


34 
uöt32_t
 
libhashkô_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

36 
HASHKIT_API


37 
uöt32_t
 
libhashkô_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

39 #ifde‡
HAVE_HSIEH_HASH


40 
HASHKIT_API


41 
uöt32_t
 
libhashkô_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
);

44 #ifde‡
HAVE_MURMUR_HASH


45 
HASHKIT_API


46 
uöt32_t
 
libhashkô_murmur
(c⁄° *
key
, 
size_t
 
key_Àngth
);

49 
HASHKIT_API


50 
uöt32_t
 
libhashkô_jíkös
(c⁄° *
key
, 
size_t
 
key_Àngth
);

52 
HASHKIT_API


53 
uöt32_t
 
libhashkô_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
);

55 
HASHKIT_LOCAL


56 
uöt32_t
 
hashkô_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

58 
HASHKIT_LOCAL


59 
uöt32_t
 
hashkô_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

61 
HASHKIT_LOCAL


62 
uöt32_t
 
hashkô_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

64 
HASHKIT_LOCAL


65 
uöt32_t
 
hashkô_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

67 
HASHKIT_LOCAL


68 
uöt32_t
 
hashkô_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

70 
HASHKIT_LOCAL


71 
uöt32_t
 
hashkô_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

73 #ifde‡
HAVE_HSIEH_HASH


74 
HASHKIT_LOCAL


75 
uöt32_t
 
hashkô_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

78 #ifde‡
HAVE_MURMUR_HASH


79 
HASHKIT_LOCAL


80 
uöt32_t
 
hashkô_murmur
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

83 
HASHKIT_LOCAL


84 
uöt32_t
 
hashkô_jíkös
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

86 
HASHKIT_LOCAL


87 
uöt32_t
 
hashkô_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
);

89 
HASHKIT_API


90 
libhashkô_md5_sig«tuª
(c⁄° *
key
, 
size_t
 
Àngth
, *
ªsu…
);

92 #ifde‡
__˝lu•lus


	@libhashkit/behavior.c

9 
	~<libhashkô/comm⁄.h
>

	@libhashkit/behavior.h

14 #i‚de‡
HASHKIT_BEHAVIOR_H


15 
	#HASHKIT_BEHAVIOR_H


	)

17 #ifde‡
__˝lu•lus


22 #ifde‡
__˝lu•lus


	@libhashkit/common.h

9 #i‚de‡
HASHKIT_COMMON_H


10 
	#HASHKIT_COMMON_H


	)

12 
	~<c⁄fig.h
>

14 
	~<as£π.h
>

15 
	~<î∫o.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<m©h.h
>

20 
	~<libhashkô/hashkô.h
>

22 #ifde‡
__˝lu•lus


26 
HASHKIT_LOCAL


27 
md5_sig«tuª
(c⁄° *
key
, 
Àngth
, *
ªsu…
);

29 
HASHKIT_LOCAL


30 
upd©e_c⁄töuum
(
hashkô_°
 *
hashkô
);

32 #ifde‡
__˝lu•lus


	@libhashkit/configure.h

8 #i‚de‡
LIBHASHKIT_CONFIGURE_H


9 
	#LIBHASHKIT_CONFIGURE_H


	)

11 #ifde‡
__˝lu•lus


15 #ifde‡
__˝lu•lus


	@libhashkit/crc32.c

7 
	~<libhashkô/comm⁄.h
>

9 c⁄° 
uöt32_t
 
	g¸c32èb
[256] = {

76 
uöt32_t
 
	$hashkô_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

78 
uöt64_t
 
x
;

79 
uöt32_t
 
¸c

UINT32_MAX
;

80 ()
c⁄ãxt
;

82 
x
0; x < 
key_Àngth
; x++)

83 
¸c
(¸¯>> 8Ë^ 
¸c32èb
[(¸¯^ (
uöt64_t
)
key
[
x
]) & 0xff];

85  ((~
¸c
) >> 16) & 0x7fff;

86 
	}
}

	@libhashkit/digest.c

9 
	~<libhashkô/comm⁄.h
>

11 
uöt32_t
 
	$hashkô_dige°
(c⁄° 
hashkô_°
 *
£lf
, c⁄° *
key
, 
size_t
 
key_Àngth
)

13  
£lf
->
ba£_hash
.
	`fun˘i⁄
(
key
, 
key_Àngth
, sñf->ba£_hash.
c⁄ãxt
);

14 
	}
}

16 
uöt32_t
 
	$libhashkô_dige°
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

18 
hash_Æg‹ôhm
)

20 
HASHKIT_HASH_DEFAULT
:

21  
	`libhashkô_⁄e_©_a_time
(
key
, 
key_Àngth
);

22 
HASHKIT_HASH_MD5
:

23  
	`libhashkô_md5
(
key
, 
key_Àngth
);

24 
HASHKIT_HASH_CRC
:

25  
	`libhashkô_¸c32
(
key
, 
key_Àngth
);

26 
HASHKIT_HASH_FNV1_64
:

27  
	`libhashkô_‚v1_64
(
key
, 
key_Àngth
);

28 
HASHKIT_HASH_FNV1A_64
:

29  
	`libhashkô_‚v1a_64
(
key
, 
key_Àngth
);

30 
HASHKIT_HASH_FNV1_32
:

31  
	`libhashkô_‚v1_32
(
key
, 
key_Àngth
);

32 
HASHKIT_HASH_FNV1A_32
:

33  
	`libhashkô_‚v1a_32
(
key
, 
key_Àngth
);

34 
HASHKIT_HASH_HSIEH
:

35 #ifde‡
HAVE_HSIEH_HASH


36  
	`libhashkô_hsõh
(
key
, 
key_Àngth
);

40 
HASHKIT_HASH_MURMUR
:

41 #ifde‡
HAVE_MURMUR_HASH


42  
	`libhashkô_murmur
(
key
, 
key_Àngth
);

46 
HASHKIT_HASH_JENKINS
:

47  
	`libhashkô_jíkös
(
key
, 
key_Àngth
);

48 
HASHKIT_HASH_CUSTOM
:

49 
HASHKIT_HASH_MAX
:

51 #ifde‡
HAVE_DEBUG


52 
	`Ârötf
(
°dîr
, "hashkit_hash_t wasÉxtended butÜibhashkit_generate_value wasÇot updated\n");

53 
	`fÊush
(
°dîr
);

54 
	`as£π
(0);

60 
	}
}

	@libhashkit/digest.h

9 #i‚de‡
HASHKIT_DIGEST_H


10 
	#HASHKIT_DIGEST_H


	)

12 #ifde‡
__˝lu•lus


16 
HASHKIT_API


17 
uöt32_t
 
hashkô_dige°
(c⁄° 
hashkô_°
 *
£lf
, c⁄° *
key
, 
size_t
 
key_Àngth
);

23 
HASHKIT_API


24 
uöt32_t
 
libhashkô_dige°
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
);

26 #ifde‡
__˝lu•lus


	@libhashkit/fnv.c

9 
	~<libhashkô/comm⁄.h
>

12 
uöt64_t
 
	gFNV_64_INIT

UINT64_C
(0xcbf29ce484222325);

13 
uöt64_t
 
	gFNV_64_PRIME

UINT64_C
(0x100000001b3);

14 
uöt32_t
 
	gFNV_32_INIT
= 2166136261UL;

15 
uöt32_t
 
	gFNV_32_PRIME
= 16777619;

17 
uöt32_t
 
	$hashkô_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

20 
uöt64_t
 
hash

FNV_64_INIT
;

21 ()
c⁄ãxt
;

23 
size_t
 
x
0; x < 
key_Àngth
; x++)

25 
hash
 *
FNV_64_PRIME
;

26 
hash
 ^(
uöt64_t
)
key
[
x
];

29  (
uöt32_t
)
hash
;

30 
	}
}

32 
uöt32_t
 
	$hashkô_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

34 
uöt32_t
 
hash
(uöt32_tË
FNV_64_INIT
;

35 ()
c⁄ãxt
;

37 
size_t
 
x
0; x < 
key_Àngth
; x++)

39 
uöt32_t
 
vÆ
(uöt32_t)
key
[
x
];

40 
hash
 ^
vÆ
;

41 
hash
 *(
uöt32_t
Ë
FNV_64_PRIME
;

44  
hash
;

45 
	}
}

47 
uöt32_t
 
	$hashkô_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

49 
uöt32_t
 
hash

FNV_32_INIT
;

50 ()
c⁄ãxt
;

52 
size_t
 
x
0; x < 
key_Àngth
; x++)

54 
uöt32_t
 
vÆ
(uöt32_t)
key
[
x
];

55 
hash
 *
FNV_32_PRIME
;

56 
hash
 ^
vÆ
;

59  
hash
;

60 
	}
}

62 
uöt32_t
 
	$hashkô_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

64 
uöt32_t
 
hash

FNV_32_INIT
;

65 ()
c⁄ãxt
;

67 
size_t
 
x
0; x < 
key_Àngth
; x++)

69 
uöt32_t
 
vÆ
(uöt32_t)
key
[
x
];

70 
hash
 ^
vÆ
;

71 
hash
 *
FNV_32_PRIME
;

74  
hash
;

75 
	}
}

	@libhashkit/function.c

9 
	~<libhashkô/comm⁄.h
>

11 
hashkô_ªtu∫_t
 
	$_£t_fun˘i⁄
(
hashkô_fun˘i⁄_°
 *
£lf
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

13 
hash_Æg‹ôhm
)

15 
HASHKIT_HASH_DEFAULT
:

16 
£lf
->
fun˘i⁄

hashkô_⁄e_©_a_time
;

18 
HASHKIT_HASH_MD5
:

19 
£lf
->
fun˘i⁄

hashkô_md5
;

21 
HASHKIT_HASH_CRC
:

22 
£lf
->
fun˘i⁄

hashkô_¸c32
;

24 
HASHKIT_HASH_FNV1_64
:

25 
£lf
->
fun˘i⁄

hashkô_‚v1_64
;

27 
HASHKIT_HASH_FNV1A_64
:

28 
£lf
->
fun˘i⁄

hashkô_‚v1a_64
;

30 
HASHKIT_HASH_FNV1_32
:

31 
£lf
->
fun˘i⁄

hashkô_‚v1_32
;

33 
HASHKIT_HASH_FNV1A_32
:

34 
£lf
->
fun˘i⁄

hashkô_‚v1a_32
;

36 
HASHKIT_HASH_HSIEH
:

37 #ifde‡
HAVE_HSIEH_HASH


38 
£lf
->
fun˘i⁄

hashkô_hsõh
;

41  
HASHKIT_FAILURE
;

43 
HASHKIT_HASH_MURMUR
:

44 #ifde‡
HAVE_MURMUR_HASH


45 
£lf
->
fun˘i⁄

hashkô_murmur
;

48  
HASHKIT_FAILURE
;

50 
HASHKIT_HASH_JENKINS
:

51 
£lf
->
fun˘i⁄

hashkô_jíkös
;

53 
HASHKIT_HASH_CUSTOM
:

54  
HASHKIT_INVALID_ARGUMENT
;

55 
HASHKIT_HASH_MAX
:

57  
HASHKIT_INVALID_HASH
;

60 
£lf
->
c⁄ãxt

NULL
;

62  
HASHKIT_SUCCESS
;

63 
	}
}

65 
hashkô_ªtu∫_t
 
	$hashkô_£t_fun˘i⁄
(
hashkô_°
 *
£lf
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

67  
	`_£t_fun˘i⁄
(&
£lf
->
ba£_hash
, 
hash_Æg‹ôhm
);

68 
	}
}

70 
hashkô_ªtu∫_t
 
	$hashkô_£t_di°ributi⁄_fun˘i⁄
(
hashkô_°
 *
£lf
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

72  
	`_£t_fun˘i⁄
(&
£lf
->
di°ributi⁄_hash
, 
hash_Æg‹ôhm
);

73 
	}
}

75 
hashkô_ªtu∫_t
 
	$_£t_cu°om_fun˘i⁄
(
hashkô_fun˘i⁄_°
 *
£lf
, 
hashkô_hash_‚
 
fun˘i⁄
, *
c⁄ãxt
)

77 i‡(
fun˘i⁄
)

79 
£lf
->
fun˘i⁄
= function;

80 
£lf
->
c⁄ãxt
= context;

82  
HASHKIT_SUCCESS
;

85  
HASHKIT_FAILURE
;

86 
	}
}

88 
hashkô_ªtu∫_t
 
	$hashkô_£t_cu°om_fun˘i⁄
(
hashkô_°
 *
£lf
, 
hashkô_hash_‚
 
fun˘i⁄
, *
c⁄ãxt
)

90  
	`_£t_cu°om_fun˘i⁄
(&
£lf
->
ba£_hash
, 
fun˘i⁄
, 
c⁄ãxt
);

91 
	}
}

93 
hashkô_ªtu∫_t
 
	$hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄
(
hashkô_°
 *
£lf
, 
hashkô_hash_‚
 
fun˘i⁄
, *
c⁄ãxt
)

95  
	`_£t_cu°om_fun˘i⁄
(&
£lf
->
di°ributi⁄_hash
, 
fun˘i⁄
, 
c⁄ãxt
);

96 
	}
}

98 
hashkô_hash_Æg‹ôhm_t
 
	$gë_fun˘i⁄_ty≥
(c⁄° 
hashkô_hash_‚
 
fun˘i⁄
)

100 i‡(
fun˘i⁄
 =
hashkô_⁄e_©_a_time
)

102  
HASHKIT_HASH_DEFAULT
;

104 i‡(
fun˘i⁄
 =
hashkô_md5
)

106  
HASHKIT_HASH_MD5
;

108 i‡(
fun˘i⁄
 =
hashkô_¸c32
)

110  
HASHKIT_HASH_CRC
;

112 i‡(
fun˘i⁄
 =
hashkô_‚v1_64
)

114  
HASHKIT_HASH_FNV1_64
;

116 i‡(
fun˘i⁄
 =
hashkô_‚v1a_64
)

118  
HASHKIT_HASH_FNV1A_64
;

120 i‡(
fun˘i⁄
 =
hashkô_‚v1_32
)

122  
HASHKIT_HASH_FNV1_32
;

124 i‡(
fun˘i⁄
 =
hashkô_‚v1a_32
)

126  
HASHKIT_HASH_FNV1A_32
;

128 #ifde‡
HAVE_HSIEH_HASH


129 i‡(
fun˘i⁄
 =
hashkô_hsõh
)

131  
HASHKIT_HASH_HSIEH
;

134 #ifde‡
HAVE_MURMUR_HASH


135 i‡(
fun˘i⁄
 =
hashkô_murmur
)

137  
HASHKIT_HASH_MURMUR
;

140 i‡(
fun˘i⁄
 =
hashkô_jíkös
)

142  
HASHKIT_HASH_JENKINS
;

145  
HASHKIT_HASH_CUSTOM
;

146 
	}
}

148 
hashkô_hash_Æg‹ôhm_t
 
	$hashkô_gë_fun˘i⁄
(c⁄° 
hashkô_°
 *
£lf
)

150  
	`gë_fun˘i⁄_ty≥
(
£lf
->
ba£_hash
.
fun˘i⁄
);

151 
	}
}

153 
hashkô_hash_Æg‹ôhm_t
 
	$hashkô_gë_di°ributi⁄_fun˘i⁄
(c⁄° 
hashkô_°
 *
£lf
)

155  
	`gë_fun˘i⁄_ty≥
(
£lf
->
di°ributi⁄_hash
.
fun˘i⁄
);

156 
	}
}

	@libhashkit/function.h

9 #i‚de‡
HASHKIT_FUNCTION_H


10 
	#HASHKIT_FUNCTION_H


	)

12 #ifde‡
__˝lu•lus


19 
HASHKIT_API


20 
hashkô_ªtu∫_t
 
hashkô_£t_fun˘i⁄
(
hashkô_°
 *
hash
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
);

22 
HASHKIT_API


23 
hashkô_ªtu∫_t
 
hashkô_£t_cu°om_fun˘i⁄
(
hashkô_°
 *
hash
, 
hashkô_hash_‚
 
fun˘i⁄
, *
c⁄ãxt
);

25 
HASHKIT_API


26 
hashkô_hash_Æg‹ôhm_t
 
hashkô_gë_fun˘i⁄
(c⁄° 
hashkô_°
 *
hash
);

31 
HASHKIT_API


32 
hashkô_ªtu∫_t
 
hashkô_£t_di°ributi⁄_fun˘i⁄
(
hashkô_°
 *
hash
, 
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
);

34 
HASHKIT_API


35 
hashkô_ªtu∫_t
 
hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄
(
hashkô_°
 *
£lf
, 
hashkô_hash_‚
 
fun˘i⁄
, *
c⁄ãxt
);

37 
HASHKIT_API


38 
hashkô_hash_Æg‹ôhm_t
 
hashkô_gë_di°ributi⁄_fun˘i⁄
(c⁄° 
hashkô_°
 *
£lf
);

40 #ifde‡
__˝lu•lus


	@libhashkit/hashkit.c

9 
	~<libhashkô/comm⁄.h
>

11 c⁄° 
hashkô_°
 
	gglobÆ_deÁu…_hash
= {

12 .
ba£_hash
= {

13 .
fun˘i⁄

hashkô_⁄e_©_a_time
,

14 .
	gc⁄ãxt

NULL


16 .
	gÊags
= {

17 .
is_ba£_ßme_di°ribuãd

Ál£
,

21 
ölöe
 
boﬁ
 
	$_hashkô_öô
(
hashkô_°
 *
£lf
)

23 
£lf
->
ba£_hash

globÆ_deÁu…_hash
.base_hash;

24 
£lf
->
di°ributi⁄_hash

globÆ_deÁu…_hash
.
ba£_hash
;

25 
£lf
->
Êags

globÆ_deÁu…_hash
.flags;

27  
åue
;

28 
	}
}

30 
ölöe
 
hashkô_°
 *
	$_hashkô_¸óã
(
hashkô_°
 *
£lf
)

32 i‡(
£lf
 =
NULL
)

34 
£lf
(
hashkô_°
 *)
	`mÆloc
((hashkit_st));

35 i‡(
£lf
 =
NULL
)

37  
NULL
;

40 
£lf
->
›ti⁄s
.
is_Æloˇãd

åue
;

44 
£lf
->
›ti⁄s
.
is_Æloˇãd

Ál£
;

47  
£lf
;

48 
	}
}

50 
hashkô_°
 *
	$hashkô_¸óã
(
hashkô_°
 *
£lf
)

52 
£lf

	`_hashkô_¸óã
(self);

53 i‡(! 
£lf
)

54  
£lf
;

56 i‡(! 
	`_hashkô_öô
(
£lf
))

58 
	`hashkô_‰ì
(
£lf
);

61  
£lf
;

62 
	}
}

65 
	$hashkô_‰ì
(
hashkô_°
 *
£lf
)

67 i‡(
	`hashkô_is_Æloˇãd
(
£lf
))

69 
	`‰ì
(
£lf
);

71 
	}
}

73 
hashkô_°
 *
	$hashkô_˛⁄e
(
hashkô_°
 *
de°ö©i⁄
, c⁄° hashkô_° *
sour˚
)

75 i‡(
sour˚
 =
NULL
)

77  
	`hashkô_¸óã
(
de°ö©i⁄
);

81 
de°ö©i⁄

	`_hashkô_¸óã
(destination);

84 i‡(
de°ö©i⁄
 =
NULL
)

86  
NULL
;

89 
de°ö©i⁄
->
ba£_hash

sour˚
->base_hash;

90 
de°ö©i⁄
->
di°ributi⁄_hash

sour˚
->distribution_hash;

91 
de°ö©i⁄
->
Êags

sour˚
->flags;

93  
de°ö©i⁄
;

94 
	}
}

96 
boﬁ
 
	$hashkô_com∑ª
(c⁄° 
hashkô_°
 *
fú°
, c⁄° hashkô_° *
£c⁄d
)

98 i‡(
fú°
->
ba£_hash
.
fun˘i⁄
 =
£c⁄d
->base_hash.function &&

99 
fú°
->
ba£_hash
.
c⁄ãxt
 =
£c⁄d
->base_hash.context &&

100 
fú°
->
di°ributi⁄_hash
.
fun˘i⁄
 =
£c⁄d
->distribution_hash.function &&

101 
fú°
->
di°ributi⁄_hash
.
c⁄ãxt
 =
£c⁄d
->distribution_hash.context &&

102 
fú°
->
Êags
.
is_ba£_ßme_di°ribuãd
 =
£c⁄d
->flags.is_base_same_distributed)

104  
åue
;

107  
Ál£
;

108 
	}
}

	@libhashkit/hashkit.h

9 #i‚de‡
HASHKIT_H


10 
	#HASHKIT_H


	)

13 #i‡!
deföed
(
__˝lu•lus
)

14 
	~<°dboﬁ.h
>

16 
	~<öây≥s.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<libhashkô/visibûôy.h
>

19 
	~<libhashkô/c⁄figuª.h
>

20 
	~<libhashkô/ty≥s.h
>

21 
	~<libhashkô/Æg‹ôhm.h
>

22 
	~<libhashkô/behavi‹.h
>

23 
	~<libhashkô/dige°.h
>

24 
	~<libhashkô/fun˘i⁄.h
>

25 
	~<libhashkô/°r_Æg‹ôhm.h
>

26 
	~<libhashkô/°ªº‹.h
>

28 #ifde‡
__˝lu•lus


32 
HASHKIT_API


33 
hashkô_°
 *
hashkô_¸óã
(hashkô_° *
hash
);

35 
HASHKIT_API


36 
hashkô_°
 *
hashkô_˛⁄e
(hashkô_° *
de°ö©i⁄
, c⁄° hashkô_° *
±r
);

38 
HASHKIT_API


39 
boﬁ
 
hashkô_com∑ª
(c⁄° 
hashkô_°
 *
fú°
, c⁄° hashkô_° *
£c⁄d
);

41 
HASHKIT_API


42 
hashkô_‰ì
(
hashkô_°
 *
hash
);

44 
	#hashkô_is_Æloˇãd
(
__obje˘
Ë((__obje˘)->
›ti⁄s
.
is_Æloˇãd
)

	)

45 
	#hashkô_is_öôülized
(
__obje˘
Ë((__obje˘)->
›ti⁄s
.
is_öôülized
)

	)

47 #ifde‡
__˝lu•lus


51 
	shashkô_°


53 
	shashkô_fun˘i⁄_°
 {

54 
hashkô_hash_‚
 
fun˘i⁄
;

55 *
c⁄ãxt
;

56 } 
ba£_hash
, 
di°ributi⁄_hash
;

59 
boﬁ
 
is_ba£_ßme_di°ribuãd
:1;

60 } 
Êags
;

63 
boﬁ
 
is_Æloˇãd
:1;

64 } 
›ti⁄s
;

67 #ifde‡
__˝lu•lus


69 
	~<°rög
>

71 ˛as†
	cHashkô
 {

73 
	mpublic
:

75 
	$Hashkô
()

77 
	`hashkô_¸óã
(&
£lf
);

80 
	$Hashkô
(c⁄° 
Hashkô
& 
sour˚
)

82 
	`hashkô_˛⁄e
(&
£lf
, &
sour˚
.self);

83 
	}
}

85 
	gHashkô
& 
	g›î©‹
=(c⁄° 
Hashkô
& 
sour˚
)

87 
hashkô_‰ì
(&
£lf
);

88 
hashkô_˛⁄e
(&
£lf
, &
sour˚
.self);

90  *
	gthis
;

93 
‰õnd
 
boﬁ
 
	g›î©‹
==(c⁄° 
Hashkô
 &
À·
, c⁄° 
	gHashkô
 &
	gright
)

95  
hashkô_com∑ª
(&
À·
.
£lf
, &
right
.self);

98 
uöt32_t
 
	$dige°
(
°d
::
°rög
& 
°r
)

100  
	`hashkô_dige°
(&
£lf
, 
°r
.
	`c_°r
(), så.
	`Àngth
());

101 
	}
}

103 
uöt32_t
 
	$dige°
(c⁄° *
key
, 
size_t
 
key_Àngth
)

105  
	`hashkô_dige°
(&
£lf
, 
key
, 
key_Àngth
);

106 
	}
}

108 
hashkô_ªtu∫_t
 
	$£t_fun˘i⁄
(
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

110  
	`hashkô_£t_fun˘i⁄
(&
£lf
, 
hash_Æg‹ôhm
);

111 
	}
}

113 
hashkô_ªtu∫_t
 
	$£t_di°ributi⁄_fun˘i⁄
(
hashkô_hash_Æg‹ôhm_t
 
hash_Æg‹ôhm
)

115  
	`hashkô_£t_fun˘i⁄
(&
£lf
, 
hash_Æg‹ôhm
);

116 
	}
}

118 ~
	$Hashkô
()

120 
	`hashkô_‰ì
(&
£lf
);

121 
	}
}

122 
	g¥iv©e
:

124 
hashkô_°
 
£lf
;

	@libhashkit/hsieh.c

8 
	~<libhashkô/comm⁄.h
>

10 #unde‡
gë16bôs


11 #i‡(
deföed
(
__GNUC__
Ë&& deföed(
__i386__
))

12 
	#gë16bôs
(
d
Ë(*((c⁄° 
uöt16_t
 *Ë(d)))

	)

15 #i‡!
deföed
 (
gë16bôs
)

16 
	#gë16bôs
(
d
Ë((((
uöt32_t
)(((c⁄° 
uöt8_t
 *)(d))[1])) << 8)\

17 +(
uöt32_t
)(((c⁄° 
uöt8_t
 *)(
d
))[0]Ë)

	)

20 
uöt32_t
 
hashkô_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
 
__©åibuã__
((
unu£d
)))

22 
uöt32_t
 
	ghash
 = 0, 
	gtmp
;

23 
	gªm
;

25 i‡(
	gkey_Àngth
 <0 || 
key
 =
NULL
)

28 
	gªm
 = 
key_Àngth
 & 3;

29 
	gkey_Àngth
 >>= 2;

32 ;
	gkey_Àngth
 > 0; key_length--)

34 
	ghash
 +
gë16bôs
 (
key
);

35 
	gtmp
 = (
gë16bôs
 (
key
+2Ë<< 11Ë^ 
hash
;

36 
	ghash
 = (
hash
 << 16Ë^ 
tmp
;

37 
	gkey
 +2* (
uöt16_t
);

38 
	ghash
 +
hash
 >> 11;

42 
	gªm
)

44 3: 
hash
 +
gë16bôs
 (
key
);

45 
	ghash
 ^
hash
 << 16;

46 
	ghash
 ^(
uöt32_t
)
key
[ (
uöt16_t
)] << 18;

47 
	ghash
 +
hash
 >> 11;

49 2: 
hash
 +
gë16bôs
 (
key
);

50 
	ghash
 ^
hash
 << 11;

51 
	ghash
 +
hash
 >> 17;

53 1: 
hash
 +()(*
key
);

54 
	ghash
 ^
hash
 << 10;

55 
	ghash
 +
hash
 >> 1;

61 
	ghash
 ^
hash
 << 3;

62 
	ghash
 +
hash
 >> 5;

63 
	ghash
 ^
hash
 << 4;

64 
	ghash
 +
hash
 >> 17;

65 
	ghash
 ^
hash
 << 25;

66 
	ghash
 +
hash
 >> 6;

68  
	ghash
;

	@libhashkit/jenkins.c

14 
	~<libhashkô/comm⁄.h
>

16 
	#hashsize
(
n
Ë((
uöt32_t
)1<<“))

	)

17 
	#hashmask
(
n
Ë(
	`hashsize
“)-1)

	)

18 
	#rŸ
(
x
,
k
Ë(((x)<<(k)Ë| ((x)>>(32-(k))))

	)

20 
	#mix
(
a
,
b
,
c
) \

22 
a
 -
c
;á ^
	`rŸ
(c, 4); c +
b
; \

23 
b
 -
a
; b ^
	`rŸ
◊, 6);á +
c
; \

24 
c
 -
b
; c ^
	`rŸ
(b, 8); b +
a
; \

25 
a
 -
c
;á ^
	`rŸ
(c,16); c +
b
; \

26 
b
 -
a
; b ^
	`rŸ
◊,19);á +
c
; \

27 
c
 -
b
; c ^
	`rŸ
(b, 4); b +
a
; \

28 }

	)

30 
	#föÆ
(
a
,
b
,
c
) \

32 
c
 ^
b
; c -
	`rŸ
(b,14); \

33 
a
 ^
c
;á -
	`rŸ
(c,11); \

34 
b
 ^
a
; b -
	`rŸ
(a,25); \

35 
c
 ^
b
; c -
	`rŸ
(b,16); \

36 
a
 ^
c
;á -
	`rŸ
(c,4); \

37 
b
 ^
a
; b -
	`rŸ
(a,14); \

38 
c
 ^
b
; c -
	`rŸ
(b,24); \

39 }

	)

41 
	#JENKINS_INITVAL
 13

	)

59 
uöt32_t
 
	$hashkô_jíkös
(c⁄° *
key
, 
size_t
 
Àngth
, *
c⁄ãxt
)

61 
uöt32_t
 
a
,
b
,
c
;

62 uni⁄ { c⁄° *
±r
; 
size_t
 
i
; } 
u
;

63 ()
c⁄ãxt
;

66 
a
 = 
b
 = 
c
 = 0xdódbì‡+ ((
uöt32_t
)
Àngth
Ë+ 
JENKINS_INITVAL
;

68 
u
.
±r
 = 
key
;

69 #i‚de‡
WORDS_BIGENDIAN


70 i‡((
u
.
i
 & 0x3) == 0)

72 c⁄° 
uöt32_t
 *
k
 = (c⁄° uöt32_à*)
key
;

75 
Àngth
 > 12)

77 
a
 +
k
[0];

78 
b
 +
k
[1];

79 
c
 +
k
[2];

80 
	`mix
(
a
,
b
,
c
);

81 
Àngth
 -= 12;

82 
k
 += 3;

95 
Àngth
)

97 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

98 11: 
c
+=
k
[2]&0xffffff; 
b
+=k[1]; 
a
+=k[0]; ;

99 10: 
c
+=
k
[2]&0xffff; 
b
+=k[1]; 
a
+=k[0]; ;

100 9 : 
c
+=
k
[2]&0xff; 
b
+=k[1]; 
a
+=k[0]; ;

101 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

102 7 : 
b
+=
k
[1]&0xffffff; 
a
+=k[0]; ;

103 6 : 
b
+=
k
[1]&0xffff; 
a
+=k[0]; ;

104 5 : 
b
+=
k
[1]&0xff; 
a
+=k[0]; ;

105 4 : 
a
+=
k
[0]; ;

106 3 : 
a
+=
k
[0]&0xffffff; ;

107 2 : 
a
+=
k
[0]&0xffff; ;

108 1 : 
a
+=
k
[0]&0xff; ;

109 0 :  
c
;

110 :  
c
;

114 i‡((
u
.
i
 & 0x1) == 0)

116 c⁄° 
uöt16_t
 *
k
 = (c⁄° uöt16_à*)
key
;

117 c⁄° 
uöt8_t
 *
k8
;

120 
Àngth
 > 12)

122 
a
 +
k
[0] + (((
uöt32_t
)k[1])<<16);

123 
b
 +
k
[2] + (((
uöt32_t
)k[3])<<16);

124 
c
 +
k
[4] + (((
uöt32_t
)k[5])<<16);

125 
	`mix
(
a
,
b
,
c
);

126 
Àngth
 -= 12;

127 
k
 += 6;

131 
k8
 = (c⁄° 
uöt8_t
 *)
k
;

132 
Àngth
)

134 12: 
c
+=
k
[4]+(((
uöt32_t
)k[5])<<16);

135 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

136 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

138 11: 
c
+=((
uöt32_t
)
k8
[10])<<16;

139 10: 
c
+=
k
[4];

140 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

141 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

143 9 : 
c
+=
k8
[8];

144 8 : 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

145 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

147 7 : 
b
+=((
uöt32_t
)
k8
[6])<<16;

148 6 : 
b
+=
k
[2];

149 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

151 5 : 
b
+=
k8
[4];

152 4 : 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

154 3 : 
a
+=((
uöt32_t
)
k8
[2])<<16;

155 2 : 
a
+=
k
[0];

157 1 : 
a
+=
k8
[0];

159 0 :  
c
;

160 :  
c
;

167 c⁄° 
uöt8_t
 *
k
 = (c⁄° uöt8_à*)
key
;

170 
Àngth
 > 12)

172 
a
 +
k
[0];

173 
a
 +((
uöt32_t
)
k
[1])<<8;

174 
a
 +((
uöt32_t
)
k
[2])<<16;

175 
a
 +((
uöt32_t
)
k
[3])<<24;

176 
b
 +
k
[4];

177 
b
 +((
uöt32_t
)
k
[5])<<8;

178 
b
 +((
uöt32_t
)
k
[6])<<16;

179 
b
 +((
uöt32_t
)
k
[7])<<24;

180 
c
 +
k
[8];

181 
c
 +((
uöt32_t
)
k
[9])<<8;

182 
c
 +((
uöt32_t
)
k
[10])<<16;

183 
c
 +((
uöt32_t
)
k
[11])<<24;

184 
	`mix
(
a
,
b
,
c
);

185 
Àngth
 -= 12;

186 
k
 += 12;

190 
Àngth
)

192 12: 
c
+=((
uöt32_t
)
k
[11])<<24;

193 11: 
c
+=((
uöt32_t
)
k
[10])<<16;

194 10: 
c
+=((
uöt32_t
)
k
[9])<<8;

195 9 : 
c
+=
k
[8];

196 8 : 
b
+=((
uöt32_t
)
k
[7])<<24;

197 7 : 
b
+=((
uöt32_t
)
k
[6])<<16;

198 6 : 
b
+=((
uöt32_t
)
k
[5])<<8;

199 5 : 
b
+=
k
[4];

200 4 : 
a
+=((
uöt32_t
)
k
[3])<<24;

201 3 : 
a
+=((
uöt32_t
)
k
[2])<<16;

202 2 : 
a
+=((
uöt32_t
)
k
[1])<<8;

203 1 : 
a
+=
k
[0];

205 0 :  
c
;

206  :  
c
;

208 #i‚de‡
WORDS_BIGENDIAN


212 
	`föÆ
(
a
,
b
,
c
);

213  
c
;

214 
	}
}

	@libhashkit/ketama.c

9 
	~<libhashkô/comm⁄.h
>

10 
	~<m©h.h
>

13 
uöt32_t
 
	$këama_£rvî_hash
(c⁄° *
key
, 
key_Àngth
, 
Æignmít
)

15 
ªsu…s
[16];

17 
	`md5_sig«tuª
((*)
key
, 
key_Àngth
, 
ªsu…s
);

18  ((
uöt32_t
Ë(
ªsu…s
[3 + 
Æignmít
 * 4] & 0xFF) << 24)

19 | ((
uöt32_t
Ë(
ªsu…s
[2 + 
Æignmít
 * 4] & 0xFF) << 16)

20 | ((
uöt32_t
Ë(
ªsu…s
[1 + 
Æignmít
 * 4] & 0xFF) << 8)

21 | (
ªsu…s
[0 + 
Æignmít
 * 4] & 0xFF);

22 
	}
}

24 
	$c⁄töuum_poöts_cmp
(c⁄° *
t1
, c⁄° *
t2
)

26 
hashkô_c⁄töuum_poöt_°
 *
˘1
(hashkô_c⁄töuum_poöt_° *)
t1
;

27 
hashkô_c⁄töuum_poöt_°
 *
˘2
(hashkô_c⁄töuum_poöt_° *)
t2
;

29 i‡(
˘1
->
vÆue
 =
˘2
->value)

31 i‡(
˘1
->
vÆue
 > 
˘2
->value)

35 
	}
}

37 
	$upd©e_c⁄töuum
(
hashkô_°
 *
hashkô
)

39 
uöt32_t
 
cou¡
;

40 
uöt32_t
 
c⁄töuum_ödex
= 0;

41 
uöt32_t
 
vÆue
;

42 
uöt32_t
 
poöts_ödex
;

43 
uöt32_t
 
poöts_cou¡
= 0;

44 
uöt32_t
 
poöts_≥r_£rvî
;

45 
uöt32_t
 
poöts_≥r_hash
;

46 
uöt64_t
 
tŸÆ_weight
= 0;

47 
uöt32_t
 
live_£rvîs
;

48 
uöt8_t
 *
c⁄ãxt
;

50 i‡(
hashkô
->
a˘ive_‚
 !
NULL
 || hashkô->
weight_‚
 != NULL)

52 
live_£rvîs
= 0;

54 
cou¡
0, 
c⁄ãxt

hashkô
->
li°
; cou¡ < hashkô->
li°_size
;

55 
cou¡
++, 
c⁄ãxt
+
hashkô
->
c⁄ãxt_size
)

57 i‡(
hashkô
->
a˘ive_‚
 !
NULL
)

59 i‡(
hashkô
->
	`a˘ive_‚
(
c⁄ãxt
))

60 
live_£rvîs
++;

65 i‡(
hashkô
->
weight_‚
 !
NULL
)

66 
tŸÆ_weight
+
hashkô
->
	`weight_‚
(
c⁄ãxt
);

70 i‡(
hashkô
->
a˘ive_‚
 =
NULL
)

71 
live_£rvîs
(
uöt32_t
)
hashkô
->
li°_size
;

73 i‡(
live_£rvîs
 == 0)

76 i‡(
hashkô
->
weight_‚
 =
NULL
)

78 
poöts_≥r_£rvî

HASHKIT_POINTS_PER_NODE
;

79 
poöts_≥r_hash
= 1;

83 
poöts_≥r_£rvî

HASHKIT_POINTS_PER_NODE_WEIGHTED
;

84 
poöts_≥r_hash
= 4;

87 i‡(
live_£rvîs
 > 
hashkô
->
c⁄töuum_cou¡
)

89 
hashkô_c⁄töuum_poöt_°
 *
√w_c⁄töuum
;

91 
√w_c⁄töuum

	`ªÆloc
(
hashkô
->
c⁄töuum
,

92 (
hashkô_c⁄töuum_poöt_°
) *

93 (
live_£rvîs
 + 
HASHKIT_CONTINUUM_ADDITION
) *

94 
poöts_≥r_£rvî
);

96 i‡(
√w_c⁄töuum
 =
NULL
)

97  
ENOMEM
;

99 
hashkô
->
c⁄töuum

√w_c⁄töuum
;

100 
hashkô
->
c⁄töuum_cou¡

live_£rvîs
 + 
HASHKIT_CONTINUUM_ADDITION
;

103 
cou¡
0, 
c⁄ãxt

hashkô
->
li°
; cou¡ < hashkô->
li°_size
;

104 
cou¡
++, 
c⁄ãxt
+
hashkô
->
c⁄ãxt_size
)

106 i‡(
hashkô
->
a˘ive_‚
 !
NULL
 && hashkô->
	`a˘ive_‚
(
c⁄ãxt
Ë=
Ál£
)

109 i‡(
hashkô
->
weight_‚
 !
NULL
)

111 
p˘
 = ()
hashkô
->
	`weight_‚
(
c⁄ãxt
Ë/ ()
tŸÆ_weight
;

112 
poöts_≥r_£rvî
(
uöt32_t
Ë((
	`Êo‹f
((Ë(
p˘
 * 
HASHKIT_POINTS_PER_NODE_WEIGHTED
 / 4 * ()
live_£rvîs
 + 0.0000000001))) * 4);

115 
poöts_ödex
= 0;

116 
poöts_ödex
 < 
poöts_≥r_£rvî
 / 
poöts_≥r_hash
;

117 
poöts_ödex
++)

119 
s‹t_ho°
[
HASHKIT_CONTINUUM_KEY_SIZE
]= "";

120 
size_t
 
s‹t_ho°_Àngth
;

122 i‡(
hashkô
->
c⁄töuum_key_‚
 =
NULL
)

124 
s‹t_ho°_Àngth
(
size_t
Ë
	`¢¥ötf
(
s‹t_ho°
, 
HASHKIT_CONTINUUM_KEY_SIZE
, "%u",

125 
poöts_ödex
);

129 
s‹t_ho°_Àngth

hashkô
->
	`c⁄töuum_key_‚
(
s‹t_ho°
, 
HASHKIT_CONTINUUM_KEY_SIZE
,

130 
poöts_ödex
, 
c⁄ãxt
);

133 i‡(
hashkô
->
weight_‚
 =
NULL
)

135 i‡(
hashkô
->
c⁄töuum_hash_‚
 =
NULL
)

136 
vÆue

	`hashkô_deÁu…
(
s‹t_ho°
, 
s‹t_ho°_Àngth
);

138 
vÆue

hashkô
->
	`c⁄töuum_hash_‚
(
s‹t_ho°
, 
s‹t_ho°_Àngth
);

140 
hashkô
->
c⁄töuum
[
c⁄töuum_ödex
].
ödex

cou¡
;

141 
hashkô
->
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

145 
i
;

146 
i
 = 0; i < 
poöts_≥r_hash
; i++)

148 
vÆue

	`këama_£rvî_hash
(
s‹t_ho°
, (
uöt32_t
Ë
s‹t_ho°_Àngth
, (Ë
i
);

149 
hashkô
->
c⁄töuum
[
c⁄töuum_ödex
].
ödex

cou¡
;

150 
hashkô
->
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

155 
poöts_cou¡
+
poöts_≥r_£rvî
;

158 
hashkô
->
c⁄töuum_poöts_cou¡

poöts_cou¡
;

159 
	`qs‹t
(
hashkô
->
c⁄töuum
, hashkô->
c⁄töuum_poöts_cou¡
, (
hashkô_c⁄töuum_poöt_°
),

160 
c⁄töuum_poöts_cmp
);

163 
	}
}

	@libhashkit/md5.c

32 
	~<libhashkô/comm⁄.h
>

34 
	~<°rög.h
>

35 
	~<sys/ty≥s.h
>

38 *
	tPOINTER
;

42 
	tUINT4
;

47 
UINT4
 
	m°©e
[4];

48 
UINT4
 
	mcou¡
[2];

49 
	mbuf„r
[64];

50 } 
	tMD5_CTX
;

52 
MD5Inô
 (
MD5_CTX
 *
c⁄ãxt
);

53 
MD5Upd©e
 ( 
MD5_CTX
 *
c⁄ãxt
,

54 c⁄° *
öput
,

55 
öputLí
);

56 
MD5FöÆ
 ( 
dige°
[16],

57 
MD5_CTX
 *
c⁄ãxt
);

61 
	#S11
 7

	)

62 
	#S12
 12

	)

63 
	#S13
 17

	)

64 
	#S14
 22

	)

65 
	#S21
 5

	)

66 
	#S22
 9

	)

67 
	#S23
 14

	)

68 
	#S24
 20

	)

69 
	#S31
 4

	)

70 
	#S32
 11

	)

71 
	#S33
 16

	)

72 
	#S34
 23

	)

73 
	#S41
 6

	)

74 
	#S42
 10

	)

75 
	#S43
 15

	)

76 
	#S44
 21

	)

79 
MD5Tønsf‹m
 (
UINT4
 
°©e
[4],

80 
block
[64]);

81 
Encode
 (*
ouçut
,

82 
UINT4
 *
öput
,

83 
Àn
);

84 
Decode
(
UINT4
 *
ouçut
, *
öput
, 
Àn
);

86 
	gPADDING
[64] = {

94 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

95 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

96 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

97 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

101 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

106 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

107 (
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

108 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

109 (
a
Ë+(
b
); \

110 }

	)

111 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

112 (
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

113 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

114 (
a
Ë+(
b
); \

115 }

	)

116 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

117 (
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

118 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

119 (
a
Ë+(
b
); \

120 }

	)

121 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

122 (
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

123 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

124 (
a
Ë+(
b
); \

125 }

	)

132 
	$md5_sig«tuª
(c⁄° *
key
, 
Àngth
, *
ªsu…
)

134 
MD5_CTX
 
my_md5
;

136 
	`MD5Inô
(&
my_md5
);

137 ()
	`MD5Upd©e
(&
my_md5
, 
key
, 
Àngth
);

138 
	`MD5FöÆ
(
ªsu…
, &
my_md5
);

139 
	}
}

143 
	$MD5Inô
 (
MD5_CTX
 *
c⁄ãxt
)

145 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

148 
c⁄ãxt
->
°©e
[0] = 0x67452301;

149 
c⁄ãxt
->
°©e
[1] = 0xefcdab89;

150 
c⁄ãxt
->
°©e
[2] = 0x98badcfe;

151 
c⁄ãxt
->
°©e
[3] = 0x10325476;

152 
	}
}

159 
	$MD5Upd©e
 (

160 
MD5_CTX
 *
c⁄ãxt
,

161 c⁄° *
öput
,

162 
öputLí
)

164 
i
, 
idx
, 
∑πLí
;

167 
idx
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3F);

171 i‡((
c⁄ãxt
->
cou¡
[0] +((
UINT4
)
öputLí
 << 3))

172 < ((
UINT4
)
öputLí
 << 3))

173 
c⁄ãxt
->
cou¡
[1]++;

174 
c⁄ãxt
->
cou¡
[1] +((
UINT4
)
öputLí
 >> 29);

176 
∑πLí
 = 64 - 
idx
;

180 i‡(
öputLí
 >
∑πLí
) {

181 
	`mem˝y
((
POINTER
)&
c⁄ãxt
->
buf„r
[
idx
], (POINTER)
öput
, 
∑πLí
);

182 
	`MD5Tønsf‹m
(
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

184 
i
 = 
∑πLí
; i + 63 < 
öputLí
; i += 64)

185 
	`MD5Tønsf‹m
 (
c⁄ãxt
->
°©e
, (*)&
öput
[
i
]);

187 
idx
 = 0;

190 
i
 = 0;

193 
	`mem˝y
((
POINTER
)&
c⁄ãxt
->
buf„r
[
idx
], (POINTER)&
öput
[
i
],

194 
öputLí
-
i
);

195 
	}
}

201 
	$MD5FöÆ
 (

202 
dige°
[16],

203 
MD5_CTX
 *
c⁄ãxt
)

205 
bôs
[8];

206 
idx
, 
∑dLí
;

209 
	`Encode
 (
bôs
, 
c⁄ãxt
->
cou¡
, 8);

213 
idx
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3f);

214 
∑dLí
 = (
idx
 < 56) ? (56 - idx) : (120 - idx);

215 
	`MD5Upd©e
 (
c⁄ãxt
, 
PADDING
, 
∑dLí
);

218 
	`MD5Upd©e
 (
c⁄ãxt
, 
bôs
, 8);

221 
	`Encode
 (
dige°
, 
c⁄ãxt
->
°©e
, 16);

225 
	`mem£t
((
POINTER
)
c⁄ãxt
, 0,  (*context));

226 
	}
}

230 
	$MD5Tønsf‹m
 (

231 
UINT4
 
°©e
[4],

232 
block
[64])

234 
UINT4
 
a
 = 
°©e
[0], 
b
 = sèã[1], 
c
 = sèã[2], 
d
 = sèã[3], 
x
[16];

236 
	`Decode
 (
x
, 
block
, 64);

239 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S11
, 0xd76aa478);

240 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 1], 
S12
, 0xe8c7b756);

241 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S13
, 0x242070db);

242 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 3], 
S14
, 0xc1bdceee);

243 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S11
, 0xf57c0faf);

244 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 5], 
S12
, 0x4787c62a);

245 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S13
, 0xa8304613);

246 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 7], 
S14
, 0xfd469501);

247 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S11
, 0x698098d8);

248 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 9], 
S12
, 0x8b44f7af);

249 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S13
, 0xffff5bb1);

250 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[11], 
S14
, 0x895cd7be);

251 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S11
, 0x6b901122);

252 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[13], 
S12
, 0xfd987193);

253 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S13
, 0xa679438e);

254 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[15], 
S14
, 0x49b40821);

257 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S21
, 0xf61e2562);

258 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 6], 
S22
, 0xc040b340);

259 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S23
, 0x265e5a51);

260 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 0], 
S24
, 0xe9b6c7aa);

261 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S21
, 0xd62f105d);

262 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[10], 
S22
, 0x2441453);

263 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S23
, 0xd8a1e681);

264 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 4], 
S24
, 0xe7d3fbc8);

265 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S21
, 0x21e1cde6);

266 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[14], 
S22
, 0xc33707d6);

267 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S23
, 0xf4d50d87);

268 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 8], 
S24
, 0x455a14ed);

269 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S21
, 0xa9e3e905);

270 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 2], 
S22
, 0xfcefa3f8);

271 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S23
, 0x676f02d9);

272 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[12], 
S24
, 0x8d2a4c8a);

275 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S31
, 0xfffa3942);

276 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 8], 
S32
, 0x8771f681);

277 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S33
, 0x6d9d6122);

278 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[14], 
S34
, 0xfde5380c);

279 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S31
, 0xa4beea44);

280 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 4], 
S32
, 0x4bdecfa9);

281 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S33
, 0xf6bb4b60);

282 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[10], 
S34
, 0xbebfbc70);

283 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S31
, 0x289b7ec6);

284 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 0], 
S32
, 0xeaa127fa);

285 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S33
, 0xd4ef3085);

286 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 6], 
S34
, 0x4881d05);

287 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S31
, 0xd9d4d039);

288 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[12], 
S32
, 0xe6db99e5);

289 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S33
, 0x1fa27cf8);

290 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 2], 
S34
, 0xc4ac5665);

293 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S41
, 0xf4292244);

294 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 7], 
S42
, 0x432aff97);

295 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S43
, 0xab9423a7);

296 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 5], 
S44
, 0xfc93a039);

297 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S41
, 0x655b59c3);

298 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 3], 
S42
, 0x8f0ccc92);

299 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S43
, 0xffeff47d);

300 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 1], 
S44
, 0x85845dd1);

301 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S41
, 0x6fa87e4f);

302 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[15], 
S42
, 0xfe2ce6e0);

303 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S43
, 0xa3014314);

304 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[13], 
S44
, 0x4e0811a1);

305 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S41
, 0xf7537e82);

306 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[11], 
S42
, 0xbd3af235);

307 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S43
, 0x2ad7d2bb);

308 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 9], 
S44
, 0xeb86d391);

311 
°©e
[0] +
a
;

312 
°©e
[1] +
b
;

313 
°©e
[2] +
c
;

314 
°©e
[3] +
d
;

318 
	`mem£t
((
POINTER
)
x
, 0,  (x));

319 
	}
}

324 
	$Encode
 (

325 *
ouçut
,

326 
UINT4
 *
öput
,

327 
Àn
)

329 
i
, 
j
;

331 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4) {

332 
ouçut
[
j
] = ()(
öput
[
i
] & 0xff);

333 
ouçut
[
j
+1] = ()((
öput
[
i
] >> 8) & 0xff);

334 
ouçut
[
j
+2] = ()((
öput
[
i
] >> 16) & 0xff);

335 
ouçut
[
j
+3] = ()((
öput
[
i
] >> 24) & 0xff);

337 
	}
}

343 
	$Decode
 (

344 
UINT4
 *
ouçut
,

345 *
öput
,

346 
Àn
)

348 
i
, 
j
;

350 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4)

351 
ouçut
[
i
] = ((
UINT4
)
öput
[
j
]) | (((UINT4)input[j+1]) << 8) |

352 (((
UINT4
)
öput
[
j
+2]) << 16) | (((UINT4)input[j+3]) << 24);

353 
	}
}

355 
uöt32_t
 
	$hashkô_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

357 
ªsu…s
[16];

358 ()
c⁄ãxt
;

360 
	`md5_sig«tuª
((*)
key
, ()
key_Àngth
, 
ªsu…s
);

362  ((
uöt32_t
Ë(
ªsu…s
[3] & 0xFF) << 24)

363 | ((
uöt32_t
Ë(
ªsu…s
[2] & 0xFF) << 16)

364 | ((
uöt32_t
Ë(
ªsu…s
[1] & 0xFF) << 8)

365 | (
ªsu…s
[0] & 0xFF);

366 
	}
}

	@libhashkit/murmur.c

18 
	~<libhashkô/comm⁄.h
>

20 
uöt32_t
 
	$hashkô_murmur
(c⁄° *
key
, 
size_t
 
Àngth
, *
c⁄ãxt
)

27 c⁄° 
m
= 0x5bd1e995;

28 c⁄° 
uöt32_t
 
£ed
(0xdódbì‡* (uöt32_t)
Àngth
);

29 c⁄° 
r
= 24;

34 
uöt32_t
 
h

£ed
 ^ (uöt32_t)
Àngth
;

38 c⁄° * 
d©a
(c⁄° *)
key
;

39 ()
c⁄ãxt
;

41 
Àngth
 >= 4)

43 
k
 = *(*)
d©a
;

45 
k
 *
m
;

46 
k
 ^k >> 
r
;

47 
k
 *
m
;

49 
h
 *
m
;

50 
h
 ^
k
;

52 
d©a
 += 4;

53 
Àngth
 -= 4;

58 
Àngth
)

60 3: 
h
 ^((
uöt32_t
)
d©a
[2]) << 16;

61 2: 
h
 ^((
uöt32_t
)
d©a
[1]) << 8;

62 1: 
h
 ^
d©a
[0];

63 
h
 *
m
;

72 
h
 ^= h >> 13;

73 
h
 *
m
;

74 
h
 ^= h >> 15;

76  
h
;

77 
	}
}

	@libhashkit/one_at_a_time.c

14 
	~<libhashkô/comm⁄.h
>

16 
uöt32_t
 
	$hashkô_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
, *
c⁄ãxt
)

18 c⁄° *
±r

key
;

19 
uöt32_t
 
vÆue
= 0;

20 ()
c⁄ãxt
;

22 
key_Àngth
--)

24 
uöt32_t
 
vÆ
(uöt32_tË*
±r
++;

25 
vÆue
 +
vÆ
;

26 
vÆue
 += (value << 10);

27 
vÆue
 ^= (value >> 6);

29 
vÆue
 += (value << 3);

30 
vÆue
 ^= (value >> 11);

31 
vÆue
 += (value << 15);

33  
vÆue
;

34 
	}
}

	@libhashkit/str_algorithm.c

37 
	~<libhashkô/comm⁄.h
>

39 c⁄° * 
	$libhashkô_°rög_hash
(
hashkô_hash_Æg‹ôhm_t
 
ty≥
)

41 
ty≥
)

43 
HASHKIT_HASH_DEFAULT
:  "DEFAULT";

44 
HASHKIT_HASH_MD5
:  "MD5";

45 
HASHKIT_HASH_CRC
:  "CRC";

46 
HASHKIT_HASH_FNV1_64
:  "FNV1_64";

47 
HASHKIT_HASH_FNV1A_64
:  "FNV1A_64";

48 
HASHKIT_HASH_FNV1_32
:  "FNV1_32";

49 
HASHKIT_HASH_FNV1A_32
:  "FNV1A_32";

50 
HASHKIT_HASH_HSIEH
:  "HSIEH";

51 
HASHKIT_HASH_MURMUR
:  "MURMUR";

52 
HASHKIT_HASH_JENKINS
:  "JENKINS";

53 
HASHKIT_HASH_CUSTOM
:  "CUSTOM";

55 
HASHKIT_HASH_MAX
:  "INVALID";

57 
	}
}

	@libhashkit/str_algorithm.h

37 #¥agm®
⁄˚


39 #ifde‡
__˝lu•lus


43 
HASHKIT_API


44 c⁄° *
libhashkô_°rög_hash
(
hashkô_hash_Æg‹ôhm_t
 
ty≥
);

46 #ifde‡
__˝lu•lus


	@libhashkit/strerror.c

9 
	~<libhashkô/comm⁄.h
>

11 c⁄° *
	$hashkô_°ªº‹
(
hashkô_°
 *
±r
, 
hashkô_ªtu∫_t
 
rc
)

13 ()
±r
;

14 
rc
)

16 
HASHKIT_SUCCESS
:  "SUCCESS";

17 
HASHKIT_FAILURE
:  "FAILURE";

18 
HASHKIT_MEMORY_ALLOCATION_FAILURE
:  "MEMORY ALLOCATION FAILURE";

19 
HASHKIT_INVALID_ARGUMENT
:  "INVALID ARGUMENT";

20 
HASHKIT_INVALID_HASH
:  "INVALID hashkit_hash_algorithm_t";

21 
HASHKIT_MAXIMUM_RETURN
:

25 
	}
}

	@libhashkit/strerror.h

9 #i‚de‡
HASHKIT_STRERROR_H


10 
	#HASHKIT_STRERROR_H


	)

12 #ifde‡
__˝lu•lus


16 
HASHKIT_API


17 c⁄° *
hashkô_°ªº‹
(
hashkô_°
 *
±r
, 
hashkô_ªtu∫_t
 
rc
);

19 #ifde‡
__˝lu•lus


	@libhashkit/types.h

39 #i‚de‡
HASHKIT_TYPES_H


40 
	#HASHKIT_TYPES_H


	)

42 #ifde‡
__˝lu•lus


48 
HASHKIT_SUCCESS
,

49 
HASHKIT_FAILURE
,

50 
HASHKIT_MEMORY_ALLOCATION_FAILURE
,

51 
HASHKIT_INVALID_HASH
,

52 
HASHKIT_INVALID_ARGUMENT
,

53 
HASHKIT_MAXIMUM_RETURN


54 } 
	thashkô_ªtu∫_t
;

57 
HASHKIT_HASH_DEFAULT
= 0,

58 
HASHKIT_HASH_MD5
,

59 
HASHKIT_HASH_CRC
,

60 
HASHKIT_HASH_FNV1_64
,

61 
HASHKIT_HASH_FNV1A_64
,

62 
HASHKIT_HASH_FNV1_32
,

63 
HASHKIT_HASH_FNV1A_32
,

64 
HASHKIT_HASH_HSIEH
,

65 
HASHKIT_HASH_MURMUR
,

66 
HASHKIT_HASH_JENKINS
,

67 
HASHKIT_HASH_CUSTOM
,

68 
HASHKIT_HASH_MAX


69 } 
	thashkô_hash_Æg‹ôhm_t
;

76 
HASHKIT_DISTRIBUTION_MODULA
,

77 
HASHKIT_DISTRIBUTION_RANDOM
,

78 
HASHKIT_DISTRIBUTION_KETAMA
,

79 
HASHKIT_DISTRIBUTION_MAX


80 } 
	thashkô_di°ributi⁄_t
;

83 
hashkô_°
 
	thashkô_°
;

85 
uöt32_t
 (*
	thashkô_hash_‚
)(c⁄° *
	tkey
, 
	tsize_t
 
	tkey_Àngth
, *
	tc⁄ãxt
);

87 #ifde‡
__˝lu•lus


	@libhashkit/visibility.h

16 #i‚de‡
HASHKIT_VISIBILITY_H


17 
	#HASHKIT_VISIBILITY_H


	)

27 #i‡
deföed
(
BUILDING_HASHKIT
)

28 #i‡
deföed
(
HAVE_VISIBILITY
) && HAVE_VISIBILITY

29 
	#HASHKIT_API
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

30 
	#HASHKIT_LOCAL
 
	`__©åibuã__
 ((
	`visibûôy
("hiddí")))

	)

31 #ñi‡
deföed
 (
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

32 
	#HASHKIT_API
 
__globÆ


	)

33 
	#HASHKIT_LOCAL
 
__hiddí


	)

34 #ñi‡
deföed
(
_MSC_VER
)

35 
	#HASHKIT_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

36 
	#HASHKIT_LOCAL


	)

38 
	#HASHKIT_API


	)

39 
	#HASHKIT_LOCAL


	)

42 #i‡
deföed
(
_MSC_VER
)

43 
	#HASHKIT_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

44 
	#HASHKIT_LOCAL


	)

46 
	#HASHKIT_API


	)

47 
	#HASHKIT_LOCAL


	)

	@libmemcached/allocators.c

1 
	~"comm⁄.h
"

3 
	$_libmemˇched_‰ì
(c⁄° 
memˇched_°
 *
±r
, *
mem
, *
c⁄ãxt
)

5 (Ë
±r
;

6 (Ë
c⁄ãxt
;

7 
	`‰ì
(
mem
);

8 
	}
}

10 *
	$_libmemˇched_mÆloc
(c⁄° 
memˇched_°
 *
±r
, 
size_t
 
size
, *
c⁄ãxt
)

12 (Ë
±r
;

13 (Ë
c⁄ãxt
;

14  
	`mÆloc
(
size
);

15 
	}
}

17 *
	$_libmemˇched_ªÆloc
(c⁄° 
memˇched_°
 *
±r
, *
mem
, 
size_t
 
size
, *
c⁄ãxt
)

19 (Ë
±r
;

20 (Ë
c⁄ãxt
;

21  
	`ªÆloc
(
mem
, 
size
);

22 
	}
}

24 *
	$_libmemˇched_ˇŒoc
(c⁄° 
memˇched_°
 *
±r
, 
size_t
 
√Àm
, size_à
size
, *
c⁄ãxt
)

26 i‡(
±r
->
Æloˇt‹s
.
mÆloc
 !
_libmemˇched_mÆloc
)

28 *
ªt
 = 
	`_libmemˇched_mÆloc
(
±r
, 
√Àm
 * 
size
, 
c⁄ãxt
);

29 i‡(
ªt
 !
NULL
)

30 
	`mem£t
(
ªt
, 0, 
√Àm
 * 
size
);

32  
ªt
;

35  
	`ˇŒoc
(
√Àm
, 
size
);

36 
	}
}

38 c⁄° 
_Æloˇt‹s_°
 
	gglobÆ_deÁu…_Æloˇt‹
= {

39 .
ˇŒoc

_libmemˇched_ˇŒoc
,

40 .
	gc⁄ãxt

NULL
,

41 .
	g‰ì

_libmemˇched_‰ì
,

42 .
	gmÆloc

_libmemˇched_mÆloc
,

43 .
	gªÆloc

_libmemˇched_ªÆloc


46 
_Æloˇt‹s_°
 
	$memˇched_Æloˇt‹s_ªtu∫_deÁu…
()

48  
globÆ_deÁu…_Æloˇt‹
;

49 
	}
}

51 
memˇched_ªtu∫_t
 
	$memˇched_£t_mem‹y_Æloˇt‹s
(
memˇched_°
 *
±r
,

52 
memˇched_mÆloc_‚
 
mem_mÆloc
,

53 
memˇched_‰ì_‚
 
mem_‰ì
,

54 
memˇched_ªÆloc_‚
 
mem_ªÆloc
,

55 
memˇched_ˇŒoc_‚
 
mem_ˇŒoc
,

56 *
c⁄ãxt
)

59 i‡(
mem_mÆloc
 =
NULL
 && 
mem_‰ì
 =NULL && 
mem_ªÆloc
 =NULL && 
mem_ˇŒoc
 == NULL)

61 
±r
->
Æloˇt‹s

	`memˇched_Æloˇt‹s_ªtu∫_deÁu…
();

63 i‡(
mem_mÆloc
 =
NULL
 || 
mem_‰ì
 =NULL || 
mem_ªÆloc
 =NULL || 
mem_ˇŒoc
 == NULL)

65  
MEMCACHED_FAILURE
;

69 
±r
->
Æloˇt‹s
.
mÆloc

mem_mÆloc
;

70 
±r
->
Æloˇt‹s
.
‰ì

mem_‰ì
;

71 
±r
->
Æloˇt‹s
.
ªÆloc

mem_ªÆloc
;

72 
±r
->
Æloˇt‹s
.
ˇŒoc

mem_ˇŒoc
;

73 
±r
->
Æloˇt‹s
.
c⁄ãxt
= context;

76  
MEMCACHED_SUCCESS
;

77 
	}
}

79 *
	$memˇched_gë_mem‹y_Æloˇt‹s_c⁄ãxt
(c⁄° 
memˇched_°
 *
±r
)

81  
±r
->
Æloˇt‹s
.
c⁄ãxt
;

82 
	}
}

84 
	$memˇched_gë_mem‹y_Æloˇt‹s
(c⁄° 
memˇched_°
 *
±r
,

85 
memˇched_mÆloc_‚
 *
mem_mÆloc
,

86 
memˇched_‰ì_‚
 *
mem_‰ì
,

87 
memˇched_ªÆloc_‚
 *
mem_ªÆloc
,

88 
memˇched_ˇŒoc_‚
 *
mem_ˇŒoc
)

90 *
mem_mÆloc

±r
->
Æloˇt‹s
.
mÆloc
;

91 *
mem_‰ì

±r
->
Æloˇt‹s
.
‰ì
;

92 *
mem_ªÆloc

±r
->
Æloˇt‹s
.
ªÆloc
;

93 *
mem_ˇŒoc

±r
->
Æloˇt‹s
.
ˇŒoc
;

94 
	}
}

	@libmemcached/allocators.h

12 #i‚de‡
__LIBMEMCACHED_ALLOCATORS_H__


13 
	#__LIBMEMCACHED_ALLOCATORS_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
memˇched_ªtu∫_t
 
memˇched_£t_mem‹y_Æloˇt‹s
(
memˇched_°
 *
±r
,

21 
memˇched_mÆloc_‚
 
mem_mÆloc
,

22 
memˇched_‰ì_‚
 
mem_‰ì
,

23 
memˇched_ªÆloc_‚
 
mem_ªÆloc
,

24 
memˇched_ˇŒoc_‚
 
mem_ˇŒoc
,

25 *
c⁄ãxt
);

27 
LIBMEMCACHED_API


28 
memˇched_gë_mem‹y_Æloˇt‹s
(c⁄° 
memˇched_°
 *
±r
,

29 
memˇched_mÆloc_‚
 *
mem_mÆloc
,

30 
memˇched_‰ì_‚
 *
mem_‰ì
,

31 
memˇched_ªÆloc_‚
 *
mem_ªÆloc
,

32 
memˇched_ˇŒoc_‚
 *
mem_ˇŒoc
);

34 
LIBMEMCACHED_API


35 *
memˇched_gë_mem‹y_Æloˇt‹s_c⁄ãxt
(c⁄° 
memˇched_°
 *
±r
);

37 
LIBMEMCACHED_LOCAL


38 
_libmemˇched_‰ì
(c⁄° 
memˇched_°
 *
±r
, *
mem
, *
c⁄ãxt
);

40 
LIBMEMCACHED_LOCAL


41 *
_libmemˇched_mÆloc
(c⁄° 
memˇched_°
 *
±r
, c⁄° 
size_t
 
size
, *
c⁄ãxt
);

43 
LIBMEMCACHED_LOCAL


44 *
_libmemˇched_ªÆloc
(c⁄° 
memˇched_°
 *
±r
, *
mem
, c⁄° 
size_t
 
size
, *
c⁄ãxt
);

46 
LIBMEMCACHED_LOCAL


47 *
_libmemˇched_ˇŒoc
(c⁄° 
memˇched_°
 *
±r
, 
size_t
 
√Àm
, size_à
size
, *
c⁄ãxt
);

49 
LIBMEMCACHED_LOCAL


50 
_Æloˇt‹s_°
 
memˇched_Æloˇt‹s_ªtu∫_deÁu…
();

52 #ifde‡
__˝lu•lus


	@libmemcached/analyze.c

1 
	~"comm⁄.h
"

3 
	$ˇlc_œrge°_c⁄sum±i⁄
(
memˇched_™Æysis_°
 *
ªsu…
,

4 c⁄° 
uöt32_t
 
£rvî_num
,

5 c⁄° 
uöt64_t
 
nbyãs
)

7 i‡(
ªsu…
->
mo°_u£d_byãs
 < 
nbyãs
)

9 
ªsu…
->
mo°_u£d_byãs

nbyãs
;

10 
ªsu…
->
mo°_c⁄sumed_£rvî

£rvî_num
;

12 
	}
}

14 
	$ˇlc_ﬁde°_node
(
memˇched_™Æysis_°
 *
ªsu…
,

15 c⁄° 
uöt32_t
 
£rvî_num
,

16 c⁄° 
uöt32_t
 
u±ime
)

18 i‡(
ªsu…
->
l⁄ge°_u±ime
 < 
u±ime
)

20 
ªsu…
->
l⁄ge°_u±ime

u±ime
;

21 
ªsu…
->
ﬁde°_£rvî

£rvî_num
;

23 
	}
}

25 
	$ˇlc_Àa°_‰ì_node
(
memˇched_™Æysis_°
 *
ªsu…
,

26 c⁄° 
uöt32_t
 
£rvî_num
,

27 c⁄° 
uöt64_t
 
max_Ælowed_byãs
,

28 c⁄° 
uöt64_t
 
u£d_byãs
)

30 
uöt64_t
 
ªmaöög_byãs

max_Ælowed_byãs
 - 
u£d_byãs
;

32 i‡(
ªsu…
->
Àa°_ªmaöög_byãs
 == 0 ||

33 
ªmaöög_byãs
 < 
ªsu…
->
Àa°_ªmaöög_byãs
)

35 
ªsu…
->
Àa°_ªmaöög_byãs

ªmaöög_byãs
;

36 
ªsu…
->
Àa°_‰ì_£rvî

£rvî_num
;

38 
	}
}

40 
	$ˇlc_avîage_ôem_size
(
memˇched_™Æysis_°
 *
ªsu…
,

41 c⁄° 
uöt64_t
 
tŸÆ_ôems
,

42 c⁄° 
uöt64_t
 
tŸÆ_byãs
)

44 i‡(
tŸÆ_ôems
 > 0 && 
tŸÆ_byãs
 > 0)

45 
ªsu…
->
avîage_ôem_size
(
uöt32_t
Ë(
tŸÆ_byãs
 / 
tŸÆ_ôems
);

46 
	}
}

48 
	$ˇlc_hô_øtio
(
memˇched_™Æysis_°
 *
ªsu…
,

49 c⁄° 
uöt64_t
 
tŸÆ_gë_hôs
,

50 c⁄° 
uöt64_t
 
tŸÆ_gë_cmds
)

52 i‡(
tŸÆ_gë_hôs
 =0 || 
tŸÆ_gë_cmds
 == 0)

54 
ªsu…
->
poﬁ_hô_øtio
= 0;

58 
ãmp
(Ë(
tŸÆ_gë_hôs
/
tŸÆ_gë_cmds
);

59 
ªsu…
->
poﬁ_hô_øtio

ãmp
 * 100;

60 
	}
}

62 
memˇched_™Æysis_°
 *
	$memˇched_™Æyze
(
memˇched_°
 *
memc
,

63 
memˇched_°©_°
 *
memc_°©
,

64 
memˇched_ªtu∫_t
 *
îr‹
)

66 
uöt64_t
 
tŸÆ_ôems
0, 
tŸÆ_byãs
= 0;

67 
uöt64_t
 
tŸÆ_gë_cmds
0, 
tŸÆ_gë_hôs
= 0;

68 
uöt32_t
 
£rvî_cou¡
, 
x
;

69 
memˇched_™Æysis_°
 *
ªsu…
;

71 *
îr‹

MEMCACHED_SUCCESS
;

72 
£rvî_cou¡

	`memˇched_£rvî_cou¡
(
memc
);

73 
ªsu…
(
memˇched_™Æysis_°
*)
	`ˇŒoc
(
	`memˇched_£rvî_cou¡
(
memc
),

74 (
memˇched_™Æysis_°
));

76 i‡(!
ªsu…
)

78 *
îr‹

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

79  
NULL
;

82 
ªsu…
->
roŸ

memc
;

84 
x
0; x < 
£rvî_cou¡
; x++)

86 
	`ˇlc_œrge°_c⁄sum±i⁄
(
ªsu…
, 
x
, 
memc_°©
[x].
byãs
);

87 
	`ˇlc_ﬁde°_node
(
ªsu…
, 
x
, 
memc_°©
[x].
u±ime
);

88 
	`ˇlc_Àa°_‰ì_node
(
ªsu…
, 
x
,

89 
memc_°©
[
x
].
limô_maxbyãs
,

90 
memc_°©
[
x
].
byãs
);

92 
tŸÆ_gë_hôs
+
memc_°©
[
x
].
gë_hôs
;

93 
tŸÆ_gë_cmds
+
memc_°©
[
x
].
cmd_gë
;

94 
tŸÆ_ôems
+
memc_°©
[
x
].
cuº_ôems
;

95 
tŸÆ_byãs
+
memc_°©
[
x
].
byãs
;

98 
	`ˇlc_avîage_ôem_size
(
ªsu…
, 
tŸÆ_ôems
, 
tŸÆ_byãs
);

99 
	`ˇlc_hô_øtio
(
ªsu…
, 
tŸÆ_gë_hôs
, 
tŸÆ_gë_cmds
);

101  
ªsu…
;

102 
	}
}

104 
	$memˇched_™Æyze_‰ì
(
memˇched_™Æysis_°
 *
±r
)

106 
	`‰ì
(
±r
);

107 
	}
}

	@libmemcached/analyze.h

12 #i‚de‡
__LIBMEMCACHED_ANALYZE_H__


13 
	#__LIBMEMCACHED_ANALYZE_H__


	)

15 
	smemˇched_™Æysis_°
 {

16 
memˇched_°
 *
	mroŸ
;

17 
uöt32_t
 
	mavîage_ôem_size
;

18 
uöt32_t
 
	ml⁄ge°_u±ime
;

19 
uöt32_t
 
	mÀa°_‰ì_£rvî
;

20 
uöt32_t
 
	mmo°_c⁄sumed_£rvî
;

21 
uöt32_t
 
	mﬁde°_£rvî
;

22 
	mpoﬁ_hô_øtio
;

23 
uöt64_t
 
	mmo°_u£d_byãs
;

24 
uöt64_t
 
	mÀa°_ªmaöög_byãs
;

27 #ifde‡
__˝lu•lus


31 
LIBMEMCACHED_API


32 
memˇched_™Æysis_°
 *
memˇched_™Æyze
(
memˇched_°
 *
memc
,

33 
memˇched_°©_°
 *
memc_°©
,

34 
memˇched_ªtu∫_t
 *
îr‹
);

36 
LIBMEMCACHED_API


37 
memˇched_™Æyze_‰ì
(
memˇched_™Æysis_°
 *);

39 #ifde‡
__˝lu•lus


	@libmemcached/array.c

38 
	~"libmemˇched/comm⁄.h
"

40 
	smemˇched_¨øy_°


42 
memˇched_°
 *
	mroŸ
;

43 
size_t
 
	msize
;

44 
	mc_°r
[];

47 
memˇched_¨øy_°
 *
	$memˇched_¨øy_˛⁄e
(
memˇched_°
 *
memc
, c⁄° 
memˇched_¨øy_°
 *
‹igöÆ
)

49 i‡(! 
‹igöÆ
)

50  
NULL
;

52  
	`memˇched_°r˝y
(
memc
, 
‹igöÆ
->
c_°r
, origöÆ->
size
);

53 
	}
}

55 
memˇched_¨øy_°
 *
	$memˇched_°r˝y
(
memˇched_°
 *
memc
, c⁄° *
°r
, 
size_t
 
°r_Àngth
)

57 
memˇched_¨øy_°
 *
¨øy
(memˇched_¨øy_° *)
	`libmemˇched_mÆloc
(
memc
, (memˇched_¨øy_°Ë+
°r_Àngth
 +1);

59 i‡(! 
¨øy
)

60  
NULL
;

62 
¨øy
->
roŸ

memc
;

63 
¨øy
->
size

°r_Àngth
 -1;

64 
	`mem˝y
(
¨øy
->
c_°r
, 
°r
, 
°r_Àngth
);

65 
¨øy
->
c_°r
[
°r_Àngth
]= 0;

67  
¨øy
;

68 
	}
}

70 
memˇched_°rög_t
 
	$memˇched_¨øy_to_°rög
(
memˇched_¨øy_°
 *
¨øy
)

72 
memˇched_°rög_t
 
tmp
;

73 
tmp
.
c_°r

¨øy
->c_str;

74 
tmp
.
size

¨øy
->size;

76  
tmp
;

77 
	}
}

79 
	$memˇched_¨øy_‰ì
(
memˇched_¨øy_°
 *
¨øy
)

81 i‡(! 
¨øy
)

84 
	`WATCHPOINT_ASSERT
(
¨øy
->
roŸ
);

85 i‡(
¨øy
 &&áºay->
roŸ
)

87 
	`libmemˇched_‰ì
(
¨øy
->
roŸ
,árray);

89 i‡(
¨øy
)

91 
	`‰ì
(
¨øy
);

93 
	}
}

95 
size_t
 
	$memˇched_¨øy_size
(
memˇched_¨øy_°
 *
¨øy
)

97 i‡(! 
¨øy
)

100  
¨øy
->
size
;

101 
	}
}

103 c⁄° *
	$memˇched_¨øy_°rög
(
memˇched_¨øy_°
 *
¨øy
)

105 i‡(! 
¨øy
)

106  
NULL
;

108  
¨øy
->
c_°r
;

109 
	}
}

	@libmemcached/array.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_LOCAL


45 
memˇched_¨øy_°
 *
memˇched_¨øy_˛⁄e
(
memˇched_°
 *
memc
, c⁄° memˇched_¨øy_° *
‹igöÆ
);

47 
LIBMEMCACHED_LOCAL


48 
memˇched_¨øy_°
 *
memˇched_°r˝y
(
memˇched_°
 *
memc
, c⁄° *
°r
, 
size_t
 
°r_Àngth
);

50 
LIBMEMCACHED_LOCAL


51 
memˇched_¨øy_‰ì
(
memˇched_¨øy_°
 *
¨øy
);

53 
LIBMEMCACHED_LOCAL


54 
size_t
 
memˇched_¨øy_size
(
memˇched_¨øy_°
 *
¨øy
);

56 
LIBMEMCACHED_LOCAL


57 c⁄° *
memˇched_¨øy_°rög
(
memˇched_¨øy_°
 *
¨øy
);

59 
LIBMEMCACHED_LOCAL


60 
memˇched_°rög_t
 
memˇched_¨øy_to_°rög
(
memˇched_¨øy_°
 *
¨øy
);

62 #ifde‡
__˝lu•lus


66 #ifde‡
__˝lu•lus


67 
	#memˇched_¥öt_¨øy
(
X
Ë
°©ic_ˇ°
<>(
	`memˇched_¨øy_size
(X)), 
	`memˇched_¨øy_°rög
(X)

	)

68 
	#memˇched_∑øm_¨øy
(
X
Ë
	`memˇched_¨øy_°rög
(X), 
	`memˇched_¨øy_size
(X)

	)

70 
	#memˇched_¥öt_¨øy
(
X
Ë()
	`memˇched_¨øy_size
((X)), 
	`memˇched_¨øy_°rög
((X))

	)

71 
	#memˇched_∑øm_¨øy
(
X
Ë
	`memˇched_¨øy_°rög
(X), 
	`memˇched_¨øy_size
(X)

	)

	@libmemcached/auto.c

12 
	~"libmemˇched/comm⁄.h
"

14 
memˇched_ªtu∫_t
 
	$ãxt_ö¸_de¸
(
memˇched_°
 *
±r
,

15 c⁄° *
vîb
,

16 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

17 c⁄° *
key
, 
size_t
 
key_Àngth
,

18 
uöt64_t
 
off£t
,

19 
uöt64_t
 *
vÆue
)

21 
memˇched_ªtu∫_t
 
rc
;

22 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

23 
uöt32_t
 
£rvî_key
;

24 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

25 
boﬁ
 
no_ª∂y

±r
->
Êags
.no_reply;

27 i‡(
	`memˇched_£rvî_cou¡
(
±r
) == 0)

28  
	`memˇched_£t_îr‹
(
±r
, 
MEMCACHED_NO_SERVERS
, 
NULL
);

30 i‡(
±r
->
Êags
.
vîify_key
 && (
	`memˇched_key_ã°
((c⁄° **)&
key
, &
key_Àngth
, 1Ë=
MEMCACHED_BAD_KEY_PROVIDED
))

31  
MEMCACHED_BAD_KEY_PROVIDED
;

33 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
group_key
, 
group_key_Àngth
);

34 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
£rvî_key
);

36 
£nd_Àngth
;

37 
£nd_Àngth

	`¢¥ötf
(
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
,

38 "%†%.*s%.*†%" 
PRIu64
 "%s\r\n", 
vîb
,

39 
	`memˇched_¥öt_¨øy
(
±r
->
¥efix_key
),

40 ()
key_Àngth
, 
key
,

41 
off£t
, 
no_ª∂y
 ? "Çoreply" : "");

42 i‡(
£nd_Àngth
 >
MEMCACHED_DEFAULT_COMMAND_SIZE
 || send_length < 0)

43  
MEMCACHED_WRITE_FAILURE
;

45 
rc

	`memˇched_do
(
ö°™˚
, 
buf„r
, (
size_t
)
£nd_Àngth
, 
åue
);

46 i‡(
no_ª∂y
 || 
rc
 !
MEMCACHED_SUCCESS
)

47  
rc
;

49 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, 
NULL
);

58 i‡(! 
	`°∫cmp
(
buf„r
, "ERROR\r\n", 7))

60 *
vÆue
= 0;

61 
rc

MEMCACHED_PROTOCOL_ERROR
;

63 i‡(! 
	`°∫cmp
(
buf„r
, "CLIENT_ERROR\r\n", 14))

65 *
vÆue
= 0;

66 
rc

MEMCACHED_PROTOCOL_ERROR
;

68 i‡(!
	`°∫cmp
(
buf„r
, "NOT_FOUND\r\n", 11))

70 *
vÆue
= 0;

71 
rc

MEMCACHED_NOTFOUND
;

75 *
vÆue

	`°πouŒ
(
buf„r
, (**)
NULL
, 10);

76 
rc

MEMCACHED_SUCCESS
;

79  
rc
;

80 
	}
}

82 
memˇched_ªtu∫_t
 
	$bö¨y_ö¸_de¸
(
memˇched_°
 *
±r
, 
uöt8_t
 
cmd
,

83 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

84 c⁄° *
key
, 
size_t
 
key_Àngth
,

85 
uöt64_t
 
off£t
, uöt64_à
öôül
,

86 
uöt32_t
 
expú©i⁄
,

87 
uöt64_t
 *
vÆue
)

89 
uöt32_t
 
£rvî_key
;

90 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

91 
boﬁ
 
no_ª∂y

±r
->
Êags
.no_reply;

93 i‡(
	`memˇched_£rvî_cou¡
(
±r
) == 0)

94  
	`memˇched_£t_îr‹
(
±r
, 
MEMCACHED_NO_SERVERS
, 
NULL
);

96 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
group_key
, 
group_key_Àngth
);

97 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
£rvî_key
);

99 i‡(
no_ª∂y
)

101 if(
cmd
 =
PROTOCOL_BINARY_CMD_DECREMENT
)

102 
cmd

PROTOCOL_BINARY_CMD_DECREMENTQ
;

103 if(
cmd
 =
PROTOCOL_BINARY_CMD_INCREMENT
)

104 
cmd

PROTOCOL_BINARY_CMD_INCREMENTQ
;

106 
¥Ÿocﬁ_bö¨y_ªque°_ö¸
 
ªque°
{.
byãs
= {0}};

108 
ªque°
.
mesßge
.
hódî
.ªque°.
magic

PROTOCOL_BINARY_REQ
;

109 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

cmd
;

110 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
((
uöt16_t
)(
key_Àngth
 + 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
)));

111 
ªque°
.
mesßge
.
hódî
.ªque°.
exéí
= 20;

112 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

113 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
((
uöt32_t
)(
key_Àngth
 + 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
Ë+ªque°.mesßge.hódî.ªque°.
exéí
));

114 
ªque°
.
mesßge
.
body
.
dñè

	`ht⁄Œ
(
off£t
);

115 
ªque°
.
mesßge
.
body
.
öôül

	`ht⁄Œ
(initial);

116 
ªque°
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
((
uöt32_t
)Éxpiration);

118 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

120 { .
Àngth
(
ªque°
.
byãs
), .
buf„r
=Ñequest.bytes },

121 { .
Àngth

	`memˇched_¨øy_size
(
±r
->
¥efix_key
), .
buf„r
=Ötr->prefix_key },

122 { .
Àngth

key_Àngth
, .
buf„r

key
 }

125 
memˇched_ªtu∫_t
 
rc
;

126 i‡((
rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 3, 
åue
)Ë!
MEMCACHED_SUCCESS
)

128 
	`memˇched_io_ª£t
(
ö°™˚
);

129  (
rc
 =
MEMCACHED_SUCCESS
Ë? 
MEMCACHED_WRITE_FAILURE
 :Ñc;

132 i‡(
no_ª∂y
)

133  
MEMCACHED_SUCCESS
;

134  
	`memˇched_ª•⁄£
(
ö°™˚
, (*)
vÆue
, (*vÆue), 
NULL
);

135 
	}
}

137 
memˇched_ªtu∫_t
 
	$memˇched_ö¸emít
(
memˇched_°
 *
±r
,

138 c⁄° *
key
, 
size_t
 
key_Àngth
,

139 
uöt32_t
 
off£t
,

140 
uöt64_t
 *
vÆue
)

142 
uöt64_t
 
loˇl_vÆue
;

143 i‡(! 
vÆue
)

144 
vÆue
&
loˇl_vÆue
;

146  
	`memˇched_ö¸emít_by_key
(
±r
, 
key
, 
key_Àngth
, key, key_Àngth, 
off£t
, 
vÆue
);

147 
	}
}

149 
memˇched_ªtu∫_t
 
	$memˇched_de¸emít
(
memˇched_°
 *
±r
,

150 c⁄° *
key
, 
size_t
 
key_Àngth
,

151 
uöt32_t
 
off£t
,

152 
uöt64_t
 *
vÆue
)

154 
uöt64_t
 
loˇl_vÆue
;

155 i‡(! 
vÆue
)

156 
vÆue
&
loˇl_vÆue
;

158  
	`memˇched_de¸emít_by_key
(
±r
, 
key
, 
key_Àngth
, key, key_Àngth, 
off£t
, 
vÆue
);

159 
	}
}

161 
memˇched_ªtu∫_t
 
	$memˇched_ö¸emít_by_key
(
memˇched_°
 *
±r
,

162 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

163 c⁄° *
key
, 
size_t
 
key_Àngth
,

164 
uöt64_t
 
off£t
,

165 
uöt64_t
 *
vÆue
)

167 
memˇched_ªtu∫_t
 
rc

	`memˇched_vÆid©e_key_Àngth
(
key_Àngth
, 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
);

168 
	`u∆ikñy
 (
rc
 !
MEMCACHED_SUCCESS
)

169  
rc
;

171 
uöt64_t
 
loˇl_vÆue
;

172 i‡(! 
vÆue
)

173 
vÆue
&
loˇl_vÆue
;

175 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_START
();

176 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

178 
rc

	`bö¨y_ö¸_de¸
(
±r
, 
PROTOCOL_BINARY_CMD_INCREMENT
,

179 
group_key
, 
group_key_Àngth
, 
key
, 
key_Àngth
,

180 (
uöt64_t
)
off£t
, 0, 
MEMCACHED_EXPIRATION_NOT_ADD
,

181 
vÆue
);

185 
rc

	`ãxt_ö¸_de¸
(
±r
, "ö¸", 
group_key
, 
group_key_Àngth
, 
key
, 
key_Àngth
, 
off£t
, 
vÆue
);

188 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_END
();

190  
rc
;

191 
	}
}

193 
memˇched_ªtu∫_t
 
	$memˇched_de¸emít_by_key
(
memˇched_°
 *
±r
,

194 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

195 c⁄° *
key
, 
size_t
 
key_Àngth
,

196 
uöt64_t
 
off£t
,

197 
uöt64_t
 *
vÆue
)

199 
memˇched_ªtu∫_t
 
rc

	`memˇched_vÆid©e_key_Àngth
(
key_Àngth
, 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
);

200 
	`u∆ikñy
 (
rc
 !
MEMCACHED_SUCCESS
)

201  
rc
;

203 
uöt64_t
 
loˇl_vÆue
;

204 i‡(! 
vÆue
)

205 
vÆue
&
loˇl_vÆue
;

207 
	`LIBMEMCACHED_MEMCACHED_DECREMENT_START
();

208 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

210 
rc

	`bö¨y_ö¸_de¸
(
±r
, 
PROTOCOL_BINARY_CMD_DECREMENT
,

211 
group_key
, 
group_key_Àngth
, 
key
, 
key_Àngth
,

212 (
uöt64_t
)
off£t
, 0, 
MEMCACHED_EXPIRATION_NOT_ADD
,

213 
vÆue
);

217 
rc

	`ãxt_ö¸_de¸
(
±r
, "de¸", 
group_key
, 
group_key_Àngth
, 
key
, 
key_Àngth
, 
off£t
, 
vÆue
);

220 
	`LIBMEMCACHED_MEMCACHED_DECREMENT_END
();

222  
rc
;

223 
	}
}

225 
memˇched_ªtu∫_t
 
	$memˇched_ö¸emít_wôh_öôül
(
memˇched_°
 *
±r
,

226 c⁄° *
key
,

227 
size_t
 
key_Àngth
,

228 
uöt64_t
 
off£t
,

229 
uöt64_t
 
öôül
,

230 
time_t
 
expú©i⁄
,

231 
uöt64_t
 *
vÆue
)

233 
uöt64_t
 
loˇl_vÆue
;

234 i‡(! 
vÆue
)

235 
vÆue
&
loˇl_vÆue
;

237  
	`memˇched_ö¸emít_wôh_öôül_by_key
(
±r
, 
key
, 
key_Àngth
,

238 
key
, 
key_Àngth
,

239 
off£t
, 
öôül
, 
expú©i⁄
, 
vÆue
);

240 
	}
}

242 
memˇched_ªtu∫_t
 
	$memˇched_ö¸emít_wôh_öôül_by_key
(
memˇched_°
 *
±r
,

243 c⁄° *
group_key
,

244 
size_t
 
group_key_Àngth
,

245 c⁄° *
key
,

246 
size_t
 
key_Àngth
,

247 
uöt64_t
 
off£t
,

248 
uöt64_t
 
öôül
,

249 
time_t
 
expú©i⁄
,

250 
uöt64_t
 *
vÆue
)

252 
memˇched_ªtu∫_t
 
rc

	`memˇched_vÆid©e_key_Àngth
(
key_Àngth
, 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
);

253 
	`u∆ikñy
 (
rc
 !
MEMCACHED_SUCCESS
)

254  
rc
;

256 
uöt64_t
 
loˇl_vÆue
;

257 i‡(! 
vÆue
)

258 
vÆue
&
loˇl_vÆue
;

260 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_START
();

261 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

262 
rc

	`bö¨y_ö¸_de¸
(
±r
, 
PROTOCOL_BINARY_CMD_INCREMENT
,

263 
group_key
, 
group_key_Àngth
, 
key
, 
key_Àngth
,

264 
off£t
, 
öôül
, (
uöt32_t
)
expú©i⁄
,

265 
vÆue
);

267 
rc

MEMCACHED_PROTOCOL_ERROR
;

269 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_END
();

271  
rc
;

272 
	}
}

274 
memˇched_ªtu∫_t
 
	$memˇched_de¸emít_wôh_öôül
(
memˇched_°
 *
±r
,

275 c⁄° *
key
,

276 
size_t
 
key_Àngth
,

277 
uöt64_t
 
off£t
,

278 
uöt64_t
 
öôül
,

279 
time_t
 
expú©i⁄
,

280 
uöt64_t
 *
vÆue
)

282 
uöt64_t
 
loˇl_vÆue
;

283 i‡(! 
vÆue
)

284 
vÆue
&
loˇl_vÆue
;

286  
	`memˇched_de¸emít_wôh_öôül_by_key
(
±r
, 
key
, 
key_Àngth
,

287 
key
, 
key_Àngth
,

288 
off£t
, 
öôül
, 
expú©i⁄
, 
vÆue
);

289 
	}
}

291 
memˇched_ªtu∫_t
 
	$memˇched_de¸emít_wôh_öôül_by_key
(
memˇched_°
 *
±r
,

292 c⁄° *
group_key
,

293 
size_t
 
group_key_Àngth
,

294 c⁄° *
key
,

295 
size_t
 
key_Àngth
,

296 
uöt64_t
 
off£t
,

297 
uöt64_t
 
öôül
,

298 
time_t
 
expú©i⁄
,

299 
uöt64_t
 *
vÆue
)

301 
memˇched_ªtu∫_t
 
rc

	`memˇched_vÆid©e_key_Àngth
(
key_Àngth
, 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
);

302 
	`u∆ikñy
 (
rc
 !
MEMCACHED_SUCCESS
)

303  
rc
;

305 
uöt64_t
 
loˇl_vÆue
;

306 i‡(! 
vÆue
)

307 
vÆue
&
loˇl_vÆue
;

309 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_START
();

310 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

312 
rc

	`bö¨y_ö¸_de¸
(
±r
, 
PROTOCOL_BINARY_CMD_DECREMENT
,

313 
group_key
, 
group_key_Àngth
, 
key
, 
key_Àngth
,

314 
off£t
, 
öôül
, (
uöt32_t
)
expú©i⁄
,

315 
vÆue
);

319 
rc

MEMCACHED_PROTOCOL_ERROR
;

322 
	`LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_END
();

324  
rc
;

325 
	}
}

	@libmemcached/auto.h

12 #i‚de‡
__LIBMEMCACHED_AUTO_H__


13 
	#__LIBMEMCACHED_AUTO_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
memˇched_ªtu∫_t
 
memˇched_ö¸emít
(
memˇched_°
 *
±r
,

21 c⁄° *
key
, 
size_t
 
key_Àngth
,

22 
uöt32_t
 
off£t
,

23 
uöt64_t
 *
vÆue
);

24 
LIBMEMCACHED_API


25 
memˇched_ªtu∫_t
 
memˇched_de¸emít
(
memˇched_°
 *
±r
,

26 c⁄° *
key
, 
size_t
 
key_Àngth
,

27 
uöt32_t
 
off£t
,

28 
uöt64_t
 *
vÆue
);

30 
LIBMEMCACHED_API


31 
memˇched_ªtu∫_t
 
memˇched_ö¸emít_by_key
(
memˇched_°
 *
±r
,

32 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

33 c⁄° *
key
, 
size_t
 
key_Àngth
,

34 
uöt64_t
 
off£t
,

35 
uöt64_t
 *
vÆue
);

37 
LIBMEMCACHED_API


38 
memˇched_ªtu∫_t
 
memˇched_de¸emít_by_key
(
memˇched_°
 *
±r
,

39 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

40 c⁄° *
key
, 
size_t
 
key_Àngth
,

41 
uöt64_t
 
off£t
,

42 
uöt64_t
 *
vÆue
);

44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
memˇched_ö¸emít_wôh_öôül
(
memˇched_°
 *
±r
,

46 c⁄° *
key
,

47 
size_t
 
key_Àngth
,

48 
uöt64_t
 
off£t
,

49 
uöt64_t
 
öôül
,

50 
time_t
 
expú©i⁄
,

51 
uöt64_t
 *
vÆue
);

53 
LIBMEMCACHED_API


54 
memˇched_ªtu∫_t
 
memˇched_de¸emít_wôh_öôül
(
memˇched_°
 *
±r
,

55 c⁄° *
key
,

56 
size_t
 
key_Àngth
,

57 
uöt64_t
 
off£t
,

58 
uöt64_t
 
öôül
,

59 
time_t
 
expú©i⁄
,

60 
uöt64_t
 *
vÆue
);

62 
LIBMEMCACHED_API


63 
memˇched_ªtu∫_t
 
memˇched_ö¸emít_wôh_öôül_by_key
(
memˇched_°
 *
±r
,

64 c⁄° *
group_key
,

65 
size_t
 
group_key_Àngth
,

66 c⁄° *
key
,

67 
size_t
 
key_Àngth
,

68 
uöt64_t
 
off£t
,

69 
uöt64_t
 
öôül
,

70 
time_t
 
expú©i⁄
,

71 
uöt64_t
 *
vÆue
);

73 
LIBMEMCACHED_API


74 
memˇched_ªtu∫_t
 
memˇched_de¸emít_wôh_öôül_by_key
(
memˇched_°
 *
±r
,

75 c⁄° *
group_key
,

76 
size_t
 
group_key_Àngth
,

77 c⁄° *
key
,

78 
size_t
 
key_Àngth
,

79 
uöt64_t
 
off£t
,

80 
uöt64_t
 
öôül
,

81 
time_t
 
expú©i⁄
,

82 
uöt64_t
 *
vÆue
);

84 #ifde‡
__˝lu•lus


	@libmemcached/behavior.c

12 
	~<libmemˇched/comm⁄.h
>

13 
	~<libmemˇched/vútuÆ_buckë.h
>

15 
	~<time.h
>

16 
	~<sys/ty≥s.h
>

18 
boﬁ
 
	$£t_Êag
(
uöt64_t
 
d©a
)

21  
d©a
 ? 
åue
 : 
Ál£
;

22 
	}
}

30 
memˇched_ªtu∫_t
 
	$memˇched_behavi‹_£t
(
memˇched_°
 *
±r
,

31 c⁄° 
memˇched_behavi‹_t
 
Êag
,

32 
uöt64_t
 
d©a
)

34 
Êag
)

36 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
:

37 
±r
->
numbî_of_ª∂iˇs
(
uöt32_t
)
d©a
;

39 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
:

40 
±r
->
io_msg_w©îm¨k
(
uöt32_t
Ë
d©a
;

42 
MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK
:

43 
±r
->
io_byãs_w©îm¨k
(
uöt32_t
)
d©a
;

45 
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
:

46 
±r
->
io_key_¥e„tch
 = (
uöt32_t
)
d©a
;

48 
MEMCACHED_BEHAVIOR_SND_TIMEOUT
:

49 
±r
->
¢d_timeout
(
öt32_t
)
d©a
;

51 
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
:

52 
±r
->
rcv_timeout
(
öt32_t
)
d©a
;

55 
MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
:

56 
±r
->
Êags
.
auto_eje˘_ho°s

	`£t_Êag
(
d©a
);

57 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
:

58 
±r
->
£rvî_Áûuª_limô
(
uöt32_t
)
d©a
;

61 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
:

62 
	`£nd_quô
(
±r
);

63 i‡(
d©a
)

65 
±r
->
Êags
.
vîify_key

Ál£
;

67 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ

	`£t_Êag
(
d©a
);

69 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
:

70 
±r
->
Êags
.
suµ‹t_ˇs

	`£t_Êag
(
d©a
);

72 
MEMCACHED_BEHAVIOR_NO_BLOCK
:

73 
±r
->
Êags
.
no_block

	`£t_Êag
(
d©a
);

74 
	`£nd_quô
(
±r
);

76 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
:

77 
±r
->
Êags
.
buf„r_ªque°s

	`£t_Êag
(
d©a
);

78 
	`£nd_quô
(
±r
);

80 
MEMCACHED_BEHAVIOR_USE_UDP
:

81 i‡(
	`memˇched_£rvî_cou¡
(
±r
))

83  
MEMCACHED_FAILURE
;

85 
±r
->
Êags
.
u£_udp

	`£t_Êag
(
d©a
);

86 i‡(
d©a
)

88 
±r
->
Êags
.
no_ª∂y

	`£t_Êag
(
d©a
);

91 
MEMCACHED_BEHAVIOR_TCP_NODELAY
:

92 
±r
->
Êags
.
t˝_nodñay

	`£t_Êag
(
d©a
);

93 
	`£nd_quô
(
±r
);

95 
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
:

96 
±r
->
Êags
.
t˝_kì∑live

	`£t_Êag
(
d©a
);

97 
	`£nd_quô
(
±r
);

99 
MEMCACHED_BEHAVIOR_DISTRIBUTION
:

100  
	`memˇched_behavi‹_£t_di°ributi⁄
(
±r
, (
memˇched_£rvî_di°ributi⁄_t
)
d©a
);

101 
MEMCACHED_BEHAVIOR_KETAMA
:

103 i‡(
d©a
)

104  
	`memˇched_behavi‹_£t_di°ributi⁄
(
±r
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
);

106  
	`memˇched_behavi‹_£t_di°ributi⁄
(
±r
, 
MEMCACHED_DISTRIBUTION_MODULA
);

108 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
:

110 ()
	`memˇched_behavi‹_£t_key_hash
(
±r
, 
MEMCACHED_HASH_MD5
);

111 ()
	`memˇched_behavi‹_£t_di°ributi⁄_hash
(
±r
, 
MEMCACHED_HASH_MD5
);

112 
±r
->
këama
.
weighãd

	`£t_Êag
(
d©a
);

116  
	`memˇched_behavi‹_£t_di°ributi⁄
(
±r
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
);

118 
MEMCACHED_BEHAVIOR_HASH
:

119  
	`memˇched_behavi‹_£t_key_hash
(
±r
, (
memˇched_hash_t
)(
d©a
));

120 
MEMCACHED_BEHAVIOR_KETAMA_HASH
:

121  
	`memˇched_behavi‹_£t_di°ributi⁄_hash
(
±r
, (
memˇched_hash_t
)(
d©a
));

123 
MEMCACHED_BEHAVIOR_CACHE_LOOKUPS
:

124  
	`memˇched_£t_îr‹_°rög
(
±r
, 
MEMCACHED_DEPRECATED
,

125 
	`memˇched_°rög_wôh_size
("MEMCACHED_BEHAVIOR_CACHE_LOOKUPS has been deprecated."));

127 
MEMCACHED_BEHAVIOR_VERIFY_KEY
:

128 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

129  
	`memˇched_£t_îr‹_°rög
(
±r
, 
MEMCACHED_INVALID_ARGUMENTS
,

130 
	`memˇched_°rög_wôh_size
("MEMCACHED_BEHAVIOR_VERIFY_KEY ifÅhe binaryÖrotocol has beenÉnabled."));

131 
±r
->
Êags
.
vîify_key

	`£t_Êag
(
d©a
);

133 
MEMCACHED_BEHAVIOR_SORT_HOSTS
:

135 
±r
->
Êags
.
u£_s‹t_ho°s

	`£t_Êag
(
d©a
);

136 
	`run_di°ributi⁄
(
±r
);

140 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
:

141 
±r
->
pﬁl_timeout
(
öt32_t
)
d©a
;

143 
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
:

144 
±r
->
c⁄√˘_timeout
(
öt32_t
)
d©a
;

146 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
:

147 
±r
->
ªåy_timeout
(
öt32_t
)
d©a
;

149 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
:

150 
±r
->
£nd_size
(
öt32_t
)
d©a
;

151 
	`£nd_quô
(
±r
);

153 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
:

154 
±r
->
ªcv_size
(
öt32_t
)
d©a
;

155 
	`£nd_quô
(
±r
);

157 
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
:

158 
±r
->
t˝_kìpidÀ
(
uöt32_t
)
d©a
;

159 
	`£nd_quô
(
±r
);

161 
MEMCACHED_BEHAVIOR_USER_DATA
:

162  
	`memˇched_£t_îr‹_°rög
(
±r
, 
MEMCACHED_DEPRECATED
,

163 
	`memˇched_°rög_wôh_size
("MEMCACHED_BEHAVIOR_USER_DATA deprecated."));

164 
MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY
:

165 
±r
->
Êags
.
hash_wôh_¥efix_key

	`£t_Êag
(
d©a
);

167 
MEMCACHED_BEHAVIOR_NOREPLY
:

168 
±r
->
Êags
.
no_ª∂y

	`£t_Êag
(
d©a
);

170 
MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
:

171 
±r
->
Êags
.
auto_eje˘_ho°s

	`£t_Êag
(
d©a
);

173 
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
:

174 
	`§™dom
((
uöt32_t
Ë
	`time
(
NULL
));

175 
±r
->
Êags
.
øndomize_ª∂iˇ_ªad

	`£t_Êag
(
d©a
);

177 
MEMCACHED_BEHAVIOR_CORK
:

179  
	`memˇched_£t_îr‹_°rög
(
±r
, 
MEMCACHED_DEPRECATED
,

180 
	`memˇched_°rög_wôh_size
("MEMCACHED_BEHAVIOR_CORK isÇow incorporated intoÅhe driver by default."));

183 
MEMCACHED_BEHAVIOR_LOAD_FROM_FILE
:

184  
	`memˇched_£t_îr‹_°rög
(
±r
, 
MEMCACHED_INVALID_ARGUMENTS
,

185 
	`memˇched_°rög_wôh_size
("MEMCACHED_BEHAVIOR_LOAD_FROM_FILE canÇot be set with memcached_behavior_set()"));

186 
MEMCACHED_BEHAVIOR_MAX
:

189 
	`WATCHPOINT_ASSERT
(0);

190  
	`memˇched_£t_îr‹_°rög
(
±r
, 
MEMCACHED_INVALID_ARGUMENTS
,

191 
	`memˇched_°rög_wôh_size
("Invalid behaviorÖassedÅo memcached_behavior_set()"));

194  
MEMCACHED_SUCCESS
;

195 
	}
}

197 
boﬁ
 
	$_is_auto_eje˘_ho°
(c⁄° 
memˇched_°
 *
±r
)

199  
±r
->
Êags
.
auto_eje˘_ho°s
;

200 
	}
}

202 
uöt64_t
 
	$memˇched_behavi‹_gë
(
memˇched_°
 *
±r
,

203 c⁄° 
memˇched_behavi‹_t
 
Êag
)

205 
Êag
)

207 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
:

208  
±r
->
numbî_of_ª∂iˇs
;

209 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
:

210  
±r
->
io_msg_w©îm¨k
;

211 
MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK
:

212  
±r
->
io_byãs_w©îm¨k
;

213 
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
:

214  
±r
->
io_key_¥e„tch
;

215 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
:

216  
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
;

217 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
:

218  
±r
->
Êags
.
suµ‹t_ˇs
;

220 
MEMCACHED_BEHAVIOR_CACHE_LOOKUPS
:

221  
åue
;

223 
MEMCACHED_BEHAVIOR_NO_BLOCK
:

224  
±r
->
Êags
.
no_block
;

225 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
:

226  
±r
->
Êags
.
buf„r_ªque°s
;

227 
MEMCACHED_BEHAVIOR_USE_UDP
:

228  
±r
->
Êags
.
u£_udp
;

229 
MEMCACHED_BEHAVIOR_TCP_NODELAY
:

230  
±r
->
Êags
.
t˝_nodñay
;

231 
MEMCACHED_BEHAVIOR_VERIFY_KEY
:

232  
±r
->
Êags
.
vîify_key
;

233 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
:

234  
±r
->
këama
.
weighãd
;

235 
MEMCACHED_BEHAVIOR_DISTRIBUTION
:

236  
±r
->
di°ributi⁄
;

237 
MEMCACHED_BEHAVIOR_KETAMA
:

238  (
±r
->
di°ributi⁄
 =
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
Ë? (
uöt64_t
) 1 : 0;

239 
MEMCACHED_BEHAVIOR_HASH
:

240  
	`hashkô_gë_fun˘i⁄
(&
±r
->
hashkô
);

241 
MEMCACHED_BEHAVIOR_KETAMA_HASH
:

242  
	`hashkô_gë_fun˘i⁄
(&
±r
->
di°ributi⁄_hashkô
);

243 
MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
:

244 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
:

245  
±r
->
£rvî_Áûuª_limô
;

246 
MEMCACHED_BEHAVIOR_SORT_HOSTS
:

247  
±r
->
Êags
.
u£_s‹t_ho°s
;

248 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
:

249  (
uöt64_t
)
±r
->
pﬁl_timeout
;

250 
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
:

251  (
uöt64_t
)
±r
->
c⁄√˘_timeout
;

252 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
:

253  (
uöt64_t
)
±r
->
ªåy_timeout
;

254 
MEMCACHED_BEHAVIOR_SND_TIMEOUT
:

255  (
uöt64_t
)
±r
->
¢d_timeout
;

256 
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
:

257  (
uöt64_t
)
±r
->
rcv_timeout
;

258 
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
:

259  (
uöt64_t
)
±r
->
t˝_kìpidÀ
;

260 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
:

262 
sock_size
= 0;

263 
sockÀn_t
 
sock_Àngth
= ();

264 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

266 i‡(
±r
->
£nd_size
 != -1)

267  (
uöt64_t
Ë
±r
->
£nd_size
;

269 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 0);

271 i‡(
ö°™˚
)

275 i‡((
	`memˇched_c⁄√˘
(
ö°™˚
)Ë!
MEMCACHED_SUCCESS
)

280 i‡(
	`memˇched_io_waô_f‹_wrôe
(
ö°™˚
Ë!
MEMCACHED_SUCCESS
)

285 i‡(
	`gësock›t
(
ö°™˚
->
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
sock_size
, &
sock_Àngth
) < 0)

287 
	`memˇched_£t_î∫o
(
±r
, 
î∫o
, 
NULL
);

292  (
uöt64_t
Ë
sock_size
;

294 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
:

296 
sock_size
= 0;

297 
sockÀn_t
 
sock_Àngth
= ();

298 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

300 i‡(
±r
->
ªcv_size
 != -1)

301  (
uöt64_t
Ë
±r
->
ªcv_size
;

303 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 0);

308 i‡(
ö°™˚
)

311 i‡((
	`memˇched_c⁄√˘
(
ö°™˚
)Ë!
MEMCACHED_SUCCESS
)

316 i‡(
	`memˇched_io_waô_f‹_wrôe
(
ö°™˚
Ë!
MEMCACHED_SUCCESS
)

321 i‡(
	`gësock›t
(
ö°™˚
->
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
sock_size
, &
sock_Àngth
) < 0)

323 
	`memˇched_£t_î∫o
(
±r
, 
î∫o
, 
NULL
);

329  (
uöt64_t
Ë
sock_size
;

331 
MEMCACHED_BEHAVIOR_USER_DATA
:

332 
	`memˇched_£t_îr‹_°rög
(
±r
, 
MEMCACHED_DEPRECATED
,

333 
	`memˇched_°rög_wôh_size
("MEMCACHED_BEHAVIOR_USER_DATA deprecated."));

335 
MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY
:

336  
±r
->
Êags
.
hash_wôh_¥efix_key
;

337 
MEMCACHED_BEHAVIOR_NOREPLY
:

338  
±r
->
Êags
.
no_ª∂y
;

339 
MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
:

340  
±r
->
Êags
.
auto_eje˘_ho°s
;

341 
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
:

342  
±r
->
Êags
.
øndomize_ª∂iˇ_ªad
;

343 
MEMCACHED_BEHAVIOR_CORK
:

344 #ifde‡
HAVE_MSG_MORE


345  
åue
;

347  
Ál£
;

349 
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
:

350  
±r
->
Êags
.
t˝_kì∑live
;

351 
MEMCACHED_BEHAVIOR_LOAD_FROM_FILE
:

352  
±r
->
c⁄figuª
.
fûíame
 ? 
åue
 : 
Ál£
;

353 
MEMCACHED_BEHAVIOR_MAX
:

355 
	`WATCHPOINT_ASSERT
(0);

360 
	}
}

363 
memˇched_ªtu∫_t
 
	$memˇched_behavi‹_£t_di°ributi⁄
(
memˇched_°
 *
±r
, 
memˇched_£rvî_di°ributi⁄_t
 
ty≥
)

365 i‡(
ty≥
 < 
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
)

367 i‡(
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
)

369 
±r
->
këama
.
weighãd

åue
;

373 
±r
->
këama
.
weighãd

Ál£
;

375 
±r
->
di°ributi⁄

ty≥
;

376 
	`run_di°ributi⁄
(
±r
);

377  
MEMCACHED_SUCCESS
;

380  
	`memˇched_£t_îr‹_°rög
(
±r
, 
MEMCACHED_INVALID_ARGUMENTS
,

381 
	`memˇched_°rög_wôh_size
("Invalid memcached_server_distribution_t"));

382 
	}
}

385 
memˇched_£rvî_di°ributi⁄_t
 
	$memˇched_behavi‹_gë_di°ributi⁄
(
memˇched_°
 *
±r
)

387  
±r
->
di°ributi⁄
;

388 
	}
}

390 
memˇched_ªtu∫_t
 
	$memˇched_behavi‹_£t_key_hash
(
memˇched_°
 *
±r
, 
memˇched_hash_t
 
ty≥
)

392 i‡(
	`hashkô_£t_fun˘i⁄
(&
±r
->
hashkô
, (
hashkô_hash_Æg‹ôhm_t
)
ty≥
Ë=
HASHKIT_SUCCESS
)

393  
MEMCACHED_SUCCESS
;

395  
	`memˇched_£t_îr‹_°rög
(
±r
, 
MEMCACHED_INVALID_ARGUMENTS
,

396 
	`memˇched_°rög_wôh_size
("Invalid memcached_hash_t()"));

397 
	}
}

399 
memˇched_hash_t
 
	$memˇched_behavi‹_gë_key_hash
(
memˇched_°
 *
±r
)

401  (
memˇched_hash_t
)
	`hashkô_gë_fun˘i⁄
(&
±r
->
hashkô
);

402 
	}
}

404 
memˇched_ªtu∫_t
 
	$memˇched_behavi‹_£t_di°ributi⁄_hash
(
memˇched_°
 *
±r
, 
memˇched_hash_t
 
ty≥
)

406 i‡(
	`hashkô_£t_fun˘i⁄
(&
±r
->
di°ributi⁄_hashkô
, (
hashkô_hash_Æg‹ôhm_t
)
ty≥
Ë=
HASHKIT_SUCCESS
)

407  
MEMCACHED_SUCCESS
;

409  
	`memˇched_£t_îr‹_°rög
(
±r
, 
MEMCACHED_INVALID_ARGUMENTS
,

410 
	`memˇched_°rög_wôh_size
("Invalid memcached_hash_t()"));

411 
	}
}

413 
memˇched_hash_t
 
	$memˇched_behavi‹_gë_di°ributi⁄_hash
(
memˇched_°
 *
±r
)

415  (
memˇched_hash_t
)
	`hashkô_gë_fun˘i⁄
(&
±r
->
di°ributi⁄_hashkô
);

416 
	}
}

418 c⁄° *
	$libmemˇched_°rög_behavi‹
(c⁄° 
memˇched_behavi‹_t
 
Êag
)

420 
Êag
)

422 
MEMCACHED_BEHAVIOR_NO_BLOCK
:  "MEMCACHED_BEHAVIOR_NO_BLOCK";

423 
MEMCACHED_BEHAVIOR_TCP_NODELAY
:  "MEMCACHED_BEHAVIOR_TCP_NODELAY";

424 
MEMCACHED_BEHAVIOR_HASH
:  "MEMCACHED_BEHAVIOR_HASH";

425 
MEMCACHED_BEHAVIOR_KETAMA
:  "MEMCACHED_BEHAVIOR_KETAMA";

426 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
:  "MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE";

427 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
:  "MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE";

428 
MEMCACHED_BEHAVIOR_CACHE_LOOKUPS
:  "MEMCACHED_BEHAVIOR_CACHE_LOOKUPS";

429 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
:  "MEMCACHED_BEHAVIOR_SUPPORT_CAS";

430 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
:  "MEMCACHED_BEHAVIOR_POLL_TIMEOUT";

431 
MEMCACHED_BEHAVIOR_DISTRIBUTION
:  "MEMCACHED_BEHAVIOR_DISTRIBUTION";

432 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
:  "MEMCACHED_BEHAVIOR_BUFFER_REQUESTS";

433 
MEMCACHED_BEHAVIOR_USER_DATA
:  "MEMCACHED_BEHAVIOR_USER_DATA";

434 
MEMCACHED_BEHAVIOR_SORT_HOSTS
:  "MEMCACHED_BEHAVIOR_SORT_HOSTS";

435 
MEMCACHED_BEHAVIOR_VERIFY_KEY
:  "MEMCACHED_BEHAVIOR_VERIFY_KEY";

436 
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
:  "MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT";

437 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
:  "MEMCACHED_BEHAVIOR_RETRY_TIMEOUT";

438 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
:  "MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED";

439 
MEMCACHED_BEHAVIOR_KETAMA_HASH
:  "MEMCACHED_BEHAVIOR_KETAMA_HASH";

440 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
:  "MEMCACHED_BEHAVIOR_BINARY_PROTOCOL";

441 
MEMCACHED_BEHAVIOR_SND_TIMEOUT
:  "MEMCACHED_BEHAVIOR_SND_TIMEOUT";

442 
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
:  "MEMCACHED_BEHAVIOR_RCV_TIMEOUT";

443 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
:  "MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT";

444 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
:  "MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK";

445 
MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK
:  "MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK";

446 
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
:  "MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH";

447 
MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY
:  "MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY";

448 
MEMCACHED_BEHAVIOR_NOREPLY
:  "MEMCACHED_BEHAVIOR_NOREPLY";

449 
MEMCACHED_BEHAVIOR_USE_UDP
:  "MEMCACHED_BEHAVIOR_USE_UDP";

450 
MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
:  "MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS";

451 
MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
:  "MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS";

452 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
:  "MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS";

453 
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
:  "MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ";

454 
MEMCACHED_BEHAVIOR_CORK
:  "MEMCACHED_BEHAVIOR_CORK";

455 
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
:  "MEMCACHED_BEHAVIOR_TCP_KEEPALIVE";

456 
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
:  "MEMCACHED_BEHAVIOR_TCP_KEEPIDLE";

457 
MEMCACHED_BEHAVIOR_LOAD_FROM_FILE
:  "MEMCACHED_BEHAVIOR_LOAD_FROM_FILE";

459 
MEMCACHED_BEHAVIOR_MAX
:  "INVALID memcached_behavior_t";

461 
	}
}

463 c⁄° *
	$libmemˇched_°rög_di°ributi⁄
(c⁄° 
memˇched_£rvî_di°ributi⁄_t
 
Êag
)

465 
Êag
)

467 
MEMCACHED_DISTRIBUTION_MODULA
:  "MEMCACHED_DISTRIBUTION_MODULA";

468 
MEMCACHED_DISTRIBUTION_CONSISTENT
:  "MEMCACHED_DISTRIBUTION_CONSISTENT";

469 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
:  "MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA";

470 
MEMCACHED_DISTRIBUTION_RANDOM
:  "MEMCACHED_DISTRIBUTION_RANDOM";

471 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
:  "MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY";

472 
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
:  "MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED";

473 
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
:  "MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET";

475 
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
:  "INVALID memcached_server_distribution_t";

477 
	}
}

479 
memˇched_ªtu∫_t
 
	$memˇched_buckë_£t
(
memˇched_°
 *
£lf
,

480 c⁄° 
uöt32_t
 *
ho°_m≠
,

481 c⁄° 
uöt32_t
 *
f‹w¨d_m≠
,

482 c⁄° 
uöt32_t
 
buckës
,

483 c⁄° 
uöt32_t
 
ª∂iˇs
)

485 
memˇched_ªtu∫_t
 
rc
;

487 i‡(! 
£lf
)

488  
MEMCACHED_INVALID_ARGUMENTS
;

490 i‡(! 
ho°_m≠
)

491  
MEMCACHED_INVALID_ARGUMENTS
;

493 
memˇched_£rvî_di°ributi⁄_t
 
ﬁd
;

494 
ﬁd

	`memˇched_behavi‹_gë_di°ributi⁄
(
£lf
);

496 
rc
 =
	`memˇched_behavi‹_£t_di°ributi⁄
(
£lf
, 
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
);

497 i‡(
rc
 !
MEMCACHED_SUCCESS
)

499  
rc
;

502 
rc

	`memˇched_vútuÆ_buckë_¸óã
(
£lf
, 
ho°_m≠
, 
f‹w¨d_m≠
, 
buckës
, 
ª∂iˇs
);

503 i‡(
rc
 !
MEMCACHED_SUCCESS
)

505 
	`memˇched_behavi‹_£t_di°ributi⁄
(
£lf
, 
ﬁd
);

508  
rc
;

509 
	}
}

	@libmemcached/behavior.h

12 #i‚de‡
__LIBMEMCACHED_BEHAVIOR_H__


13 
	#__LIBMEMCACHED_BEHAVIOR_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
memˇched_ªtu∫_t
 
memˇched_behavi‹_£t
(
memˇched_°
 *
±r
, c⁄° 
memˇched_behavi‹_t
 
Êag
, 
uöt64_t
 
d©a
);

22 
LIBMEMCACHED_API


23 
uöt64_t
 
memˇched_behavi‹_gë
(
memˇched_°
 *
±r
, c⁄° 
memˇched_behavi‹_t
 
Êag
);

25 
LIBMEMCACHED_API


26 
memˇched_ªtu∫_t
 
memˇched_behavi‹_£t_di°ributi⁄
(
memˇched_°
 *
±r
, 
memˇched_£rvî_di°ributi⁄_t
 
ty≥
);

28 
LIBMEMCACHED_API


29 
memˇched_£rvî_di°ributi⁄_t
 
memˇched_behavi‹_gë_di°ributi⁄
(
memˇched_°
 *
±r
);

31 
LIBMEMCACHED_API


32 
memˇched_ªtu∫_t
 
memˇched_behavi‹_£t_key_hash
(
memˇched_°
 *
±r
, 
memˇched_hash_t
 
ty≥
);

34 
LIBMEMCACHED_API


35 
memˇched_hash_t
 
memˇched_behavi‹_gë_key_hash
(
memˇched_°
 *
±r
);

37 
LIBMEMCACHED_API


38 
memˇched_ªtu∫_t
 
memˇched_behavi‹_£t_di°ributi⁄_hash
(
memˇched_°
 *
±r
, 
memˇched_hash_t
 
ty≥
);

40 
LIBMEMCACHED_API


41 
memˇched_hash_t
 
memˇched_behavi‹_gë_di°ributi⁄_hash
(
memˇched_°
 *
±r
);

43 
LIBMEMCACHED_LOCAL


44 
boﬁ
 
_is_auto_eje˘_ho°
(c⁄° 
memˇched_°
 *
±r
);

46 
LIBMEMCACHED_LOCAL


47 c⁄° *
libmemˇched_°rög_behavi‹
(c⁄° 
memˇched_behavi‹_t
 
Êag
);

49 
LIBMEMCACHED_LOCAL


50 c⁄° *
libmemˇched_°rög_di°ributi⁄
(c⁄° 
memˇched_£rvî_di°ributi⁄_t
 
Êag
);

52 
LIBMEMCACHED_API


53 
memˇched_ªtu∫_t
 
memˇched_buckë_£t
(
memˇched_°
 *
£lf
,

54 c⁄° 
uöt32_t
 *
ho°_m≠
,

55 c⁄° 
uöt32_t
 *
f‹w¨d_m≠
,

56 c⁄° 
uöt32_t
 
buckës
,

57 c⁄° 
uöt32_t
 
ª∂iˇs
);

59 #ifde‡
__˝lu•lus


	@libmemcached/byteorder.c

12 
	~"byã‹dî.h
"

15 #i‚de‡
sw≠64


16 
ölöe
 
uöt64_t
 
	$sw≠64
(
uöt64_t
 
ö
)

18 #i‚de‡
WORDS_BIGENDIAN


21 
uöt64_t
 
rv
= 0;

22 
uöt8_t
 
x
= 0; x < 8; x++)

24 
rv
‘v << 8Ë| (
ö
 & 0xff);

25 
ö
 >>= 8;

27  
rv
;

30  
ö
;

32 
	}
}

35 
uöt64_t
 
	$memˇched_¡ohŒ
(
uöt64_t
 
vÆue
)

37  
	`sw≠64
(
vÆue
);

38 
	}
}

40 
uöt64_t
 
	$memˇched_ht⁄Œ
(
uöt64_t
 
vÆue
)

42  
	`sw≠64
(
vÆue
);

43 
	}
}

	@libmemcached/byteorder.h

12 #i‚de‡
__LIBMEMCACHED_BYTEORDER_H__


13 
	#__LIBMEMCACHED_BYTEORDER_H__


	)

15 
	~"c⁄fig.h
"

17 #i‡
HAVE_SYS_TYPES_H


18 
	~<sys/ty≥s.h
>

25 
	#BUILDING_LIBMEMCACHED
 1

	)

27 
	~"libmemˇched/memˇched.h
"

29 #i‚de‡
HAVE_HTONLL


30 
	#¡ohŒ
(
a
Ë
	`memˇched_¡ohŒ
◊)

	)

31 
	#ht⁄Œ
(
a
Ë
	`memˇched_ht⁄Œ
◊)

	)

33 
LIBMEMCACHED_LOCAL


34 
uöt64_t
 
memˇched_¡ohŒ
(uint64_t);

35 
LIBMEMCACHED_LOCAL


36 
uöt64_t
 
memˇched_ht⁄Œ
(uint64_t);

39 #ifde‡
löux


45 #unde‡
¡ohs


46 #unde‡
¡ohl


47 #unde‡
ht⁄s


48 #unde‡
ht⁄l


	@libmemcached/callback.c

12 
	~"libmemˇched/comm⁄.h
"

13 
	~<sys/ty≥s.h
>

19 
memˇched_ªtu∫_t
 
	$memˇched_ˇŒback_£t
(
memˇched_°
 *
±r
,

20 c⁄° 
memˇched_ˇŒback_t
 
Êag
,

21 *
d©a
)

23 
Êag
)

25 
MEMCACHED_CALLBACK_PREFIX_KEY
:

27  
	`memˇched_£t_¥efix_key
(
±r
, (*)
d©a
, d©®? 
	`°æí
((*)data) : 0);

29 
MEMCACHED_CALLBACK_USER_DATA
:

31 
±r
->
u£r_d©a

d©a
;

34 
MEMCACHED_CALLBACK_CLEANUP_FUNCTION
:

36 
memˇched_˛ónup_‚
 
func
*(memˇched_˛ónup_‚ *)&
d©a
;

37 
±r
->
⁄_˛ónup

func
;

40 
MEMCACHED_CALLBACK_CLONE_FUNCTION
:

42 
memˇched_˛⁄e_‚
 
func
*(memˇched_˛⁄e_‚ *)&
d©a
;

43 
±r
->
⁄_˛⁄e

func
;

46 #ifde‡
MEMCACHED_ENABLE_DEPRECATED


47 
MEMCACHED_CALLBACK_MALLOC_FUNCTION
:

49 
memˇched_mÆloc_fun˘i⁄
 
func
*(
memˇched_mÆloc_‚
 *)&
d©a
;

50 
±r
->
ˇŒ_mÆloc

func
;

53 
MEMCACHED_CALLBACK_REALLOC_FUNCTION
:

55 
memˇched_ªÆloc_fun˘i⁄
 
func
*(
memˇched_ªÆloc_‚
 *)&
d©a
;

56 
±r
->
ˇŒ_ªÆloc

func
;

59 
MEMCACHED_CALLBACK_FREE_FUNCTION
:

61 
memˇched_‰ì_fun˘i⁄
 
func
*(
memˇched_‰ì_‚
 *)&
d©a
;

62 
±r
->
ˇŒ_‰ì

func
;

66 
MEMCACHED_CALLBACK_GET_FAILURE
:

68 
memˇched_åiggî_key_‚
 
func
*(memˇched_åiggî_key_‚ *)&
d©a
;

69 
±r
->
gë_key_Áûuª

func
;

72 
MEMCACHED_CALLBACK_DELETE_TRIGGER
:

74 
memˇched_åiggî_dñëe_key_‚
 
func
*(memˇched_åiggî_dñëe_key_‚ *)&
d©a
;

75 
±r
->
dñëe_åiggî

func
;

78 
MEMCACHED_CALLBACK_MAX
:

80  
MEMCACHED_FAILURE
;

83  
MEMCACHED_SUCCESS
;

84 
	}
}

86 *
	$memˇched_ˇŒback_gë
(
memˇched_°
 *
±r
,

87 c⁄° 
memˇched_ˇŒback_t
 
Êag
,

88 
memˇched_ªtu∫_t
 *
îr‹
)

90 
memˇched_ªtu∫_t
 
loˇl_îr‹
;

92 i‡(!
îr‹
)

93 
îr‹
 = &
loˇl_îr‹
;

95 
Êag
)

97 
MEMCACHED_CALLBACK_PREFIX_KEY
:

99 i‡(
±r
->
¥efix_key
)

101 *
îr‹

MEMCACHED_SUCCESS
;

102  (*)
	`memˇched_¨øy_°rög
(
±r
->
¥efix_key
);

106 *
îr‹

MEMCACHED_FAILURE
;

107  
NULL
;

110 
MEMCACHED_CALLBACK_USER_DATA
:

112 *
îr‹

±r
->
u£r_d©a
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

113  (*)
±r
->
u£r_d©a
;

115 
MEMCACHED_CALLBACK_CLEANUP_FUNCTION
:

117 *
îr‹

±r
->
⁄_˛ónup
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

118  *(**)&
±r
->
⁄_˛ónup
;

120 
MEMCACHED_CALLBACK_CLONE_FUNCTION
:

122 *
îr‹

±r
->
⁄_˛⁄e
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

123  *(**)&
±r
->
⁄_˛⁄e
;

125 #ifde‡
MEMCACHED_ENABLE_DEPRECATED


126 
MEMCACHED_CALLBACK_MALLOC_FUNCTION
:

128 *
îr‹

±r
->
ˇŒ_mÆloc
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

129  *(**)&
±r
->
ˇŒ_mÆloc
;

131 
MEMCACHED_CALLBACK_REALLOC_FUNCTION
:

133 *
îr‹

±r
->
ˇŒ_ªÆloc
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

134  *(**)&
±r
->
ˇŒ_ªÆloc
;

136 
MEMCACHED_CALLBACK_FREE_FUNCTION
:

138 *
îr‹

±r
->
ˇŒ_‰ì
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

139  *(**)&
±r
->
ˇŒ_‰ì
;

142 
MEMCACHED_CALLBACK_GET_FAILURE
:

144 *
îr‹

±r
->
gë_key_Áûuª
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

145  *(**)&
±r
->
gë_key_Áûuª
;

147 
MEMCACHED_CALLBACK_DELETE_TRIGGER
:

149 *
îr‹

±r
->
dñëe_åiggî
 ? 
MEMCACHED_SUCCESS
 : 
MEMCACHED_FAILURE
;

150  *(**)&
±r
->
dñëe_åiggî
;

152 
MEMCACHED_CALLBACK_MAX
:

154 
	`WATCHPOINT_ASSERT
(0);

155 *
îr‹

MEMCACHED_FAILURE
;

156  
NULL
;

158 
	}
}

	@libmemcached/callback.h

12 #i‚de‡
__LIBMEMCACHED_CALLBACK_H__


13 
	#__LIBMEMCACHED_CALLBACK_H__


	)

15 
	smemˇched_ˇŒback_°
 {

16 
memˇched_execuã_‚
 *
	mˇŒback
;

17 *
	mc⁄ãxt
;

18 
uöt32_t
 
	mnumbî_of_ˇŒback
;

21 #ifde‡
__˝lu•lus


25 
LIBMEMCACHED_API


26 
memˇched_ªtu∫_t
 
memˇched_ˇŒback_£t
(
memˇched_°
 *
±r
,

27 c⁄° 
memˇched_ˇŒback_t
 
Êag
,

28 *
d©a
);

29 
LIBMEMCACHED_API


30 *
memˇched_ˇŒback_gë
(
memˇched_°
 *
±r
,

31 c⁄° 
memˇched_ˇŒback_t
 
Êag
,

32 
memˇched_ªtu∫_t
 *
îr‹
);

34 #ifde‡
__˝lu•lus


	@libmemcached/common.h

43 #¥agm®
⁄˚


45 
	~<c⁄fig.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<°rögs.h
>

51 
	~<˘y≥.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<uni°d.h
>

54 
	~<limôs.h
>

55 
	~<î∫o.h
>

56 
	~<f˙é.h
>

57 #ifde‡
TIME_WITH_SYS_TIME


58 
	~<sys/time.h
>

59 
	~<time.h
>

61 #ifde‡
HAVE_SYS_TIME_H


62 
	~<sys/time.h
>

64 
	~<time.h
>

71 
	#BUILDING_LIBMEMCACHED
 1

	)

74 
	~<libmemˇched/memˇched.h
>

75 
	~<libmemˇched/w©chpoöt.h
>

76 
	~<libmemˇched/is.h
>

77 
	~<libmemˇched/¥efix_key.h
>

79 
memˇched_£rvî_°
 * 
	tmemˇched_£rvî_wrôe_ö°™˚_°
;

81 
	$memˇched_ªtu∫_t
 (*
	tmemˇched_£rvî_execuã_‚
)(
	tmemˇched_°
 *
	t±r
, 
	tmemˇched_£rvî_wrôe_ö°™˚_°
 
	t£rvî
, *
	tc⁄ãxt
);

83 
LIBMEMCACHED_LOCAL


84 
memˇched_£rvî_wrôe_ö°™˚_°
 
	`memˇched_£rvî_ö°™˚_„tch
(
memˇched_°
 *
±r
, 
uöt32_t
 
£rvî_key
);

86 
LIBMEMCACHED_LOCAL


87 
memˇched_ªtu∫_t
 
	`memˇched_£rvî_execuã
(
memˇched_°
 *
±r
,

88 
memˇched_£rvî_execuã_‚
 
ˇŒback
,

89 *
c⁄ãxt
);

93 
	~<libmemˇched/io.h
>

94 
	~<libmemˇched/do.h
>

95 
	~<libmemˇched/öã∫Æ.h
>

96 
	~<libmemˇched/¨øy.h
>

97 
	~<libmemˇched/libmemˇched_¥obes.h
>

98 
	~<libmemˇched/memˇched/¥Ÿocﬁ_bö¨y.h
>

99 
	~<libmemˇched/byã‹dî.h
>

100 
	~<libmemˇched/öôülize_quîy.h
>

101 
	~<libmemˇched/ª•⁄£.h
>

102 
	~<libmemˇched/¥efix_key.h
>

105 
	smemˇched_c⁄töuum_ôem_°


107 
uöt32_t
 
ödex
;

108 
uöt32_t
 
vÆue
;

111 #i‡!
	`deföed
(
__GNUC__
Ë|| (__GNUC__ =2 && 
__GNUC_MINOR__
 < 96)

113 
	#likñy
(
x
Ëif((x))

	)

114 
	#u∆ikñy
(
x
Ëif((x))

	)

118 
	#likñy
(
x
Ëif(
	`__buûtö_ex≥˘
((xË!0, 1))

	)

119 
	#u∆ikñy
(
x
Ëif(
	`__buûtö_ex≥˘
((xË!0, 0))

	)

122 
	#MEMCACHED_BLOCK_SIZE
 1024

	)

123 
	#MEMCACHED_DEFAULT_COMMAND_SIZE
 350

	)

124 
	#SMALL_STRING_LEN
 1024

	)

125 
	#HUGE_STRING_LEN
 8196

	)

127 #ifde‡
__˝lu•lus


131 
LIBMEMCACHED_LOCAL


132 
memˇched_ªtu∫_t
 
	`memˇched_c⁄√˘
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
);

134 
LIBMEMCACHED_LOCAL


135 
memˇched_ªtu∫_t
 
	`run_di°ributi⁄
(
memˇched_°
 *
±r
);

137 
	#memˇched_£rvî_ª•⁄£_ö¸emít
(
A
Ë(A)->
curs‹_a˘ive
++

	)

138 
	#memˇched_£rvî_ª•⁄£_de¸emít
(
A
Ë(A)->
curs‹_a˘ive
--

	)

139 
	#memˇched_£rvî_ª•⁄£_ª£t
(
A
Ë(A)->
curs‹_a˘ive
=0

	)

141 
LIBMEMCACHED_LOCAL


142 
	`£t_œ°_disc⁄√˘ed_ho°
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
);

144 
LIBMEMCACHED_LOCAL


145 
memˇched_ªtu∫_t
 
	`memˇched_key_ã°
(c⁄° * c⁄° *
keys
,

146 c⁄° 
size_t
 *
key_Àngth
,

147 
size_t
 
numbî_of_keys
);

149 
LIBMEMCACHED_LOCAL


150 
memˇched_ªtu∫_t
 
	`memˇched_purge
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
);

152 
LIBMEMCACHED_LOCAL


153 
memˇched_£rvî_°
 *
	`memˇched_£rvî_¸óã_wôh
(c⁄° 
memˇched_°
 *
memc
,

154 
memˇched_£rvî_wrôe_ö°™˚_°
 
ho°
,

155 c⁄° *
ho°«me
,

156 
ö_p‹t_t
 
p‹t
,

157 
uöt32_t
 
weight
,

158 
memˇched_c⁄√˘i⁄_t
 
ty≥
);

161 
ölöe
 
memˇched_ªtu∫_t
 
	`memˇched_vÆid©e_key_Àngth
(
size_t
 
key_Àngth
, 
boﬁ
 
bö¨y
)

163 
	`u∆ikñy
 (
key_Àngth
 == 0)

164  
MEMCACHED_BAD_KEY_PROVIDED
;

166 i‡(
bö¨y
)

168 
	`u∆ikñy
 (
key_Àngth
 > 0xffff)

169  
MEMCACHED_BAD_KEY_PROVIDED
;

173 
	`u∆ikñy
 (
key_Àngth
 >
MEMCACHED_MAX_KEY
)

174  
MEMCACHED_BAD_KEY_PROVIDED
;

177  
MEMCACHED_SUCCESS
;

180 
ölöe
 
	`libmemˇched_‰ì
(c⁄° 
memˇched_°
 *
±r
, *
mem
)

182 
±r
->
Æloˇt‹s
.
	`‰ì
’å, 
mem
,Öå->Æloˇt‹s.
c⁄ãxt
);

185 
ölöe
 *
	`libmemˇched_mÆloc
(c⁄° 
memˇched_°
 *
±r
, c⁄° 
size_t
 
size
)

187  
±r
->
Æloˇt‹s
.
	`mÆloc
’å, 
size
,Öå->Æloˇt‹s.
c⁄ãxt
);

190 
ölöe
 *
	`libmemˇched_ªÆloc
(c⁄° 
memˇched_°
 *
±r
, *
mem
, c⁄° 
size_t
 
size
)

192  
±r
->
Æloˇt‹s
.
	`ªÆloc
’å, 
mem
, 
size
,Öå->Æloˇt‹s.
c⁄ãxt
);

195 
ölöe
 *
	`libmemˇched_ˇŒoc
(c⁄° 
memˇched_°
 *
±r
, 
size_t
 
√Àm
, size_à
size
)

197  
±r
->
Æloˇt‹s
.
	`ˇŒoc
’å, 
√Àm
, 
size
,Öå->Æloˇt‹s.
c⁄ãxt
);

200 #ifde‡
__˝lu•lus


201 
	}
}

	@libmemcached/configure.h

12 #i‚de‡
__LIBMEMCACHED_CONFIGURE_H


13 
	#__LIBMEMCACHED_CONFIGURE_H


	)

15 #ifde‡
__˝lu•lus


20 
	#LIBMEMCACHED_WITH_SASL_SUPPORT
 1

	)

22 
	#LIBMEMCACHED_VERSION_STRING
 "0.49"

	)

23 
	#LIBMEMCACHED_VERSION_HEX
 0x00049000

	)

25 #ifde‡
__˝lu•lus


	@libmemcached/connect.c

12 
	~<libmemˇched/comm⁄.h
>

13 
	~<as£π.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

17 
memˇched_ªtu∫_t
 
	$c⁄√˘_pﬁl
(
memˇched_£rvî_°
 *
±r
)

19 
pﬁlfd
 
fds
[1];

20 
fds
[0].
fd
 = 
±r
->fd;

21 
fds
[0].
evíts
 = 
POLLOUT
;

23 
îr‹
;

24 
size_t
 
lo›_max
= 5;

26 --
lo›_max
)

28 
îr‹

	`pﬁl
(
fds
, 1, 
±r
->
roŸ
->
c⁄√˘_timeout
);

30 
îr‹
)

34 
îr
;

35 
sockÀn_t
 
Àn
 (
îr
);

36 ()
	`gësock›t
(
±r
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
Àn
);

39 i‡(
îr
 == 0)

41  
MEMCACHED_SUCCESS
;

45 
±r
->
ˇched_î∫o

î∫o
;

47  
MEMCACHED_ERRNO
;

51  
MEMCACHED_TIMEOUT
;

53 
	`WATCHPOINT_ERRNO
(
	`gë_sockë_î∫o
());

54 
	`gë_sockë_î∫o
())

56 #ifde‡
TARGET_OS_LINUX


57 
ERESTART
:

59 
EINTR
:

62 i‡(
fds
[0].
ªvíts
 & 
POLLERR
)

64 
îr
;

65 
sockÀn_t
 
Àn
 (
îr
);

66 ()
	`gësock›t
(
±r
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
Àn
);

67 
±r
->
ˇched_î∫o
(
îr
 =0Ë? 
	`gë_sockë_î∫o
() :Érr;

71 
±r
->
ˇched_î∫o

	`gë_sockë_î∫o
();

74 ()
	`˛o£sockë
(
±r
->
fd
);

75 
±r
->
fd

INVALID_SOCKET
;

77  
MEMCACHED_ERRNO
;

83 
±r
->
ˇched_î∫o

	`gë_sockë_î∫o
();

85  
MEMCACHED_ERRNO
;

86 
	}
}

88 
memˇched_ªtu∫_t
 
	$£t_ho°öfo
(
memˇched_£rvî_°
 *
£rvî
)

90 
addröfo
 
höts
;

91 
°r_p‹t
[
NI_MAXSERV
];

93 
	`as£π
(! 
£rvî
->
addªss_öfo
);

94 i‡(
£rvî
->
addªss_öfo
)

96 
	`‰ìaddröfo
(
£rvî
->
addªss_öfo
);

97 
£rvî
->
addªss_öfo

NULL
;

98 
£rvî
->
addªss_öfo_√xt

NULL
;

101 
Àngth

	`¢¥ötf
(
°r_p‹t
, 
NI_MAXSERV
, "%u", (
uöt32_t
)
£rvî
->
p‹t
);

102 i‡(
Àngth
 >
NI_MAXSERV
 ||Üength < 0)

103  
MEMCACHED_FAILURE
;

105 
	`mem£t
(&
höts
, 0, (hints));

108 
höts
.
ai_Ámûy

AF_INET
;

110 i‡(
£rvî
->
ty≥
 =
MEMCACHED_CONNECTION_UDP
)

112 
höts
.
ai_¥Ÿocﬁ

IPPROTO_UDP
;

113 
höts
.
ai_sockty≥

SOCK_DGRAM
;

117 
höts
.
ai_sockty≥

SOCK_STREAM
;

118 
höts
.
ai_¥Ÿocﬁ

IPPROTO_TCP
;

121 
uöt32_t
 
cou¡î
= 5;

122 --
cou¡î
)

124 
e

	`gëaddröfo
(
£rvî
->
ho°«me
, 
°r_p‹t
, &
höts
, &£rvî->
addªss_öfo
);

126 i‡(
e
 == 0)

130 i‡(
e
 =
EAI_AGAIN
)

132 #i‚de‡
WIN32


133 
time•ec
 
dªam
, 
ªm
;

135 
dªam
.
tv_n£c
= 1000;

136 
dªam
.
tv_£c
= 0;

138 
	`«no¶ìp
(&
dªam
, &
ªm
);

144 
	`WATCHPOINT_STRING
(
£rvî
->
ho°«me
);

145 
	`WATCHPOINT_STRING
(
	`gai_°ªº‹
(
e
));

146  
MEMCACHED_HOST_LOOKUP_FAILURE
;

150 
£rvî
->
addªss_öfo_√xt
£rvî->
addªss_öfo
;

152  
MEMCACHED_SUCCESS
;

153 
	}
}

155 
ölöe
 
memˇched_ªtu∫_t
 
	$£t_sockë_n⁄blockög
(
memˇched_£rvî_°
 *
±r
)

157 #ifde‡
WIN32


158 
u_l⁄g
 
¨g
 = 1;

159 i‡(
	`io˘lsockë
(
±r
->
fd
, 
FIONBIO
, &
¨g
Ë=
SOCKET_ERROR
)

161 
±r
->
ˇched_î∫o

	`gë_sockë_î∫o
();

162  
MEMCACHED_CONNECTION_FAILURE
;

165 
Êags
;

169 
Êags

	`f˙é
(
±r
->
fd
, 
F_GETFL
, 0);

171 
Êags
 =-1 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
));

173 
	`u∆ikñy
 (
Êags
 == -1)

175 
±r
->
ˇched_î∫o

î∫o
;

176  
MEMCACHED_CONNECTION_FAILURE
;

178 i‡((
Êags
 & 
O_NONBLOCK
) == 0)

180 
rvÆ
;

184 
rvÆ

	`f˙é
(
±r
->
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

186 
rvÆ
 =-1 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
));

188 
	`u∆ikñy
 (
rvÆ
 == -1)

190 
±r
->
ˇched_î∫o

î∫o
;

191  
MEMCACHED_CONNECTION_FAILURE
;

195  
MEMCACHED_SUCCESS
;

196 
	}
}

198 
memˇched_ªtu∫_t
 
	$£t_sockë_›ti⁄s
(
memˇched_£rvî_°
 *
±r
)

200 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 != -1);

202 i‡(
±r
->
ty≥
 =
MEMCACHED_CONNECTION_UDP
)

203  
MEMCACHED_SUCCESS
;

205 #ifde‡
HAVE_SNDTIMEO


206 i‡(
±r
->
roŸ
->
¢d_timeout
)

208 
îr‹
;

209 
timevÆ
 
waôtime
;

211 
waôtime
.
tv_£c
= 0;

212 
waôtime
.
tv_u£c

±r
->
roŸ
->
¢d_timeout
;

214 
îr‹

	`£tsock›t
(
±r
->
fd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
,

215 &
waôtime
, (
sockÀn_t
)(
timevÆ
));

216 
	`WATCHPOINT_ASSERT
(
îr‹
 == 0);

217 i‡(
îr‹
)

218  
MEMCACHED_FAILURE
;

222 #ifde‡
HAVE_RCVTIMEO


223 i‡(
±r
->
roŸ
->
rcv_timeout
)

225 
îr‹
;

226 
timevÆ
 
waôtime
;

228 
waôtime
.
tv_£c
= 0;

229 
waôtime
.
tv_u£c

±r
->
roŸ
->
rcv_timeout
;

231 
îr‹

	`£tsock›t
(
±r
->
fd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
,

232 &
waôtime
, (
sockÀn_t
)(
timevÆ
));

233 
	`WATCHPOINT_ASSERT
(
îr‹
 == 0);

234 i‡(
îr‹
)

235  
MEMCACHED_FAILURE
;

240 #i‡
	`deföed
(
__MACH__
Ë&& deföed(
__APPLE__
Ë|| deföed(
__FªeBSD__
)

242 
£t
 = 1;

243 
îr‹

	`£tsock›t
(
±r
->
fd
, 
SOL_SOCKET
, 
SO_NOSIGPIPE
, (*)&
£t
, ());

246 i‡(
îr‹
 == -1)

248 
	`WATCHPOINT_ERRNO
(
	`gë_sockë_î∫o
());

249 
	`≥º‹
("setsockopt(SO_NOSIGPIPE)");

254 i‡(
±r
->
roŸ
->
Êags
.
no_block
)

256 
îr‹
;

257 
lögî
Üinger;

259 
lögî
.
l_⁄off
= 1;

260 
lögî
.
l_lögî
= 0;

261 
îr‹

	`£tsock›t
(
±r
->
fd
, 
SOL_SOCKET
, 
SO_LINGER
,

262 &
lögî
, (
sockÀn_t
)(linger));

263 
	`WATCHPOINT_ASSERT
(
îr‹
 == 0);

264 i‡(
îr‹
)

265  
MEMCACHED_FAILURE
;

268 i‡(
±r
->
roŸ
->
Êags
.
t˝_nodñay
)

270 
Êag
= 1;

271 
îr‹
;

273 
îr‹

	`£tsock›t
(
±r
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

274 &
Êag
, (
sockÀn_t
)());

275 
	`WATCHPOINT_ASSERT
(
îr‹
 == 0);

276 i‡(
îr‹
)

277  
MEMCACHED_FAILURE
;

280 i‡(
±r
->
roŸ
->
Êags
.
t˝_kì∑live
)

282 
Êag
= 1;

283 
îr‹
;

285 
îr‹

	`£tsock›t
(
±r
->
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

286 &
Êag
, (
sockÀn_t
)());

287 
	`WATCHPOINT_ASSERT
(
îr‹
 == 0);

288 i‡(
îr‹
)

289  
MEMCACHED_FAILURE
;

292 #ifde‡
TCP_KEEPIDLE


293 i‡(
±r
->
roŸ
->
t˝_kìpidÀ
 > 0)

295 
îr‹
;

297 
îr‹

	`£tsock›t
(
±r
->
fd
, 
IPPROTO_TCP
, 
TCP_KEEPIDLE
,

298 &
±r
->
roŸ
->
t˝_kìpidÀ
, (
sockÀn_t
)());

299 
	`WATCHPOINT_ASSERT
(
îr‹
 == 0);

300 i‡(
îr‹
)

301  
MEMCACHED_FAILURE
;

305 i‡(
±r
->
roŸ
->
£nd_size
 > 0)

307 
îr‹
;

309 
îr‹

	`£tsock›t
(
±r
->
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

310 &
±r
->
roŸ
->
£nd_size
, (
sockÀn_t
)());

311 
	`WATCHPOINT_ASSERT
(
îr‹
 == 0);

312 i‡(
îr‹
)

313  
MEMCACHED_FAILURE
;

316 i‡(
±r
->
roŸ
->
ªcv_size
 > 0)

318 
îr‹
;

320 
îr‹

	`£tsock›t
(
±r
->
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

321 &
±r
->
roŸ
->
ªcv_size
, (
sockÀn_t
)());

322 
	`WATCHPOINT_ASSERT
(
îr‹
 == 0);

323 i‡(
îr‹
)

324  
MEMCACHED_FAILURE
;

329  
	`£t_sockë_n⁄blockög
(
±r
);

330 
	}
}

332 
memˇched_ªtu∫_t
 
	$unix_sockë_c⁄√˘
(
memˇched_£rvî_°
 *
±r
)

334 #i‚de‡
WIN32


335 
sockaddr_un
 
£rvAddr
;

337 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 == -1);

339 i‡((
±r
->
fd

	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) < 0)

341 
±r
->
ˇched_î∫o

î∫o
;

342  
MEMCACHED_CONNECTION_SOCKET_CREATE_FAILURE
;

345 
	`mem£t
(&
£rvAddr
, 0,  (
sockaddr_un
));

346 
£rvAddr
.
sun_Ámûy

AF_UNIX
;

347 
	`°∫˝y
(
£rvAddr
.
sun_∑th
, 
±r
->
ho°«me
, (servAddr.sun_path));

349 
ã°_c⁄√˘
:

350 i‡(
	`c⁄√˘
(
±r
->
fd
,

351 (
sockaddr
 *)&
£rvAddr
,

352 (
£rvAddr
)) < 0)

354 
î∫o
)

356 
EINPROGRESS
:

357 
EALREADY
:

358 
EINTR
:

359 
ã°_c⁄√˘
;

360 
EISCONN
:

363 
	`WATCHPOINT_ERRNO
(
î∫o
);

364 
±r
->
ˇched_î∫o

î∫o
;

365  
MEMCACHED_ERRNO
;

369 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 != -1);

371  
MEMCACHED_SUCCESS
;

373 ()
±r
;

374  
MEMCACHED_NOT_SUPPORTED
;

376 
	}
}

378 
memˇched_ªtu∫_t
 
	$√tw‹k_c⁄√˘
(
memˇched_£rvî_°
 *
±r
)

380 
boﬁ
 
timeout_îr‹_occuªd

Ál£
;

382 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 =
INVALID_SOCKET
);

383 
	`WATCHPOINT_ASSERT
(
±r
->
curs‹_a˘ive
 == 0);

385 i‡(! 
±r
->
addªss_öfo
)

387 
memˇched_ªtu∫_t
 
rc

	`£t_ho°öfo
(
±r
);

388 i‡(
rc
 !
MEMCACHED_SUCCESS
)

389  
rc
;

393 
±r
->
addªss_öfo_√xt
 &&Öå->
fd
 =
INVALID_SOCKET
)

396 i‡(
±r
->
ty≥
 =
MEMCACHED_CONNECTION_UDP
 &&Öå->
addªss_öfo_√xt
->
ai_Ámûy
 !
AF_INET
)

398 
±r
->
addªss_öfo_√xt
±r->addªss_öfo_√xt->
ai_√xt
;

402 i‡((
±r
->
fd

	`sockë
’å->
addªss_öfo_√xt
->
ai_Ámûy
,

403 
±r
->
addªss_öfo_√xt
->
ai_sockty≥
,

404 
±r
->
addªss_öfo_√xt
->
ai_¥Ÿocﬁ
)) < 0)

406 
±r
->
ˇched_î∫o

	`gë_sockë_î∫o
();

407 
	`WATCHPOINT_ERRNO
(
	`gë_sockë_î∫o
());

408  
MEMCACHED_CONNECTION_SOCKET_CREATE_FAILURE
;

411 ()
	`£t_sockë_›ti⁄s
(
±r
);

414 i‡((
	`c⁄√˘
(
±r
->
fd
,Öå->
addªss_öfo_√xt
->
ai_addr
,Öå->addªss_öfo_√xt->
ai_addæí
Ë!
SOCKET_ERROR
))

420 
±r
->
ˇched_î∫o

	`gë_sockë_î∫o
();

421 
±r
->
ˇched_î∫o
)

423 
EWOULDBLOCK
:

424 
EINPROGRESS
:

425 
EALREADY
:

427 
memˇched_ªtu∫_t
 
rc
;

428 
rc

	`c⁄√˘_pﬁl
(
±r
);

430 i‡(
rc
 =
MEMCACHED_TIMEOUT
)

431 
timeout_îr‹_occuªd

åue
;

433 i‡(
rc
 =
MEMCACHED_SUCCESS
)

437 
EISCONN
:

440 
EINTR
:

441 ()
	`˛o£sockë
(
±r
->
fd
);

442 
±r
->
fd

INVALID_SOCKET
;

446 ()
	`˛o£sockë
(
±r
->
fd
);

447 
±r
->
fd

INVALID_SOCKET
;

448 
±r
->
addªss_öfo_√xt
±r->addªss_öfo_√xt->
ai_√xt
;

453 i‡(
±r
->
fd
 =
INVALID_SOCKET
)

455 
	`WATCHPOINT_STRING
("Never gotá good file descriptor");

458 i‡(
±r
->
roŸ
->
ªåy_timeout
)

460 
timevÆ
 
√xt_time
;

462 i‡(
	`gëtimeofday
(&
√xt_time
, 
NULL
) == 0)

463 
±r
->
√xt_ªåy

√xt_time
.
tv_£c
 +Öå->
roŸ
->
ªåy_timeout
;

466 i‡(
timeout_îr‹_occuªd
)

467  
MEMCACHED_TIMEOUT
;

469  
MEMCACHED_ERRNO
;

472  
MEMCACHED_SUCCESS
;

473 
	}
}

475 
	$£t_œ°_disc⁄√˘ed_ho°
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
)

478 
memˇched_°
 *
roŸ
(memˇched_° *)
±r
->root;

481 
	`WATCHPOINT_STRING
(
±r
->
ho°«me
);

482 
	`WATCHPOINT_NUMBER
(
±r
->
p‹t
);

483 
	`WATCHPOINT_ERRNO
(
±r
->
ˇched_î∫o
);

485 i‡(
roŸ
->
œ°_disc⁄√˘ed_£rvî
)

486 
	`memˇched_£rvî_‰ì
(
roŸ
->
œ°_disc⁄√˘ed_£rvî
);

487 
roŸ
->
œ°_disc⁄√˘ed_£rvî

	`memˇched_£rvî_˛⁄e
(
NULL
, 
±r
);

488 
	}
}

490 
memˇched_ªtu∫_t
 
	$memˇched_c⁄√˘
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
)

492 
memˇched_ªtu∫_t
 
rc

MEMCACHED_NO_SERVERS
;

494 i‡(
±r
->
fd
 !
INVALID_SOCKET
)

495  
MEMCACHED_SUCCESS
;

497 
	`LIBMEMCACHED_MEMCACHED_CONNECT_START
();

500 
	`WATCHPOINT_ASSERT
(
±r
->
roŸ
);

501 i‡(
±r
->
roŸ
->
ªåy_timeout
 &&Öå->
√xt_ªåy
)

503 
timevÆ
 
cuº_time
;

505 
	`gëtimeofday
(&
cuº_time
, 
NULL
);

509 i‡(
±r
->
√xt_ªåy
 > 
cuº_time
.
tv_£c
)

511 
	`£t_œ°_disc⁄√˘ed_ho°
(
±r
);

513  
MEMCACHED_SERVER_MARKED_DEAD
;

519 i‡(
±r
->
roŸ
->
£rvî_Áûuª_limô
 &&Öå->
£rvî_Áûuª_cou¡î
 >=Ötr->root->server_failure_limit)

521 
	`£t_œ°_disc⁄√˘ed_ho°
(
±r
);

525 i‡(
	`_is_auto_eje˘_ho°
(
±r
->
roŸ
))

527 
	`run_di°ributi⁄
((
memˇched_°
 *)
±r
->
roŸ
);

530  
MEMCACHED_SERVER_MARKED_DEAD
;

534 
±r
->
ty≥
)

536 
MEMCACHED_CONNECTION_UNKNOWN
:

537 
	`WATCHPOINT_ASSERT
(0);

538 
rc

MEMCACHED_NOT_SUPPORTED
;

540 
MEMCACHED_CONNECTION_UDP
:

541 
MEMCACHED_CONNECTION_TCP
:

542 
rc

	`√tw‹k_c⁄√˘
(
±r
);

543 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


544 i‡(
±r
->
fd
 !
INVALID_SOCKET
 &&Öå->
roŸ
->
ß¶
.
ˇŒbacks
)

546 
rc

	`memˇched_ß¶_authítiˇã_c⁄√˘i⁄
(
±r
);

547 i‡(
rc
 !
MEMCACHED_SUCCESS
)

549 ()
	`˛o£sockë
(
±r
->
fd
);

550 
±r
->
fd

INVALID_SOCKET
;

555 
MEMCACHED_CONNECTION_UNIX_SOCKET
:

556 
rc

	`unix_sockë_c⁄√˘
(
±r
);

558 
MEMCACHED_CONNECTION_MAX
:

560 
	`WATCHPOINT_ASSERT
(0);

563 i‡(
rc
 =
MEMCACHED_SUCCESS
)

565 
±r
->
£rvî_Áûuª_cou¡î
= 0;

566 
±r
->
√xt_ªåy
= 0;

570 
±r
->
£rvî_Áûuª_cou¡î
++;

572 
	`£t_œ°_disc⁄√˘ed_ho°
(
±r
);

575 
	`LIBMEMCACHED_MEMCACHED_CONNECT_END
();

577  
rc
;

578 
	}
}

	@libmemcached/constants.h

12 #¥agm®
⁄˚


13 #i‚de‡
__LIBMEMCACHED_CONSTANTS_H__


14 
	#__LIBMEMCACHED_CONSTANTS_H__


	)

17 
	#MEMCACHED_DEFAULT_PORT
 11211

	)

18 
	#MEMCACHED_MAX_KEY
 251

	)

19 
	#MEMCACHED_MAX_BUFFER
 8196

	)

20 
	#MEMCACHED_MAX_HOST_SORT_LENGTH
 86

	)

21 
	#MEMCACHED_POINTS_PER_SERVER
 100

	)

22 
	#MEMCACHED_POINTS_PER_SERVER_KETAMA
 160

	)

23 
	#MEMCACHED_CONTINUUM_SIZE
 
MEMCACHED_POINTS_PER_SERVER
*100

	)

24 
	#MEMCACHED_STRIDE
 4

	)

25 
	#MEMCACHED_DEFAULT_TIMEOUT
 5000

	)

26 
	#MEMCACHED_DEFAULT_CONNECT_TIMEOUT
 4000

	)

27 
	#MEMCACHED_CONTINUUM_ADDITION
 10

	)

28 
	#MEMCACHED_PREFIX_KEY_MAX_SIZE
 128

	)

29 
	#MEMCACHED_EXPIRATION_NOT_ADD
 0xffffffffU

	)

30 
	#MEMCACHED_VERSION_STRING_LENGTH
 24

	)

33 
	ememˇched_ªtu∫_t
 {

34 
	mMEMCACHED_SUCCESS
,

35 
	mMEMCACHED_FAILURE
,

36 
	mMEMCACHED_HOST_LOOKUP_FAILURE
,

37 
	mMEMCACHED_CONNECTION_FAILURE
,

38 
	mMEMCACHED_CONNECTION_BIND_FAILURE
,

39 
	mMEMCACHED_WRITE_FAILURE
,

40 
	mMEMCACHED_READ_FAILURE
,

41 
	mMEMCACHED_UNKNOWN_READ_FAILURE
,

42 
	mMEMCACHED_PROTOCOL_ERROR
,

43 
	mMEMCACHED_CLIENT_ERROR
,

44 
	mMEMCACHED_SERVER_ERROR
,

45 
	mMEMCACHED_CONNECTION_SOCKET_CREATE_FAILURE
,

46 
	mMEMCACHED_DATA_EXISTS
,

47 
	mMEMCACHED_DATA_DOES_NOT_EXIST
,

48 
	mMEMCACHED_NOTSTORED
,

49 
	mMEMCACHED_STORED
,

50 
	mMEMCACHED_NOTFOUND
,

51 
	mMEMCACHED_MEMORY_ALLOCATION_FAILURE
,

52 
	mMEMCACHED_PARTIAL_READ
,

53 
	mMEMCACHED_SOME_ERRORS
,

54 
	mMEMCACHED_NO_SERVERS
,

55 
	mMEMCACHED_END
,

56 
	mMEMCACHED_DELETED
,

57 
	mMEMCACHED_VALUE
,

58 
	mMEMCACHED_STAT
,

59 
	mMEMCACHED_ITEM
,

60 
	mMEMCACHED_ERRNO
,

61 
	mMEMCACHED_FAIL_UNIX_SOCKET
,

62 
	mMEMCACHED_NOT_SUPPORTED
,

63 
	mMEMCACHED_NO_KEY_PROVIDED
,

64 
	mMEMCACHED_FETCH_NOTFINISHED
,

65 
	mMEMCACHED_TIMEOUT
,

66 
	mMEMCACHED_BUFFERED
,

67 
	mMEMCACHED_BAD_KEY_PROVIDED
,

68 
	mMEMCACHED_INVALID_HOST_PROTOCOL
,

69 
	mMEMCACHED_SERVER_MARKED_DEAD
,

70 
	mMEMCACHED_UNKNOWN_STAT_KEY
,

71 
	mMEMCACHED_E2BIG
,

72 
	mMEMCACHED_INVALID_ARGUMENTS
,

73 
	mMEMCACHED_KEY_TOO_BIG
,

74 
	mMEMCACHED_AUTH_PROBLEM
,

75 
	mMEMCACHED_AUTH_FAILURE
,

76 
	mMEMCACHED_AUTH_CONTINUE
,

77 
	mMEMCACHED_PARSE_ERROR
,

78 
	mMEMCACHED_PARSE_USER_ERROR
,

79 
	mMEMCACHED_DEPRECATED
,

80 
	mMEMCACHED_MAXIMUM_RETURN


83 #i‚de‡
__˝lu•lus


84 
memˇched_ªtu∫_t
 
	tmemˇched_ªtu∫_t
;

88 
	ememˇched_£rvî_di°ributi⁄_t
 {

89 
	mMEMCACHED_DISTRIBUTION_MODULA
,

90 
	mMEMCACHED_DISTRIBUTION_CONSISTENT
,

91 
	mMEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
,

92 
	mMEMCACHED_DISTRIBUTION_RANDOM
,

93 
	mMEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
,

94 
	mMEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
,

95 
	mMEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
,

96 
	mMEMCACHED_DISTRIBUTION_CONSISTENT_MAX


99 #i‚de‡
__˝lu•lus


100 
memˇched_£rvî_di°ributi⁄_t
 
	tmemˇched_£rvî_di°ributi⁄_t
;

104 
	mMEMCACHED_BEHAVIOR_NO_BLOCK
,

105 
	mMEMCACHED_BEHAVIOR_TCP_NODELAY
,

106 
	mMEMCACHED_BEHAVIOR_HASH
,

107 
	mMEMCACHED_BEHAVIOR_KETAMA
,

108 
	mMEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
,

109 
	mMEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
,

110 
	mMEMCACHED_BEHAVIOR_CACHE_LOOKUPS
,

111 
	mMEMCACHED_BEHAVIOR_SUPPORT_CAS
,

112 
	mMEMCACHED_BEHAVIOR_POLL_TIMEOUT
,

113 
	mMEMCACHED_BEHAVIOR_DISTRIBUTION
,

114 
	mMEMCACHED_BEHAVIOR_BUFFER_REQUESTS
,

115 
	mMEMCACHED_BEHAVIOR_USER_DATA
,

116 
	mMEMCACHED_BEHAVIOR_SORT_HOSTS
,

117 
	mMEMCACHED_BEHAVIOR_VERIFY_KEY
,

118 
	mMEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
,

119 
	mMEMCACHED_BEHAVIOR_RETRY_TIMEOUT
,

120 
	mMEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
,

121 
	mMEMCACHED_BEHAVIOR_KETAMA_HASH
,

122 
	mMEMCACHED_BEHAVIOR_BINARY_PROTOCOL
,

123 
	mMEMCACHED_BEHAVIOR_SND_TIMEOUT
,

124 
	mMEMCACHED_BEHAVIOR_RCV_TIMEOUT
,

125 
	mMEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
,

126 
	mMEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
,

127 
	mMEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK
,

128 
	mMEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
,

129 
	mMEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY
,

130 
	mMEMCACHED_BEHAVIOR_NOREPLY
,

131 
	mMEMCACHED_BEHAVIOR_USE_UDP
,

132 
	mMEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
,

133 
	mMEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
,

134 
	mMEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
,

135 
	mMEMCACHED_BEHAVIOR_CORK
,

136 
	mMEMCACHED_BEHAVIOR_TCP_KEEPALIVE
,

137 
	mMEMCACHED_BEHAVIOR_TCP_KEEPIDLE
,

138 
	mMEMCACHED_BEHAVIOR_LOAD_FROM_FILE
,

139 
	mMEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
,

140 
	mMEMCACHED_BEHAVIOR_MAX


141 } 
	tmemˇched_behavi‹_t
;

144 
	mMEMCACHED_CALLBACK_PREFIX_KEY
 = 0,

145 
	mMEMCACHED_CALLBACK_USER_DATA
 = 1,

146 
	mMEMCACHED_CALLBACK_CLEANUP_FUNCTION
 = 2,

147 
	mMEMCACHED_CALLBACK_CLONE_FUNCTION
 = 3,

148 #ifde‡
MEMCACHED_ENABLE_DEPRECATED


149 
	mMEMCACHED_CALLBACK_MALLOC_FUNCTION
 = 4,

150 
	mMEMCACHED_CALLBACK_REALLOC_FUNCTION
 = 5,

151 
	mMEMCACHED_CALLBACK_FREE_FUNCTION
 = 6,

153 
	mMEMCACHED_CALLBACK_GET_FAILURE
 = 7,

154 
	mMEMCACHED_CALLBACK_DELETE_TRIGGER
 = 8,

155 
	mMEMCACHED_CALLBACK_MAX


156 } 
	tmemˇched_ˇŒback_t
;

159 
	mMEMCACHED_HASH_DEFAULT
= 0,

160 
	mMEMCACHED_HASH_MD5
,

161 
	mMEMCACHED_HASH_CRC
,

162 
	mMEMCACHED_HASH_FNV1_64
,

163 
	mMEMCACHED_HASH_FNV1A_64
,

164 
	mMEMCACHED_HASH_FNV1_32
,

165 
	mMEMCACHED_HASH_FNV1A_32
,

166 
	mMEMCACHED_HASH_HSIEH
,

167 
	mMEMCACHED_HASH_MURMUR
,

168 
	mMEMCACHED_HASH_JENKINS
,

169 
	mMEMCACHED_HASH_CUSTOM
,

170 
	mMEMCACHED_HASH_MAX


171 } 
	tmemˇched_hash_t
;

174 
	mMEMCACHED_CONNECTION_UNKNOWN
,

175 
	mMEMCACHED_CONNECTION_TCP
,

176 
	mMEMCACHED_CONNECTION_UDP
,

177 
	mMEMCACHED_CONNECTION_UNIX_SOCKET
,

178 
	mMEMCACHED_CONNECTION_MAX


179 } 
	tmemˇched_c⁄√˘i⁄_t
;

	@libmemcached/delete.c

38 
	~<libmemˇched/comm⁄.h
>

39 
	~<libmemˇched/memˇched/¥Ÿocﬁ_bö¨y.h
>

41 
memˇched_ªtu∫_t
 
	$memˇched_dñëe
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
,

42 
time_t
 
expú©i⁄
)

44  
	`memˇched_dñëe_by_key
(
±r
, 
key
, 
key_Àngth
,

45 
key
, 
key_Àngth
, 
expú©i⁄
);

46 
	}
}

48 
ölöe
 
memˇched_ªtu∫_t
 
bö¨y_dñëe
(
memˇched_°
 *
±r
,

49 
uöt32_t
 
£rvî_key
,

50 c⁄° *
key
,

51 
size_t
 
key_Àngth
,

52 
boﬁ
 
Êush
);

54 
memˇched_ªtu∫_t
 
	$memˇched_dñëe_by_key
(
memˇched_°
 *
±r
,

55 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

56 c⁄° *
key
, 
size_t
 
key_Àngth
,

57 
time_t
 
expú©i⁄
)

59 
boﬁ
 
to_wrôe
;

60 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

61 
uöt32_t
 
£rvî_key
;

62 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

64 
	`LIBMEMCACHED_MEMCACHED_DELETE_START
();

66 
memˇched_ªtu∫_t
 
rc
;

67 i‡((
rc

	`öôülize_quîy
(
±r
)Ë!
MEMCACHED_SUCCESS
)

69  
rc
;

72 
rc

	`memˇched_vÆid©e_key_Àngth
(
key_Àngth
,

73 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
);

74 
	`u∆ikñy
 (
rc
 !
MEMCACHED_SUCCESS
)

75  
rc
;

77 
	`u∆ikñy
 (
	`memˇched_£rvî_cou¡
(
±r
) == 0)

78  
MEMCACHED_NO_SERVERS
;

80 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
group_key
, 
group_key_Àngth
);

81 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
£rvî_key
);

83 
to_wrôe
(
±r
->
Êags
.
buf„r_ªque°s
Ë? 
Ál£
 : 
åue
;

85 
boﬁ
 
no_ª∂y
(
±r
->
Êags
.no_reply);

87 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

89 
	`likñy
 (! 
expú©i⁄
)

91 
rc

	`bö¨y_dñëe
(
±r
, 
£rvî_key
, 
key
, 
key_Àngth
, 
to_wrôe
);

95 
rc

MEMCACHED_INVALID_ARGUMENTS
;

100 
£nd_Àngth
;

102 
	`u∆ikñy
 (
expú©i⁄
)

104 i‡((
ö°™˚
->
maj‹_vîsi⁄
 == 1 &&

105 
ö°™˚
->
mö‹_vîsi⁄
 > 2) ||

106 
ö°™˚
->
maj‹_vîsi⁄
 > 1)

108 
rc

MEMCACHED_INVALID_ARGUMENTS
;

109 
îr‹
;

115 i‡((
rc

	`memˇched_c⁄√˘
(
ö°™˚
)Ë!
MEMCACHED_SUCCESS
)

117 
	`WATCHPOINT_ERROR
(
rc
);

118  
rc
;

121 i‡(
ö°™˚
->
mö‹_vîsi⁄
 == 0)

123 i‡(
no_ª∂y
 || ! 
to_wrôe
)

129 
to_wrôe

åue
;

130 i‡(
no_ª∂y
)

131 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
ö°™˚
);

132 
no_ª∂y

Ál£
;

135 
£nd_Àngth

	`¢¥ötf
(
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
,

137 
	`memˇched_¥öt_¨øy
(
±r
->
¥efix_key
),

138 (Ë
key_Àngth
, 
key
,

139 (
uöt32_t
)
expú©i⁄
,

140 
no_ª∂y
 ? "Çoreply" :"" );

145 
£nd_Àngth

	`¢¥ötf
(
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
,

147 
	`memˇched_¥öt_¨øy
(
±r
->
¥efix_key
),

148 ()
key_Àngth
, 
key
, 
no_ª∂y
 ? "Çoreply" :"");

151 i‡(
£nd_Àngth
 >
MEMCACHED_DEFAULT_COMMAND_SIZE
 || send_length < 0)

153 
rc

MEMCACHED_WRITE_FAILURE
;

154 
îr‹
;

157 i‡(
±r
->
Êags
.
u£_udp
 && ! 
to_wrôe
)

159 i‡(
£nd_Àngth
 > 
MAX_UDP_DATAGRAM_LENGTH
 - 
UDP_DATAGRAM_HEADER_LENGTH
)

160  
MEMCACHED_WRITE_FAILURE
;

161 i‡(
£nd_Àngth
 + 
ö°™˚
->
wrôe_buf„r_off£t
 > 
MAX_UDP_DATAGRAM_LENGTH
)

162 
	`memˇched_io_wrôe
(
ö°™˚
, 
NULL
, 0, 
åue
);

165 
rc

	`memˇched_do
(
ö°™˚
, 
buf„r
, (
size_t
)
£nd_Àngth
, 
to_wrôe
);

168 i‡(
rc
 !
MEMCACHED_SUCCESS
)

169 
îr‹
;

171 i‡(! 
to_wrôe
)

173 
rc

MEMCACHED_BUFFERED
;

175 i‡(!
no_ª∂y
)

177 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, 
NULL
);

178 i‡(
rc
 =
MEMCACHED_DELETED
)

179 
rc

MEMCACHED_SUCCESS
;

182 i‡(
rc
 =
MEMCACHED_SUCCESS
 && 
±r
->
dñëe_åiggî
)

183 
±r
->
	`dñëe_åiggî
’å, 
key
, 
key_Àngth
);

185 
îr‹
:

186 
	`LIBMEMCACHED_MEMCACHED_DELETE_END
();

187  
rc
;

188 
	}
}

190 
ölöe
 
memˇched_ªtu∫_t
 
	$bö¨y_dñëe
(
memˇched_°
 *
±r
,

191 
uöt32_t
 
£rvî_key
,

192 c⁄° *
key
,

193 
size_t
 
key_Àngth
,

194 
boﬁ
 
Êush
)

196 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

197 
¥Ÿocﬁ_bö¨y_ªque°_dñëe
 
ªque°
{.
byãs
= {0}};

199 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
£rvî_key
);

201 
ªque°
.
mesßge
.
hódî
.ªque°.
magic

PROTOCOL_BINARY_REQ
;

202 i‡(
±r
->
Êags
.
no_ª∂y
)

203 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_DELETEQ
;

205 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_DELETE
;

206 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
((
uöt16_t
)(
key_Àngth
 + 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
)));

207 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

208 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
((
uöt32_t
)(
key_Àngth
 + 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
)));

210 i‡(
±r
->
Êags
.
u£_udp
 && ! 
Êush
)

212 
size_t
 
cmd_size
(
ªque°
.
byãs
Ë+ 
key_Àngth
;

213 i‡(
cmd_size
 > 
MAX_UDP_DATAGRAM_LENGTH
 - 
UDP_DATAGRAM_HEADER_LENGTH
)

214  
MEMCACHED_WRITE_FAILURE
;

215 i‡(
cmd_size
 + 
ö°™˚
->
wrôe_buf„r_off£t
 > 
MAX_UDP_DATAGRAM_LENGTH
)

216 
	`memˇched_io_wrôe
(
ö°™˚
, 
NULL
, 0, 
åue
);

219 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

221 { .
Àngth
(
ªque°
.
byãs
), .
buf„r
=Ñequest.bytes},

222 { .
Àngth

	`memˇched_¨øy_size
(
±r
->
¥efix_key
), .
buf„r

	`memˇched_¨øy_°rög
(ptr->prefix_key) },

223 { .
Àngth

key_Àngth
, .
buf„r

key
 },

226 
memˇched_ªtu∫_t
 
rc

MEMCACHED_SUCCESS
;

228 i‡((
rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 3, 
Êush
)Ë!
MEMCACHED_SUCCESS
)

230 
	`memˇched_io_ª£t
(
ö°™˚
);

231 
rc
‘¯=
MEMCACHED_SUCCESS
Ë? 
MEMCACHED_WRITE_FAILURE
 :Ñc;

234 
	`u∆ikñy
 (
±r
->
numbî_of_ª∂iˇs
 > 0)

236 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_DELETEQ
;

238 
uöt32_t
 
x
0; x < 
±r
->
numbî_of_ª∂iˇs
; ++x)

240 
memˇched_£rvî_wrôe_ö°™˚_°
 
ª∂iˇ
;

242 ++
£rvî_key
;

243 i‡(
£rvî_key
 =
	`memˇched_£rvî_cou¡
(
±r
))

244 
£rvî_key
= 0;

246 
ª∂iˇ

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
£rvî_key
);

248 i‡(
	`memˇched_vdo
(
ª∂iˇ
, 
ve˘‹
, 3, 
Êush
Ë!
MEMCACHED_SUCCESS
)

250 
	`memˇched_io_ª£t
(
ª∂iˇ
);

254 
	`memˇched_£rvî_ª•⁄£_de¸emít
(
ª∂iˇ
);

259  
rc
;

260 
	}
}

	@libmemcached/delete.h

12 #i‚de‡
__LIBMEMCACHED_DELETE_H__


13 
	#__LIBMEMCACHED_DELETE_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
memˇched_ªtu∫_t
 
memˇched_dñëe
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
,

21 
time_t
 
expú©i⁄
);

23 
LIBMEMCACHED_API


24 
memˇched_ªtu∫_t
 
memˇched_dñëe_by_key
(
memˇched_°
 *
±r
,

25 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

26 c⁄° *
key
, 
size_t
 
key_Àngth
,

27 
time_t
 
expú©i⁄
);

29 #ifde‡
__˝lu•lus


	@libmemcached/do.c

12 
	~"comm⁄.h
"

14 
memˇched_ªtu∫_t
 
	$memˇched_do
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
, c⁄° *
comm™d
,

15 
size_t
 
comm™d_Àngth
, 
boﬁ
 
wôh_Êush
)

17 
memˇched_ªtu∫_t
 
rc
;

18 
ssize_t
 
£¡_Àngth
;

20 
	`WATCHPOINT_ASSERT
(
comm™d_Àngth
);

21 
	`WATCHPOINT_ASSERT
(
comm™d
);

23 i‡((
rc

	`memˇched_c⁄√˘
(
±r
)Ë!
MEMCACHED_SUCCESS
)

25 
	`WATCHPOINT_ERROR
(
rc
);

26  
rc
;

34 i‡(
±r
->
ty≥
 =
MEMCACHED_CONNECTION_UDP
 && 
wôh_Êush
 &&Öå->
wrôe_buf„r_off£t
 > 
UDP_DATAGRAM_HEADER_LENGTH
)

36 
	`memˇched_io_wrôe
(
±r
, 
NULL
, 0, 
åue
);

39 
£¡_Àngth

	`memˇched_io_wrôe
(
±r
, 
comm™d
, 
comm™d_Àngth
, 
wôh_Êush
);

41 i‡(
£¡_Àngth
 =-1 || (
size_t
)£¡_Àngth !
comm™d_Àngth
)

43 
rc

MEMCACHED_WRITE_FAILURE
;

45 i‡((
±r
->
roŸ
->
Êags
.
no_ª∂y
) == 0)

47 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
±r
);

50  
rc
;

51 
	}
}

53 
memˇched_ªtu∫_t
 
	$memˇched_vdo
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

54 c⁄° 
libmemˇched_io_ve˘‹_°
 *
ve˘‹
, 
size_t
 
cou¡
,

55 
boﬁ
 
wôh_Êush
)

57 
memˇched_ªtu∫_t
 
rc
;

58 
ssize_t
 
£¡_Àngth
;

60 
	`WATCHPOINT_ASSERT
(
cou¡
);

61 
	`WATCHPOINT_ASSERT
(
ve˘‹
);

63 i‡((
rc

	`memˇched_c⁄√˘
(
±r
)Ë!
MEMCACHED_SUCCESS
)

65 
	`WATCHPOINT_ERROR
(
rc
);

66  
rc
;

74 i‡(
±r
->
ty≥
 =
MEMCACHED_CONNECTION_UDP
 && 
wôh_Êush
 &&Öå->
wrôe_buf„r_off£t
 > 
UDP_DATAGRAM_HEADER_LENGTH
)

76 
	`memˇched_io_wrôe
(
±r
, 
NULL
, 0, 
åue
);

79 
£¡_Àngth

	`memˇched_io_wrôev
(
±r
, 
ve˘‹
, 
cou¡
, 
wôh_Êush
);

81 
size_t
 
comm™d_Àngth
= 0;

82 
uöt32_t
 
x
0; x < 
cou¡
; ++x, 
ve˘‹
++)

84 
comm™d_Àngth
+
ve˘‹
->
Àngth
;

87 i‡(
£¡_Àngth
 =-1 || (
size_t
)£¡_Àngth !
comm™d_Àngth
)

89 
rc

MEMCACHED_WRITE_FAILURE
;

90 
	`WATCHPOINT_ERROR
(
rc
);

91 
	`WATCHPOINT_ERRNO
(
î∫o
);

93 i‡((
±r
->
roŸ
->
Êags
.
no_ª∂y
) == 0)

95 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
±r
);

98  
rc
;

99 
	}
}

	@libmemcached/do.h

12 #i‚de‡
__LIBMEMCACHED_DO_H__


13 
	#__LIBMEMCACHED_DO_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_LOCAL


20 
memˇched_ªtu∫_t
 
memˇched_do
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

21 c⁄° *
commm™d
,

22 
size_t
 
comm™d_Àngth
,

23 
boﬁ
 
wôh_Êush
);

25 
LIBMEMCACHED_LOCAL


26 
memˇched_ªtu∫_t
 
memˇched_vdo
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

27 c⁄° 
libmemˇched_io_ve˘‹_°
 *
ve˘‹
, 
size_t
 
cou¡
,

28 
boﬁ
 
wôh_Êush
);

30 #ifde‡
__˝lu•lus


	@libmemcached/dump.c

9 
	~"comm⁄.h
"

10 
memˇched_ªtu∫_t
 
	$ascii_dump
(
memˇched_°
 *
±r
, 
memˇched_dump_‚
 *
ˇŒback
, *
c⁄ãxt
, 
uöt32_t
 
numbî_of_ˇŒbacks
)

12 
memˇched_ªtu∫_t
 
rc

MEMCACHED_SUCCESS
;

13 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

14 
uöt32_t
 
£rvî_key
;

15 
uöt32_t
 
x
;

17 
	`u∆ikñy
 (
	`memˇched_£rvî_cou¡
(
±r
) == 0)

18  
MEMCACHED_NO_SERVERS
;

20 
£rvî_key
0; sîvî_key < 
	`memˇched_£rvî_cou¡
(
±r
); server_key++)

22 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

23 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
£rvî_key
);

26 
x
= 0; x < 256; x++)

28 
£nd_Àngth
;

29 
£nd_Àngth

	`¢¥ötf
(
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
,

30 "°©†ˇchedum∞%u 0 0\r\n", 
x
);

32 i‡(
£nd_Àngth
 >
MEMCACHED_DEFAULT_COMMAND_SIZE
 || send_length < 0)

34  
MEMCACHED_FAILURE
;

37 
rc

	`memˇched_do
(
ö°™˚
, 
buf„r
, (
size_t
)
£nd_Àngth
, 
åue
);

39 
	`u∆ikñy
 (
rc
 !
MEMCACHED_SUCCESS
)

40 
îr‹
;

44 
uöt32_t
 
ˇŒback_cou¡î
;

45 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, 
NULL
);

47 i‡(
rc
 =
MEMCACHED_ITEM
)

49 *
°rög_±r
, *
íd_±r
;

50 *
key
;

52 
°rög_±r

buf„r
;

53 
°rög_±r
+= 5;

54 
íd_±r

°rög_±r
; 
	`isgøph
(*end_ptr);Énd_ptr++);

55 
key

°rög_±r
;

56 
key
[(
size_t
)(
íd_±r
-
°rög_±r
)]= 0;

57 
ˇŒback_cou¡î
0; cÆlback_cou¡î < 
numbî_of_ˇŒbacks
; callback_counter++)

59 
rc
(*
ˇŒback
[
ˇŒback_cou¡î
])(
±r
, 
key
, (
size_t
)(
íd_±r
-
°rög_±r
), 
c⁄ãxt
);

60 i‡(
rc
 !
MEMCACHED_SUCCESS
)

64 i‡(
rc
 =
MEMCACHED_END
)

66 i‡(
rc
 =
MEMCACHED_SERVER_ERROR
 ||Ñ¯=
MEMCACHED_CLIENT_ERROR
)

75 
rc

MEMCACHED_END
;

79 
îr‹
;

84 
îr‹
:

85 i‡(
rc
 =
MEMCACHED_END
)

86  
MEMCACHED_SUCCESS
;

88  
rc
;

89 
	}
}

91 
memˇched_ªtu∫_t
 
	$memˇched_dump
(
memˇched_°
 *
±r
, 
memˇched_dump_‚
 *
ˇŒback
, *
c⁄ãxt
, 
uöt32_t
 
numbî_of_ˇŒbacks
)

93 
memˇched_ªtu∫_t
 
rc
;

94 i‡((
rc

	`öôülize_quîy
(
±r
)Ë!
MEMCACHED_SUCCESS
)

96  
rc
;

103 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

104  
MEMCACHED_FAILURE
;

106  
	`ascii_dump
(
±r
, 
ˇŒback
, 
c⁄ãxt
, 
numbî_of_ˇŒbacks
);

107 
	}
}

	@libmemcached/dump.h

12 #i‚de‡
__LIBMEMCACHED_DUMP_H__


13 
	#__LIBMEMCACHED_DUMP_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
memˇched_ªtu∫_t
 
memˇched_dump
(
memˇched_°
 *
±r
, 
memˇched_dump_‚
 *
fun˘i⁄
, *
c⁄ãxt
, 
uöt32_t
 
numbî_of_ˇŒbacks
);

23 #ifde‡
__˝lu•lus


	@libmemcached/error.cc

38 
	~"libmemˇched/comm⁄.h
"

40 
	#MAX_ERROR_LENGTH
 2048

	)

41 
	smemˇched_îr‹_t


43 
memˇched_°
 *
	mroŸ
;

44 
uöt64_t
 
	mquîy_id
;

45 
memˇched_îr‹_t
 *
	m√xt
;

46 
memˇched_ªtu∫_t
 
	mrc
;

47 
	mloˇl_î∫o
;

48 
size_t
 
	msize
;

49 
	mmesßge
[
MAX_ERROR_LENGTH
];

52 
	$_£t
(
memˇched_°
 *
memc
, 
memˇched_°rög_t
 *
°r
, c⁄° 
memˇched_ªtu∫_t
 
rc
, c⁄° 
loˇl_î∫o
)

54 
	`WATCHPOINT_ASSERT
(
memc
);

55 i‡(! 
memc
)

58 i‡(
memc
->
îr‹_mesßges
 && memc->îr‹_mesßges->
quîy_id
 != memc->query_id)

60 
	`memˇched_îr‹_‰ì
(
memc
);

63 
memˇched_îr‹_t
 *
îr‹
;

64 
îr‹
(
memˇched_îr‹_t
 *)
	`libmemˇched_mÆloc
(
memc
, (memcached_error_t));

66 i‡(! 
îr‹
)

69 
îr‹
->
roŸ

memc
;

70 
îr‹
->
quîy_id

memc
->query_id;

71 
îr‹
->
rc
=Ñc;

72 
îr‹
->
loˇl_î∫o
=Üocal_errno;

74 i‡(
°r
)

76 
size_t
 
Àngth

°r
->
size
 > (size_t)
MAX_ERROR_LENGTH
 ? MAX_ERROR_LENGTH : str->size;

77 
îr‹
->
size

Àngth
;

78 
	`mem˝y
(
îr‹
->
mesßge
, 
°r
->
c_°r
,Éº‹->
size
);

79 
îr‹
->
mesßge
[îr‹->
size
]= 0;

83 
îr‹
->
size
= 0;

86 
îr‹
->
√xt

memc
->
îr‹_mesßges
;

87 
memc
->
îr‹_mesßges

îr‹
;

88 
	}
}

90 
memˇched_ªtu∫_t
 
	$memˇched_£t_îr‹_°rög
(
memˇched_°
 *
memc
, 
memˇched_ªtu∫_t
 
rc
, c⁄° *
°r
, 
size_t
 
Àngth
)

92 
memˇched_°rög_t
 
tmp
;

93 
tmp
.
c_°r

°r
;

94 
tmp
.
size

Àngth
;

95  
	`memˇched_£t_îr‹
(
memc
, 
rc
, &
tmp
);

96 
	}
}

98 
memˇched_ªtu∫_t
 
	$memˇched_£t_îr‹
(
memˇched_°
 *
memc
, 
memˇched_ªtu∫_t
 
rc
, 
memˇched_°rög_t
 *
°r
)

100 i‡(
rc
 =
MEMCACHED_SUCCESS
)

101  
MEMCACHED_SUCCESS
;

103 
	`_£t
(
memc
, 
°r
, 
rc
, 0);

105  
rc
;

106 
	}
}

108 
memˇched_ªtu∫_t
 
	$memˇched_£t_î∫o
(
memˇched_°
 *
memc
, 
loˇl_î∫o
, 
memˇched_°rög_t
 *
°r
)

110 
	`_£t
(
memc
, 
°r
, 
MEMCACHED_ERRNO
, 
loˇl_î∫o
);

112  
MEMCACHED_ERRNO
;

113 
	}
}

115 
	$_îr‹_¥öt
(c⁄° 
memˇched_îr‹_t
 *
îr‹
)

117 i‡(! 
îr‹
)

120 i‡(! 
îr‹
->
size
)

122 
	`Ârötf
(
°dîr
, "%s\n", 
	`memˇched_°ªº‹
(
NULL
, 
îr‹
->
rc
) );

126 
	`Ârötf
(
°dîr
, "%†%s\n", 
	`memˇched_°ªº‹
(
NULL
, 
îr‹
->
rc
),Éº‹->
mesßge
);

129 
	`_îr‹_¥öt
(
îr‹
->
√xt
);

130 
	}
}

132 
	$memˇched_îr‹_¥öt
(c⁄° 
memˇched_°
 *
£lf
)

134 i‡(! 
£lf
)

137 
	`_îr‹_¥öt
(
£lf
->
îr‹_mesßges
);

138 
	}
}

140 
	$_îr‹_‰ì
(
memˇched_îr‹_t
 *
îr‹
)

142 i‡(! 
îr‹
)

145 
	`_îr‹_‰ì
(
îr‹
->
√xt
);

147 i‡(
îr‹
 &&Éº‹->
roŸ
)

149 
	`libmemˇched_‰ì
(
îr‹
->
roŸ
,Érror);

151 i‡(
îr‹
)

153 
	`‰ì
(
îr‹
);

155 
	}
}

157 
	$memˇched_îr‹_‰ì
(
memˇched_°
 *
£lf
)

159 i‡(! 
£lf
)

162 
	`_îr‹_‰ì
(
£lf
->
îr‹_mesßges
);

163 
	}
}

165 c⁄° *
	$memˇched_œ°_îr‹_mesßge
(
memˇched_°
 *
memc
)

167 i‡(! 
memc
)

168  
	`memˇched_°ªº‹
(
memc
, 
MEMCACHED_INVALID_ARGUMENTS
);

170 i‡(! 
memc
->
îr‹_mesßges
)

171  
	`memˇched_°ªº‹
(
memc
, 
MEMCACHED_SUCCESS
);

173 i‡(! 
memc
->
îr‹_mesßges
->
size
)

175  
	`memˇched_°ªº‹
(
memc
, memc->
îr‹_mesßges
->
rc
);

178  
memc
->
îr‹_mesßges
->
mesßge
;

179 
	}
}

181 
memˇched_ªtu∫_t
 
	$memˇched_œ°_îr‹
(
memˇched_°
 *
memc
)

183 i‡(! 
memc
)

184  
MEMCACHED_INVALID_ARGUMENTS
;

186 i‡(! 
memc
->
îr‹_mesßges
)

187  
MEMCACHED_SUCCESS
;

189  
memc
->
îr‹_mesßges
->
rc
;

190 
	}
}

192 
	$memˇched_œ°_îr‹_î∫o
(
memˇched_°
 *
memc
)

194 i‡(! 
memc
)

197 i‡(! 
memc
->
îr‹_mesßges
)

200  
memc
->
îr‹_mesßges
->
loˇl_î∫o
;

201 
	}
}

	@libmemcached/error.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_LOCAL


45 
memˇched_ªtu∫_t
 
memˇched_£t_îr‹
(
memˇched_°
 *
memc
, memˇched_ªtu∫_à
rc
, 
memˇched_°rög_t
 *
°r
);

47 
LIBMEMCACHED_LOCAL


48 
memˇched_ªtu∫_t
 
memˇched_£t_îr‹_°rög
(
memˇched_°
 *
memc
, memˇched_ªtu∫_à
rc
, c⁄° *
°r
, 
size_t
 
Àngth
);

50 
LIBMEMCACHED_LOCAL


51 
memˇched_ªtu∫_t
 
memˇched_£t_î∫o
(
memˇched_°
 *
memc
, 
loˇl_î∫o
, 
memˇched_°rög_t
 *
°r
);

53 
LIBMEMCACHED_LOCAL


54 
memˇched_îr‹_‰ì
(
memˇched_°
 *
îr‹
);

56 
LIBMEMCACHED_API


57 c⁄° *
memˇched_œ°_îr‹_mesßge
(
memˇched_°
 *
memc
);

59 
LIBMEMCACHED_API


60 
memˇched_îr‹_¥öt
(c⁄° 
memˇched_°
 *
£lf
);

62 
LIBMEMCACHED_API


63 
memˇched_ªtu∫_t
 
memˇched_œ°_îr‹
(
memˇched_°
 *
memc
);

65 
LIBMEMCACHED_API


66 
memˇched_œ°_îr‹_î∫o
(
memˇched_°
 *
memc
);

68 #ifde‡
__˝lu•lus


	@libmemcached/exception.hpp

13 #i‚de‡
LIBMEMACHED_EXCEPTION_HPP


14 
	#LIBMEMACHED_EXCEPTION_HPP


	)

16 
	~<°dex˚±
>

17 
	~<°rög
>

19 
«me•a˚
 
	gmemˇche


21 ˛as†
	cEx˚±i⁄
 : 
public
 
°d
::
ru¡ime_îr‹


23 
public
:

24 
Ex˚±i⁄
(c⁄° 
°d
::
°rög
& 
msg
, 
ö_î∫o
)

26 
°d
::
ru¡ime_îr‹
(
msg
),

27 
_î∫o
(
ö_î∫o
)

30 
Ex˚±i⁄
(c⁄° *
msg
, 
ö_î∫o
)

32 
°d
::
ru¡ime_îr‹
(°d::
°rög
(
msg
)),

33 
_î∫o
(
ö_î∫o
) {}

35 
	gvútuÆ
 ~
Ex˚±i⁄
(Ë
throw
() {}

37 
gëEºno
() const

39  
	g_î∫o
;

42 
	g¥iv©e
:

43 
_î∫o
;

46 ˛as†
	cW¨nög
 : 
public
 
Ex˚±i⁄


48 
public
:

49 
W¨nög
(c⁄° 
°d
::
°rög
& 
msg
, 
ö_î∫o
Ë: 
Ex˚±i⁄
(msg, in_errno) {}

50 
W¨nög
(c⁄° *
msg
, 
ö_î∫o
Ë: 
Ex˚±i⁄
(msg, in_errno) {}

53 ˛as†
	cEº‹
 : 
public
 
Ex˚±i⁄


55 
public
:

56 
Eº‹
(c⁄° 
°d
::
°rög
& 
msg
, 
ö_î∫o
Ë: 
Ex˚±i⁄
(msg, in_errno) {}

57 
Eº‹
(c⁄° *
msg
, 
ö_î∫o
Ë: 
Ex˚±i⁄
(msg, in_errno) {}

58 
	gvútuÆ
 ~
Eº‹
(Ë
throw
() {}

	@libmemcached/fetch.c

1 
	~"comm⁄.h
"

3 *
	$memˇched_„tch
(
memˇched_°
 *
±r
, *
key
, 
size_t
 *
key_Àngth
,

4 
size_t
 *
vÆue_Àngth
,

5 
uöt32_t
 *
Êags
,

6 
memˇched_ªtu∫_t
 *
îr‹
)

8 
memˇched_ªsu…_°
 *
ªsu…_buf„r
&
±r
->
ªsu…
;

10 
	`u∆ikñy
 (
±r
->
Êags
.
u£_udp
)

12 *
îr‹

MEMCACHED_NOT_SUPPORTED
;

13  
NULL
;

16 
ªsu…_buf„r

	`memˇched_„tch_ªsu…
(
±r
,Ñesu…_buf„r, 
îr‹
);

18 i‡(
ªsu…_buf„r
 =
NULL
 || *
îr‹
 !
MEMCACHED_SUCCESS
)

20 
	`WATCHPOINT_ASSERT
(
ªsu…_buf„r
 =
NULL
);

21 *
vÆue_Àngth
= 0;

22  
NULL
;

25 *
vÆue_Àngth

	`memˇched_°rög_Àngth
(&
ªsu…_buf„r
->
vÆue
);

27 i‡(
key
)

29 i‡(
ªsu…_buf„r
->
key_Àngth
 > 
MEMCACHED_MAX_KEY
)

31 *
îr‹

MEMCACHED_KEY_TOO_BIG
;

32 *
vÆue_Àngth
= 0;

34  
NULL
;

36 
	`°∫˝y
(
key
, 
ªsu…_buf„r
->
ôem_key
,Ñesu…_buf„r->
key_Àngth
);

37 *
key_Àngth

ªsu…_buf„r
->key_length;

40 *
Êags

ªsu…_buf„r
->
ôem_Êags
;

42  
	`memˇched_°rög_c_c›y
(&
ªsu…_buf„r
->
vÆue
);

43 
	}
}

45 
memˇched_ªsu…_°
 *
	$memˇched_„tch_ªsu…
(
memˇched_°
 *
±r
,

46 
memˇched_ªsu…_°
 *
ªsu…
,

47 
memˇched_ªtu∫_t
 *
îr‹
)

49 
memˇched_£rvî_°
 *
£rvî
;

51 
	`u∆ikñy
 (
±r
->
Êags
.
u£_udp
)

53 *
îr‹

MEMCACHED_NOT_SUPPORTED
;

54  
NULL
;

57 i‡(
ªsu…
 =
NULL
)

58 i‡((
ªsu…

	`memˇched_ªsu…_¸óã
(
±r
, 
NULL
)) == NULL)

59  
NULL
;

61 (
£rvî

	`memˇched_io_gë_ªadabÀ_£rvî
(
±r
)Ë!
NULL
)

63 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

64 *
îr‹

	`memˇched_ª•⁄£
(
£rvî
, 
buf„r
, (buf„r), 
ªsu…
);

66 i‡(*
îr‹
 =
MEMCACHED_SUCCESS
)

67  
ªsu…
;

68 i‡(*
îr‹
 =
MEMCACHED_END
)

69 
	`memˇched_£rvî_ª•⁄£_ª£t
(
£rvî
);

70 i‡(*
îr‹
 !
MEMCACHED_NOTFOUND
)

75 i‡(
	`memˇched_is_Æloˇãd
(
ªsu…
))

77 
	`memˇched_ªsu…_‰ì
(
ªsu…
);

81 
	`memˇched_°rög_ª£t
(&
ªsu…
->
vÆue
);

84  
NULL
;

85 
	}
}

87 
memˇched_ªtu∫_t
 
	$memˇched_„tch_execuã
(
memˇched_°
 *
±r
,

88 
memˇched_execuã_‚
 *
ˇŒback
,

89 *
c⁄ãxt
,

90 
uöt32_t
 
numbî_of_ˇŒbacks
)

92 
memˇched_ªsu…_°
 *
ªsu…
&
±r
->result;

93 
memˇched_ªtu∫_t
 
rc

MEMCACHED_FAILURE
;

95 (
ªsu…

	`memˇched_„tch_ªsu…
(
±r
,Ñesu…, &
rc
)Ë!
NULL
)

97 i‡(
rc
 =
MEMCACHED_SUCCESS
)

99 
uöt32_t
 
x
0; x < 
numbî_of_ˇŒbacks
; x++)

101 
rc
(*
ˇŒback
[
x
])(
±r
, 
ªsu…
, 
c⁄ãxt
);

102 i‡(
rc
 !
MEMCACHED_SUCCESS
)

107  
rc
;

108 
	}
}

	@libmemcached/fetch.h

12 #i‚de‡
__LIBMEMCACHED_FETCH_H__


13 
	#__LIBMEMCACHED_FETCH_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
memˇched_ªtu∫_t
 
memˇched_„tch_execuã
(
memˇched_°
 *
±r
,

21 
memˇched_execuã_‚
 *
ˇŒback
,

22 *
c⁄ãxt
,

23 
uöt32_t
 
numbî_of_ˇŒbacks
);

25 #ifde‡
__˝lu•lus


	@libmemcached/flush.c

1 
	~"comm⁄.h
"

3 
memˇched_ªtu∫_t
 
memˇched_Êush_bö¨y
(
memˇched_°
 *
±r
,

4 
time_t
 
expú©i⁄
);

5 
memˇched_ªtu∫_t
 
memˇched_Êush_ãxtuÆ
(
memˇched_°
 *
±r
,

6 
time_t
 
expú©i⁄
);

8 
memˇched_ªtu∫_t
 
	$memˇched_Êush
(
memˇched_°
 *
±r
, 
time_t
 
expú©i⁄
)

10 
memˇched_ªtu∫_t
 
rc
;

11 i‡((
rc

	`öôülize_quîy
(
±r
)Ë!
MEMCACHED_SUCCESS
)

13  
rc
;

16 
	`LIBMEMCACHED_MEMCACHED_FLUSH_START
();

17 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

18 
rc

	`memˇched_Êush_bö¨y
(
±r
, 
expú©i⁄
);

20 
rc

	`memˇched_Êush_ãxtuÆ
(
±r
, 
expú©i⁄
);

21 
	`LIBMEMCACHED_MEMCACHED_FLUSH_END
();

22  
rc
;

23 
	}
}

25 
memˇched_ªtu∫_t
 
	$memˇched_Êush_ãxtuÆ
(
memˇched_°
 *
±r
,

26 
time_t
 
expú©i⁄
)

28 
	`u∆ikñy
 (
	`memˇched_£rvî_cou¡
(
±r
) == 0)

29  
MEMCACHED_NO_SERVERS
;

31 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

33 
memˇched_ªtu∫_t
 
rc
;

34 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

36 
boﬁ
 
no_ª∂y

±r
->
Êags
.no_reply;

37 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

38 
	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
x
);

40 
£nd_Àngth
;

41 i‡(
expú©i⁄
)

43 
£nd_Àngth

	`¢¥ötf
(
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
,

45 ()
expú©i⁄
, 
no_ª∂y
 ? "Çoreply" : "");

49 
£nd_Àngth

	`¢¥ötf
(
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
,

50 "Êush_Æl%s\r\n", 
no_ª∂y
 ? "Çoreply" : "");

53 i‡(
£nd_Àngth
 >
MEMCACHED_DEFAULT_COMMAND_SIZE
 || send_length < 0)

55  
MEMCACHED_FAILURE
;

58 
rc

	`memˇched_do
(
ö°™˚
, 
buf„r
, (
size_t
)
£nd_Àngth
, 
åue
);

60 i‡(
rc
 =
MEMCACHED_SUCCESS
 && !
no_ª∂y
)

61 ()
	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, 
NULL
);

64  
MEMCACHED_SUCCESS
;

65 
	}
}

67 
memˇched_ªtu∫_t
 
	$memˇched_Êush_bö¨y
(
memˇched_°
 *
±r
,

68 
time_t
 
expú©i⁄
)

70 
¥Ÿocﬁ_bö¨y_ªque°_Êush
 
ªque°
{.
byãs
= {0}};

72 
	`u∆ikñy
 (
	`memˇched_£rvî_cou¡
(
±r
) == 0)

73  
MEMCACHED_NO_SERVERS
;

75 
ªque°
.
mesßge
.
hódî
.ªque°.
magic
(
uöt8_t
)
PROTOCOL_BINARY_REQ
;

76 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_FLUSH
;

77 
ªque°
.
mesßge
.
hódî
.ªque°.
exéí
= 4;

78 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

79 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
‘eque°.mesßge.hódî.ªque°.
exéí
);

80 
ªque°
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
((
uöt32_t
)Éxpiration);

82 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

84 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

85 
	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
x
);

87 i‡(
±r
->
Êags
.
no_ª∂y
)

89 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_FLUSHQ
;

93 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_FLUSH
;

96 i‡(
	`memˇched_do
(
ö°™˚
, 
ªque°
.
byãs
, ‘eque°.byãs), 
åue
Ë!
MEMCACHED_SUCCESS
)

98 
	`memˇched_io_ª£t
(
ö°™˚
);

99  
MEMCACHED_WRITE_FAILURE
;

103 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

105 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

106 
	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
x
);

108 i‡(
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
) > 0)

109 ()
	`memˇched_ª•⁄£
(
ö°™˚
, 
NULL
, 0, NULL);

112  
MEMCACHED_SUCCESS
;

113 
	}
}

	@libmemcached/flush.h

12 #i‚de‡
__LIBMEMCACHED_FLUSH_H__


13 
	#__LIBMEMCACHED_FLUSH_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
memˇched_ªtu∫_t
 
memˇched_Êush
(
memˇched_°
 *
±r
, 
time_t
 
expú©i⁄
);

22 #ifde‡
__˝lu•lus


	@libmemcached/flush_buffers.c

1 
	~"comm⁄.h
"

3 
memˇched_ªtu∫_t
 
	$memˇched_Êush_buf„rs
(
memˇched_°
 *
memc
)

5 
memˇched_ªtu∫_t
 
ªt

MEMCACHED_SUCCESS
;

7 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); ++x)

9 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

10 
	`memˇched_£rvî_ö°™˚_„tch
(
memc
, 
x
);

12 i‡(
ö°™˚
->
wrôe_buf„r_off£t
 != 0)

14 i‡(
ö°™˚
->
fd
 == -1 &&

15 (
ªt

	`memˇched_c⁄√˘
(
ö°™˚
)Ë!
MEMCACHED_SUCCESS
)

17 
	`WATCHPOINT_ERROR
(
ªt
);

18  
ªt
;

21 i‡(
	`memˇched_io_wrôe
(
ö°™˚
, 
NULL
, 0, 
åue
) == -1)

23 
ªt

MEMCACHED_SOME_ERRORS
;

28  
ªt
;

29 
	}
}

	@libmemcached/flush_buffers.h

12 #i‚de‡
__LIBMEMCACHED_FLUSH_BUFFERS_H__


13 
	#__LIBMEMCACHED_FLUSH_BUFFERS_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
memˇched_ªtu∫_t
 
memˇched_Êush_buf„rs
(
memˇched_°
 *
mem
);

22 #ifde‡
__˝lu•lus


	@libmemcached/get.c

12 
	~"comm⁄.h
"

17 *
	$memˇched_gë
(
memˇched_°
 *
±r
, c⁄° *
key
,

18 
size_t
 
key_Àngth
,

19 
size_t
 *
vÆue_Àngth
,

20 
uöt32_t
 *
Êags
,

21 
memˇched_ªtu∫_t
 *
îr‹
)

23  
	`memˇched_gë_by_key
(
±r
, 
NULL
, 0, 
key
, 
key_Àngth
, 
vÆue_Àngth
,

24 
Êags
, 
îr‹
);

25 
	}
}

27 
memˇched_ªtu∫_t
 
memˇched_mgë_by_key_ªÆ
(
memˇched_°
 *
±r
,

28 c⁄° *
group_key
,

29 
size_t
 
group_key_Àngth
,

30 c⁄° * c⁄° *
keys
,

31 c⁄° 
size_t
 *
key_Àngth
,

32 
size_t
 
numbî_of_keys
,

33 
boﬁ
 
mgë_mode
);

35 *
	$memˇched_gë_by_key
(
memˇched_°
 *
±r
,

36 c⁄° *
group_key
,

37 
size_t
 
group_key_Àngth
,

38 c⁄° *
key
, 
size_t
 
key_Àngth
,

39 
size_t
 *
vÆue_Àngth
,

40 
uöt32_t
 *
Êags
,

41 
memˇched_ªtu∫_t
 *
îr‹
)

43 *
vÆue
;

44 
size_t
 
dummy_Àngth
;

45 
uöt32_t
 
dummy_Êags
;

46 
memˇched_ªtu∫_t
 
dummy_îr‹
;

48 
	`u∆ikñy
 (
±r
->
Êags
.
u£_udp
)

50 *
îr‹

MEMCACHED_NOT_SUPPORTED
;

51  
NULL
;

55 *
îr‹

	`memˇched_mgë_by_key_ªÆ
(
±r
, 
group_key
, 
group_key_Àngth
,

56 (c⁄° * c⁄° *)&
key
,

57 &
key_Àngth
, 1, 
Ál£
);

59 
vÆue

	`memˇched_„tch
(
±r
, 
NULL
, NULL,

60 
vÆue_Àngth
, 
Êags
, 
îr‹
);

62 i‡(*
îr‹
 =
MEMCACHED_END
)

63 *
îr‹

MEMCACHED_NOTFOUND
;

65 i‡(
vÆue
 =
NULL
)

67 i‡(
±r
->
gë_key_Áûuª
 && *
îr‹
 =
MEMCACHED_NOTFOUND
)

69 
memˇched_ªtu∫_t
 
rc
;

71 
	`memˇched_ªsu…_ª£t
(&
±r
->
ªsu…
);

72 
rc

±r
->
	`gë_key_Áûuª
’å, 
key
, 
key_Àngth
, &±r->
ªsu…
);

75 i‡(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
)

77 i‡(
rc
 =
MEMCACHED_BUFFERED
)

79 
uöt64_t
 
œtch
;

80 
œtch

	`memˇched_behavi‹_gë
(
±r
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
);

81 i‡(
œtch
 == 0)

82 
	`memˇched_behavi‹_£t
(
±r
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 1);

84 
rc

	`memˇched_£t
(
±r
, 
key
, 
key_Àngth
,

85 (
	`memˇched_ªsu…_vÆue
(&
±r
->
ªsu…
)),

86 (
	`memˇched_ªsu…_Àngth
(&
±r
->
ªsu…
)),

88 (
	`memˇched_ªsu…_Êags
(&
±r
->
ªsu…
)));

90 i‡(
rc
 =
MEMCACHED_BUFFERED
 && 
œtch
 == 0)

91 
	`memˇched_behavi‹_£t
(
±r
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 0);

95 
rc

	`memˇched_£t
(
±r
, 
key
, 
key_Àngth
,

96 (
	`memˇched_ªsu…_vÆue
(&
±r
->
ªsu…
)),

97 (
	`memˇched_ªsu…_Àngth
(&
±r
->
ªsu…
)),

99 (
	`memˇched_ªsu…_Êags
(&
±r
->
ªsu…
)));

102 i‡(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
)

104 *
îr‹

rc
;

105 *
vÆue_Àngth

	`memˇched_ªsu…_Àngth
(&
±r
->
ªsu…
);

106 *
Êags

	`memˇched_ªsu…_Êags
(&
±r
->
ªsu…
);

107  
	`memˇched_°rög_c_c›y
(&
±r
->
ªsu…
.
vÆue
);

112  
NULL
;

115 ()
	`memˇched_„tch
(
±r
, 
NULL
, NULL,

116 &
dummy_Àngth
, &
dummy_Êags
,

117 &
dummy_îr‹
);

118 
	`WATCHPOINT_ASSERT
(
dummy_Àngth
 == 0);

120  
vÆue
;

121 
	}
}

123 
memˇched_ªtu∫_t
 
	$memˇched_mgë
(
memˇched_°
 *
±r
,

124 c⁄° * c⁄° *
keys
,

125 c⁄° 
size_t
 *
key_Àngth
,

126 
size_t
 
numbî_of_keys
)

128  
	`memˇched_mgë_by_key
(
±r
, 
NULL
, 0, 
keys
, 
key_Àngth
, 
numbî_of_keys
);

129 
	}
}

131 
memˇched_ªtu∫_t
 
bö¨y_mgë_by_key
(
memˇched_°
 *
±r
,

132 
uöt32_t
 
ma°î_£rvî_key
,

133 
boﬁ
 
is_group_key_£t
,

134 c⁄° * c⁄° *
keys
,

135 c⁄° 
size_t
 *
key_Àngth
,

136 
size_t
 
numbî_of_keys
,

137 
boﬁ
 
mgë_mode
);

139 
memˇched_ªtu∫_t
 
	$memˇched_mgë_by_key_ªÆ
(
memˇched_°
 *
±r
,

140 c⁄° *
group_key
,

141 
size_t
 
group_key_Àngth
,

142 c⁄° * c⁄° *
keys
,

143 c⁄° 
size_t
 *
key_Àngth
,

144 
size_t
 
numbî_of_keys
,

145 
boﬁ
 
mgë_mode
)

147 
boﬁ
 
Áûuªs_occuªd_ö_£ndög

Ál£
;

148 c⁄° *
gë_comm™d
= "get ";

149 
uöt8_t
 
gë_comm™d_Àngth
= 4;

150 
ma°î_£rvî_key
= ()-1;

151 
boﬁ
 
is_group_key_£t

Ál£
;

153 
memˇched_ªtu∫_t
 
rc
;

154 i‡((
rc

	`öôülize_quîy
(
±r
)Ë!
MEMCACHED_SUCCESS
)

156  
rc
;

159 
	`u∆ikñy
 (
±r
->
Êags
.
u£_udp
)

160  
MEMCACHED_NOT_SUPPORTED
;

162 
	`LIBMEMCACHED_MEMCACHED_MGET_START
();

164 i‡(
numbî_of_keys
 == 0)

165  
MEMCACHED_NOTFOUND
;

167 i‡(
±r
->
Êags
.
vîify_key
 && (
	`memˇched_key_ã°
(
keys
, 
key_Àngth
, 
numbî_of_keys
Ë=
MEMCACHED_BAD_KEY_PROVIDED
))

168  
MEMCACHED_BAD_KEY_PROVIDED
;

170 i‡(
group_key
 && 
group_key_Àngth
)

172 i‡(
±r
->
Êags
.
vîify_key
 && (
	`memˇched_key_ã°
((c⁄° * c⁄° *)&
group_key
, &
group_key_Àngth
, 1Ë=
MEMCACHED_BAD_KEY_PROVIDED
))

173  
MEMCACHED_BAD_KEY_PROVIDED
;

174 
ma°î_£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
group_key
, 
group_key_Àngth
);

175 
is_group_key_£t

åue
;

184 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

186 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

187 
	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
x
);

189 i‡(
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
))

191 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

193 i‡(
±r
->
Êags
.
no_block
)

194 ()
	`memˇched_io_wrôe
(
ö°™˚
, 
NULL
, 0, 
åue
);

196 
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
))

197 ()
	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, &
±r
->
ªsu…
);

201 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

203  
	`bö¨y_mgë_by_key
(
±r
, 
ma°î_£rvî_key
, 
is_group_key_£t
, 
keys
,

204 
key_Àngth
, 
numbî_of_keys
, 
mgë_mode
);

207 i‡(
±r
->
Êags
.
suµ‹t_ˇs
)

209 
gë_comm™d
= "gets ";

210 
gë_comm™d_Àngth
= 5;

217 
	`WATCHPOINT_ASSERT
(
rc
 =
MEMCACHED_SUCCESS
);

218 
size_t
 
ho°s_c⁄√˘ed
= 0;

219 
uöt32_t
 
x
0; x < 
numbî_of_keys
; x++)

221 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

222 
uöt32_t
 
£rvî_key
;

224 i‡(
is_group_key_£t
)

226 
£rvî_key

ma°î_£rvî_key
;

230 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
keys
[
x
], 
key_Àngth
[x]);

233 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
£rvî_key
);

235 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

237 { .
Àngth

gë_comm™d_Àngth
, .
buf„r

gë_comm™d
 },

238 { .
Àngth

	`memˇched_¨øy_size
(
±r
->
¥efix_key
), .
buf„r

	`memˇched_¨øy_°rög
(ptr->prefix_key) },

239 { .
Àngth

key_Àngth
[
x
], .
buf„r

keys
[x] },

240 { .
Àngth
1, .
buf„r
= " " }

244 i‡(
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
) == 0)

246 
rc

	`memˇched_c⁄√˘
(
ö°™˚
);

248 i‡(
rc
 !
MEMCACHED_SUCCESS
)

252 
ho°s_c⁄√˘ed
++;

254 i‡((
	`memˇched_io_wrôev
(
ö°™˚
, 
ve˘‹
, 4, 
Ál£
)) == -1)

256 
Áûuªs_occuªd_ö_£ndög

åue
;

259 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
curs‹_a˘ive
 == 0);

260 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
ö°™˚
);

261 
	`WATCHPOINT_ASSERT
(
ö°™˚
->
curs‹_a˘ive
 == 1);

265 i‡((
	`memˇched_io_wrôev
(
ö°™˚
, (
ve˘‹
 + 1), 3, 
Ál£
)) == -1)

267 
	`memˇched_£rvî_ª•⁄£_ª£t
(
ö°™˚
);

268 
Áûuªs_occuªd_ö_£ndög

åue
;

274 i‡(
ho°s_c⁄√˘ed
 == 0)

276 
	`LIBMEMCACHED_MEMCACHED_MGET_END
();

278 i‡(
rc
 !
MEMCACHED_SUCCESS
)

279  
rc
;

281  
MEMCACHED_NO_SERVERS
;

288 
boﬁ
 
suc˚ss_h≠≥√d

Ál£
;

289 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

291 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

292 
	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
x
);

294 i‡(
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
))

297 i‡((
	`memˇched_io_wrôe
(
ö°™˚
, "\r\n", 2, 
åue
)) == -1)

299 
Áûuªs_occuªd_ö_£ndög

åue
;

303 
suc˚ss_h≠≥√d

åue
;

308 
	`LIBMEMCACHED_MEMCACHED_MGET_END
();

310 i‡(
Áûuªs_occuªd_ö_£ndög
 && 
suc˚ss_h≠≥√d
)

311  
MEMCACHED_SOME_ERRORS
;

313 i‡(
suc˚ss_h≠≥√d
)

314  
MEMCACHED_SUCCESS
;

316  
MEMCACHED_FAILURE
;

317 
	}
}

319 
memˇched_ªtu∫_t
 
	$memˇched_mgë_by_key
(
memˇched_°
 *
±r
,

320 c⁄° *
group_key
,

321 
size_t
 
group_key_Àngth
,

322 c⁄° * c⁄° *
keys
,

323 c⁄° 
size_t
 *
key_Àngth
,

324 
size_t
 
numbî_of_keys
)

326  
	`memˇched_mgë_by_key_ªÆ
(
±r
, 
group_key
, 
group_key_Àngth
, 
keys
,

327 
key_Àngth
, 
numbî_of_keys
, 
åue
);

328 
	}
}

330 
memˇched_ªtu∫_t
 
	$memˇched_mgë_execuã
(
memˇched_°
 *
±r
,

331 c⁄° * c⁄° *
keys
,

332 c⁄° 
size_t
 *
key_Àngth
,

333 
size_t
 
numbî_of_keys
,

334 
memˇched_execuã_‚
 *
ˇŒback
,

335 *
c⁄ãxt
,

336 
numbî_of_ˇŒbacks
)

338  
	`memˇched_mgë_execuã_by_key
(
±r
, 
NULL
, 0, 
keys
, 
key_Àngth
,

339 
numbî_of_keys
, 
ˇŒback
,

340 
c⁄ãxt
, 
numbî_of_ˇŒbacks
);

341 
	}
}

343 
memˇched_ªtu∫_t
 
	$memˇched_mgë_execuã_by_key
(
memˇched_°
 *
±r
,

344 c⁄° *
group_key
,

345 
size_t
 
group_key_Àngth
,

346 c⁄° * c⁄° *
keys
,

347 c⁄° 
size_t
 *
key_Àngth
,

348 
size_t
 
numbî_of_keys
,

349 
memˇched_execuã_‚
 *
ˇŒback
,

350 *
c⁄ãxt
,

351 
numbî_of_ˇŒbacks
)

353 i‡((
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
) == 0)

354  
MEMCACHED_NOT_SUPPORTED
;

356 
memˇched_ªtu∫_t
 
rc
;

357 
memˇched_ˇŒback_°
 *
‹igöÆ_ˇŒbacks

±r
->
ˇŒbacks
;

358 
memˇched_ˇŒback_°
 
cb
= {

359 .
ˇŒback
= callback,

360 .
c⁄ãxt
= context,

361 .
numbî_of_ˇŒback

numbî_of_ˇŒbacks


364 
±r
->
ˇŒbacks
&
cb
;

365 
rc

	`memˇched_mgë_by_key
(
±r
, 
group_key
, 
group_key_Àngth
, 
keys
,

366 
key_Àngth
, 
numbî_of_keys
);

367 
±r
->
ˇŒbacks

‹igöÆ_ˇŒbacks
;

368  
rc
;

369 
	}
}

371 
memˇched_ªtu∫_t
 
	$sim∂e_bö¨y_mgë
(
memˇched_°
 *
±r
,

372 
uöt32_t
 
ma°î_£rvî_key
,

373 
boﬁ
 
is_group_key_£t
,

374 c⁄° * c⁄° *
keys
,

375 c⁄° 
size_t
 *
key_Àngth
,

376 
size_t
 
numbî_of_keys
, 
boﬁ
 
mgë_mode
)

378 
memˇched_ªtu∫_t
 
rc

MEMCACHED_NOTFOUND
;

380 
boﬁ
 
Êush
(
numbî_of_keys
 == 1);

386 
uöt32_t
 
x
0; x < 
numbî_of_keys
; ++x)

388 
uöt32_t
 
£rvî_key
;

389 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

391 i‡(
is_group_key_£t
)

393 
£rvî_key

ma°î_£rvî_key
;

397 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
keys
[
x
], 
key_Àngth
[x]);

400 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
£rvî_key
);

402 i‡(
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
) == 0)

404 
rc

	`memˇched_c⁄√˘
(
ö°™˚
);

405 i‡(
rc
 !
MEMCACHED_SUCCESS
)

409 
¥Ÿocﬁ_bö¨y_ªque°_gëk
 
ªque°
{.
byãs
= {0}};

410 
ªque°
.
mesßge
.
hódî
.ªque°.
magic

PROTOCOL_BINARY_REQ
;

411 i‡(
mgë_mode
)

412 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_GETKQ
;

414 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_GETK
;

416 
memˇched_ªtu∫_t
 
vk
;

417 
vk

	`memˇched_vÆid©e_key_Àngth
(
key_Àngth
[
x
],

418 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
);

419 
	`u∆ikñy
 (
vk
 !
MEMCACHED_SUCCESS
)

421 i‡(
x
 > 0)

423 
	`memˇched_io_ª£t
(
ö°™˚
);

426  
vk
;

429 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
((
uöt16_t
)(
key_Àngth
[
x
] + 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
)));

430 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

431 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
((
uöt32_t
)–
key_Àngth
[
x
] + 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
)));

433 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

435 { .
Àngth
(
ªque°
.
byãs
), .
buf„r
=Ñequest.bytes },

436 { .
Àngth

	`memˇched_¨øy_size
(
±r
->
¥efix_key
), .
buf„r

	`memˇched_¨øy_°rög
(ptr->prefix_key) },

437 { .
Àngth

key_Àngth
[
x
], .
buf„r

keys
[x] }

440 i‡(
	`memˇched_io_wrôev
(
ö°™˚
, 
ve˘‹
, 3, 
Êush
) == -1)

442 
	`memˇched_£rvî_ª•⁄£_ª£t
(
ö°™˚
);

443 
rc

MEMCACHED_SOME_ERRORS
;

448 
	`memˇched_£rvî_ª•⁄£_ª£t
(
ö°™˚
);

449 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
ö°™˚
);

450 i‡((
x
 > 0 && x =
±r
->
io_key_¥e„tch
Ë&& 
	`memˇched_Êush_buf„rs
’åË!
MEMCACHED_SUCCESS
)

452 
rc

MEMCACHED_SOME_ERRORS
;

456 i‡(
mgë_mode
)

461 
¥Ÿocﬁ_bö¨y_ªque°_no›
 
ªque°
{.
byãs
= {0}};

462 
ªque°
.
mesßge
.
hódî
.ªque°.
magic

PROTOCOL_BINARY_REQ
;

463 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_NOOP
;

464 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

466 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); ++x)

468 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

469 
	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
x
);

471 i‡(
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
))

473 i‡(
	`memˇched_io_wrôe
(
ö°™˚
, 
NULL
, 0, 
åue
) == -1)

475 
	`memˇched_£rvî_ª•⁄£_ª£t
(
ö°™˚
);

476 
	`memˇched_io_ª£t
(
ö°™˚
);

477 
rc

MEMCACHED_SOME_ERRORS
;

480 i‡(
	`memˇched_io_wrôe
(
ö°™˚
, 
ªque°
.
byãs
,

481 (
ªque°
.
byãs
), 
åue
) == -1)

483 
	`memˇched_£rvî_ª•⁄£_ª£t
(
ö°™˚
);

484 
	`memˇched_io_ª£t
(
ö°™˚
);

485 
rc

MEMCACHED_SOME_ERRORS
;

492  
rc
;

493 
	}
}

495 
memˇched_ªtu∫_t
 
	$ª∂iˇti⁄_bö¨y_mgë
(
memˇched_°
 *
±r
,

496 
uöt32_t
* 
hash
,

497 
boﬁ
* 
dód_£rvîs
,

498 c⁄° *c⁄° *
keys
,

499 c⁄° 
size_t
 *
key_Àngth
,

500 
size_t
 
numbî_of_keys
)

502 
memˇched_ªtu∫_t
 
rc

MEMCACHED_NOTFOUND
;

503 
uöt32_t
 
°¨t
= 0;

504 
uöt64_t
 
øndomize_ªad

	`memˇched_behavi‹_gë
(
±r
, 
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
);

506 i‡(
øndomize_ªad
)

507 
°¨t
(
uöt32_t
)
	`øndom
(Ë% (uöt32_t)(
±r
->
numbî_of_ª∂iˇs
 + 1);

510 
uöt32_t
 
ª∂iˇ
0;Ñïliˇ <
±r
->
numbî_of_ª∂iˇs
; ++replica)

512 
boﬁ
 
suc˚ss

åue
;

514 
uöt32_t
 
x
0; x < 
numbî_of_keys
; ++x)

516 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

518 i‡(
hash
[
x
] =
	`memˇched_£rvî_cou¡
(
±r
))

521 
uöt32_t
 
£rvî

hash
[
x
] + 
ª∂iˇ
;

524 i‡(
øndomize_ªad
 && ((
£rvî
 + 
°¨t
Ë<(
hash
[
x
] + 
±r
->
numbî_of_ª∂iˇs
)))

525 
£rvî
 +
°¨t
;

527 
£rvî
 >
	`memˇched_£rvî_cou¡
(
±r
))

528 
£rvî
 -
	`memˇched_£rvî_cou¡
(
±r
);

530 i‡(
dód_£rvîs
[
£rvî
])

533 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
£rvî
);

535 i‡(
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
) == 0)

537 
rc

	`memˇched_c⁄√˘
(
ö°™˚
);

538 i‡(
rc
 !
MEMCACHED_SUCCESS
)

540 
	`memˇched_io_ª£t
(
ö°™˚
);

541 
dód_£rvîs
[
£rvî
]
åue
;

542 
suc˚ss

Ál£
;

547 
¥Ÿocﬁ_bö¨y_ªque°_gëk
 
ªque°
= {

548 .
mesßge
.
hódî
.
ªque°
= {

549 .
magic

PROTOCOL_BINARY_REQ
,

550 .
›code

PROTOCOL_BINARY_CMD_GETK
,

551 .
keyÀn

	`ht⁄s
((
uöt16_t
)(
key_Àngth
[
x
] + 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
))),

552 .
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
,

553 .
bodyÀn

	`ht⁄l
((
uöt32_t
)(
key_Àngth
[
x
] + 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
)))

567 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

569 { .
Àngth
(
ªque°
.
byãs
), .
buf„r
=Ñequest.bytes },

570 { .
Àngth

	`memˇched_¨øy_size
(
±r
->
¥efix_key
), .
buf„r

	`memˇched_¨øy_°rög
(ptr->prefix_key) },

571 { .
Àngth

key_Àngth
[
x
], .
buf„r

keys
[x] }

574 i‡(
	`memˇched_io_wrôev
(
ö°™˚
, 
ve˘‹
, 3, 
åue
) == -1)

576 
	`memˇched_io_ª£t
(
ö°™˚
);

577 
dód_£rvîs
[
£rvî
]
åue
;

578 
suc˚ss

Ál£
;

582 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
ö°™˚
);

583 
hash
[
x
]
	`memˇched_£rvî_cou¡
(
±r
);

586 i‡(
suc˚ss
)

590  
rc
;

591 
	}
}

593 
memˇched_ªtu∫_t
 
	$bö¨y_mgë_by_key
(
memˇched_°
 *
±r
,

594 
uöt32_t
 
ma°î_£rvî_key
,

595 
boﬁ
 
is_group_key_£t
,

596 c⁄° * c⁄° *
keys
,

597 c⁄° 
size_t
 *
key_Àngth
,

598 
size_t
 
numbî_of_keys
,

599 
boﬁ
 
mgë_mode
)

601 
memˇched_ªtu∫_t
 
rc
;

603 i‡(
±r
->
numbî_of_ª∂iˇs
 == 0)

605 
rc

	`sim∂e_bö¨y_mgë
(
±r
, 
ma°î_£rvî_key
, 
is_group_key_£t
,

606 
keys
, 
key_Àngth
, 
numbî_of_keys
, 
mgë_mode
);

610 
uöt32_t
* 
hash
;

611 
boﬁ
* 
dód_£rvîs
;

613 
hash

	`libmemˇched_mÆloc
(
±r
, (
uöt32_t
Ë* 
numbî_of_keys
);

614 
dód_£rvîs

	`libmemˇched_ˇŒoc
(
±r
, 
	`memˇched_£rvî_cou¡
’å), (
boﬁ
));

616 i‡(
hash
 =
NULL
 || 
dód_£rvîs
 == NULL)

618 
	`libmemˇched_‰ì
(
±r
, 
hash
);

619 
	`libmemˇched_‰ì
(
±r
, 
dód_£rvîs
);

620  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

623 i‡(
is_group_key_£t
)

625 
size_t
 
x
0; x < 
numbî_of_keys
; x++)

627 
hash
[
x
]
ma°î_£rvî_key
;

632 
size_t
 
x
0; x < 
numbî_of_keys
; x++)

634 
hash
[
x
]
	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
keys
[x], 
key_Àngth
[x]);

638 
rc

	`ª∂iˇti⁄_bö¨y_mgë
(
±r
, 
hash
, 
dód_£rvîs
, 
keys
,

639 
key_Àngth
, 
numbî_of_keys
);

641 
	`libmemˇched_‰ì
(
±r
, 
hash
);

642 
	`libmemˇched_‰ì
(
±r
, 
dód_£rvîs
);

644  
MEMCACHED_SUCCESS
;

647  
rc
;

648 
	}
}

	@libmemcached/get.h

12 #i‚de‡
__LIBMEMCACHED_GET_H__


13 
	#__LIBMEMCACHED_GET_H__


	)

15 #ifde‡
__˝lu•lus


20 
LIBMEMCACHED_API


21 *
memˇched_gë
(
memˇched_°
 *
±r
,

22 c⁄° *
key
, 
size_t
 
key_Àngth
,

23 
size_t
 *
vÆue_Àngth
,

24 
uöt32_t
 *
Êags
,

25 
memˇched_ªtu∫_t
 *
îr‹
);

27 
LIBMEMCACHED_API


28 
memˇched_ªtu∫_t
 
memˇched_mgë
(
memˇched_°
 *
±r
,

29 c⁄° * c⁄° *
keys
,

30 c⁄° 
size_t
 *
key_Àngth
,

31 
size_t
 
numbî_of_keys
);

33 
LIBMEMCACHED_API


34 *
memˇched_gë_by_key
(
memˇched_°
 *
±r
,

35 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

36 c⁄° *
key
, 
size_t
 
key_Àngth
,

37 
size_t
 *
vÆue_Àngth
,

38 
uöt32_t
 *
Êags
,

39 
memˇched_ªtu∫_t
 *
îr‹
);

41 
LIBMEMCACHED_API


42 
memˇched_ªtu∫_t
 
memˇched_mgë_by_key
(
memˇched_°
 *
±r
,

43 c⁄° *
group_key
,

44 
size_t
 
group_key_Àngth
,

45 c⁄° * c⁄° *
keys
,

46 c⁄° 
size_t
 *
key_Àngth
,

47 c⁄° 
size_t
 
numbî_of_keys
);

49 
LIBMEMCACHED_API


50 *
memˇched_„tch
(
memˇched_°
 *
±r
,

51 *
key
,

52 
size_t
 *
key_Àngth
,

53 
size_t
 *
vÆue_Àngth
,

54 
uöt32_t
 *
Êags
,

55 
memˇched_ªtu∫_t
 *
îr‹
);

57 
LIBMEMCACHED_API


58 
memˇched_ªsu…_°
 *
memˇched_„tch_ªsu…
(
memˇched_°
 *
±r
,

59 
memˇched_ªsu…_°
 *
ªsu…
,

60 
memˇched_ªtu∫_t
 *
îr‹
);

62 
LIBMEMCACHED_API


63 
memˇched_ªtu∫_t
 
memˇched_mgë_execuã
(
memˇched_°
 *
±r
,

64 c⁄° * c⁄° *
keys
,

65 c⁄° 
size_t
 *
key_Àngth
,

66 c⁄° 
size_t
 
numbî_of_keys
,

67 
memˇched_execuã_‚
 *
ˇŒback
,

68 *
c⁄ãxt
,

69 c⁄° 
uöt32_t
 
numbî_of_ˇŒbacks
);

71 
LIBMEMCACHED_API


72 
memˇched_ªtu∫_t
 
memˇched_mgë_execuã_by_key
(
memˇched_°
 *
±r
,

73 c⁄° *
group_key
,

74 
size_t
 
group_key_Àngth
,

75 c⁄° * c⁄° *
keys
,

76 c⁄° 
size_t
 *
key_Àngth
,

77 
size_t
 
numbî_of_keys
,

78 
memˇched_execuã_‚
 *
ˇŒback
,

79 *
c⁄ãxt
,

80 c⁄° 
uöt32_t
 
numbî_of_ˇŒbacks
);

82 #ifde‡
__˝lu•lus


	@libmemcached/hash.c

39 
	~<libmemˇched/comm⁄.h
>

40 
	~<libmemˇched/vútuÆ_buckë.h
>

43 
uöt32_t
 
	$memˇched_gíî©e_hash_vÆue
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
memˇched_hash_t
 
hash_Æg‹ôhm
)

45  
	`libhashkô_dige°
(
key
, 
key_Àngth
, (
hashkô_hash_Æg‹ôhm_t
)
hash_Æg‹ôhm
);

46 
	}
}

48 
ölöe
 
uöt32_t
 
	$gíî©e_hash
(c⁄° 
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
)

50  
	`hashkô_dige°
(&
±r
->
hashkô
, 
key
, 
key_Àngth
);

51 
	}
}

53 
uöt32_t
 
	$di•©ch_ho°
(c⁄° 
memˇched_°
 *
±r
, 
uöt32_t
 
hash
)

55 
±r
->
di°ributi⁄
)

57 
MEMCACHED_DISTRIBUTION_CONSISTENT
:

58 
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
:

59 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
:

60 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
:

62 
uöt32_t
 
num

±r
->
këama
.
c⁄töuum_poöts_cou¡î
;

63 
	`WATCHPOINT_ASSERT
(
±r
->
c⁄töuum
);

65 
hash
= hash;

66 
memˇched_c⁄töuum_ôem_°
 *
begö
, *
íd
, *
À·
, *
right
, *
middÀ
;

67 
begö

À·

±r
->
këama
.
c⁄töuum
;

68 
íd

right

±r
->
këama
.
c⁄töuum
 + 
num
;

70 
À·
 < 
right
)

72 
middÀ

À·
 + (
right
 -Üeft) / 2;

73 i‡(
middÀ
->
vÆue
 < 
hash
)

74 
À·

middÀ
 + 1;

76 
right

middÀ
;

78 i‡(
right
 =
íd
)

79 
right

begö
;

80  
right
->
ödex
;

82 
MEMCACHED_DISTRIBUTION_MODULA
:

83  
hash
 % 
	`memˇched_£rvî_cou¡
(
±r
);

84 
MEMCACHED_DISTRIBUTION_RANDOM
:

85  (
uöt32_t
Ë
	`øndom
(Ë% 
	`memˇched_£rvî_cou¡
(
±r
);

86 
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
:

88  
	`memˇched_vútuÆ_buckë_gë
(
±r
, 
hash
);

91 
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
:

92 
	`WATCHPOINT_ASSERT
(0);

93  
hash
 % 
	`memˇched_£rvî_cou¡
(
±r
);

96 
	}
}

101 
ölöe
 
uöt32_t
 
	$_gíî©e_hash_wøµî
(c⁄° 
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
)

103 
	`WATCHPOINT_ASSERT
(
	`memˇched_£rvî_cou¡
(
±r
));

105 i‡(
	`memˇched_£rvî_cou¡
(
±r
) == 1)

108 i‡(
±r
->
Êags
.
hash_wôh_¥efix_key
)

110 
size_t
 
ãmp_Àngth

	`memˇched_¨øy_size
(
±r
->
¥efix_key
Ë+ 
key_Àngth
;

111 
ãmp
[
ãmp_Àngth
];

113 i‡(
ãmp_Àngth
 > 
MEMCACHED_MAX_KEY
 -1)

116 
	`°∫˝y
(
ãmp
, 
	`memˇched_¨øy_°rög
(
±r
->
¥efix_key
), 
	`memˇched_¨øy_size
(ptr->prefix_key));

117 
	`°∫˝y
(
ãmp
 + 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
), 
key
, 
key_Àngth
);

119  
	`gíî©e_hash
(
±r
, 
ãmp
, 
ãmp_Àngth
);

123  
	`gíî©e_hash
(
±r
, 
key
, 
key_Àngth
);

125 
	}
}

127 
ölöe
 
	$_ªgí_f‹_auto_eje˘
(
memˇched_°
 *
±r
)

129 i‡(
	`_is_auto_eje˘_ho°
(
±r
Ë&&Öå->
këama
.
√xt_di°ributi⁄_ªbuûd
)

131 
timevÆ
 
now
;

133 i‡(
	`gëtimeofday
(&
now
, 
NULL
) == 0 &&

134 
now
.
tv_£c
 > 
±r
->
këama
.
√xt_di°ributi⁄_ªbuûd
)

136 
	`run_di°ributi⁄
(
±r
);

139 
	}
}

141 
	$memˇched_aut€je˘
(
memˇched_°
 *
±r
)

143 
	`_ªgí_f‹_auto_eje˘
(
±r
);

144 
	}
}

146 
uöt32_t
 
	$memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
)

148 
uöt32_t
 
hash

	`_gíî©e_hash_wøµî
(
±r
, 
key
, 
key_Àngth
);

150 
	`_ªgí_f‹_auto_eje˘
(
±r
);

152  
	`di•©ch_ho°
(
±r
, 
hash
);

153 
	}
}

155 
uöt32_t
 
	$memˇched_gíî©e_hash
(c⁄° 
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
)

157  
	`di•©ch_ho°
(
±r
, 
	`_gíî©e_hash_wøµî
’å, 
key
, 
key_Àngth
));

158 
	}
}

160 c⁄° 
hashkô_°
 *
	$memˇched_gë_hashkô
(c⁄° 
memˇched_°
 *
±r
)

162  &
±r
->
hashkô
;

163 
	}
}

165 
memˇched_ªtu∫_t
 
	$memˇched_£t_hashkô
(
memˇched_°
 *
£lf
, 
hashkô_°
 *
hashk
)

167 
	`hashkô_‰ì
(&
£lf
->
hashkô
);

168 
	`hashkô_˛⁄e
(&
£lf
->
hashkô
, 
hashk
);

170  
MEMCACHED_SUCCESS
;

171 
	}
}

173 c⁄° * 
	$libmemˇched_°rög_hash
(
memˇched_hash_t
 
ty≥
)

175  
	`libhashkô_°rög_hash
((
hashkô_hash_Æg‹ôhm_t
)
ty≥
);

176 
	}
}

	@libmemcached/hash.h

38 #i‚de‡
__MEMCACHED_HASH_H__


39 
	#__MEMCACHED_HASH_H__


	)

41 #ifde‡
__˝lu•lus


46 
LIBMEMCACHED_API


47 
uöt32_t
 
memˇched_gíî©e_hash_vÆue
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
memˇched_hash_t
 
hash_Æg‹ôhm
);

49 
LIBMEMCACHED_API


50 c⁄° 
hashkô_°
 *
memˇched_gë_hashkô
(c⁄° 
memˇched_°
 *
±r
);

52 
LIBMEMCACHED_API


53 
memˇched_ªtu∫_t
 
memˇched_£t_hashkô
(
memˇched_°
 *
±r
, 
hashkô_°
 *
hashk
);

55 
LIBMEMCACHED_API


56 
uöt32_t
 
memˇched_gíî©e_hash
(c⁄° 
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
);

58 
LIBMEMCACHED_LOCAL


59 
uöt32_t
 
memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
);

61 
LIBMEMCACHED_API


62 
memˇched_aut€je˘
(
memˇched_°
 *
±r
);

64 
LIBMEMCACHED_API


65 c⁄° * 
libmemˇched_°rög_hash
(
memˇched_hash_t
 
ty≥
);

67 #ifde‡
__˝lu•lus


	@libmemcached/hosts.c

12 
	~"comm⁄.h
"

13 
	~<m©h.h
>

16 
memˇched_ªtu∫_t
 
£rvî_add
(
memˇched_°
 *
±r
, c⁄° *
ho°«me
,

17 
ö_p‹t_t
 
p‹t
,

18 
uöt32_t
 
weight
,

19 
memˇched_c⁄√˘i⁄_t
 
ty≥
);

21 
memˇched_ªtu∫_t
 
upd©e_c⁄töuum
(
memˇched_°
 *
±r
);

23 
	$com∑ª_£rvîs
(c⁄° *
p1
, c⁄° *
p2
)

25 
ªtu∫_vÆue
;

26 
memˇched_£rvî_ö°™˚_°
 
a
(memˇched_£rvî_ö°™˚_°)
p1
;

27 
memˇched_£rvî_ö°™˚_°
 
b
(memˇched_£rvî_ö°™˚_°)
p2
;

29 
ªtu∫_vÆue

	`°rcmp
(
a
->
ho°«me
, 
b
->hostname);

31 i‡(
ªtu∫_vÆue
 == 0)

33 
ªtu∫_vÆue
(Ë(
a
->
p‹t
 - 
b
->port);

36  
ªtu∫_vÆue
;

37 
	}
}

39 
	$s‹t_ho°s
(
memˇched_°
 *
±r
)

41 i‡(
	`memˇched_£rvî_cou¡
(
±r
))

43 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

45 
	`qs‹t
(
	`memˇched_£rvî_li°
(
±r
), 
	`memˇched_£rvî_cou¡
’å), (
memˇched_£rvî_°
), 
com∑ª_£rvîs
);

46 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 0);

47 
ö°™˚
->
numbî_of_ho°s

	`memˇched_£rvî_cou¡
(
±r
);

49 
	}
}

52 
memˇched_ªtu∫_t
 
	$run_di°ributi⁄
(
memˇched_°
 *
±r
)

54 i‡(
±r
->
Êags
.
u£_s‹t_ho°s
)

55 
	`s‹t_ho°s
(
±r
);

57 
±r
->
di°ributi⁄
)

59 
MEMCACHED_DISTRIBUTION_CONSISTENT
:

60 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
:

61 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
:

62 
MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED
:

63  
	`upd©e_c⁄töuum
(
±r
);

64 
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
:

65 
MEMCACHED_DISTRIBUTION_MODULA
:

67 
MEMCACHED_DISTRIBUTION_RANDOM
:

68 
	`§™dom
((
uöt32_t
Ë
	`time
(
NULL
));

70 
MEMCACHED_DISTRIBUTION_CONSISTENT_MAX
:

72 
	`WATCHPOINT_ASSERT
(0);

75  
MEMCACHED_SUCCESS
;

76 
	}
}

78 
uöt32_t
 
	$këama_£rvî_hash
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
uöt32_t
 
Æignmít
)

80 
ªsu…s
[16];

82 
	`libhashkô_md5_sig«tuª
((*)
key
, 
key_Àngth
, 
ªsu…s
);

84  ((
uöt32_t
Ë(
ªsu…s
[3 + 
Æignmít
 * 4] & 0xFF) << 24)

85 | ((
uöt32_t
Ë(
ªsu…s
[2 + 
Æignmít
 * 4] & 0xFF) << 16)

86 | ((
uöt32_t
Ë(
ªsu…s
[1 + 
Æignmít
 * 4] & 0xFF) << 8)

87 | (
ªsu…s
[0 + 
Æignmít
 * 4] & 0xFF);

88 
	}
}

90 
	$c⁄töuum_ôem_cmp
(c⁄° *
t1
, c⁄° *
t2
)

92 
memˇched_c⁄töuum_ôem_°
 *
˘1
(memˇched_c⁄töuum_ôem_° *)
t1
;

93 
memˇched_c⁄töuum_ôem_°
 *
˘2
(memˇched_c⁄töuum_ôem_° *)
t2
;

96 
	`WATCHPOINT_ASSERT
(
˘1
->
vÆue
 != 153);

97 i‡(
˘1
->
vÆue
 =
˘2
->value)

99 i‡(
˘1
->
vÆue
 > 
˘2
->value)

103 
	}
}

105 
memˇched_ªtu∫_t
 
	$upd©e_c⁄töuum
(
memˇched_°
 *
±r
)

107 
uöt32_t
 
c⁄töuum_ödex
= 0;

108 
memˇched_£rvî_°
 *
li°
;

109 
uöt32_t
 
poöãr_cou¡î
= 0;

110 
uöt32_t
 
poöãr_≥r_£rvî

MEMCACHED_POINTS_PER_SERVER
;

111 
uöt32_t
 
poöãr_≥r_hash
= 1;

112 
uöt32_t
 
live_£rvîs
= 0;

113 
timevÆ
 
now
;

115 i‡(
	`gëtimeofday
(&
now
, 
NULL
) != 0)

117 
	`memˇched_£t_î∫o
(
±r
, 
î∫o
, 
NULL
);

118  
MEMCACHED_ERRNO
;

121 
li°

	`memˇched_£rvî_li°
(
±r
);

124 
boﬁ
 
is_auto_eje˘ög

	`_is_auto_eje˘_ho°
(
±r
);

125 i‡(
is_auto_eje˘ög
)

127 
live_£rvîs
= 0;

128 
±r
->
këama
.
√xt_di°ributi⁄_ªbuûd
= 0;

129 
uöt32_t
 
ho°_ödex
0; ho°_ödex < 
	`memˇched_£rvî_cou¡
(
±r
); ++host_index)

131 i‡(
li°
[
ho°_ödex
].
√xt_ªåy
 <
now
.
tv_£c
)

132 
live_£rvîs
++;

135 i‡(
±r
->
këama
.
√xt_di°ributi⁄_ªbuûd
 =0 || 
li°
[
ho°_ödex
].
√xt_ªåy
 <Ötr->ketama.next_distribution_rebuild)

136 
±r
->
këama
.
√xt_di°ributi⁄_ªbuûd

li°
[
ho°_ödex
].
√xt_ªåy
;

142 
live_£rvîs

	`memˇched_£rvî_cou¡
(
±r
);

145 
uöt64_t
 
is_këama_weighãd

	`memˇched_behavi‹_gë
(
±r
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
);

146 
uöt32_t
 
poöts_≥r_£rvî
(uöt32_tË(
is_këama_weighãd
 ? 
MEMCACHED_POINTS_PER_SERVER_KETAMA
 : 
MEMCACHED_POINTS_PER_SERVER
);

148 i‡(
live_£rvîs
 == 0)

149  
MEMCACHED_SUCCESS
;

151 i‡(
live_£rvîs
 > 
±r
->
këama
.
c⁄töuum_cou¡
)

153 
memˇched_c⁄töuum_ôem_°
 *
√w_±r
;

155 
√w_±r

	`libmemˇched_ªÆloc
(
±r
,Öå->
këama
.
c⁄töuum
,

156 (
memˇched_c⁄töuum_ôem_°
Ë* (
live_£rvîs
 + 
MEMCACHED_CONTINUUM_ADDITION
Ë* 
poöts_≥r_£rvî
);

158 i‡(
√w_±r
 == 0)

159  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

161 
±r
->
këama
.
c⁄töuum

√w_±r
;

162 
±r
->
këama
.
c⁄töuum_cou¡

live_£rvîs
 + 
MEMCACHED_CONTINUUM_ADDITION
;

165 
uöt64_t
 
tŸÆ_weight
= 0;

166 i‡(
is_këama_weighãd
)

168 
uöt32_t
 
ho°_ödex
 = 0; ho°_ödex < 
	`memˇched_£rvî_cou¡
(
±r
); ++host_index)

170 i‡(! 
is_auto_eje˘ög
 || 
li°
[
ho°_ödex
].
√xt_ªåy
 <
now
.
tv_£c
)

172 
tŸÆ_weight
 +
li°
[
ho°_ödex
].
weight
;

177 
uöt32_t
 
ho°_ödex
0; ho°_ödex < 
	`memˇched_£rvî_cou¡
(
±r
); ++host_index)

179 i‡(
is_auto_eje˘ög
 && 
li°
[
ho°_ödex
].
√xt_ªåy
 > 
now
.
tv_£c
)

182 i‡(
is_këama_weighãd
)

184 
p˘
 = ()
li°
[
ho°_ödex
].
weight
 / ()
tŸÆ_weight
;

185 
poöãr_≥r_£rvî
(
uöt32_t
Ë((
	`Êo‹f
((Ë(
p˘
 * 
MEMCACHED_POINTS_PER_SERVER_KETAMA
 / 4 * ()
live_£rvîs
 + 0.0000000001))) * 4);

186 
poöãr_≥r_hash
= 4;

187 #ifde‡
DEBUG


188 
	`¥ötf
("ketama_weighted:%s|%d|%llu|%u\n",

189 
li°
[
ho°_ödex
].
ho°«me
,

190 
li°
[
ho°_ödex
].
p‹t
,

191 ()
li°
[
ho°_ödex
].
weight
,

192 
poöãr_≥r_£rvî
);

197 i‡(
±r
->
di°ributi⁄
 =
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
)

199 
uöt32_t
 
poöãr_ödex
= 0;

200 
poöãr_ödex
 < 
poöãr_≥r_£rvî
 / 
poöãr_≥r_hash
;

201 
poöãr_ödex
++)

203 
s‹t_ho°
[
MEMCACHED_MAX_HOST_SORT_LENGTH
]= "";

204 
s‹t_ho°_Àngth
;

208 
s‹t_ho°_Àngth

	`¢¥ötf
(
s‹t_ho°
, 
MEMCACHED_MAX_HOST_SORT_LENGTH
,

210 
li°
[
ho°_ödex
].
ho°«me
,

211 (
uöt32_t
)
li°
[
ho°_ödex
].
p‹t
,

212 
poöãr_ödex
);

214 i‡(
s‹t_ho°_Àngth
 >
MEMCACHED_MAX_HOST_SORT_LENGTH
 || sort_host_length < 0)

216  
MEMCACHED_FAILURE
;

218 #ifde‡
DEBUG


219 
	`¥ötf
("upd©e_c⁄töuum: key i†%s\n", 
s‹t_ho°
);

222 
	`WATCHPOINT_ASSERT
(
s‹t_ho°_Àngth
);

224 i‡(
is_këama_weighãd
)

226 
uöt32_t
 
x
0; x < 
poöãr_≥r_hash
; x++)

228 
uöt32_t
 
vÆue

	`këama_£rvî_hash
(
s‹t_ho°
, (
size_t
)
s‹t_ho°_Àngth
, 
x
);

229 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
].
ödex

ho°_ödex
;

230 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

235 
uöt32_t
 
vÆue

	`hashkô_dige°
(&
±r
->
di°ributi⁄_hashkô
, 
s‹t_ho°
, (
size_t
)
s‹t_ho°_Àngth
);

236 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
].
ödex

ho°_ödex
;

237 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

243 
uöt32_t
 
poöãr_ödex
= 1;

244 
poöãr_ödex
 <
poöãr_≥r_£rvî
 / 
poöãr_≥r_hash
;

245 
poöãr_ödex
++)

247 
s‹t_ho°
[
MEMCACHED_MAX_HOST_SORT_LENGTH
]= "";

248 
s‹t_ho°_Àngth
;

250 i‡(
li°
[
ho°_ödex
].
p‹t
 =
MEMCACHED_DEFAULT_PORT
)

252 
s‹t_ho°_Àngth

	`¢¥ötf
(
s‹t_ho°
, 
MEMCACHED_MAX_HOST_SORT_LENGTH
,

254 
li°
[
ho°_ödex
].
ho°«me
,

255 
poöãr_ödex
 - 1);

259 
s‹t_ho°_Àngth

	`¢¥ötf
(
s‹t_ho°
, 
MEMCACHED_MAX_HOST_SORT_LENGTH
,

261 
li°
[
ho°_ödex
].
ho°«me
,

262 (
uöt32_t
)
li°
[
ho°_ödex
].
p‹t
,

263 
poöãr_ödex
 - 1);

266 i‡(
s‹t_ho°_Àngth
 >
MEMCACHED_MAX_HOST_SORT_LENGTH
 || sort_host_length < 0)

268  
MEMCACHED_FAILURE
;

271 
	`WATCHPOINT_ASSERT
(
s‹t_ho°_Àngth
);

273 i‡(
is_këama_weighãd
)

275 
uöt32_t
 
x
 = 0; x < 
poöãr_≥r_hash
; x++)

277 
uöt32_t
 
vÆue

	`këama_£rvî_hash
(
s‹t_ho°
, (
size_t
)
s‹t_ho°_Àngth
, 
x
);

278 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
].
ödex

ho°_ödex
;

279 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

284 
uöt32_t
 
vÆue

	`hashkô_dige°
(&
±r
->
di°ributi⁄_hashkô
, 
s‹t_ho°
, (
size_t
)
s‹t_ho°_Àngth
);

285 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
].
ödex

ho°_ödex
;

286 
±r
->
këama
.
c⁄töuum
[
c⁄töuum_ödex
++].
vÆue
= value;

291 
poöãr_cou¡î
+
poöãr_≥r_£rvî
;

294 
	`WATCHPOINT_ASSERT
(
±r
);

295 
	`WATCHPOINT_ASSERT
(
±r
->
c⁄töuum
);

296 
	`WATCHPOINT_ASSERT
(
	`memˇched_£rvî_cou¡
(
±r
Ë* 
MEMCACHED_POINTS_PER_SERVER
 <
MEMCACHED_CONTINUUM_SIZE
);

297 
±r
->
këama
.
c⁄töuum_poöts_cou¡î

poöãr_cou¡î
;

298 
	`qs‹t
(
±r
->
këama
.
c⁄töuum
,Öå->këama.
c⁄töuum_poöts_cou¡î
, (
memˇched_c⁄töuum_ôem_°
), 
c⁄töuum_ôem_cmp
);

300 #ifde‡
DEBUG


301 
uöt32_t
 
poöãr_ödex
0; 
	`memˇched_£rvî_cou¡
(
±r
Ë&&Öoöãr_ödex < ((
live_£rvîs
 * 
MEMCACHED_POINTS_PER_SERVER
) - 1);Öointer_index++)

303 
	`WATCHPOINT_ASSERT
(
±r
->
c⁄töuum
[
poöãr_ödex
].
vÆue
 <=Ötr->continuum[pointer_index + 1].value);

307  
MEMCACHED_SUCCESS
;

308 
	}
}

311 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_push
(
memˇched_°
 *
±r
, c⁄° 
memˇched_£rvî_li°_°
 
li°
)

313 
uöt32_t
 
cou¡
;

314 
memˇched_£rvî_°
 *
√w_ho°_li°
;

316 i‡(! 
li°
)

317  
MEMCACHED_SUCCESS
;

319 
cou¡

	`memˇched_£rvî_li°_cou¡
(
li°
);

320 
√w_ho°_li°

	`libmemˇched_ªÆloc
(
±r
, 
	`memˇched_£rvî_li°
(ptr),

321 (
memˇched_£rvî_°
Ë* (
cou¡
 + 
	`memˇched_£rvî_cou¡
(
±r
)));

323 i‡(! 
√w_ho°_li°
)

324  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

326 
	`memˇched_£rvî_li°_£t
(
±r
, 
√w_ho°_li°
);

328 
uöt32_t
 
x
0; x < 
cou¡
; x++)

330 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

332 i‡((
±r
->
Êags
.
u£_udp
 && 
li°
[
x
].
ty≥
 !
MEMCACHED_CONNECTION_UDP
)

333 || ((
li°
[
x
].
ty≥
 =
MEMCACHED_CONNECTION_UDP
)

334 && ! (
±r
->
Êags
.
u£_udp
)) )

336  
MEMCACHED_INVALID_HOST_PROTOCOL
;

339 
	`WATCHPOINT_ASSERT
(
li°
[
x
].
ho°«me
[0] != 0);

341 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
	`memˇched_£rvî_cou¡
(ptr));

342 
	`WATCHPOINT_ASSERT
(
ö°™˚
);

345 
ö°™˚

	`memˇched_£rvî_¸óã_wôh
(
±r
, in°™˚, 
li°
[
x
].
ho°«me
,

346 
li°
[
x
].
p‹t
,Üi°[x].
weight
,Üi°[x].
ty≥
);

347 i‡(! 
ö°™˚
)

349  
	`memˇched_£t_îr‹
(
±r
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
NULL
);

351 
±r
->
numbî_of_ho°s
++;

356 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

357 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 0);

358 
ö°™˚
->
numbî_of_ho°s

	`memˇched_£rvî_cou¡
(
±r
);

361  
	`run_di°ributi⁄
(
±r
);

362 
	}
}

364 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_unix_sockë
(
memˇched_°
 *
±r
,

365 c⁄° *
fûíame
)

367  
	`memˇched_£rvî_add_unix_sockë_wôh_weight
(
±r
, 
fûíame
, 0);

368 
	}
}

370 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_unix_sockë_wôh_weight
(
memˇched_°
 *
±r
,

371 c⁄° *
fûíame
,

372 
uöt32_t
 
weight
)

374 i‡(! 
fûíame
)

375  
MEMCACHED_FAILURE
;

377  
	`£rvî_add
(
±r
, 
fûíame
, 0, 
weight
, 
MEMCACHED_CONNECTION_UNIX_SOCKET
);

378 
	}
}

380 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_udp
(
memˇched_°
 *
±r
,

381 c⁄° *
ho°«me
,

382 
ö_p‹t_t
 
p‹t
)

384  
	`memˇched_£rvî_add_udp_wôh_weight
(
±r
, 
ho°«me
, 
p‹t
, 0);

385 
	}
}

387 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_udp_wôh_weight
(
memˇched_°
 *
±r
,

388 c⁄° *
ho°«me
,

389 
ö_p‹t_t
 
p‹t
,

390 
uöt32_t
 
weight
)

392 i‡(! 
p‹t
)

393 
p‹t

MEMCACHED_DEFAULT_PORT
;

395 i‡(! 
ho°«me
)

396 
ho°«me
= "localhost";

398  
	`£rvî_add
(
±r
, 
ho°«me
, 
p‹t
, 
weight
, 
MEMCACHED_CONNECTION_UDP
);

399 
	}
}

401 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add
(
memˇched_°
 *
±r
,

402 c⁄° *
ho°«me
,

403 
ö_p‹t_t
 
p‹t
)

405  
	`memˇched_£rvî_add_wôh_weight
(
±r
, 
ho°«me
, 
p‹t
, 0);

406 
	}
}

408 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_wôh_weight
(
memˇched_°
 *
±r
,

409 c⁄° *
ho°«me
,

410 
ö_p‹t_t
 
p‹t
,

411 
uöt32_t
 
weight
)

413 i‡(! 
p‹t
)

414 
p‹t

MEMCACHED_DEFAULT_PORT
;

416 i‡(! 
ho°«me
)

417 
ho°«me
= "localhost";

419  
	`£rvî_add
(
±r
, 
ho°«me
, 
p‹t
, 
weight
, 
MEMCACHED_CONNECTION_TCP
);

420 
	}
}

422 
memˇched_ªtu∫_t
 
	$£rvî_add
(
memˇched_°
 *
±r
, c⁄° *
ho°«me
,

423 
ö_p‹t_t
 
p‹t
,

424 
uöt32_t
 
weight
,

425 
memˇched_c⁄√˘i⁄_t
 
ty≥
)

427 
memˇched_£rvî_°
 *
√w_ho°_li°
;

428 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

430 i‡–(
±r
->
Êags
.
u£_udp
 && 
ty≥
 !
MEMCACHED_CONNECTION_UDP
)

431 || ( (
ty≥
 =
MEMCACHED_CONNECTION_UDP
Ë&& (! 
±r
->
Êags
.
u£_udp
) ) )

432  
MEMCACHED_INVALID_HOST_PROTOCOL
;

434 
√w_ho°_li°

	`libmemˇched_ªÆloc
(
±r
, 
	`memˇched_£rvî_li°
(ptr),

435 (
memˇched_£rvî_°
Ë* (
±r
->
numbî_of_ho°s
 + 1));

437 i‡(
√w_ho°_li°
 =
NULL
)

438  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

440 
	`memˇched_£rvî_li°_£t
(
±r
, 
√w_ho°_li°
);

443 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
	`memˇched_£rvî_cou¡
(ptr));

444 ()
	`memˇched_£rvî_¸óã_wôh
(
±r
, 
ö°™˚
, 
ho°«me
, 
p‹t
, 
weight
, 
ty≥
);

445 
±r
->
numbî_of_ho°s
++;

447 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 0);

448 
	`memˇched_£rvîs_£t_cou¡
(
ö°™˚
, 
	`memˇched_£rvî_cou¡
(
±r
));

450  
	`run_di°ributi⁄
(
±r
);

451 
	}
}

453 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_add_∑r£d
(
memˇched_°
 *
±r
,

454 c⁄° *
ho°«me
,

455 
size_t
 
ho°«me_Àngth
,

456 
ö_p‹t_t
 
p‹t
,

457 
uöt32_t
 
weight
)

459 
buf„r
[
NI_MAXHOST
];

461 
	`mem˝y
(
buf„r
, 
ho°«me
, 
ho°«me_Àngth
);

462 
buf„r
[
ho°«me_Àngth
]= 0;

464  
	`£rvî_add
(
±r
, 
buf„r
,

465 
p‹t
,

466 
weight
,

467 
MEMCACHED_CONNECTION_TCP
);

468 
	}
}

	@libmemcached/initialize_query.cc

37 
	~<libmemˇched/comm⁄.h
>

38 
	~<libmemˇched/öôülize_quîy.h
>

40 
memˇched_ªtu∫_t
 
	$öôülize_quîy
(
memˇched_°
 *
£lf
)

42 i‡(! 
£lf
)

43  
MEMCACHED_INVALID_ARGUMENTS
;

45 i‡(
£lf
->
°©e
.
is_time_f‹_ªbuûd
)

47 
	`memˇched_ª£t
(
£lf
);

50 i‡(
	`memˇched_£rvî_cou¡
(
£lf
) == 0)

52  
	`memˇched_£t_îr‹
(
£lf
, 
MEMCACHED_NO_SERVERS
, 
NULL
);

56 
£lf
->
quîy_id
++;

58  
MEMCACHED_SUCCESS
;

59 
	}
}

61 
memˇched_ªtu∫_t
 
	$öôülize_c⁄°_quîy
(c⁄° 
memˇched_°
 *
£lf
)

63 i‡(! 
£lf
)

64  
MEMCACHED_INVALID_ARGUMENTS
;

66 i‡(
	`memˇched_£rvî_cou¡
(
£lf
) == 0)

68  
MEMCACHED_NO_SERVERS
;

71  
MEMCACHED_SUCCESS
;

72 
	}
}

	@libmemcached/initialize_query.h

37 #¥agm®
⁄˚


39 #ifde‡
__˝lu•lus


43 
LIBMEMCACHED_LOCAL


44 
memˇched_ªtu∫_t
 
öôülize_quîy
(
memˇched_°
 *
£lf
);

46 
LIBMEMCACHED_LOCAL


47 
memˇched_ªtu∫_t
 
öôülize_c⁄°_quîy
(c⁄° 
memˇched_°
 *
£lf
);

49 #ifde‡
__˝lu•lus


	@libmemcached/internal.h

12 #i‚de‡
__LIBMEMCACHED_INTERNAL_H__


13 
	#__LIBMEMCACHED_INTERNAL_H__


	)

15 #i‡
deföed
(
BUILDING_LIBMEMCACHED
)

17 #ifde‡
__˝lu•lus


21 #ifde‡
__˝lu•lus


	@libmemcached/io.c

40 
	~"libmemˇched/comm⁄.h
"

43 
	mMEM_READ
,

44 
	mMEM_WRITE


45 } 
	tmemc_ªad_‹_wrôe
;

47 
ssize_t
 
io_Êush
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

48 c⁄° 
boﬁ
 
wôh_Êush
,

49 
memˇched_ªtu∫_t
 *
îr‹
);

50 
ö¸emít_udp_mesßge_id
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
);

52 
memˇched_ªtu∫_t
 
	$io_waô
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

53 
memc_ªad_‹_wrôe
 
ªad_‹_wrôe
)

55 
pﬁlfd
 
fds
= {

56 .
fd

±r
->fd,

57 .
evíts
 = 
POLLIN


59 
îr‹
;

61 i‡(
ªad_‹_wrôe
 =
MEM_WRITE
)

63 
fds
.
evíts

POLLOUT
;

64 
	`WATCHPOINT_SET
(
±r
->
io_waô_cou¡
.
wrôe
++);

68 
	`WATCHPOINT_SET
(
±r
->
io_waô_cou¡
.
ªad
++);

79 i‡(
ªad_‹_wrôe
 =
MEM_WRITE
)

81 
memˇched_ªtu∫_t
 
rc

	`memˇched_purge
(
±r
);

82 i‡(
rc
 !
MEMCACHED_SUCCESS
 &&Ñ¯!
MEMCACHED_STORED
)

83  
MEMCACHED_FAILURE
;

86 
size_t
 
lo›_max
= 5;

87 --
lo›_max
)

89 
îr‹

	`pﬁl
(&
fds
, 1, 
±r
->
roŸ
->
pﬁl_timeout
);

91 
îr‹
)

94 
	`WATCHPOINT_IF_LABELED_NUMBER
(
ªad_‹_wrôe
 && 
lo›_max
 < 4, "read()Åimes we hadÅoÜoop, decremented down from 5",Üoop_max);

95 
	`WATCHPOINT_IF_LABELED_NUMBER
(!
ªad_‹_wrôe
 && 
lo›_max
 < 4, "write()Åimes we hadÅoÜoop, decremented down from 5",Üoop_max);

97  
MEMCACHED_SUCCESS
;

99  
MEMCACHED_TIMEOUT
;

101 
	`WATCHPOINT_ERRNO
(
	`gë_sockë_î∫o
());

102 
	`gë_sockë_î∫o
())

104 #ifde‡
TARGET_OS_LINUX


105 
ERESTART
:

107 
EINTR
:

110 i‡(
fds
.
ªvíts
 & 
POLLERR
)

112 
îr
;

113 
sockÀn_t
 
Àn
 (
îr
);

114 ()
	`gësock›t
(
±r
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
Àn
);

115 
±r
->
ˇched_î∫o
(
îr
 =0Ë? 
	`gë_sockë_î∫o
() :Érr;

119 
±r
->
ˇched_î∫o

	`gë_sockë_î∫o
();

121 
	`memˇched_quô_£rvî
(
±r
, 
åue
);

123  
MEMCACHED_FAILURE
;

129 
	`WATCHPOINT_ASSERT
(
îr‹
 == -1);

130 
±r
->
ˇched_î∫o

	`gë_sockë_î∫o
();

131 
	`memˇched_quô_£rvî
(
±r
, 
åue
);

133  
MEMCACHED_FAILURE
;

134 
	}
}

136 
memˇched_ªtu∫_t
 
	$memˇched_io_waô_f‹_wrôe
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
)

138  
	`io_waô
(
±r
, 
MEM_WRITE
);

139 
	}
}

147 
boﬁ
 
	$ª∑ck_öput_buf„r
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
)

149 i‡(
±r
->
ªad_±r
 !±r->
ªad_buf„r
)

154 
	`memmove
(
±r
->
ªad_buf„r
,Öå->
ªad_±r
,Öå->
ªad_buf„r_Àngth
);

155 
±r
->
ªad_±r
±r->
ªad_buf„r
;

156 
±r
->
ªad_d©a_Àngth
±r->
ªad_buf„r_Àngth
;

160 i‡(
±r
->
ªad_buf„r_Àngth
 !
MEMCACHED_MAX_BUFFER
)

163 
ssize_t
 
ƒ

	`ªcv
(
±r
->
fd
,

164 
±r
->
ªad_±r
 +Öå->
ªad_d©a_Àngth
,

165 
MEMCACHED_MAX_BUFFER
 - 
±r
->
ªad_d©a_Àngth
,

168 i‡(
ƒ
 > 0)

170 
±r
->
ªad_d©a_Àngth
+(
size_t
)
ƒ
;

171 
±r
->
ªad_buf„r_Àngth
+(
size_t
)
ƒ
;

172  
åue
;

175  
Ál£
;

176 
	}
}

188 
boﬁ
 
	$¥o˚ss_öput_buf„r
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
)

194 i‡(
±r
->
roŸ
->
ˇŒbacks
 !
NULL
 &&Öå->roŸ->
Êags
.
u£_udp
 =
Ál£
)

200 
memˇched_ˇŒback_°
 
cb
*
±r
->
roŸ
->
ˇŒbacks
;

202 
	`memˇched_£t_¥o˚ssög_öput
((
memˇched_°
 *)
±r
->
roŸ
, 
åue
);

204 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

205 
memˇched_ªtu∫_t
 
îr‹
;

206 
memˇched_°
 *
roŸ
(memˇched_° *)
±r
->root;

207 
îr‹

	`memˇched_ª•⁄£
(
±r
, 
buf„r
, (buffer),

208 &
roŸ
->
ªsu…
);

210 
	`memˇched_£t_¥o˚ssög_öput
(
roŸ
, 
Ál£
);

212 i‡(
îr‹
 =
MEMCACHED_SUCCESS
)

214 
x
0; x < 
cb
.
numbî_of_ˇŒback
; x++)

216 
îr‹
(*
cb
.
ˇŒback
[
x
])(
±r
->
roŸ
, &roŸ->
ªsu…
, cb.
c⁄ãxt
);

217 i‡(
îr‹
 !
MEMCACHED_SUCCESS
)

224  
åue
;

227  
Ál£
;

228 
	}
}

231 
	$memˇched_io_¥îód
(
memˇched_°
 *
±r
)

233 
x
;

237 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

239 i‡(
	`memˇched_£rvî_ª•⁄£_cou¡
(
±r
, 
x
) &&

240 
±r
->
ho°s
[
x
].
ªad_d©a_Àngth
 < 
MEMCACHED_MAX_BUFFER
 )

242 
size_t
 
d©a_ªad
;

244 
d©a_ªad

	`ªcv
(
±r
->
ho°s
[
x
].
fd
,

245 
±r
->
ho°s
[
x
].
ªad_±r
 +Öå->ho°s[x].
ªad_d©a_Àngth
,

246 
MEMCACHED_MAX_BUFFER
 - 
±r
->
ho°s
[
x
].
ªad_d©a_Àngth
, 0);

247 i‡(
d©a_ªad
 =
SOCKET_ERROR
)

250 
±r
->
ho°s
[
x
].
ªad_buf„r_Àngth
+
d©a_ªad
;

251 
±r
->
ho°s
[
x
].
ªad_d©a_Àngth
+
d©a_ªad
;

254 
	}
}

257 
memˇched_ªtu∫_t
 
	$memˇched_io_ªad
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

258 *
buf„r
, 
size_t
 
Àngth
, 
ssize_t
 *
ƒód
)

260 *
buf„r_±r
;

262 
buf„r_±r

buf„r
;

264 
Àngth
)

266 i‡(!
±r
->
ªad_buf„r_Àngth
)

268 
ssize_t
 
d©a_ªad
;

272 
d©a_ªad

	`ªcv
(
±r
->
fd
,Öå->
ªad_buf„r
, 
MEMCACHED_MAX_BUFFER
, 0);

273 i‡(
d©a_ªad
 > 0)

277 i‡(
d©a_ªad
 =
SOCKET_ERROR
)

279 
±r
->
ˇched_î∫o

	`gë_sockë_î∫o
();

280 
memˇched_ªtu∫_t
 
rc

MEMCACHED_ERRNO
;

281 
	`gë_sockë_î∫o
())

283 
EWOULDBLOCK
:

284 #ifde‡
USE_EAGAIN


285 
EAGAIN
:

287 
EINTR
:

288 #ifde‡
TARGET_OS_LINUX


289 
ERESTART
:

291 i‡((
rc

	`io_waô
(
±r
, 
MEM_READ
)Ë=
MEMCACHED_SUCCESS
)

297 
	`memˇched_quô_£rvî
(
±r
, 
åue
);

298 *
ƒód
= -1;

299  
rc
;

314 
	`WATCHPOINT_STRING
("We hadá zeroÜengthÑecv()");

315 
	`memˇched_quô_£rvî
(
±r
, 
åue
);

316 *
ƒód
= -1;

317  
MEMCACHED_UNKNOWN_READ_FAILURE
;

321 
±r
->
io_byãs_£¡
 = 0;

322 
±r
->
ªad_d©a_Àngth
(
size_t
Ë
d©a_ªad
;

323 
±r
->
ªad_buf„r_Àngth
(
size_t
Ë
d©a_ªad
;

324 
±r
->
ªad_±r
±r->
ªad_buf„r
;

327 i‡(
Àngth
 > 1)

329 
size_t
 
dif„ªn˚
;

331 
dif„ªn˚
(
Àngth
 > 
±r
->
ªad_buf„r_Àngth
) ?Ötr->read_buffer_length :Üength;

333 
	`mem˝y
(
buf„r_±r
, 
±r
->
ªad_±r
, 
dif„ªn˚
);

334 
Àngth
 -
dif„ªn˚
;

335 
±r
->
ªad_±r
+
dif„ªn˚
;

336 
±r
->
ªad_buf„r_Àngth
-
dif„ªn˚
;

337 
buf„r_±r
+
dif„ªn˚
;

341 *
buf„r_±r
*
±r
->
ªad_±r
;

342 
±r
->
ªad_±r
++;

343 
±r
->
ªad_buf„r_Àngth
--;

344 
buf„r_±r
++;

349 
±r
->
£rvî_Áûuª_cou¡î
= 0;

350 *
ƒód
 = (
ssize_t
)(
buf„r_±r
 - (*)
buf„r
);

351  
MEMCACHED_SUCCESS
;

352 
	}
}

354 
ssize_t
 
	$_io_wrôe
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

355 c⁄° *
buf„r
, 
size_t
 
Àngth
, 
boﬁ
 
wôh_Êush
)

357 
size_t
 
‹igöÆ_Àngth
;

358 c⁄° * 
buf„r_±r
;

360 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 !
INVALID_SOCKET
);

362 
‹igöÆ_Àngth

Àngth
;

363 
buf„r_±r

buf„r
;

365 
Àngth
)

367 *
wrôe_±r
;

368 
size_t
 
should_wrôe
;

369 
size_t
 
buf„r_íd
;

371 i‡(
±r
->
ty≥
 =
MEMCACHED_CONNECTION_UDP
)

374 
buf„r_íd

MAX_UDP_DATAGRAM_LENGTH
;

375 
should_wrôe

Àngth
;

376 i‡(
±r
->
wrôe_buf„r_off£t
 + 
should_wrôe
 > 
buf„r_íd
)

383 
buf„r_íd

MEMCACHED_MAX_BUFFER
;

384 
should_wrôe

buf„r_íd
 - 
±r
->
wrôe_buf„r_off£t
;

385 
should_wrôe
(should_wrôê< 
Àngth
) ? should_write :Üength;

388 
wrôe_±r

±r
->
wrôe_buf„r
 +Öå->
wrôe_buf„r_off£t
;

389 
	`mem˝y
(
wrôe_±r
, 
buf„r_±r
, 
should_wrôe
);

390 
±r
->
wrôe_buf„r_off£t
+
should_wrôe
;

391 
buf„r_±r
+
should_wrôe
;

392 
Àngth
-
should_wrôe
;

394 i‡(
±r
->
wrôe_buf„r_off£t
 =
buf„r_íd
 &&Öå->
ty≥
 !
MEMCACHED_CONNECTION_UDP
)

396 
memˇched_ªtu∫_t
 
rc
;

397 
ssize_t
 
£¡_Àngth
;

399 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 !
INVALID_SOCKET
);

400 
£¡_Àngth

	`io_Êush
(
±r
, 
wôh_Êush
, &
rc
);

401 i‡(
£¡_Àngth
 == -1)

407 
	`u∆ikñy
 (
£¡_Àngth
 != 0)

409 
	`WATCHPOINT_ASSERT
(
£¡_Àngth
 =(
ssize_t
)
buf„r_íd
);

414 i‡(
wôh_Êush
)

416 
memˇched_ªtu∫_t
 
rc
;

417 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 !
INVALID_SOCKET
);

418 i‡(
	`io_Êush
(
±r
, 
wôh_Êush
, &
rc
) == -1)

424  (
ssize_t
Ë
‹igöÆ_Àngth
;

425 
	}
}

427 
ssize_t
 
	$memˇched_io_wrôe
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

428 c⁄° *
buf„r
, 
size_t
 
Àngth
, 
boﬁ
 
wôh_Êush
)

430  
	`_io_wrôe
(
±r
, 
buf„r
, 
Àngth
, 
wôh_Êush
);

431 
	}
}

433 
ssize_t
 
	$memˇched_io_wrôev
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

434 c⁄° 
libmemˇched_io_ve˘‹_°
 *
ve˘‹
,

435 
size_t
 
numbî_of
, 
boﬁ
 
wôh_Êush
)

437 
ssize_t
 
tŸÆ
= 0;

439 
size_t
 
x
0; x < 
numbî_of
; x++, 
ve˘‹
++)

441 
ssize_t
 
ªtu∫abÀ
;

443 i‡((
ªtu∫abÀ

	`_io_wrôe
(
±r
, 
ve˘‹
->
buf„r
, ve˘‹->
Àngth
, 
Ál£
)) == -1)

447 
tŸÆ
+
ªtu∫abÀ
;

450 i‡(
wôh_Êush
)

452 i‡(
	`memˇched_io_wrôe
(
±r
, 
NULL
, 0, 
åue
) == -1)

458  
tŸÆ
;

459 
	}
}

462 
memˇched_ªtu∫_t
 
	$memˇched_io_˛o£
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
)

464 i‡(
±r
->
fd
 =
INVALID_SOCKET
)

466  
MEMCACHED_SUCCESS
;

470 i‡(
	`shutdown
(
±r
->
fd
, 
SHUT_RDWR
Ë=
SOCKET_ERROR
 && 
	`gë_sockë_î∫o
(Ë!
ENOTCONN
)

472 
	`WATCHPOINT_NUMBER
(
±r
->
fd
);

473 
	`WATCHPOINT_ERRNO
(
	`gë_sockë_î∫o
());

474 
	`WATCHPOINT_ASSERT
(
	`gë_sockë_î∫o
());

477 i‡(
	`˛o£sockë
(
±r
->
fd
Ë=
SOCKET_ERROR
)

479 
	`WATCHPOINT_ERRNO
(
	`gë_sockë_î∫o
());

482  
MEMCACHED_SUCCESS
;

483 
	}
}

485 
memˇched_£rvî_wrôe_ö°™˚_°
 
	$memˇched_io_gë_ªadabÀ_£rvî
(
memˇched_°
 *
memc
)

487 
	#MAX_SERVERS_TO_POLL
 100

	)

488 
pﬁlfd
 
fds
[
MAX_SERVERS_TO_POLL
];

489 
ho°_ödex
= 0;

491 
uöt32_t
 
x
= 0;

492 
x
< 
	`memˇched_£rvî_cou¡
(
memc
Ë&& 
ho°_ödex
 < 
MAX_SERVERS_TO_POLL
;

493 ++
x
)

495 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

496 
	`memˇched_£rvî_ö°™˚_„tch
(
memc
, 
x
);

498 i‡(
ö°™˚
->
ªad_buf„r_Àngth
 > 0)

499  
ö°™˚
;

501 i‡(
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
) > 0)

503 
fds
[
ho°_ödex
].
evíts
 = 
POLLIN
;

504 
fds
[
ho°_ödex
].
ªvíts
 = 0;

505 
fds
[
ho°_ödex
].
fd
 = 
ö°™˚
->fd;

506 ++
ho°_ödex
;

510 i‡(
ho°_ödex
 < 2)

513 
uöt32_t
 
x
0; x< 
	`memˇched_£rvî_cou¡
(
memc
); ++x)

515 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

516 
	`memˇched_£rvî_ö°™˚_„tch
(
memc
, 
x
);

518 i‡(
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
) > 0)

520  
ö°™˚
;

524  
NULL
;

527 
îr

	`pﬁl
(
fds
, 
ho°_ödex
, 
memc
->
pﬁl_timeout
);

528 
îr
) {

530 
	`memˇched_£t_î∫o
(
memc
, 
	`gë_sockë_î∫o
(), 
NULL
);

535 
size_t
 
x
0; x < 
ho°_ödex
; ++x)

537 i‡(
fds
[
x
].
ªvíts
 & 
POLLIN
)

539 
uöt32_t
 
y
0; y < 
	`memˇched_£rvî_cou¡
(
memc
); ++y)

541 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

542 
	`memˇched_£rvî_ö°™˚_„tch
(
memc
, 
y
);

544 i‡(
ö°™˚
->
fd
 =
fds
[
x
].fd)

545  
ö°™˚
;

551  
NULL
;

552 
	}
}

554 
ssize_t
 
	$io_Êush
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

555 c⁄° 
boﬁ
 
wôh_Êush
,

556 
memˇched_ªtu∫_t
 *
îr‹
)

564 
memˇched_ªtu∫_t
 
rc
;

565 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 !
INVALID_SOCKET
);

566 
rc

	`memˇched_purge
(
±r
);

568 i‡(
rc
 !
MEMCACHED_SUCCESS
 &&Ñ¯!
MEMCACHED_STORED
)

573 
ssize_t
 
£¡_Àngth
;

574 
size_t
 
ªtu∫_Àngth
;

575 *
loˇl_wrôe_±r

±r
->
wrôe_buf„r
;

576 
size_t
 
wrôe_Àngth

±r
->
wrôe_buf„r_off£t
;

578 *
îr‹

MEMCACHED_SUCCESS
;

580 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 !
INVALID_SOCKET
);

583 i‡(
±r
->
ty≥
 =
MEMCACHED_CONNECTION_UDP
 && 
wrôe_Àngth
 > 
MAX_UDP_DATAGRAM_LENGTH
)

588 i‡(
±r
->
wrôe_buf„r_off£t
 =0 || (±r->
ty≥
 =
MEMCACHED_CONNECTION_UDP


589 && 
±r
->
wrôe_buf„r_off£t
 =
UDP_DATAGRAM_HEADER_LENGTH
))

593 #i‡
	`deföed
(
DEBUG
)

594 i‡(
wrôe_Àngth
 =
MEMCACHED_MAX_BUFFER
)

595 
	`WATCHPOINT_ASSERT
(
±r
->
wrôe_buf„r
 =
loˇl_wrôe_±r
);

596 
	`WATCHPOINT_ASSERT
((
±r
->
wrôe_buf„r
 + 
MEMCACHED_MAX_BUFFER
Ë>(
loˇl_wrôe_±r
 + 
wrôe_Àngth
));

599 
ªtu∫_Àngth
= 0;

600 
wrôe_Àngth
)

602 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 !
INVALID_SOCKET
);

603 
	`WATCHPOINT_ASSERT
(
wrôe_Àngth
 > 0);

604 
£¡_Àngth
= 0;

605 i‡(
±r
->
ty≥
 =
MEMCACHED_CONNECTION_UDP
)

606 
	`ö¸emít_udp_mesßge_id
(
±r
);

608 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 !
INVALID_SOCKET
);

609 i‡(
wôh_Êush
)

611 
£¡_Àngth

	`£nd
(
±r
->
fd
, 
loˇl_wrôe_±r
, 
wrôe_Àngth
, 
MSG_NOSIGNAL
|
MSG_DONTWAIT
);

615 
£¡_Àngth

	`£nd
(
±r
->
fd
, 
loˇl_wrôe_±r
, 
wrôe_Àngth
, 
MSG_NOSIGNAL
|
MSG_DONTWAIT
|
MSG_MORE
);

618 i‡(
£¡_Àngth
 =
SOCKET_ERROR
)

620 
±r
->
ˇched_î∫o

	`gë_sockë_î∫o
();

622 
	`WATCHPOINT_ERRNO
(
	`gë_sockë_î∫o
());

623 
	`WATCHPOINT_NUMBER
(
	`gë_sockë_î∫o
());

625 
	`gë_sockë_î∫o
())

627 
ENOBUFS
:

629 
EWOULDBLOCK
:

630 #ifde‡
USE_EAGAIN


631 
EAGAIN
:

640 i‡(
	`ª∑ck_öput_buf„r
(
±r
) ||

641 
	`¥o˚ss_öput_buf„r
(
±r
))

644 
memˇched_ªtu∫_t
 
rc
;

645 
rc

	`io_waô
(
±r
, 
MEM_WRITE
);

647 i‡(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_TIMEOUT
)

650 
	`memˇched_quô_£rvî
(
±r
, 
åue
);

653 
ENOTCONN
:

654 
EPIPE
:

656 
	`memˇched_quô_£rvî
(
±r
, 
åue
);

657 *
îr‹

MEMCACHED_ERRNO
;

658 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 == -1);

663 i‡(
±r
->
ty≥
 =
MEMCACHED_CONNECTION_UDP
 &&

664 (
size_t
)
£¡_Àngth
 !
wrôe_Àngth
)

666 
	`memˇched_quô_£rvî
(
±r
, 
åue
);

670 
±r
->
io_byãs_£¡
 +(
uöt32_t
Ë
£¡_Àngth
;

672 
loˇl_wrôe_±r
+
£¡_Àngth
;

673 
wrôe_Àngth
-(
uöt32_t
Ë
£¡_Àngth
;

674 
ªtu∫_Àngth
+(
uöt32_t
Ë
£¡_Àngth
;

677 
	`WATCHPOINT_ASSERT
(
wrôe_Àngth
 == 0);

683 i‡(
±r
->
ty≥
 =
MEMCACHED_CONNECTION_UDP
)

684 
±r
->
wrôe_buf„r_off£t

UDP_DATAGRAM_HEADER_LENGTH
;

686 
±r
->
wrôe_buf„r_off£t
= 0;

688  (
ssize_t
Ë
ªtu∫_Àngth
;

689 
	}
}

694 
	$memˇched_io_ª£t
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
)

696 
	`memˇched_quô_£rvî
(
±r
, 
åue
);

697 
	}
}

703 
memˇched_ªtu∫_t
 
	$memˇched_ß„_ªad
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

704 *
dè
,

705 
size_t
 
size
)

707 
size_t
 
off£t
= 0;

708 *
d©a

dè
;

710 
off£t
 < 
size
)

712 
ssize_t
 
ƒód
;

713 
memˇched_ªtu∫_t
 
rc

	`memˇched_io_ªad
(
±r
, 
d©a
 + 
off£t
, 
size
 - offset,

714 &
ƒód
);

715 i‡(
rc
 !
MEMCACHED_SUCCESS
)

716  
rc
;

718 
off£t
+(
size_t
Ë
ƒód
;

721  
MEMCACHED_SUCCESS
;

722 
	}
}

724 
memˇched_ªtu∫_t
 
	$memˇched_io_ªadlöe
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

725 *
buf„r_±r
,

726 
size_t
 
size
)

728 
boﬁ
 
löe_com∂ëe

Ál£
;

729 
size_t
 
tŸÆ_ƒ
= 0;

731 !
löe_com∂ëe
)

733 i‡(
±r
->
ªad_buf„r_Àngth
 == 0)

740 
ssize_t
 
ƒód
;

741 
memˇched_ªtu∫_t
 
rc

	`memˇched_io_ªad
(
±r
, 
buf„r_±r
, 1, &
ƒód
);

742 i‡(
rc
 !
MEMCACHED_SUCCESS
)

743  
rc
;

745 i‡(*
buf„r_±r
 == '\n')

746 
löe_com∂ëe

åue
;

748 ++
buf„r_±r
;

749 ++
tŸÆ_ƒ
;

753 
±r
->
ªad_buf„r_Àngth
 && 
tŸÆ_ƒ
 < 
size
 && !
löe_com∂ëe
)

755 *
buf„r_±r
 = *
±r
->
ªad_±r
;

756 i‡(*
buf„r_±r
 == '\n')

757 
löe_com∂ëe
 = 
åue
;

758 --
±r
->
ªad_buf„r_Àngth
;

759 ++
±r
->
ªad_±r
;

760 ++
tŸÆ_ƒ
;

761 ++
buf„r_±r
;

764 i‡(
tŸÆ_ƒ
 =
size
)

765  
MEMCACHED_PROTOCOL_ERROR
;

768  
MEMCACHED_SUCCESS
;

769 
	}
}

782 
	$ö¸emít_udp_mesßge_id
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
)

784 
udp_d©agøm_hódî_°
 *
hódî
(udp_d©agøm_hódî_° *)
±r
->
wrôe_buf„r
;

785 
uöt16_t
 
cur_ªq

	`gë_udp_d©agøm_ªque°_id
(
hódî
);

786 
msg_num

	`gë_msg_num_‰om_ªque°_id
(
cur_ªq
);

787 
thªad_id

	`gë_thªad_id_‰om_ªque°_id
(
cur_ªq
);

789 i‡(((++
msg_num
Ë& 
UDP_REQUEST_ID_THREAD_MASK
) != 0)

790 
msg_num
= 0;

792 
hódî
->
ªque°_id

	`ht⁄s
((
uöt16_t
Ë(
thªad_id
 | 
msg_num
));

793 
	}
}

795 
memˇched_ªtu∫_t
 
	$memˇched_io_öô_udp_hódî
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
, 
uöt16_t
 
thªad_id
)

797 i‡(
thªad_id
 > 
UDP_REQUEST_ID_MAX_THREAD_ID
)

798  
MEMCACHED_FAILURE
;

800 
udp_d©agøm_hódî_°
 *
hódî
(udp_d©agøm_hódî_° *)
±r
->
wrôe_buf„r
;

801 
hódî
->
ªque°_id

	`ht⁄s
((
uöt16_t
Ë(
	`gíî©e_udp_ªque°_thªad_id
(
thªad_id
)));

802 
hódî
->
num_d©agøms

	`ht⁄s
(1);

803 
hódî
->
£quí˚_numbî

	`ht⁄s
(0);

805  
MEMCACHED_SUCCESS
;

806 
	}
}

	@libmemcached/io.h

39 #i‚de‡
__LIBMEMCACHED_IO_H__


40 
	#__LIBMEMCACHED_IO_H__


	)

42 #i‡
deföed
(
BUILDING_LIBMEMCACHED
)

44 
	~"libmemˇched/memˇched.h
"

46 
	#MAX_UDP_DATAGRAM_LENGTH
 1400

	)

47 
	#UDP_DATAGRAM_HEADER_LENGTH
 8

	)

48 
	#UDP_REQUEST_ID_MSG_SIG_DIGITS
 10

	)

49 
	#UDP_REQUEST_ID_THREAD_MASK
 0xFFFF << 
UDP_REQUEST_ID_MSG_SIG_DIGITS


	)

50 
	#gë_udp_d©agøm_ªque°_id
(
A
Ë
	`¡ohs
((A)->
ªque°_id
)

	)

51 
	#gë_udp_d©agøm_£q_num
(
A
Ë
	`¡ohs
((A)->
£quí˚_numbî
)

	)

52 
	#gë_udp_d©agøm_num_d©agøms
(
A
Ë
	`¡ohs
((A)->
num_d©agøms
)

	)

53 
	#gë_msg_num_‰om_ªque°_id
(
A
Ë–(AË& (~(
UDP_REQUEST_ID_THREAD_MASK
)Ë)

	)

54 
	#gë_thªad_id_‰om_ªque°_id
(
A
Ë–(AË& (
UDP_REQUEST_ID_THREAD_MASK
ËË>> 
UDP_REQUEST_ID_MSG_SIG_DIGITS


	)

55 
	#gíî©e_udp_ªque°_thªad_id
(
A
Ë(AË<< 
UDP_REQUEST_ID_MSG_SIG_DIGITS


	)

56 
	#UDP_REQUEST_ID_MAX_THREAD_ID
 
	`gë_thªad_id_‰om_ªque°_id
(0xFFFF)

	)

58 
	sudp_d©agøm_hódî_°


60 
uöt16_t
 
	mªque°_id
;

61 
uöt16_t
 
	m£quí˚_numbî
;

62 
uöt16_t
 
	mnum_d©agøms
;

63 
uöt16_t
 
	mª£rved
;

66 
	slibmemˇched_io_ve˘‹_°


68 
size_t
 
	mÀngth
;

69 c⁄° *
	mbuf„r
;

72 #ifde‡
__˝lu•lus


76 
LIBMEMCACHED_LOCAL


77 
memˇched_ªtu∫_t
 
memˇched_io_waô_f‹_wrôe
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
);

79 
LIBMEMCACHED_LOCAL


80 
ssize_t
 
memˇched_io_wrôev
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

81 c⁄° 
libmemˇched_io_ve˘‹_°
 *
ve˘‹
,

82 
size_t
 
numbî_of
, 
boﬁ
 
wôh_Êush
);

84 
LIBMEMCACHED_LOCAL


85 
ssize_t
 
memˇched_io_wrôe
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

86 c⁄° *
buf„r
, 
size_t
 
Àngth
, 
boﬁ
 
wôh_Êush
);

88 
LIBMEMCACHED_LOCAL


89 
memˇched_io_ª£t
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
);

91 
LIBMEMCACHED_LOCAL


92 
memˇched_ªtu∫_t
 
memˇched_io_ªad
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

93 *
buf„r
, 
size_t
 
Àngth
, 
ssize_t
 *
ƒód
);

96 
LIBMEMCACHED_LOCAL


97 
memˇched_ªtu∫_t
 
memˇched_io_ªadlöe
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

98 *
buf„r_±r
,

99 
size_t
 
size
);

101 
LIBMEMCACHED_LOCAL


102 
memˇched_ªtu∫_t
 
memˇched_io_˛o£
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
);

105 
LIBMEMCACHED_LOCAL


106 
memˇched_ªtu∫_t
 
memˇched_ß„_ªad
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

107 *
dè
,

108 
size_t
 
size
);

110 
LIBMEMCACHED_LOCAL


111 
memˇched_ªtu∫_t
 
memˇched_io_öô_udp_hódî
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

112 
uöt16_t
 
thªad_id
);

114 
LIBMEMCACHED_LOCAL


115 
memˇched_£rvî_wrôe_ö°™˚_°
 
memˇched_io_gë_ªadabÀ_£rvî
(
memˇched_°
 *
memc
);

117 #ifde‡
__˝lu•lus


	@libmemcached/is.h

38 #¥agm®
⁄˚


41 
	#memˇched_is_Æloˇãd
(
__obje˘
Ë((__obje˘)->
›ti⁄s
.
is_Æloˇãd
)

	)

42 
	#memˇched_is_öôülized
(
__obje˘
Ë((__obje˘)->
›ti⁄s
.
is_öôülized
)

	)

43 
	#memˇched_is_purgög
(
__obje˘
Ë((__obje˘)->
°©e
.
is_purgög
)

	)

44 
	#memˇched_is_¥o˚ssög_öput
(
__obje˘
Ë((__obje˘)->
°©e
.
is_¥o˚ssög_öput
)

	)

45 
	#memˇched_£t_purgög
(
__obje˘
, 
__vÆue
Ë((__obje˘)->
°©e
.
is_purgög
(__vÆue))

	)

46 
	#memˇched_£t_¥o˚ssög_öput
(
__obje˘
, 
__vÆue
Ë((__obje˘)->
°©e
.
is_¥o˚ssög_öput
(__vÆue))

	)

47 
	#memˇched_£t_öôülized
(
__obje˘
, 
__vÆue
Ë((__obje˘)->
›ti⁄s
.
	`is_öôülized
((__vÆue))

	)

48 
	#memˇched_£t_Æloˇãd
(
__obje˘
, 
__vÆue
Ë((__obje˘)->
›ti⁄s
.
is_Æloˇãd
(__vÆue))

	)

	@libmemcached/key.c

1 
	~"comm⁄.h
"

3 
memˇched_ªtu∫_t
 
	$memˇched_key_ã°
(c⁄° * c⁄° *
keys
,

4 c⁄° 
size_t
 *
key_Àngth
,

5 
size_t
 
numbî_of_keys
)

7 
uöt32_t
 
x
;

8 
memˇched_ªtu∫_t
 
rc
;

10 
x
0; x < 
numbî_of_keys
; x++)

12 
size_t
 
y
;

14 
rc

	`memˇched_vÆid©e_key_Àngth
(*(
key_Àngth
 + 
x
), 
Ál£
);

15 i‡(
rc
 !
MEMCACHED_SUCCESS
)

16  
rc
;

18 
y
0; y < *(
key_Àngth
 + 
x
); y++)

20 i‡((
	`isgøph
(
keys
[
x
][
y
])) == 0)

21  
MEMCACHED_BAD_KEY_PROVIDED
;

25  
MEMCACHED_SUCCESS
;

26 
	}
}

	@libmemcached/libmemcached_probes.h

18 #i‚def 
__LIBMEMCACHED_PROBES_H__


19 
	#__LIBMEMCACHED_PROBES_H__


	)

21 #ifde‡
HAVE_DTRACE


26 
	~"libmemˇched/dåa˚_¥obes.h
"

34 
	#LIBMEMCACHED_MEMCACHED_ADD_END
()

	)

35 
	#LIBMEMCACHED_MEMCACHED_ADD_END_ENABLED
(Ë(0)

	)

36 
	#LIBMEMCACHED_MEMCACHED_ADD_START
()

	)

37 
	#LIBMEMCACHED_MEMCACHED_ADD_START_ENABLED
(Ë(0)

	)

38 
	#LIBMEMCACHED_MEMCACHED_CONNECT_END
()

	)

39 
	#LIBMEMCACHED_MEMCACHED_CONNECT_END_ENABLED
(Ë(0)

	)

40 
	#LIBMEMCACHED_MEMCACHED_CONNECT_START
()

	)

41 
	#LIBMEMCACHED_MEMCACHED_CONNECT_START_ENABLED
(Ë(0)

	)

42 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_END
()

	)

43 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_END_ENABLED
(Ë(0)

	)

44 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_START
()

	)

45 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_START_ENABLED
(Ë(0)

	)

46 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_WITH_INITIAL_END
()

	)

47 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_WITH_INITIAL_END_ENABLED
(Ë(0)

	)

48 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_WITH_INITIAL_START
()

	)

49 
	#LIBMEMCACHED_MEMCACHED_DECREMENT_WITH_INITIAL_START_ENABLED
(Ë(0)

	)

50 
	#LIBMEMCACHED_MEMCACHED_DELETE_END
()

	)

51 
	#LIBMEMCACHED_MEMCACHED_DELETE_END_ENABLED
(Ë(0)

	)

52 
	#LIBMEMCACHED_MEMCACHED_DELETE_START
()

	)

53 
	#LIBMEMCACHED_MEMCACHED_DELETE_START_ENABLED
(Ë(0)

	)

54 
	#LIBMEMCACHED_MEMCACHED_FLUSH_END
()

	)

55 
	#LIBMEMCACHED_MEMCACHED_FLUSH_END_ENABLED
(Ë(0)

	)

56 
	#LIBMEMCACHED_MEMCACHED_FLUSH_START
()

	)

57 
	#LIBMEMCACHED_MEMCACHED_FLUSH_START_ENABLED
(Ë(0)

	)

58 
	#LIBMEMCACHED_MEMCACHED_GET_END
()

	)

59 
	#LIBMEMCACHED_MEMCACHED_GET_END_ENABLED
(Ë(0)

	)

60 
	#LIBMEMCACHED_MEMCACHED_GET_START
()

	)

61 
	#LIBMEMCACHED_MEMCACHED_GET_START_ENABLED
(Ë(0)

	)

62 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_END
()

	)

63 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_END_ENABLED
(Ë(0)

	)

64 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_START
()

	)

65 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_START_ENABLED
(Ë(0)

	)

66 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_END
()

	)

67 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_END_ENABLED
(Ë(0)

	)

68 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_START
()

	)

69 
	#LIBMEMCACHED_MEMCACHED_INCREMENT_WITH_INITIAL_START_ENABLED
(Ë(0)

	)

70 
	#LIBMEMCACHED_MEMCACHED_MGET_END
()

	)

71 
	#LIBMEMCACHED_MEMCACHED_MGET_END_ENABLED
(Ë(0)

	)

72 
	#LIBMEMCACHED_MEMCACHED_MGET_START
()

	)

73 
	#LIBMEMCACHED_MEMCACHED_MGET_START_ENABLED
(Ë(0)

	)

74 
	#LIBMEMCACHED_MEMCACHED_REPLACE_END
()

	)

75 
	#LIBMEMCACHED_MEMCACHED_REPLACE_END_ENABLED
(Ë(0)

	)

76 
	#LIBMEMCACHED_MEMCACHED_REPLACE_START
()

	)

77 
	#LIBMEMCACHED_MEMCACHED_REPLACE_START_ENABLED
(Ë(0)

	)

78 
	#LIBMEMCACHED_MEMCACHED_SERVER_ADD_END
()

	)

79 
	#LIBMEMCACHED_MEMCACHED_SERVER_ADD_END_ENABLED
(Ë(0)

	)

80 
	#LIBMEMCACHED_MEMCACHED_SERVER_ADD_START
()

	)

81 
	#LIBMEMCACHED_MEMCACHED_SERVER_ADD_START_ENABLED
(Ë(0)

	)

82 
	#LIBMEMCACHED_MEMCACHED_SET_END
()

	)

83 
	#LIBMEMCACHED_MEMCACHED_SET_END_ENABLED
(Ë(0)

	)

84 
	#LIBMEMCACHED_MEMCACHED_SET_START
()

	)

85 
	#LIBMEMCACHED_MEMCACHED_SET_START_ENABLED
(Ë(0)

	)

	@libmemcached/memcached.c

38 
	~<libmemˇched/comm⁄.h
>

39 
	~<libmemˇched/vútuÆ_buckë.h
>

41 c⁄° 
memˇched_°
 
	gglobÆ_c›y
= {

42 .
°©e
= {

43 .
is_purgög

Ál£
,

44 .
	gis_¥o˚ssög_öput

Ál£
,

45 .
	gis_time_f‹_ªbuûd

Ál£
,

47 .
	gÊags
= {

48 .
auto_eje˘_ho°s

Ál£
,

49 .
	gbö¨y_¥Ÿocﬁ

Ál£
,

50 .
	gbuf„r_ªque°s

Ál£
,

51 .
	ghash_wôh_¥efix_key

Ál£
,

52 .
	gno_block

Ál£
,

53 .
	gno_ª∂y

Ál£
,

54 .
	gøndomize_ª∂iˇ_ªad

Ál£
,

55 .
	gsuµ‹t_ˇs

Ál£
,

56 .
	gt˝_nodñay

Ál£
,

57 .
	gu£_s‹t_ho°s

Ál£
,

58 .
	gu£_udp

Ál£
,

59 .
	gvîify_key

Ál£
,

60 .
	gt˝_kì∑live

Ál£
,

64 
ölöe
 
boﬁ
 
	$_memˇched_öô
(
memˇched_°
 *
£lf
)

66 
£lf
->
°©e

globÆ_c›y
.state;

67 
£lf
->
Êags

globÆ_c›y
.flags;

68 
£lf
->
vútuÆ_buckë

NULL
;

70 
£lf
->
di°ributi⁄

MEMCACHED_DISTRIBUTION_MODULA
;

72 
hashkô_°
 *
hash_±r
;

73 
hash_±r

	`hashkô_¸óã
(&
£lf
->
hashkô
);

74 i‡(! 
hash_±r
)

75  
Ál£
;

77 
£lf
->
këama
.
c⁄töuum

NULL
;

78 
£lf
->
këama
.
c⁄töuum_cou¡
= 0;

79 
£lf
->
këama
.
c⁄töuum_poöts_cou¡î
= 0;

80 
£lf
->
këama
.
√xt_di°ributi⁄_ªbuûd
= 0;

81 
£lf
->
këama
.
weighãd

Ál£
;

83 
£lf
->
numbî_of_ho°s
= 0;

84 
£lf
->
£rvîs

NULL
;

85 
£lf
->
œ°_disc⁄√˘ed_£rvî

NULL
;

87 
£lf
->
¢d_timeout
= 0;

88 
£lf
->
rcv_timeout
= 0;

89 
£lf
->
£rvî_Áûuª_limô
= 0;

90 
£lf
->
quîy_id
= 0;

93 
£lf
->
io_msg_w©îm¨k
= 500;

94 
£lf
->
io_byãs_w©îm¨k
= 65 * 1024;

96 
£lf
->
t˝_kìpidÀ
= 0;

98 
£lf
->
io_key_¥e„tch
= 0;

99 
£lf
->
pﬁl_timeout

MEMCACHED_DEFAULT_TIMEOUT
;

100 
£lf
->
c⁄√˘_timeout

MEMCACHED_DEFAULT_CONNECT_TIMEOUT
;

101 
£lf
->
ªåy_timeout
= 0;

103 
£lf
->
£nd_size
= -1;

104 
£lf
->
ªcv_size
= -1;

106 
£lf
->
u£r_d©a

NULL
;

107 
£lf
->
numbî_of_ª∂iˇs
= 0;

108 
hash_±r

	`hashkô_¸óã
(&
£lf
->
di°ributi⁄_hashkô
);

109 i‡(! 
hash_±r
)

110  
Ál£
;

112 
£lf
->
Æloˇt‹s

	`memˇched_Æloˇt‹s_ªtu∫_deÁu…
();

114 
£lf
->
⁄_˛⁄e

NULL
;

115 
£lf
->
⁄_˛ónup

NULL
;

116 
£lf
->
gë_key_Áûuª

NULL
;

117 
£lf
->
dñëe_åiggî

NULL
;

118 
£lf
->
ˇŒbacks

NULL
;

119 
£lf
->
ß¶
.
ˇŒbacks

NULL
;

120 
£lf
->
ß¶
.
is_Æloˇãd

Ál£
;

122 
£lf
->
îr‹_mesßges

NULL
;

123 
£lf
->
¥efix_key

NULL
;

124 
£lf
->
c⁄figuª
.
öôül_poﬁ_size
= 1;

125 
£lf
->
c⁄figuª
.
max_poﬁ_size
= 1;

126 
£lf
->
c⁄figuª
.
fûíame

NULL
;

128  
åue
;

129 
	}
}

131 
	$_‰ì
(
memˇched_°
 *
±r
, 
boﬁ
 
ªÀa£_°
)

134 
	`£nd_quô
(
±r
);

135 
	`memˇched_£rvî_li°_‰ì
(
	`memˇched_£rvî_li°
(
±r
));

136 
	`memˇched_ªsu…_‰ì
(&
±r
->
ªsu…
);

138 
	`memˇched_vútuÆ_buckë_‰ì
(
±r
);

140 i‡(
±r
->
œ°_disc⁄√˘ed_£rvî
)

141 
	`memˇched_£rvî_‰ì
(
±r
->
œ°_disc⁄√˘ed_£rvî
);

143 i‡(
±r
->
⁄_˛ónup
)

144 
±r
->
	`⁄_˛ónup
(ptr);

146 i‡(
±r
->
këama
.
c⁄töuum
)

147 
	`libmemˇched_‰ì
(
±r
,Öå->
këama
.
c⁄töuum
);

149 
	`memˇched_¨øy_‰ì
(
±r
->
¥efix_key
);

150 
±r
->
¥efix_key

NULL
;

152 
	`memˇched_îr‹_‰ì
(
±r
);

154 i‡(
±r
->
ß¶
.
ˇŒbacks
)

156 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


157 
	`memˇched_de°roy_ß¶_auth_d©a
(
±r
);

161 i‡(
ªÀa£_°
)

163 
	`memˇched_¨øy_‰ì
(
±r
->
c⁄figuª
.
fûíame
);

164 
±r
->
c⁄figuª
.
fûíame

NULL
;

167 i‡(
	`memˇched_is_Æloˇãd
(
±r
Ë&& 
ªÀa£_°
)

169 
	`libmemˇched_‰ì
(
±r
,Ötr);

171 
	}
}

173 
memˇched_°
 *
	$memˇched_¸óã
(
memˇched_°
 *
±r
)

175 i‡(
±r
 =
NULL
)

177 
±r
(
memˇched_°
 *)
	`mÆloc
((memcached_st));

179 i‡(! 
±r
)

181  
NULL
;

184 
±r
->
›ti⁄s
.
is_Æloˇãd

åue
;

188 
±r
->
›ti⁄s
.
is_Æloˇãd

Ál£
;

192 
	`memˇched_£t_purgög
(
±r
, 
Ál£
);

193 
	`memˇched_£t_¥o˚ssög_öput
(
±r
, 
Ál£
);

196 i‡(! 
	`_memˇched_öô
(
±r
))

198 
	`memˇched_‰ì
(
±r
);

199  
NULL
;

202 i‡(! 
	`memˇched_ªsu…_¸óã
(
±r
, &±r->
ªsu…
))

204 
	`memˇched_‰ì
(
±r
);

205  
NULL
;

208 
	`WATCHPOINT_ASSERT_INITIALIZED
(&
±r
->
ªsu…
);

210  
±r
;

211 
	}
}

213 
memˇched_°
 *
	$memˇched
(c⁄° *
°rög
, 
size_t
 
Àngth
)

215 i‡(! 
Àngth
 || ! 
°rög
)

217 
î∫o

EINVAL
;

218  
NULL
;

221 
memˇched_°
 *
£lf

	`memˇched_¸óã
(
NULL
);

222 i‡(! 
£lf
)

224 
î∫o

ENOMEM
;

225  
NULL
;

228 
memˇched_ªtu∫_t
 
rc
;

229 
rc

	`memˇched_∑r£_c⁄figuøti⁄
(
£lf
, 
°rög
, 
Àngth
);

231 i‡(
rc
 =
MEMCACHED_SUCCESS
 && 
	`memˇched_∑r£_fûíame
(
£lf
))

233 
rc

	`memˇched_∑r£_c⁄figuª_fûe
(
£lf
, 
	`memˇched_∑r£_fûíame
(£lf), 
	`memˇched_∑r£_fûíame_Àngth
(self));

236 i‡(
rc
 !
MEMCACHED_SUCCESS
)

238 
	`memˇched_‰ì
(
£lf
);

239 
î∫o

EINVAL
;

240  
NULL
;

243 
î∫o
= 0;

245  
£lf
;

246 
	}
}

248 
memˇched_ªtu∫_t
 
	$memˇched_ª£t
(
memˇched_°
 *
±r
)

250 
	`WATCHPOINT_ASSERT
(
±r
);

251 i‡(! 
±r
)

252  
MEMCACHED_INVALID_ARGUMENTS
;

254 
boﬁ
 
°‹ed_is_Æloˇãd

	`memˇched_is_Æloˇãd
(
±r
);

255 
uöt64_t
 
quîy_id

±r
->query_id;

256 
	`_‰ì
(
±r
, 
Ál£
);

257 
	`memˇched_¸óã
(
±r
);

258 
	`memˇched_£t_Æloˇãd
(
±r
, 
°‹ed_is_Æloˇãd
);

259 
±r
->
quîy_id
= query_id;

261 i‡(
±r
->
c⁄figuª
.
fûíame
)

263  
	`memˇched_∑r£_c⁄figuª_fûe
(
±r
, 
	`memˇched_∑øm_¨øy
’å->
c⁄figuª
.
fûíame
));

266  
MEMCACHED_SUCCESS
;

267 
	}
}

269 
	$memˇched_£rvîs_ª£t
(
memˇched_°
 *
±r
)

271 i‡(! 
±r
)

274 
	`memˇched_£rvî_li°_‰ì
(
	`memˇched_£rvî_li°
(
±r
));

276 
	`memˇched_£rvî_li°_£t
(
±r
, 
NULL
);

277 
±r
->
numbî_of_ho°s
= 0;

278 i‡(
±r
->
œ°_disc⁄√˘ed_£rvî
)

280 
	`memˇched_£rvî_‰ì
(
±r
->
œ°_disc⁄√˘ed_£rvî
);

282 
±r
->
œ°_disc⁄√˘ed_£rvî

NULL
;

283 
±r
->
£rvî_Áûuª_limô
= 0;

284 
	}
}

286 
	$memˇched_ª£t_œ°_disc⁄√˘ed_£rvî
(
memˇched_°
 *
±r
)

288 i‡(! 
±r
)

291 i‡(
±r
->
œ°_disc⁄√˘ed_£rvî
)

293 
	`memˇched_£rvî_‰ì
(
±r
->
œ°_disc⁄√˘ed_£rvî
);

294 
±r
->
œ°_disc⁄√˘ed_£rvî

NULL
;

296 
	}
}

298 
	$memˇched_‰ì
(
memˇched_°
 *
±r
)

300 i‡(! 
±r
)

303 
	`_‰ì
(
±r
, 
åue
);

304 
	}
}

311 
memˇched_°
 *
	$memˇched_˛⁄e
(
memˇched_°
 *
˛⁄e
, c⁄° memˇched_° *
sour˚
)

313 
memˇched_ªtu∫_t
 
rc

MEMCACHED_SUCCESS
;

314 
memˇched_°
 *
√w_˛⁄e
;

316 i‡(
sour˚
 =
NULL
)

317  
	`memˇched_¸óã
(
˛⁄e
);

319 i‡(
˛⁄e
 && 
	`memˇched_is_Æloˇãd
(clone))

321  
NULL
;

324 
√w_˛⁄e

	`memˇched_¸óã
(
˛⁄e
);

326 i‡(
√w_˛⁄e
 =
NULL
)

327  
NULL
;

329 
√w_˛⁄e
->
Êags

sour˚
->flags;

330 
√w_˛⁄e
->
£nd_size

sour˚
->send_size;

331 
√w_˛⁄e
->
ªcv_size

sour˚
->recv_size;

332 
√w_˛⁄e
->
pﬁl_timeout

sour˚
->poll_timeout;

333 
√w_˛⁄e
->
c⁄√˘_timeout

sour˚
->connect_timeout;

334 
√w_˛⁄e
->
ªåy_timeout

sour˚
->retry_timeout;

335 
√w_˛⁄e
->
di°ributi⁄

sour˚
->distribution;

337 
hashkô_°
 *
hash_±r
;

339 
hash_±r

	`hashkô_˛⁄e
(&
√w_˛⁄e
->
hashkô
, &
sour˚
->hashkit);

340 i‡(! 
hash_±r
)

342 
	`memˇched_‰ì
(
√w_˛⁄e
);

343  
NULL
;

346 
hash_±r

	`hashkô_˛⁄e
(&
√w_˛⁄e
->
di°ributi⁄_hashkô
, &
sour˚
->distribution_hashkit);

347 i‡(! 
hash_±r
)

349 
	`memˇched_‰ì
(
√w_˛⁄e
);

350  
NULL
;

353 
√w_˛⁄e
->
u£r_d©a

sour˚
->user_data;

355 
√w_˛⁄e
->
¢d_timeout

sour˚
->snd_timeout;

356 
√w_˛⁄e
->
rcv_timeout

sour˚
->rcv_timeout;

358 
√w_˛⁄e
->
⁄_˛⁄e

sour˚
->on_clone;

359 
√w_˛⁄e
->
⁄_˛ónup

sour˚
->on_cleanup;

361 
√w_˛⁄e
->
Æloˇt‹s

sour˚
->allocators;

363 
√w_˛⁄e
->
gë_key_Áûuª

sour˚
->get_key_failure;

364 
√w_˛⁄e
->
dñëe_åiggî

sour˚
->delete_trigger;

365 
√w_˛⁄e
->
£rvî_Áûuª_limô

sour˚
->server_failure_limit;

366 
√w_˛⁄e
->
io_msg_w©îm¨k

sour˚
->io_msg_watermark;

367 
√w_˛⁄e
->
io_byãs_w©îm¨k

sour˚
->io_bytes_watermark;

368 
√w_˛⁄e
->
io_key_¥e„tch

sour˚
->io_key_prefetch;

369 
√w_˛⁄e
->
numbî_of_ª∂iˇs

sour˚
->number_of_replicas;

370 
√w_˛⁄e
->
t˝_kìpidÀ

sour˚
->tcp_keepidle;

372 i‡(
	`memˇched_£rvî_cou¡
(
sour˚
))

373 
rc

	`memˇched_push
(
√w_˛⁄e
, 
sour˚
);

375 i‡(
rc
 !
MEMCACHED_SUCCESS
)

377 
	`memˇched_‰ì
(
√w_˛⁄e
);

379  
NULL
;

383 
√w_˛⁄e
->
¥efix_key

	`memˇched_¨øy_˛⁄e
“ew_˛⁄e, 
sour˚
->prefix_key);

385 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


386 i‡(
sour˚
->
ß¶
.
ˇŒbacks
)

388 i‡(
	`memˇched_˛⁄e_ß¶
(
√w_˛⁄e
, 
sour˚
Ë!
MEMCACHED_SUCCESS
)

390 
	`memˇched_‰ì
(
√w_˛⁄e
);

391  
NULL
;

396 
rc

	`run_di°ributi⁄
(
√w_˛⁄e
);

398 i‡(
rc
 !
MEMCACHED_SUCCESS
)

400 
	`memˇched_‰ì
(
√w_˛⁄e
);

402  
NULL
;

405 i‡(
sour˚
->
⁄_˛⁄e
)

406 
sour˚
->
	`⁄_˛⁄e
(
√w_˛⁄e
, source);

408  
√w_˛⁄e
;

409 
	}
}

411 *
	$memˇched_gë_u£r_d©a
(c⁄° 
memˇched_°
 *
±r
)

413  
±r
->
u£r_d©a
;

414 
	}
}

416 *
	$memˇched_£t_u£r_d©a
(
memˇched_°
 *
±r
, *
d©a
)

418 *
ªt

±r
->
u£r_d©a
;

419 
±r
->
u£r_d©a

d©a
;

421  
ªt
;

422 
	}
}

424 
memˇched_ªtu∫_t
 
	$memˇched_push
(
memˇched_°
 *
de°ö©i⁄
, c⁄° memˇched_° *
sour˚
)

426  
	`memˇched_£rvî_push
(
de°ö©i⁄
, 
sour˚
->
£rvîs
);

427 
	}
}

429 
memˇched_£rvî_wrôe_ö°™˚_°
 
	$memˇched_£rvî_ö°™˚_„tch
(
memˇched_°
 *
±r
, 
uöt32_t
 
£rvî_key
)

431  &
±r
->
£rvîs
[
£rvî_key
];

432 
	}
}

434 
memˇched_£rvî_ö°™˚_°
 
	$memˇched_£rvî_ö°™˚_by_posôi⁄
(c⁄° 
memˇched_°
 *
±r
, 
uöt32_t
 
£rvî_key
)

436  &
±r
->
£rvîs
[
£rvî_key
];

437 
	}
}

	@libmemcached/memcached.h

38 #i‚de‡
__LIBMEMCACHED_MEMCACHED_H__


39 
	#__LIBMEMCACHED_MEMCACHED_H__


	)

41 
	~<öây≥s.h
>

42 
	~<°dlib.h
>

43 
	~<sys/ty≥s.h
>

46 #i‡!
deföed
(
__˝lu•lus
)

47 
	~<°dboﬁ.h
>

50 
	~<libmemˇched/visibûôy.h
>

51 
	~<libmemˇched/c⁄figuª.h
>

52 
	~<libmemˇched/∂©f‹m.h
>

53 
	~<libmemˇched/c⁄°™ts.h
>

54 
	~<libmemˇched/ty≥s.h
>

55 
	~<libmemˇched/°rög.h
>

56 
	~<libmemˇched/¨øy.h
>

57 
	~<libmemˇched/îr‹.h
>

58 
	~<libmemˇched/°©s.h
>

59 
	~<libhashkô/hashkô.h
>

61 
	~<libmemˇched/Æloˇt‹s.h
>

62 
	~<libmemˇched/™Æyze.h
>

63 
	~<libmemˇched/auto.h
>

64 
	~<libmemˇched/behavi‹.h
>

65 
	~<libmemˇched/ˇŒback.h
>

66 
	~<libmemˇched/dñëe.h
>

67 
	~<libmemˇched/dump.h
>

68 
	~<libmemˇched/„tch.h
>

69 
	~<libmemˇched/Êush.h
>

70 
	~<libmemˇched/Êush_buf„rs.h
>

71 
	~<libmemˇched/gë.h
>

72 
	~<libmemˇched/hash.h
>

73 
	~<libmemˇched/›ti⁄s.h
>

74 
	~<libmemˇched/∑r£.h
>

75 
	~<libmemˇched/quô.h
>

76 
	~<libmemˇched/ªsu….h
>

77 
	~<libmemˇched/£rvî.h
>

78 
	~<libmemˇched/£rvî_li°.h
>

79 
	~<libmemˇched/°‹age.h
>

80 
	~<libmemˇched/°ªº‹.h
>

81 
	~<libmemˇched/vîbosôy.h
>

82 
	~<libmemˇched/vîsi⁄.h
>

83 
	~<libmemˇched/ß¶.h
>

85 
	smemˇched_°
 {

90 
boﬁ
 
	mis_purgög
:1;

91 
boﬁ
 
	mis_¥o˚ssög_öput
:1;

92 
boﬁ
 
	mis_time_f‹_ªbuûd
:1;

93 } 
	m°©e
;

97 
boﬁ
 
	mauto_eje˘_ho°s
:1;

98 
boﬁ
 
	mbö¨y_¥Ÿocﬁ
:1;

99 
boﬁ
 
	mbuf„r_ªque°s
:1;

100 
boﬁ
 
	mhash_wôh_¥efix_key
:1;

101 
boﬁ
 
	mno_block
:1;

102 
boﬁ
 
	mno_ª∂y
:1;

103 
boﬁ
 
	møndomize_ª∂iˇ_ªad
:1;

104 
boﬁ
 
	msuµ‹t_ˇs
:1;

105 
boﬁ
 
	mt˝_nodñay
:1;

106 
boﬁ
 
	mu£_s‹t_ho°s
:1;

107 
boﬁ
 
	mu£_udp
:1;

108 
boﬁ
 
	mvîify_key
:1;

109 
boﬁ
 
	mt˝_kì∑live
:1;

110 } 
	mÊags
;

112 
memˇched_£rvî_di°ributi⁄_t
 
	mdi°ributi⁄
;

113 
hashkô_°
 
	mhashkô
;

114 
uöt32_t
 
	mnumbî_of_ho°s
;

115 
memˇched_£rvî_°
 *
	m£rvîs
;

116 
memˇched_£rvî_°
 *
	mœ°_disc⁄√˘ed_£rvî
;

117 
öt32_t
 
	m¢d_timeout
;

118 
öt32_t
 
	mrcv_timeout
;

119 
uöt32_t
 
	m£rvî_Áûuª_limô
;

120 
uöt32_t
 
	mio_msg_w©îm¨k
;

121 
uöt32_t
 
	mio_byãs_w©îm¨k
;

122 
uöt32_t
 
	mio_key_¥e„tch
;

123 
uöt32_t
 
	mt˝_kìpidÀ
;

124 
öt32_t
 
	mpﬁl_timeout
;

125 
öt32_t
 
	mc⁄√˘_timeout
;

126 
öt32_t
 
	mªåy_timeout
;

127 
	m£nd_size
;

128 
	mªcv_size
;

129 *
	mu£r_d©a
;

130 
uöt64_t
 
	mquîy_id
;

131 
uöt32_t
 
	mnumbî_of_ª∂iˇs
;

132 
hashkô_°
 
	mdi°ributi⁄_hashkô
;

133 
memˇched_ªsu…_°
 
	mªsu…
;

136 
boﬁ
 
	mweighãd
;

137 
uöt32_t
 
	mc⁄töuum_cou¡
;

138 
uöt32_t
 
	mc⁄töuum_poöts_cou¡î
;

139 
time_t
 
	m√xt_di°ributi⁄_ªbuûd
;

140 
memˇched_c⁄töuum_ôem_°
 *
	mc⁄töuum
;

141 } 
	mkëama
;

143 
memˇched_vútuÆ_buckë_t
 *
	mvútuÆ_buckë
;

145 
	s_Æloˇt‹s_°
 {

146 
memˇched_ˇŒoc_‚
 
	mˇŒoc
;

147 
memˇched_‰ì_‚
 
	m‰ì
;

148 
memˇched_mÆloc_‚
 
	mmÆloc
;

149 
memˇched_ªÆloc_‚
 
	mªÆloc
;

150 *
	mc⁄ãxt
;

151 } 
	mÆloˇt‹s
;

153 
memˇched_˛⁄e_‚
 
	m⁄_˛⁄e
;

154 
memˇched_˛ónup_‚
 
	m⁄_˛ónup
;

155 
memˇched_åiggî_key_‚
 
	mgë_key_Áûuª
;

156 
memˇched_åiggî_dñëe_key_‚
 
	mdñëe_åiggî
;

157 
memˇched_ˇŒback_°
 *
	mˇŒbacks
;

158 
memˇched_ß¶_°
 
	mß¶
;

159 
memˇched_îr‹_t
 *
	mîr‹_mesßges
;

160 
memˇched_¨øy_°
 *
	m¥efix_key
;

162 
uöt32_t
 
	möôül_poﬁ_size
;

163 
uöt32_t
 
	mmax_poﬁ_size
;

164 
memˇched_¨øy_°
 *
	mfûíame
;

165 } 
	mc⁄figuª
;

167 
boﬁ
 
	mis_Æloˇãd
:1;

168 } 
	m›ti⁄s
;

172 #ifde‡
__˝lu•lus


176 
LIBMEMCACHED_API


177 
memˇched_£rvîs_ª£t
(
memˇched_°
 *
±r
);

179 
LIBMEMCACHED_API


180 
memˇched_°
 *
memˇched_¸óã
(memˇched_° *
±r
);

182 
LIBMEMCACHED_API


183 
memˇched_°
 *
memˇched
(c⁄° *
°rög
, 
size_t
 
°rög_Àngth
);

185 
LIBMEMCACHED_API


186 
memˇched_‰ì
(
memˇched_°
 *
±r
);

188 
LIBMEMCACHED_API


189 
memˇched_ªtu∫_t
 
memˇched_ª£t
(
memˇched_°
 *
±r
);

191 
LIBMEMCACHED_API


192 
memˇched_ª£t_œ°_disc⁄√˘ed_£rvî
(
memˇched_°
 *
±r
);

194 
LIBMEMCACHED_API


195 
memˇched_°
 *
memˇched_˛⁄e
(memˇched_° *
˛⁄e
, c⁄° memˇched_° *
±r
);

197 
LIBMEMCACHED_API


198 *
memˇched_gë_u£r_d©a
(c⁄° 
memˇched_°
 *
±r
);

200 
LIBMEMCACHED_API


201 *
memˇched_£t_u£r_d©a
(
memˇched_°
 *
±r
, *
d©a
);

203 
LIBMEMCACHED_API


204 
memˇched_ªtu∫_t
 
memˇched_push
(
memˇched_°
 *
de°ö©i⁄
, c⁄° memˇched_° *
sour˚
);

206 
LIBMEMCACHED_API


207 
memˇched_£rvî_ö°™˚_°
 
memˇched_£rvî_ö°™˚_by_posôi⁄
(c⁄° 
memˇched_°
 *
±r
, 
uöt32_t
 
£rvî_key
);

209 
LIBMEMCACHED_API


210 
uöt32_t
 
memˇched_£rvî_cou¡
(c⁄° 
memˇched_°
 *);

212 #ifde‡
__˝lu•lus


	@libmemcached/memcached.hpp

15 #¥agm®
⁄˚


16 #i‚de‡
LIBMEMCACHEDPP_H


17 
	#LIBMEMCACHEDPP_H


	)

19 
	~<libmemˇched/memˇched.h
>

20 
	~<libmemˇched/ex˚±i⁄.hµ
>

22 
	~<°rög.h
>

24 
	~<s°ªam
>

25 
	~<°rög
>

26 
	~<ve˘‹
>

27 
	~<m≠
>

29 
«me•a˚
 
	gmemˇche


36 ˛as†
	cMemˇche


38 
	gpublic
:

40 
Memˇche
()

42 
£rvîs_li°
(),

43 
memc
(),

44 
ªsu…
()

46 
memˇched_¸óã
(&
memc
);

49 
Memˇche
(c⁄° 
°d
::
°rög
 &
ö_£rvîs_li°
)

51 
£rvîs_li°
(
ö_£rvîs_li°
),

52 
memc
(),

53 
ªsu…
()

55 
memˇched_¸óã
(&
memc
);

56 
öô
();

59 
Memˇche
(c⁄° 
°d
::
°rög
 &
ho°«me
,

60 
ö_p‹t_t
 
p‹t
)

62 
£rvîs_li°
(),

63 
memc
(),

64 
ªsu…
()

66 
memˇched_¸óã
(&
memc
);

68 
	g£rvîs_li°
.
≠≥nd
(
ho°«me
);

69 
	g£rvîs_li°
.
≠≥nd
(":");

70 
	g°d
::
o°rög°ªam
 
°rsmt
;

71 
	g°rsmt
 << 
	gp‹t
;

72 
	g£rvîs_li°
.
≠≥nd
(
°rsmt
.
°r
());

74 
öô
();

77 
Memˇche
(
memˇched_°
 *
˛⁄e
)

79 
£rvîs_li°
(),

80 
memc
(),

81 
ªsu…
()

83 
memˇched_˛⁄e
(&
memc
, 
˛⁄e
);

86 
Memˇche
(c⁄° Memˇchê&
rhs
)

88 
£rvîs_li°
(
rhs
.servers_list),

89 
memc
(),

90 
ªsu…
()

92 
memˇched_˛⁄e
(&
memc
, 
c⁄°_ˇ°
<
memˇched_°
 *>(&
rhs
.
gëIm∂
()));

93 
öô
();

96 
	gMemˇche
 &
	g›î©‹
=(c⁄° 
Memˇche
 &
rhs
)

98 i‡(
this
 !&
rhs
)

100 
memˇched_˛⁄e
(&
memc
, 
c⁄°_ˇ°
<
memˇched_°
 *>(&
rhs
.
gëIm∂
()));

101 
öô
();

104  *
	gthis
;

107 ~
Memˇche
()

109 
memˇched_‰ì
(&
memc
);

112 
öô
()

114 
memˇched_£rvî_°
 *
	g£rvîs
;

115 
	g£rvîs

memˇched_£rvîs_∑r£
(
£rvîs_li°
.
c_°r
());

116 
memˇched_£rvî_push
(&
memc
, 
£rvîs
);

117 
memˇched_£rvî_‰ì
(
£rvîs
);

123 
	gmemˇched_°
 &
gëIm∂
()

125  
	gmemc
;

131 c⁄° 
	gmemˇched_°
 &
gëIm∂
() const

133  
	gmemc
;

142 c⁄° 
	g°d
::
°rög
 
gëEº‹
(
memˇched_ªtu∫_t
 
rc
) const

145  
memˇched_°ªº‹
(
NULL
, 
rc
);

149 
boﬁ
 
£tBehavi‹
(
memˇched_behavi‹_t
 
Êag
, 
uöt64_t
 
d©a
)

151 
memˇched_ªtu∫_t
 
	grc
;

152 
	grc

memˇched_behavi‹_£t
(&
memc
, 
Êag
, 
d©a
);

153  (
	grc
 =
MEMCACHED_SUCCESS
);

156 
uöt64_t
 
gëBehavi‹
(
memˇched_behavi‹_t
 
Êag
) {

157  
memˇched_behavi‹_gë
(&
memc
, 
Êag
);

166 c⁄° 
	g°d
::
°rög
 
gëSîvîsLi°
() const

168  
£rvîs_li°
;

177 
boﬁ
 
£tSîvîs
(c⁄° 
°d
::
°rög
 &
ö_£rvîs_li°
)

179 
£rvîs_li°
.
assign
(
ö_£rvîs_li°
);

180 
öô
();

182  (
memˇched_£rvî_cou¡
(&
memc
));

192 
boﬁ
 
addSîvî
(c⁄° 
°d
::
°rög
 &
£rvî_«me
, 
ö_p‹t_t
 
p‹t
)

194 
memˇched_ªtu∫_t
 
	grc
;

196 
	grc

memˇched_£rvî_add
(&
memc
, 
£rvî_«me
.
c_°r
(), 
p‹t
);

198  (
	grc
 =
MEMCACHED_SUCCESS
);

208 
boﬁ
 
ªmoveSîvî
(c⁄° 
°d
::
°rög
 &
£rvî_«me
, 
ö_p‹t_t
 
p‹t
)

210 
	g°d
::
°rög
 
tmp_°r
;

211 
	g°d
::
o°rög°ªam
 
°r°m
;

212 
	gtmp_°r
.
≠≥nd
(",");

213 
	gtmp_°r
.
≠≥nd
(
£rvî_«me
);

214 
	gtmp_°r
.
≠≥nd
(":");

215 
	g°r°m
 << 
	gp‹t
;

216 
	gtmp_°r
.
≠≥nd
(
°r°m
.
°r
());

220  
	gÁl£
;

231 
memˇched_ªtu∫_t
 
„tch
(
°d
::
°rög
 &
key
,

232 
°d
::
ve˘‹
<> &
ªt_vÆ
)

234 
ªt_key
[
MEMCACHED_MAX_KEY
];

235 
size_t
 
	gvÆue_Àngth
= 0;

236 
size_t
 
	gkey_Àngth
= 0;

237 
memˇched_ªtu∫_t
 
	grc
;

238 
uöt32_t
 
	gÊags
= 0;

239 *
	gvÆue

memˇched_„tch
(&
memc
, 
ªt_key
, &
key_Àngth
,

240 &
vÆue_Àngth
, &
Êags
, &
rc
);

241 i‡(
	gvÆue
 && 
	gªt_vÆ
.
em±y
())

243 
	gªt_vÆ
.
ª£rve
(
vÆue_Àngth
);

244 
	gªt_vÆ
.
assign
(
vÆue
, vÆuê+ 
vÆue_Àngth
);

245 
	gkey
.
assign
(
ªt_key
, 
key_Àngth
);

246 
‰ì
(
vÆue
);

248 i‡(
	gvÆue
)

250 
‰ì
(
vÆue
);

253  
	grc
;

264 
boﬁ
 
gë
(c⁄° 
°d
::
°rög
 &
key
,

265 
°d
::
ve˘‹
<> &
ªt_vÆ
Ë
throw
 (
Eº‹
)

267 
uöt32_t
 
Êags
= 0;

268 
memˇched_ªtu∫_t
 
	grc
;

269 
size_t
 
	gvÆue_Àngth
= 0;

271 i‡(
	gkey
.
em±y
())

273 
throw
(
Eº‹
("thêkey suµlõd i†em±y!", 
Ál£
));

275 *
	gvÆue

memˇched_gë
(&
memc
, 
key
.
c_°r
(), key.
Àngth
(),

276 &
vÆue_Àngth
, &
Êags
, &
rc
);

277 i‡(
	gvÆue
 !
NULL
 && 
ªt_vÆ
.
em±y
())

279 
ªt_vÆ
.
ª£rve
(
vÆue_Àngth
);

280 
	gªt_vÆ
.
assign
(
vÆue
, vÆuê+ 
vÆue_Àngth
);

281 
‰ì
(
vÆue
);

282  
	gåue
;

284  
	gÁl£
;

299 
boﬁ
 
gëByKey
(c⁄° 
°d
::
°rög
 &
ma°î_key
,

300 c⁄° 
°d
::
°rög
 &
key
,

301 
°d
::
ve˘‹
<> &
ªt_vÆ
Ë
throw
(
Eº‹
)

303 
uöt32_t
 
Êags
= 0;

304 
memˇched_ªtu∫_t
 
	grc
;

305 
size_t
 
	gvÆue_Àngth
= 0;

307 i‡(
	gma°î_key
.
em±y
(Ë|| 
	gkey
.empty())

309 
throw
(
Eº‹
("thêma°î key o∏key suµlõd i†em±y!", 
Ál£
));

311 *
	gvÆue

memˇched_gë_by_key
(&
memc
,

312 
ma°î_key
.
c_°r
(), ma°î_key.
Àngth
(),

313 
key
.
c_°r
(), key.
Àngth
(),

314 &
vÆue_Àngth
, &
Êags
, &
rc
);

315 i‡(
	gvÆue
)

317 
	gªt_vÆ
.
ª£rve
(
vÆue_Àngth
);

318 
	gªt_vÆ
.
assign
(
vÆue
, vÆuê+ 
vÆue_Àngth
);

319 
‰ì
(
vÆue
);

320  
	gåue
;

322  
	gÁl£
;

332 
boﬁ
 
mgë
(
°d
::
ve˘‹
<°d::
°rög
> &
keys
)

334 
°d
::
ve˘‹
<c⁄° *> 
ªÆ_keys
;

335 
	g°d
::
ve˘‹
<
size_t
> 
key_Àn
;

342 
	gªÆ_keys
.
ª£rve
(
keys
.
size
());

343 
	gkey_Àn
.
ª£rve
(
keys
.
size
());

345 
	g°d
::
ve˘‹
<
°d
::
°rög
>::
ôî©‹
 
ô

keys
.
begö
();

347 
	gô
 !
keys
.
íd
())

349 
ªÆ_keys
.
push_back
(
c⁄°_ˇ°
<*>((*
ô
).
c_°r
()));

350 
	gkey_Àn
.
push_back
((*
ô
).
Àngth
());

351 ++
	gô
;

358 i‡(! 
	gªÆ_keys
.
em±y
())

360 
memˇched_ªtu∫_t
 
	grc

memˇched_mgë
(&
memc
, &
ªÆ_keys
[0], &
key_Àn
[0],

361 
ªÆ_keys
.
size
());

362  (
	grc
 =
MEMCACHED_SUCCESS
);

365  
	gÁl£
;

379 
boﬁ
 
£t
(c⁄° 
°d
::
°rög
 &
key
,

380 c⁄° 
°d
::
ve˘‹
<> &
vÆue
,

381 
time_t
 
expú©i⁄
,

382 
uöt32_t
 
Êags
Ë
throw
(
Eº‹
)

384 i‡(
	gkey
.
em±y
(Ë|| 
	gvÆue
.empty())

386 
throw
(
Eº‹
("thêkey o∏vÆuêsuµlõd i†em±y!", 
Ál£
));

388 
memˇched_ªtu∫_t
 
	grc

memˇched_£t
(&
memc
,

389 
key
.
c_°r
(), key.
Àngth
(),

390 &
vÆue
[0], vÆue.
size
(),

391 
expú©i⁄
, 
Êags
);

392  (
	grc
 =
MEMCACHED_SUCCESS
 || 
rc
 =
MEMCACHED_BUFFERED
);

406 
boﬁ
 
£tByKey
(c⁄° 
°d
::
°rög
 &
ma°î_key
,

407 c⁄° 
°d
::
°rög
 &
key
,

408 c⁄° 
°d
::
ve˘‹
<> &
vÆue
,

409 
time_t
 
expú©i⁄
,

410 
uöt32_t
 
Êags
Ë
throw
(
Eº‹
)

412 i‡(
	gma°î_key
.
em±y
() ||

413 
	gkey
.
em±y
() ||

414 
	gvÆue
.
em±y
())

416 
throw
(
Eº‹
("thêkey o∏vÆuêsuµlõd i†em±y!", 
Ál£
));

418 
memˇched_ªtu∫_t
 
	grc

memˇched_£t_by_key
(&
memc
, 
ma°î_key
.
c_°r
(),

419 
ma°î_key
.
Àngth
(),

420 
key
.
c_°r
(), key.
Àngth
(),

421 &
vÆue
[0], vÆue.
size
(),

422 
expú©i⁄
,

423 
Êags
);

424  (
	grc
 =
MEMCACHED_SUCCESS
);

437 
boﬁ
 
£tAŒ
(
°d
::
ve˘‹
<°d::
°rög
> &
keys
,

438 
°d
::
ve˘‹
< std::ve˘‹<> *> &
vÆues
,

439 
time_t
 
expú©i⁄
,

440 
uöt32_t
 
Êags
Ë
throw
(
Eº‹
)

442 i‡(
	gkeys
.
size
(Ë!
vÆues
.size())

444 
throw
(
Eº‹
("Thênumbî o‡key†™d vÆue†dÿnŸ m©ch!", 
Ál£
));

446 
boﬁ
 
	gªtvÆ

åue
;

447 
	g°d
::
ve˘‹
<
°d
::
°rög
>::
ôî©‹
 
key_ô

keys
.
begö
();

448 
	g°d
::
ve˘‹
< 
°d
::ve˘‹<> *>::
ôî©‹
 
vÆ_ô

vÆues
.
begö
();

449 
	gkey_ô
 !
keys
.
íd
())

451 
ªtvÆ

£t
((*
key_ô
), *(*
vÆ_ô
), 
expú©i⁄
, 
Êags
);

452 i‡(
	gªtvÆ
 =
Ál£
)

454  
ªtvÆ
;

456 ++
	gkey_ô
;

457 ++
	gvÆ_ô
;

459  
	gªtvÆ
;

471 
boﬁ
 
£tAŒ
(
°d
::
m≠
<c⁄° std::
°rög
, std::
ve˘‹
<> > &
key_vÆue_m≠
,

472 
time_t
 
expú©i⁄
,

473 
uöt32_t
 
Êags
Ë
throw
(
Eº‹
)

475 i‡(
	gkey_vÆue_m≠
.
em±y
())

477 
throw
(
Eº‹
("Thêkey/vÆue†¨ênŸÖr›îly së!", 
Ál£
));

479 
boﬁ
 
	gªtvÆ

åue
;

480 
	g°d
::
m≠
<c⁄° 
°d
::
°rög
, std::
ve˘‹
<> >::
ôî©‹
 
ô
=

481 
key_vÆue_m≠
.
begö
();

482 
	gô
 !
key_vÆue_m≠
.
íd
())

484 
ªtvÆ

£t
(
ô
->
fú°
, it->
£c⁄d
, 
expú©i⁄
, 
Êags
);

485 i‡(
	gªtvÆ
 =
Ál£
)

487 
°d
::
°rög
 
îr_buff
("There wasánÉrror settingÅhe key ");

488 
	gîr_buff
.
≠≥nd
(
ô
->
fú°
);

489 
throw
(
Eº‹
(
îr_buff
, 
Ál£
));

491 ++
	gô
;

493  
	gåue
;

506 
boﬁ
 
ö¸emít
(c⁄° 
°d
::
°rög
 &
key
, 
uöt32_t
 
off£t
, 
uöt64_t
 *
vÆue
Ë
throw
(
Eº‹
)

508 i‡(
	gkey
.
em±y
())

510 
throw
(
Eº‹
("thêkey suµlõd i†em±y!", 
Ál£
));

512 
memˇched_ªtu∫_t
 
	grc

memˇched_ö¸emít
(&
memc
, 
key
.
c_°r
(), key.
Àngth
(),

513 
off£t
, 
vÆue
);

514  (
	grc
 =
MEMCACHED_SUCCESS
);

527 
boﬁ
 
de¸emít
(c⁄° 
°d
::
°rög
 &
key
, 
uöt32_t
 
off£t
, 
uöt64_t
 *
vÆue
)

528 
throw
(
Eº‹
)

530 i‡(
	gkey
.
em±y
())

532 
throw
(
Eº‹
("thêkey suµlõd i†em±y!", 
Ál£
));

534 
memˇched_ªtu∫_t
 
	grc

memˇched_de¸emít
(&
memc
, 
key
.
c_°r
(),

535 
key
.
Àngth
(),

536 
off£t
, 
vÆue
);

537  (
	grc
 =
MEMCACHED_SUCCESS
);

549 
boﬁ
 
add
(c⁄° 
°d
::
°rög
 &
key
, c⁄° std::
ve˘‹
<> &
vÆue
)

550 
throw
(
Eº‹
)

552 i‡(
key
.
em±y
(Ë|| 
vÆue
.empty())

554 
throw
(
Eº‹
("thêkey o∏vÆuêsuµlõd i†em±y!", 
Ál£
));

556 
memˇched_ªtu∫_t
 
	grc

memˇched_add
(&
memc
, 
key
.
c_°r
(), key.
Àngth
(),

557 &
vÆue
[0], vÆue.
size
(), 0, 0);

558  (
	grc
 =
MEMCACHED_SUCCESS
);

571 
boﬁ
 
addByKey
(c⁄° 
°d
::
°rög
 &
ma°î_key
,

572 c⁄° 
°d
::
°rög
 &
key
,

573 c⁄° 
°d
::
ve˘‹
<> &
vÆue
Ë
throw
(
Eº‹
)

575 i‡(
ma°î_key
.
em±y
() ||

576 
key
.
em±y
() ||

577 
vÆue
.
em±y
())

579 
throw
(
Eº‹
("thêma°î key o∏key suµlõd i†em±y!", 
Ál£
));

581 
memˇched_ªtu∫_t
 
	grc

memˇched_add_by_key
(&
memc
,

582 
ma°î_key
.
c_°r
(),

583 
ma°î_key
.
Àngth
(),

584 
key
.
c_°r
(),

585 
key
.
Àngth
(),

586 &
vÆue
[0],

587 
vÆue
.
size
(),

589  (
	grc
 =
MEMCACHED_SUCCESS
);

600 
boﬁ
 
ª∂a˚
(c⁄° 
°d
::
°rög
 &
key
, c⁄° std::
ve˘‹
<> &
vÆue
Ë
throw
(
Eº‹
)

602 i‡(
key
.
em±y
() ||

603 
vÆue
.
em±y
())

605 
throw
(
Eº‹
("thêkey o∏vÆuêsuµlõd i†em±y!", 
Ál£
));

607 
memˇched_ªtu∫_t
 
	grc

memˇched_ª∂a˚
(&
memc
, 
key
.
c_°r
(), key.
Àngth
(),

608 &
vÆue
[0], vÆue.
size
(),

610  (
	grc
 =
MEMCACHED_SUCCESS
);

623 
boﬁ
 
ª∂a˚ByKey
(c⁄° 
°d
::
°rög
 &
ma°î_key
,

624 c⁄° 
°d
::
°rög
 &
key
,

625 c⁄° 
°d
::
ve˘‹
<> &
vÆue
)

627 i‡(
ma°î_key
.
em±y
() ||

628 
key
.
em±y
() ||

629 
vÆue
.
em±y
())

631 
throw
(
Eº‹
("thêma°î key o∏key suµlõd i†em±y!", 
Ál£
));

633 
memˇched_ªtu∫_t
 
	grc

memˇched_ª∂a˚_by_key
(&
memc
,

634 
ma°î_key
.
c_°r
(),

635 
ma°î_key
.
Àngth
(),

636 
key
.
c_°r
(),

637 
key
.
Àngth
(),

638 &
vÆue
[0],

639 
vÆue
.
size
(),

641  (
	grc
 =
MEMCACHED_SUCCESS
);

651 
boﬁ
 
¥ïíd
(c⁄° 
°d
::
°rög
 &
key
, c⁄° std::
ve˘‹
<> &
vÆue
)

652 
throw
(
Eº‹
)

654 i‡(
key
.
em±y
(Ë|| 
vÆue
.empty())

656 
throw
(
Eº‹
("thêkey o∏vÆuêsuµlõd i†em±y!", 
Ál£
));

658 
memˇched_ªtu∫_t
 
	grc

memˇched_¥ïíd
(&
memc
, 
key
.
c_°r
(), key.
Àngth
(),

659 &
vÆue
[0], vÆue.
size
(), 0, 0);

660  (
	grc
 =
MEMCACHED_SUCCESS
);

673 
boﬁ
 
¥ïídByKey
(c⁄° 
°d
::
°rög
 &
ma°î_key
,

674 c⁄° 
°d
::
°rög
 &
key
,

675 c⁄° 
°d
::
ve˘‹
<> &
vÆue
)

676 
throw
(
Eº‹
)

678 i‡(
ma°î_key
.
em±y
() ||

679 
key
.
em±y
() ||

680 
vÆue
.
em±y
())

682 
throw
(
Eº‹
("thêma°î key o∏key suµlõd i†em±y!", 
Ál£
));

684 
memˇched_ªtu∫_t
 
	grc

memˇched_¥ïíd_by_key
(&
memc
,

685 
ma°î_key
.
c_°r
(),

686 
ma°î_key
.
Àngth
(),

687 
key
.
c_°r
(),

688 
key
.
Àngth
(),

689 &
vÆue
[0],

690 
vÆue
.
size
(),

693  (
	grc
 =
MEMCACHED_SUCCESS
);

703 
boﬁ
 
≠≥nd
(c⁄° 
°d
::
°rög
 &
key
, c⁄° std::
ve˘‹
<> &
vÆue
)

704 
throw
(
Eº‹
)

706 i‡(
key
.
em±y
(Ë|| 
vÆue
.empty())

708 
throw
(
Eº‹
("thêkey o∏vÆuêsuµlõd i†em±y!", 
Ál£
));

710 
memˇched_ªtu∫_t
 
	grc

memˇched_≠≥nd
(&
memc
,

711 
key
.
c_°r
(),

712 
key
.
Àngth
(),

713 &
vÆue
[0],

714 
vÆue
.
size
(),

716  (
	grc
 =
MEMCACHED_SUCCESS
);

729 
boﬁ
 
≠≥ndByKey
(c⁄° 
°d
::
°rög
 &
ma°î_key
,

730 c⁄° 
°d
::
°rög
 &
key
,

731 c⁄° 
°d
::
ve˘‹
<> &
vÆue
)

732 
throw
(
Eº‹
)

734 i‡(
ma°î_key
.
em±y
() ||

735 
key
.
em±y
() ||

736 
vÆue
.
em±y
())

738 
throw
(
Eº‹
("thêma°î key o∏key suµlõd i†em±y!", 
Ál£
));

740 
memˇched_ªtu∫_t
 
	grc

memˇched_≠≥nd_by_key
(&
memc
,

741 
ma°î_key
.
c_°r
(),

742 
ma°î_key
.
Àngth
(),

743 
key
.
c_°r
(),

744 
key
.
Àngth
(),

745 &
vÆue
[0],

746 
vÆue
.
size
(),

748  (
	grc
 =
MEMCACHED_SUCCESS
);

759 
boﬁ
 
ˇs
(c⁄° 
°d
::
°rög
 &
key
,

760 c⁄° 
°d
::
ve˘‹
<> &
vÆue
,

761 
uöt64_t
 
ˇs_¨g
Ë
throw
(
Eº‹
)

763 i‡(
	gkey
.
em±y
(Ë|| 
	gvÆue
.empty())

765 
throw
(
Eº‹
("thêkey o∏vÆuêsuµlõd i†em±y!", 
Ál£
));

767 
memˇched_ªtu∫_t
 
	grc

memˇched_ˇs
(&
memc
, 
key
.
c_°r
(), key.
Àngth
(),

768 &
vÆue
[0], vÆue.
size
(),

769 0, 0, 
ˇs_¨g
);

770  (
	grc
 =
MEMCACHED_SUCCESS
);

783 
boﬁ
 
ˇsByKey
(c⁄° 
°d
::
°rög
 &
ma°î_key
,

784 c⁄° 
°d
::
°rög
 &
key
,

785 c⁄° 
°d
::
ve˘‹
<> &
vÆue
,

786 
uöt64_t
 
ˇs_¨g
Ë
throw
(
Eº‹
)

788 i‡(
	gma°î_key
.
em±y
() ||

789 
	gkey
.
em±y
() ||

790 
	gvÆue
.
em±y
())

792 
throw
(
Eº‹
("thêma°î key, key o∏vÆuêsuµlõd i†em±y!", 
Ál£
));

794 
memˇched_ªtu∫_t
 
	grc

memˇched_ˇs_by_key
(&
memc
,

795 
ma°î_key
.
c_°r
(),

796 
ma°î_key
.
Àngth
(),

797 
key
.
c_°r
(),

798 
key
.
Àngth
(),

799 &
vÆue
[0],

800 
vÆue
.
size
(),

801 0, 0, 
ˇs_¨g
);

802  (
	grc
 =
MEMCACHED_SUCCESS
);

811 
boﬁ
 
ªmove
(c⁄° 
°d
::
°rög
 &
key
Ë
throw
(
Eº‹
)

813 i‡(
key
.
em±y
())

815 
throw
(
Eº‹
("thêkey suµlõd i†em±y!", 
Ál£
));

817 
memˇched_ªtu∫_t
 
	grc

memˇched_dñëe
(&
memc
, 
key
.
c_°r
(), key.
Àngth
(), 0);

818  (
	grc
 =
MEMCACHED_SUCCESS
);

828 
boﬁ
 
ªmove
(c⁄° 
°d
::
°rög
 &
key
,

829 
time_t
 
expú©i⁄
Ë
throw
(
Eº‹
)

831 i‡(
	gkey
.
em±y
())

833 
throw
(
Eº‹
("thêkey suµlõd i†em±y!", 
Ál£
));

835 
memˇched_ªtu∫_t
 
	grc

memˇched_dñëe
(&
memc
,

836 
key
.
c_°r
(),

837 
key
.
Àngth
(),

838 
expú©i⁄
);

839  (
	grc
 =
MEMCACHED_SUCCESS
);

849 
boﬁ
 
ªmoveByKey
(c⁄° 
°d
::
°rög
 &
ma°î_key
,

850 c⁄° 
°d
::
°rög
 &
key
Ë
throw
(
Eº‹
)

852 i‡(
ma°î_key
.
em±y
(Ë|| 
key
.empty())

854 
throw
(
Eº‹
("thêma°î key o∏key suµlõd i†em±y!", 
Ál£
));

856 
memˇched_ªtu∫_t
 
	grc

memˇched_dñëe_by_key
(&
memc
,

857 
ma°î_key
.
c_°r
(),

858 
ma°î_key
.
Àngth
(),

859 
key
.
c_°r
(),

860 
key
.
Àngth
(),

862  (
	grc
 =
MEMCACHED_SUCCESS
);

873 
boﬁ
 
ªmoveByKey
(c⁄° 
°d
::
°rög
 &
ma°î_key
,

874 c⁄° 
°d
::
°rög
 &
key
,

875 
time_t
 
expú©i⁄
Ë
throw
(
Eº‹
)

877 i‡(
	gma°î_key
.
em±y
(Ë|| 
	gkey
.empty())

879 
throw
(
Eº‹
("thêma°î key o∏key suµlõd i†em±y!", 
Ál£
));

881 
memˇched_ªtu∫_t
 
	grc

memˇched_dñëe_by_key
(&
memc
,

882 
ma°î_key
.
c_°r
(),

883 
ma°î_key
.
Àngth
(),

884 
key
.
c_°r
(),

885 
key
.
Àngth
(),

886 
expú©i⁄
);

887  (
	grc
 =
MEMCACHED_SUCCESS
);

897 
boﬁ
 
Êush
(
time_t
 
expú©i⁄
)

899 
memˇched_ªtu∫_t
 
	grc

memˇched_Êush
(&
memc
, 
expú©i⁄
);

900  (
	grc
 =
MEMCACHED_SUCCESS
);

913 
boﬁ
 
„tchExecuã
(
memˇched_execuã_‚
 *
ˇŒback
,

914 *
c⁄ãxt
,

915 
uöt32_t
 
num_of_ˇŒbacks
)

917 
memˇched_ªtu∫_t
 
	grc

memˇched_„tch_execuã
(&
memc
,

918 
ˇŒback
,

919 
c⁄ãxt
,

920 
num_of_ˇŒbacks
);

921  (
	grc
 =
MEMCACHED_SUCCESS
);

928 c⁄° 
	g°d
::
°rög
 
libVîsi⁄
() const

930 c⁄° *
vî

memˇched_lib_vîsi⁄
();

931 c⁄° 
	g°d
::
°rög
 
vîsi⁄
(
vî
);

932  
	gvîsi⁄
;

943 
boﬁ
 
gëSèts
(
°d
::
m≠
< std::
°rög
, std::map<std::string, std::string> >

944 &
°©s_m≠
)

946 
memˇched_ªtu∫_t
 
rc
;

947 
memˇched_°©_°
 *
	g°©s

memˇched_°©
(&
memc
, 
NULL
, &
rc
);

949 i‡(
	grc
 !
MEMCACHED_SUCCESS
 &&

950 
rc
 !
MEMCACHED_SOME_ERRORS
)

952  
Ál£
;

955 
uöt32_t
 
	g£rvî_cou¡

memˇched_£rvî_cou¡
(&
memc
);

961 
uöt32_t
 
	gx
0; x < 
	g£rvî_cou¡
; x++)

963 
memˇched_£rvî_ö°™˚_°
 
	gö°™˚
=

964 
memˇched_£rvî_ö°™˚_by_posôi⁄
(&
memc
, 
x
);

965 
	g°d
::
o°rög°ªam
 
°r°m
;

966 
	g°d
::
°rög
 
£rvî_«me
(
memˇched_£rvî_«me
(
ö°™˚
));

967 
	g£rvî_«me
.
≠≥nd
(":");

968 
	g°r°m
 << 
memˇched_£rvî_p‹t
(
ö°™˚
);

969 
	g£rvî_«me
.
≠≥nd
(
°r°m
.
°r
());

971 
	g°d
::
m≠
<
°d
::
°rög
, std::°rög> 
£rvî_°©s
;

972 **
	gli°

NULL
;

973 **
	g±r

NULL
;

975 
	gli°

memˇched_°©_gë_keys
(&
memc
, &
°©s
[
x
], &
rc
);

976 
	g±r

li°
; *ptr;Ötr++)

978 *
	gvÆue

memˇched_°©_gë_vÆue
(&
memc
, &
°©s
[
x
], *
±r
, &
rc
);

979 
	g£rvî_°©s
[*
±r
]
vÆue
;

980 
‰ì
(
vÆue
);

983 
	g°©s_m≠
[
£rvî_«me
]
£rvî_°©s
;

984 
‰ì
(
li°
);

987 
memˇched_°©_‰ì
(&
memc
, 
°©s
);

988  
	gåue
;

991 
	g¥iv©e
:

993 
°d
::
°rög
 
£rvîs_li°
;

994 
memˇched_°
 
	gmemc
;

995 
memˇched_ªsu…_°
 
	gªsu…
;

	@libmemcached/memcached/protocol_binary.h

36 #i‚de‡
PROTOCOL_BINARY_H


37 
	#PROTOCOL_BINARY_H


	)

39 
	~"vbuckë.h
"

52 #ifde‡
__˝lu•lus


62 
PROTOCOL_BINARY_REQ
 = 0x80,

63 
PROTOCOL_BINARY_RES
 = 0x81

64 } 
	t¥Ÿocﬁ_bö¨y_magic
;

71 
PROTOCOL_BINARY_RESPONSE_SUCCESS
 = 0x00,

72 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
 = 0x01,

73 
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
 = 0x02,

74 
PROTOCOL_BINARY_RESPONSE_E2BIG
 = 0x03,

75 
PROTOCOL_BINARY_RESPONSE_EINVAL
 = 0x04,

76 
PROTOCOL_BINARY_RESPONSE_NOT_STORED
 = 0x05,

77 
PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL
 = 0x06,

78 
PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET
 = 0x07,

79 
PROTOCOL_BINARY_RESPONSE_AUTH_ERROR
 = 0x20,

80 
PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE
 = 0x21,

81 
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
 = 0x81,

82 
PROTOCOL_BINARY_RESPONSE_ENOMEM
 = 0x82,

83 
PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED
 = 0x83,

84 
PROTOCOL_BINARY_RESPONSE_EINTERNAL
 = 0x84,

85 
PROTOCOL_BINARY_RESPONSE_EBUSY
 = 0x85,

86 
PROTOCOL_BINARY_RESPONSE_ETMPFAIL
 = 0x86

87 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
;

94 
PROTOCOL_BINARY_CMD_GET
 = 0x00,

95 
PROTOCOL_BINARY_CMD_SET
 = 0x01,

96 
PROTOCOL_BINARY_CMD_ADD
 = 0x02,

97 
PROTOCOL_BINARY_CMD_REPLACE
 = 0x03,

98 
PROTOCOL_BINARY_CMD_DELETE
 = 0x04,

99 
PROTOCOL_BINARY_CMD_INCREMENT
 = 0x05,

100 
PROTOCOL_BINARY_CMD_DECREMENT
 = 0x06,

101 
PROTOCOL_BINARY_CMD_QUIT
 = 0x07,

102 
PROTOCOL_BINARY_CMD_FLUSH
 = 0x08,

103 
PROTOCOL_BINARY_CMD_GETQ
 = 0x09,

104 
PROTOCOL_BINARY_CMD_NOOP
 = 0x0a,

105 
PROTOCOL_BINARY_CMD_VERSION
 = 0x0b,

106 
PROTOCOL_BINARY_CMD_GETK
 = 0x0c,

107 
PROTOCOL_BINARY_CMD_GETKQ
 = 0x0d,

108 
PROTOCOL_BINARY_CMD_APPEND
 = 0x0e,

109 
PROTOCOL_BINARY_CMD_PREPEND
 = 0x0f,

110 
PROTOCOL_BINARY_CMD_STAT
 = 0x10,

111 
PROTOCOL_BINARY_CMD_SETQ
 = 0x11,

112 
PROTOCOL_BINARY_CMD_ADDQ
 = 0x12,

113 
PROTOCOL_BINARY_CMD_REPLACEQ
 = 0x13,

114 
PROTOCOL_BINARY_CMD_DELETEQ
 = 0x14,

115 
PROTOCOL_BINARY_CMD_INCREMENTQ
 = 0x15,

116 
PROTOCOL_BINARY_CMD_DECREMENTQ
 = 0x16,

117 
PROTOCOL_BINARY_CMD_QUITQ
 = 0x17,

118 
PROTOCOL_BINARY_CMD_FLUSHQ
 = 0x18,

119 
PROTOCOL_BINARY_CMD_APPENDQ
 = 0x19,

120 
PROTOCOL_BINARY_CMD_PREPENDQ
 = 0x1a,

121 
PROTOCOL_BINARY_CMD_VERBOSITY
 = 0x1b,

122 
PROTOCOL_BINARY_CMD_TOUCH
 = 0x1c,

123 
PROTOCOL_BINARY_CMD_GAT
 = 0x1d,

124 
PROTOCOL_BINARY_CMD_GATQ
 = 0x1e,

126 
PROTOCOL_BINARY_CMD_SASL_LIST_MECHS
 = 0x20,

127 
PROTOCOL_BINARY_CMD_SASL_AUTH
 = 0x21,

128 
PROTOCOL_BINARY_CMD_SASL_STEP
 = 0x22,

134 
PROTOCOL_BINARY_CMD_RGET
 = 0x30,

135 
PROTOCOL_BINARY_CMD_RSET
 = 0x31,

136 
PROTOCOL_BINARY_CMD_RSETQ
 = 0x32,

137 
PROTOCOL_BINARY_CMD_RAPPEND
 = 0x33,

138 
PROTOCOL_BINARY_CMD_RAPPENDQ
 = 0x34,

139 
PROTOCOL_BINARY_CMD_RPREPEND
 = 0x35,

140 
PROTOCOL_BINARY_CMD_RPREPENDQ
 = 0x36,

141 
PROTOCOL_BINARY_CMD_RDELETE
 = 0x37,

142 
PROTOCOL_BINARY_CMD_RDELETEQ
 = 0x38,

143 
PROTOCOL_BINARY_CMD_RINCR
 = 0x39,

144 
PROTOCOL_BINARY_CMD_RINCRQ
 = 0x3a,

145 
PROTOCOL_BINARY_CMD_RDECR
 = 0x3b,

146 
PROTOCOL_BINARY_CMD_RDECRQ
 = 0x3c,

150 
PROTOCOL_BINARY_CMD_SET_VBUCKET
 = 0x3d,

151 
PROTOCOL_BINARY_CMD_GET_VBUCKET
 = 0x3e,

152 
PROTOCOL_BINARY_CMD_DEL_VBUCKET
 = 0x3f,

156 
PROTOCOL_BINARY_CMD_TAP_CONNECT
 = 0x40,

157 
PROTOCOL_BINARY_CMD_TAP_MUTATION
 = 0x41,

158 
PROTOCOL_BINARY_CMD_TAP_DELETE
 = 0x42,

159 
PROTOCOL_BINARY_CMD_TAP_FLUSH
 = 0x43,

160 
PROTOCOL_BINARY_CMD_TAP_OPAQUE
 = 0x44,

161 
PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET
 = 0x45,

162 
PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START
 = 0x46,

163 
PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END
 = 0x47,

166 
PROTOCOL_BINARY_CMD_LAST_RESERVED
 = 0xef,

169 
PROTOCOL_BINARY_CMD_SCRUB
 = 0xf0

170 } 
	t¥Ÿocﬁ_bö¨y_comm™d
;

177 
PROTOCOL_BINARY_RAW_BYTES
 = 0x00

178 } 
	t¥Ÿocﬁ_bö¨y_d©©y≥s
;

186 
uöt8_t
 
magic
;

187 
uöt8_t
 
›code
;

188 
uöt16_t
 
keyÀn
;

189 
uöt8_t
 
exéí
;

190 
uöt8_t
 
d©©y≥
;

191 
uöt16_t
 
vbuckë
;

192 
uöt32_t
 
bodyÀn
;

193 
uöt32_t
 
›aque
;

194 
uöt64_t
 
ˇs
;

195 } 
ªque°
;

196 
uöt8_t
 
byãs
[24];

197 } 
	t¥Ÿocﬁ_bö¨y_ªque°_hódî
;

205 
uöt8_t
 
magic
;

206 
uöt8_t
 
›code
;

207 
uöt16_t
 
keyÀn
;

208 
uöt8_t
 
exéí
;

209 
uöt8_t
 
d©©y≥
;

210 
uöt16_t
 
°©us
;

211 
uöt32_t
 
bodyÀn
;

212 
uöt32_t
 
›aque
;

213 
uöt64_t
 
ˇs
;

214 } 
ª•⁄£
;

215 
uöt8_t
 
byãs
[24];

216 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
;

223 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

224 } 
mesßge
;

225 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
)];

226 } 
	t¥Ÿocﬁ_bö¨y_ªque°_no_exåas
;

233 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

234 } 
mesßge
;

235 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
)];

236 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
;

242 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gë
;

243 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gëq
;

244 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gëk
;

245 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gëkq
;

254 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

256 
uöt32_t
 
Êags
;

257 } 
body
;

258 } 
mesßge
;

259 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
) + 4];

260 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gë
;

262 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gëq
;

263 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gëk
;

264 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gëkq
;

270 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_dñëe
;

276 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_dñëe
;

286 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

288 
uöt32_t
 
expú©i⁄
;

289 } 
body
;

290 } 
mesßge
;

291 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

292 } 
	t¥Ÿocﬁ_bö¨y_ªque°_Êush
;

298 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_Êush
;

306 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

308 
uöt32_t
 
Êags
;

309 
uöt32_t
 
expú©i⁄
;

310 } 
body
;

311 } 
mesßge
;

312 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 8];

313 } 
	t¥Ÿocﬁ_bö¨y_ªque°_£t
;

314 
¥Ÿocﬁ_bö¨y_ªque°_£t
 
	t¥Ÿocﬁ_bö¨y_ªque°_add
;

315 
¥Ÿocﬁ_bö¨y_ªque°_£t
 
	t¥Ÿocﬁ_bö¨y_ªque°_ª∂a˚
;

321 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_£t
;

322 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_add
;

323 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_ª∂a˚
;

329 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_no›
;

335 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_no›
;

344 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

346 
uöt64_t
 
dñè
;

347 
uöt64_t
 
öôül
;

348 
uöt32_t
 
expú©i⁄
;

349 } 
body
;

350 } 
mesßge
;

351 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 20];

352 } 
	t¥Ÿocﬁ_bö¨y_ªque°_ö¸
;

353 
¥Ÿocﬁ_bö¨y_ªque°_ö¸
 
	t¥Ÿocﬁ_bö¨y_ªque°_de¸
;

362 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

364 
uöt64_t
 
vÆue
;

365 } 
body
;

366 } 
mesßge
;

367 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
) + 8];

368 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
;

369 
¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_de¸
;

375 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_quô
;

381 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_quô
;

387 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_≠≥nd
;

388 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_¥ïíd
;

394 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_≠≥nd
;

395 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_¥ïíd
;

401 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_vîsi⁄
;

407 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_vîsi⁄
;

414 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_°©s
;

420 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_°©s
;

427 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

429 
uöt32_t
 
Àvñ
;

430 } 
body
;

431 } 
mesßge
;

432 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

433 } 
	t¥Ÿocﬁ_bö¨y_ªque°_vîbosôy
;

438 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_vîbosôy
;

445 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

447 
uöt32_t
 
expú©i⁄
;

448 } 
body
;

449 } 
mesßge
;

450 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

451 } 
	t¥Ÿocﬁ_bö¨y_ªque°_touch
;

456 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_touch
;

463 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

465 
uöt32_t
 
expú©i⁄
;

466 } 
body
;

467 } 
mesßge
;

468 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

469 } 
	t¥Ÿocﬁ_bö¨y_ªque°_g©
;

471 
¥Ÿocﬁ_bö¨y_ªque°_g©
 
	t¥Ÿocﬁ_bö¨y_ªque°_g©q
;

476 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_g©
;

477 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_g©q
;

490 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

492 
uöt16_t
 
size
;

493 
uöt8_t
 
ª£rved
;

494 
uöt8_t
 
Êags
;

495 
uöt32_t
 
max_ªsu…s
;

496 } 
body
;

497 } 
mesßge
;

498 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

499 } 
	t¥Ÿocﬁ_bö¨y_ªque°_ønge›
;

501 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rgë
;

502 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_r£t
;

503 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_r£tq
;

504 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_øµíd
;

505 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_øµídq
;

506 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_Ωª≥nd
;

507 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_Ωª≥ndq
;

508 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rdñëe
;

509 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rdñëeq
;

510 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rö¸
;

511 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rö¸q
;

512 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rde¸
;

513 
¥Ÿocﬁ_bö¨y_ªque°_ønge›
 
	t¥Ÿocﬁ_bö¨y_ªque°_rde¸q
;

524 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

539 
uöt32_t
 
Êags
;

554 
	#TAP_CONNECT_FLAG_BACKFILL
 0x01

	)

560 
	#TAP_CONNECT_FLAG_DUMP
 0x02

	)

567 
	#TAP_CONNECT_FLAG_LIST_VBUCKETS
 0x04

	)

572 
	#TAP_CONNECT_FLAG_TAKEOVER_VBUCKETS
 0x08

	)

576 
	#TAP_CONNECT_SUPPORT_ACK
 0x10

	)

583 
	#TAP_CONNECT_REQUEST_KEYS_ONLY
 0x20

	)

590 
	#TAP_CONNECT_CHECKPOINT
 0x40

	)

595 
	#TAP_CONNECT_REGISTERED_CLIENT
 0x80

	)

596 } 
body
;

597 } 
mesßge
;

598 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 4];

599 } 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_c⁄√˘
;

603 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

606 
uöt16_t
 
ígöe•ecific_Àngth
;

615 
	#TAP_FLAG_ACK
 0x01

	)

619 
	#TAP_FLAG_NO_VALUE
 0x02

	)

620 
uöt16_t
 
Êags
;

621 
uöt8_t
 
âl
;

622 
uöt8_t
 
ªs1
;

623 
uöt8_t
 
ªs2
;

624 
uöt8_t
 
ªs3
;

625 } 
èp
;

627 
uöt32_t
 
Êags
;

628 
uöt32_t
 
expú©i⁄
;

629 } 
ôem
;

630 } 
body
;

631 } 
mesßge
;

632 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 16];

633 } 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_muèti⁄
;

637 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

640 
uöt16_t
 
ígöe•ecific_Àngth
;

646 
uöt16_t
 
Êags
;

647 
uöt8_t
 
âl
;

648 
uöt8_t
 
ªs1
;

649 
uöt8_t
 
ªs2
;

650 
uöt8_t
 
ªs3
;

651 } 
èp
;

652 } 
body
;

653 } 
mesßge
;

654 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
) + 8];

655 } 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
;

657 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_dñëe
;

658 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_Êush
;

659 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_›aque
;

660 
¥Ÿocﬁ_bö¨y_ªque°_èp_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_èp_vbuckë_£t
;

666 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_s¸ub
;

671 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_s¸ub
;

679 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 
hódî
;

681 
vbuckë_°©e_t
 
°©e
;

682 } 
body
;

683 } 
mesßge
;

684 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ªque°_hódî
Ë+ (
vbuckë_°©e_t
)];

685 } 
	t¥Ÿocﬁ_bö¨y_ªque°_£t_vbuckë
;

689 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_£t_vbuckë
;

693 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_dñ_vbuckë
;

697 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_dñ_vbuckë
;

702 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
	t¥Ÿocﬁ_bö¨y_ªque°_gë_vbuckë
;

709 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

711 
vbuckë_°©e_t
 
°©e
;

712 } 
body
;

713 } 
mesßge
;

714 
uöt8_t
 
byãs
[(
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
Ë+ (
vbuckë_°©e_t
)];

715 } 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_gë_vbuckë
;

722 #ifde‡
__˝lu•lus


	@libmemcached/memcached/vbucket.h

2 #i‚de‡
MEMCACHED_VBUCKET_H


3 
	#MEMCACHED_VBUCKET_H
 1

	)

5 #ifde‡
__˝lu•lus


11 
vbuckë_°©e_a˘ive
 = 1,

12 
vbuckë_°©e_ª∂iˇ
,

13 
vbuckë_°©e_≥ndög
,

14 
vbuckë_°©e_dód


15 } 
	tvbuckë_°©e_t
;

17 
	#is_vÆid_vbuckë_°©e_t
(
°©e
) \

18 (
°©e
 =
vbuckë_°©e_a˘ive
 || \

19 
°©e
 =
vbuckë_°©e_ª∂iˇ
 || \

20 
°©e
 =
vbuckë_°©e_≥ndög
 || \

21 
°©e
 =
vbuckë_°©e_dód
)

	)

23 #ifde‡
__˝lu•lus


	@libmemcached/memcached_util.h

15 #i‚de‡
__LIBMEMCACHED__MEMCACHED_UTIL_H__


16 
	#__LIBMEMCACHED__MEMCACHED_UTIL_H__


	)

18 
	~<libmemˇched/utû/pög.h
>

19 
	~<libmemˇched/utû/poﬁ.h
>

20 
	~<libmemˇched/utû/vîsi⁄.h
>

	@libmemcached/options.cc

38 
	~<libmemˇched/comm⁄.h
>

40 
	~<libmemˇched/›ti⁄s/c⁄ãxt.h
>

42 c⁄° *
	$memˇched_∑r£_fûíame
(
memˇched_°
 *
memc
)

44  
	`memˇched_¨øy_°rög
(
memc
->
c⁄figuª
.
fûíame
);

45 
	}
}

47 
size_t
 
	$memˇched_∑r£_fûíame_Àngth
(
memˇched_°
 *
memc
)

49  
	`memˇched_¨øy_size
(
memc
->
c⁄figuª
.
fûíame
);

50 
	}
}

52 
memˇched_ªtu∫_t
 
	$_∑r£_fûe_›ti⁄s
(
memˇched_°
 *
£lf
, 
memˇched_°rög_t
 *
fûíame
)

54 
memˇched_¨øy_°
 *
ªÆ_«me

	`memˇched_°r˝y
(
£lf
, 
fûíame
->
c_°r
, fûíame->
size
);

56 i‡(
nŸ
 
ªÆ_«me
)

57  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

59 
FILE
 *
Â

	`f›í
(
	`memˇched_¨øy_°rög
(
ªÆ_«me
), "r");

60 i‡(! 
Â
)

62 
memˇched_°rög_t
 
îr‹_mesßge

	`memˇched_¨øy_to_°rög
(
ªÆ_«me
);

63 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t_î∫o
(
£lf
, 
î∫o
, &
îr‹_mesßge
);

64 
	`memˇched_¨øy_‰ì
(
ªÆ_«me
);

65  
rc
;

67 
	`memˇched_¨øy_‰ì
(
ªÆ_«me
);

69 
buf„r
[
BUFSIZ
];

70 
memˇched_ªtu∫_t
 
rc

MEMCACHED_INVALID_ARGUMENTS
;

71 
	`fgës
(
buf„r
, (buf„r), 
Â
))

73 
size_t
 
Àngth

	`°æí
(
buf„r
);

75 i‡(
Àngth
 =1 
™d
 
buf„r
[0] == '\n')

78 
rc

	`memˇched_∑r£_c⁄figuøti⁄
(
£lf
, 
buf„r
, 
Àngth
);

79 i‡(
rc
 !
MEMCACHED_SUCCESS
)

82 
	`f˛o£
(
Â
);

84  
rc
;

85 
	}
}

87 
memˇched_ªtu∫_t
 
	$libmemˇched_check_c⁄figuøti⁄
(c⁄° *
›ti⁄_°rög
, 
size_t
 
Àngth
, *
îr‹_buf„r
, size_à
îr‹_buf„r_size
)

89 
memˇched_°
 
memc
, *
memc_±r
;

91 i‡(
îr‹_buf„r_size
)

92 
îr‹_buf„r
[0]= 0;

94 i‡(! (
memc_±r

	`memˇched_¸óã
(&
memc
)))

95  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

97 
memˇched_ªtu∫_t
 
rc

	`memˇched_∑r£_c⁄figuøti⁄
(
memc_±r
, 
›ti⁄_°rög
, 
Àngth
);

98 i‡(
rc
 !
MEMCACHED_SUCCESS
 && 
îr‹_buf„r
 && 
îr‹_buf„r_size
)

100 
	`°∫˝y
(
îr‹_buf„r
, 
	`memˇched_œ°_îr‹_mesßge
(
memc_±r
), 
îr‹_buf„r_size
);

103 i‡(
rc
=
MEMCACHED_SUCCESS
 && 
	`memˇched_behavi‹_gë
(
memc_±r
, 
MEMCACHED_BEHAVIOR_LOAD_FROM_FILE
))

105 
memˇched_°rög_t
 
fûíame

	`memˇched_¨øy_to_°rög
(
memc_±r
->
c⁄figuª
.filename);

106 
rc

	`_∑r£_fûe_›ti⁄s
(
memc_±r
, &
fûíame
);

108 i‡(
rc
 !
MEMCACHED_SUCCESS
 && 
îr‹_buf„r
 && 
îr‹_buf„r_size
)

110 
	`°∫˝y
(
îr‹_buf„r
, 
	`memˇched_œ°_îr‹_mesßge
(
memc_±r
), 
îr‹_buf„r_size
);

114 
	`memˇched_‰ì
(
memc_±r
);

116  
rc
;

117 
	}
}

119 
memˇched_ªtu∫_t
 
	$memˇched_∑r£_c⁄figuøti⁄
(
memˇched_°
 *
£lf
, c⁄° *
›ti⁄_°rög
, 
size_t
 
Àngth
)

121 
	`WATCHPOINT_ASSERT
(
£lf
);

122 i‡(! 
£lf
)

124  
	`memˇched_£t_îr‹
(
£lf
, 
MEMCACHED_INVALID_ARGUMENTS
, 
NULL
);

127 
memˇched_ªtu∫_t
 
rc
;

128 
C⁄ãxt
 
	`c⁄ãxt
(
›ti⁄_°rög
, 
Àngth
, 
£lf
, 
rc
);

130 
c⁄ãxt
.
	`°¨t
();

132  
rc
;

133 
	}
}

135 
	$memˇched_£t_c⁄figuøti⁄_fûe
(
memˇched_°
 *
£lf
, c⁄° *
fûíame
, 
size_t
 
fûíame_Àngth
)

137 
	`memˇched_¨øy_‰ì
(
£lf
->
c⁄figuª
.
fûíame
);

138 
£lf
->
c⁄figuª
.
fûíame

	`memˇched_°r˝y
(£lf, fûíame, 
fûíame_Àngth
);

139 
	}
}

141 
memˇched_ªtu∫_t
 
	$memˇched_∑r£_c⁄figuª_fûe
(
memˇched_°
 *
£lf
, c⁄° *
fûíame
, 
size_t
 
fûíame_Àngth
)

143 i‡(! 
£lf
)

144  
	`memˇched_£t_îr‹
(
£lf
, 
MEMCACHED_INVALID_ARGUMENTS
, 
NULL
);

146 i‡(! 
fûíame
 || 
fûíame_Àngth
 == 0)

147  
	`memˇched_£t_îr‹
(
£lf
, 
MEMCACHED_INVALID_ARGUMENTS
, 
NULL
);

149 
memˇched_°rög_t
 
tmp
;

150 
tmp
.
c_°r

fûíame
;

151 
tmp
.
size

fûíame_Àngth
;

153  
	`_∑r£_fûe_›ti⁄s
(
£lf
, &
tmp
);

154 
	}
}

	@libmemcached/options.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_API


45 
memˇched_ªtu∫_t
 
libmemˇched_check_c⁄figuøti⁄
(c⁄° *
›ti⁄_°rög
, 
size_t
 
Àngth
, *
îr‹_buf„r
, size_à
îr‹_buf„r_size
);

47 
LIBMEMCACHED_LOCAL


48 
memˇched_£t_c⁄figuøti⁄_fûe
(
memˇched_°
 *
£lf
, c⁄° *
fûíame
, 
size_t
 
fûíame_Àngth
);

50 
LIBMEMCACHED_LOCAL


51 
memˇched_ªtu∫_t
 
memˇched_∑r£_c⁄figuøti⁄
(
memˇched_°
 *
±r
, c⁄° *
›ti⁄_°rög
, 
size_t
 
Àngth
);

53 
LIBMEMCACHED_LOCAL


54 
memˇched_ªtu∫_t
 
memˇched_∑r£_c⁄figuª_fûe
(
memˇched_°
 *
±r
, c⁄° *
fûíame
, 
size_t
 
fûíame_Àngth
);

56 
LIBMEMCACHED_LOCAL


57 c⁄° *
memˇched_∑r£_fûíame
(
memˇched_°
 *
memc
);

59 
LIBMEMCACHED_LOCAL


60 
size_t
 
memˇched_∑r£_fûíame_Àngth
(
memˇched_°
 *
memc
);

62 #ifde‡
__˝lu•lus


	@libmemcached/options/context.h

38 #¥agm®
⁄˚


40 
	~<libmemˇched/comm⁄.h
>

42 ˛as†
	cC⁄ãxt


44 
	mpublic
:

45 
	$C⁄ãxt
(c⁄° *
›ti⁄_°rög
, 
size_t
 
›ti⁄_°rög_Àngth
, 
memˇched_°
 *
memc_¨g
,

46 
memˇched_ªtu∫_t
 &
rc_¨g
) :

47 
	`sˇ¬î
(
NULL
),

48 
	`begö
(
NULL
),

49 
	`pos
(0),

50 
	`memc
(
NULL
),

51 
	`rc
(
rc_¨g
),

52 
	`_is_£rvî
(
Ál£
),

53 
	$_íd
(
Ál£
)

55 
_ho°«me
[0]= 0;

56 
buf

›ti⁄_°rög
;

57 
Àngth

›ti⁄_°rög_Àngth
;

58 
memc

memc_¨g
;

59 
	`öô_sˇ¬î
();

60 
rc

MEMCACHED_SUCCESS
;

63 
boﬁ
 
	$íd
()

65  
_íd
;

66 
	}
}

68 
°¨t
();

70 
	$£t_íd
()

72 
rc

MEMCACHED_SUCCESS
;

73 
_íd

åue
;

74 
	}
}

76 
	$£t_£rvî
()

78 
_is_£rvî

åue
;

79 
	}
}

81 
	$un£t_£rvî
()

83 
_is_£rvî

Ál£
;

84 
	}
}

86 
boﬁ
 
	$is_£rvî
()

88  
_is_£rvî
;

89 
	}
}

91 c⁄° *
	$£t_ho°«me
(c⁄° *
°r
, 
size_t
 
size
)

93 
size_t
 
c›y_Àngth

°d
::
	`mö
((size_t)
NI_MAXHOST
, 
size
);

94 
	`mem˝y
(
_ho°«me
, 
°r
, 
c›y_Àngth
);

95 
_ho°«me
[
c›y_Àngth
]= 0;

97  
_ho°«me
;

98 
	}
}

100 c⁄° *
	$ho°«me
()

102  
_ho°«me
;

103 
	}
}

105 
	$ab‹t
(c⁄° *
îr‹
)

107 i‡(
rc
 =
MEMCACHED_SUCCESS
)

108 
rc

MEMCACHED_PARSE_ERROR
;

110 
memˇched_°rög_°
 *
îr‹_°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 1024);

111 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`memˇched_°rög_wôh_size
("Error occured whileÖarsing: "));

112 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`memˇched_°rög_make_‰om_c°r
(
begö
));

113 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`memˇched_°rög_wôh_size
(" ("));

115 i‡(
rc
 =
MEMCACHED_PARSE_ERROR
 
™d
 
îr‹
)

117 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`memˇched_°rög_make_‰om_c°r
(
îr‹
));

121 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`memˇched_°rög_make_‰om_c°r
(
	`memˇched_°ªº‹
(
NULL
, 
rc
)));

123 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`memˇched_°rög_wôh_size
(")"));

125 
	`memˇched_£t_îr‹_°rög
(
memc
, 
rc
, 
	`memˇched_°rög_vÆue
(
îr‹_°rög
), 
	`memˇched_°rög_Àngth
(error_string));

127 
	`memˇched_°rög_‰ì
(
îr‹_°rög
);

128 
	}
}

130 ~
	$C⁄ãxt
()

132 
	`de°roy_sˇ¬î
();

133 
	}
}

135 *
	gsˇ¬î
;

136 c⁄° *
	gbuf
;

137 c⁄° *
	gbegö
;

138 
size_t
 
	gpos
;

139 
size_t
 
	gÀngth
;

140 
memˇched_°
 *
	gmemc
;

141 
	gmemˇched_ªtu∫_t
 &
	grc
;

143 
	g¥Ÿe˘ed
:

144 
öô_sˇ¬î
();

145 
de°roy_sˇ¬î
();

147 
	g¥iv©e
:

148 
boﬁ
 
_is_£rvî
;

149 
boﬁ
 
	g_íd
;

150 
	g_ho°«me
[
NI_MAXHOST
];

	@libmemcached/options/parser.cc

45 
	#YYBISON
 1

	)

48 
	#YYBISON_VERSION
 "2.4.3"

	)

51 
	#YYSKELETON_NAME
 "yacc.c"

	)

54 
	#YYPURE
 1

	)

57 
	#YYPUSH
 0

	)

60 
	#YYPULL
 1

	)

63 
	#YYLSP_NEEDED
 0

	)

66 
	#yy∑r£
 
c⁄fig_∑r£


	)

67 
	#yyÀx
 
c⁄fig_Àx


	)

68 
	#yyîr‹
 
c⁄fig_îr‹


	)

69 
	#yylvÆ
 
c⁄fig_lvÆ


	)

70 
	#yych¨
 
c⁄fig_ch¨


	)

71 
	#yydebug
 
c⁄fig_debug


	)

72 
	#yy√ºs
 
c⁄fig_√ºs


	)

81 
	~<c⁄fig.h
>

83 
	~<°döt.h
>

85 
	~<libmemˇched/›ti⁄s/c⁄ãxt.h
>

86 
	~<libmemˇched/›ti⁄s/°rög.h
>

87 
	~<libmemˇched/›ti⁄s/symbﬁ.h
>

88 
	~<libmemˇched/visibûôy.h
>

89 
	~<libmemˇched/¥efix_key.h
>

91 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

92 
	~<libmemˇched/›ti⁄s/sˇ¬î.h
>

94 
c⁄f_Àx
(
YYSTYPE
* 
lvÆp
, * 
sˇ¬î
);

96 
	#∑r£r_ab‹t
(
A
, 
B
Ëdÿ{ (A)->
	`ab‹t
((B)); 
YYABORT
; } 0)

	)

98 
ölöe
 
	$c⁄fig_îr‹
(
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
, c⁄° *
îr‹
)

100 i‡(
nŸ
 
c⁄ãxt
->
	`íd
())

101 
c⁄ãxt
->
	`ab‹t
(
îr‹
);

102 
	}
}

110 #i‚de‡
YYDEBUG


111 
	#YYDEBUG
 1

	)

115 #ifde‡
YYERROR_VERBOSE


116 #unde‡
YYERROR_VERBOSE


117 
	#YYERROR_VERBOSE
 1

	)

119 
	#YYERROR_VERBOSE
 1

	)

123 #i‚de‡
YYTOKEN_TABLE


124 
	#YYTOKEN_TABLE
 0

	)

129 #i‚de‡
YYTOKENTYPE


130 
	#YYTOKENTYPE


	)

133 
	eyytokíty≥
 {

134 
	mCOMMENT
 = 258,

135 
	mEND
 = 259,

136 
	mERROR
 = 260,

137 
	mRESET
 = 261,

138 
	mPARSER_DEBUG
 = 262,

139 
	mINCLUDE
 = 263,

140 
	mCONFIGURE_FILE
 = 264,

141 
	mEMPTY_LINE
 = 265,

142 
	mSERVER
 = 266,

143 
	mSERVERS
 = 267,

144 
	mSERVERS_OPTION
 = 268,

145 
	mUNKNOWN_OPTION
 = 269,

146 
	mUNKNOWN
 = 270,

147 
	mBINARY_PROTOCOL
 = 271,

148 
	mBUFFER_REQUESTS
 = 272,

149 
	mCONNECT_TIMEOUT
 = 273,

150 
	mDISTRIBUTION
 = 274,

151 
	mHASH
 = 275,

152 
	mHASH_WITH_NAMESPACE
 = 276,

153 
	mIO_BYTES_WATERMARK
 = 277,

154 
	mIO_KEY_PREFETCH
 = 278,

155 
	mIO_MSG_WATERMARK
 = 279,

156 
	mKETAMA_HASH
 = 280,

157 
	mKETAMA_WEIGHTED
 = 281,

158 
	mNOREPLY
 = 282,

159 
	mNUMBER_OF_REPLICAS
 = 283,

160 
	mPOLL_TIMEOUT
 = 284,

161 
	mRANDOMIZE_REPLICA_READ
 = 285,

162 
	mRCV_TIMEOUT
 = 286,

163 
	mREMOVE_FAILED_SERVERS
 = 287,

164 
	mRETRY_TIMEOUT
 = 288,

165 
	mSND_TIMEOUT
 = 289,

166 
	mSOCKET_RECV_SIZE
 = 290,

167 
	mSOCKET_SEND_SIZE
 = 291,

168 
	mSORT_HOSTS
 = 292,

169 
	mSUPPORT_CAS
 = 293,

170 
	mUSER_DATA
 = 294,

171 
	mUSE_UDP
 = 295,

172 
	mVERIFY_KEY
 = 296,

173 
	m_TCP_KEEPALIVE
 = 297,

174 
	m_TCP_KEEPIDLE
 = 298,

175 
	m_TCP_NODELAY
 = 299,

176 
	mNAMESPACE
 = 300,

177 
	mPOOL_MIN
 = 301,

178 
	mPOOL_MAX
 = 302,

179 
	mMD5
 = 303,

180 
	mCRC
 = 304,

181 
	mFNV1_64
 = 305,

182 
	mFNV1A_64
 = 306,

183 
	mFNV1_32
 = 307,

184 
	mFNV1A_32
 = 308,

185 
	mHSIEH
 = 309,

186 
	mMURMUR
 = 310,

187 
	mJENKINS
 = 311,

188 
	mCONSISTENT
 = 312,

189 
	mMODULA
 = 313,

190 
	mRANDOM
 = 314,

191 
	mTRUE
 = 315,

192 
	mFALSE
 = 316,

193 
	mFLOAT
 = 317,

194 
	mNUMBER
 = 318,

195 
	mPORT
 = 319,

196 
	mWEIGHT_START
 = 320,

197 
	mIPADDRESS
 = 321,

198 
	mHOSTNAME
 = 322,

199 
	mSTRING
 = 323,

200 
	mQUOTED_STRING
 = 324,

201 
	mFILE_PATH
 = 325

207 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


209 
	#yy°y≥
 
YYSTYPE


	)

210 
	#YYSTYPE_IS_DECLARED
 1

	)

224 #ifde‡
YYTYPE_UINT8


225 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

227 
	tyyty≥_uöt8
;

230 #ifde‡
YYTYPE_INT8


231 
YYTYPE_INT8
 
	tyyty≥_öt8
;

232 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

233 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

234 sig√d 
	tyyty≥_öt8
;

236 
	tyyty≥_öt8
;

239 #ifde‡
YYTYPE_UINT16


240 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

242 
	tyyty≥_uöt16
;

245 #ifde‡
YYTYPE_INT16


246 
YYTYPE_INT16
 
	tyyty≥_öt16
;

248 
	tyyty≥_öt16
;

251 #i‚de‡
YYSIZE_T


252 #ifde‡
__SIZE_TYPE__


253 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

254 #ñi‡
deföed
 
size_t


255 
	#YYSIZE_T
 
size_t


	)

256 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

257 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

258 
	~<°ddef.h
>

259 
	#YYSIZE_T
 
size_t


	)

261 
	#YYSIZE_T
 

	)

265 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

267 #i‚de‡
YY_


268 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

269 #i‡
ENABLE_NLS


270 
	~<liböé.h
>

271 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

274 #i‚de‡
YY_


275 
	#YY_
(
msgid
Ë
	)
msgid

280 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


281 
	#YYUSE
(
e
Ë((Ë”))

	)

283 
	#YYUSE
(
e
Ë

	)

287 #i‚de‡
löt


288 
	#YYID
(
n
Ë“)

	)

290 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

291 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

293 
	$YYID
 (
yyi
)

296 
	$YYID
 (
yyi
)

297 
yyi
;

300  
yyi
;

301 
	}
}

304 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


308 #ifde‡
YYSTACK_USE_ALLOCA


309 #i‡
YYSTACK_USE_ALLOCA


310 #ifde‡
__GNUC__


311 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

312 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


313 
	~<Æloˇ.h
>

314 #ñi‡
deföed
 
_AIX


315 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

316 #ñi‡
deföed
 
_MSC_VER


317 
	~<mÆloc.h
>

318 
	#Æloˇ
 
_Æloˇ


	)

320 
	#YYSTACK_ALLOC
 
Æloˇ


	)

321 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

322 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

323 
	~<°dlib.h
>

324 #i‚de‡
_STDLIB_H


325 
	#_STDLIB_H
 1

	)

332 #ifde‡
YYSTACK_ALLOC


334 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

335 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


340 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

343 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

344 
	#YYSTACK_FREE
 
YYFREE


	)

345 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


346 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

348 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

349 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

350 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

351 
	~<°dlib.h
>

352 #i‚de‡
_STDLIB_H


353 
	#_STDLIB_H
 1

	)

356 #i‚de‡
YYMALLOC


357 
	#YYMALLOC
 
mÆloc


	)

358 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

359 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

360 *
mÆloc
 (
YYSIZE_T
);

363 #i‚de‡
YYFREE


364 
	#YYFREE
 
‰ì


	)

365 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

366 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

367 
‰ì
 (*);

374 #i‡(! 
deföed
 
yyovîÊow
 \

375 && (! 
deföed
 
	g__˝lu•lus
 \

376 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

379 
	uyyÆloc


381 
yyty≥_öt16
 
	myyss_Æloc
;

382 
YYSTYPE
 
	myyvs_Æloc
;

386 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

390 
	#YYSTACK_BYTES
(
N
) \

391 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

392 + 
YYSTACK_GAP_MAXIMUM
)

	)

396 #i‚de‡
YYCOPY


397 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

398 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

399 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

401 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

404 
YYSIZE_T
 
yyi
; \

405 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

406 (
To
)[
yyi
] = (
From
)[yyi]; \

408 
	`YYID
 (0))

	)

417 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

420 
YYSIZE_T
 
yy√wbyãs
; \

421 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

422 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

423 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

424 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

426 
	`YYID
 (0))

	)

431 
	#YYFINAL
 69

	)

433 
	#YYLAST
 73

	)

436 
	#YYNTOKENS
 74

	)

438 
	#YYNNTS
 12

	)

440 
	#YYNRULES
 66

	)

442 
	#YYNSTATES
 82

	)

445 
	#YYUNDEFTOK
 2

	)

446 
	#YYMAXUTOK
 325

	)

448 
	#YYTRANSLATE
(
YYX
) \

449 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

452 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

489 #i‡
YYDEBUG


492 c⁄° 
yyty≥_uöt8
 
	gyy¥hs
[] =

504 c⁄° 
yyty≥_öt8
 
	gyyrhs
[] =

525 c⁄° 
yyty≥_uöt16
 
	gyyæöe
[] =

537 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


540 c⁄° *c⁄° 
	gyyäame
[] =

563 #ifde‡
YYPRINT


566 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

580 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

592 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

606 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

620 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

628 
	#YYPACT_NINF
 -61

	)

629 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

643 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

653 
	#YYTABLE_NINF
 -1

	)

654 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

666 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

680 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

693 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

694 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

695 
	#YYEMPTY
 (-2)

	)

696 
	#YYEOF
 0

	)

698 
	#YYACCEPT
 
yyac˚±œb


	)

699 
	#YYABORT
 
yyab‹éab


	)

700 
	#YYERROR
 
yyîr‹œb


	)

710 
	#YYFAIL
 
yyîæab


	)

711 #i‡
deföed
 
YYFAIL


718 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

720 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

722 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

724 
yych¨
 = (
Tokí
); \

725 
yylvÆ
 = (
VÆue
); \

726 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

727 
	`YYPOPSTACK
 (1); \

728 
yybackup
; \

732 
	`yyîr‹
 (
c⁄ãxt
, 
sˇ¬î
, 
	`YY_
("syntaxÉrror: cannot back up")); \

733 
YYERROR
; \

735 
	`YYID
 (0))

	)

738 
	#YYTERROR
 1

	)

739 
	#YYERRCODE
 256

	)

746 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

747 #i‚de‡
YYLLOC_DEFAULT


748 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

750 i‡(
	`YYID
 (
N
)) \

752 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

753 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

754 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

755 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

759 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

760 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

761 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

762 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

764 
	`YYID
 (0))

	)

772 #i‚de‡
YY_LOCATION_PRINT


773 #i‡
deföed
 
YYLTYPE_IS_TRIVIAL
 && YYLTYPE_IS_TRIVIAL

774 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

775 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

776 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

777 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

779 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

786 #ifde‡
YYLEX_PARAM


787 
	#YYLEX
 
	`yyÀx
 (&
yylvÆ
, 
YYLEX_PARAM
)

	)

789 
	#YYLEX
 
	`yyÀx
 (&
yylvÆ
, 
sˇ¬î
)

	)

793 #i‡
YYDEBUG


795 #i‚de‡
YYFPRINTF


796 
	~<°dio.h
>

797 
	#YYFPRINTF
 
Ârötf


	)

800 
	#YYDPRINTF
(
Args
) \

802 i‡(
yydebug
) \

803 
YYFPRINTF
 
Args
; \

804 } 
	`YYID
 (0))

	)

806 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

808 i‡(
yydebug
) \

810 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

811 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

812 
Ty≥
, 
VÆue
, 
c⁄ãxt
, 
sˇ¬î
); \

813 
	`YYFPRINTF
 (
°dîr
, "\n"); \

815 } 
	`YYID
 (0))

	)

823 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

824 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

826 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, 
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
)

829 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
, 
c⁄ãxt
, 
sˇ¬î
)

830 
FILE
 *
yyouçut
;

831 
yyty≥
;

832 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

833 
C⁄ãxt
 *
c⁄ãxt
;

834 
yysˇn_t
 *
sˇ¬î
;

837 i‡(!
yyvÆuï
)

839 
	`YYUSE
 (
c⁄ãxt
);

840 
	`YYUSE
 (
sˇ¬î
);

841 #ifde‡
YYPRINT


842 i‡(
yyty≥
 < 
YYNTOKENS
)

843 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

845 
	`YYUSE
 (
yyouçut
);

847 
yyty≥
)

852 
	}
}

859 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

860 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

862 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, 
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
)

865 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
, 
c⁄ãxt
, 
sˇ¬î
)

866 
FILE
 *
yyouçut
;

867 
yyty≥
;

868 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

869 
C⁄ãxt
 *
c⁄ãxt
;

870 
yysˇn_t
 *
sˇ¬î
;

873 i‡(
yyty≥
 < 
YYNTOKENS
)

874 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

876 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

878 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
, 
c⁄ãxt
, 
sˇ¬î
);

879 
	`YYFPRINTF
 (
yyouçut
, ")");

880 
	}
}

887 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

888 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

890 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

893 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

894 
yyty≥_öt16
 *
yybŸtom
;

895 
yyty≥_öt16
 *
yyt›
;

898 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

899 ; 
yybŸtom
 <
yyt›
; yybottom++)

901 
yybŸ
 = *
yybŸtom
;

902 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

904 
	`YYFPRINTF
 (
°dîr
, "\n");

905 
	}
}

907 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

909 i‡(
yydebug
) \

910 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

911 } 
	`YYID
 (0))

	)

918 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

919 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

921 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
, 
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
)

924 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
, 
c⁄ãxt
, 
sˇ¬î
)

925 
YYSTYPE
 *
yyv•
;

926 
yyruÀ
;

927 
C⁄ãxt
 *
c⁄ãxt
;

928 
yysˇn_t
 *
sˇ¬î
;

931 
yyƒhs
 = 
yyr2
[
yyruÀ
];

932 
yyi
;

933 
yy o
 = 
yyæöe
[
yyruÀ
];

934 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

935 
yyruÀ
 - 1, 
yy o
);

937 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

939 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

940 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

941 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

942 , 
c⁄ãxt
, 
sˇ¬î
);

943 
	`YYFPRINTF
 (
°dîr
, "\n");

945 
	}
}

947 
	#YY_REDUCE_PRINT
(
RuÀ
) \

949 i‡(
yydebug
) \

950 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
, 
c⁄ãxt
, 
sˇ¬î
); \

951 } 
	`YYID
 (0))

	)

955 
	gyydebug
;

957 
	#YYDPRINTF
(
Args
)

	)

958 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

959 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

960 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

965 #i‚def 
YYINITDEPTH


966 
	#YYINITDEPTH
 200

	)

976 #i‚de‡
YYMAXDEPTH


977 
	#YYMAXDEPTH
 10000

	)

982 #i‡
YYERROR_VERBOSE


984 #i‚de‡
yy°æí


985 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


986 
	#yy°æí
 
°æí


	)

989 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

990 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

991 
YYSIZE_T


992 
	$yy°æí
 (c⁄° *
yy°r
)

994 
YYSIZE_T


995 
	$yy°æí
 (
yy°r
)

996 c⁄° *
yy°r
;

999 
YYSIZE_T
 
yyÀn
;

1000 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

1002  
yyÀn
;

1003 
	}
}

1007 #i‚de‡
yy°p˝y


1008 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


1009 
	#yy°p˝y
 
°p˝y


	)

1013 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1014 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1016 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

1019 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

1020 *
yyde°
;

1021 c⁄° *
yy§c
;

1024 *
yyd
 = 
yyde°
;

1025 c⁄° *
yys
 = 
yy§c
;

1027 (*
yyd
++ = *
yys
++) != '\0')

1030  
yyd
 - 1;

1031 
	}
}

1035 #i‚de‡
yyäamîr


1043 
YYSIZE_T


1044 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1046 i‡(*
yy°r
 == '"')

1048 
YYSIZE_T
 
yyn
 = 0;

1049 c⁄° *
yyp
 = 
yy°r
;

1052 *++
yyp
)

1056 
do_nŸ_°rù_quŸes
;

1059 i‡(*++
yyp
 != '\\')

1060 
do_nŸ_°rù_quŸes
;

1063 i‡(
yyªs
)

1064 
yyªs
[
yyn
] = *
yyp
;

1065 
yyn
++;

1069 i‡(
yyªs
)

1070 
yyªs
[
yyn
] = '\0';

1071  
yyn
;

1073 
do_nŸ_°rù_quŸes
: ;

1076 i‡(! 
yyªs
)

1077  
	`yy°æí
 (
yy°r
);

1079  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1080 
	}
}

1090 
YYSIZE_T


1091 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

1093 
yyn
 = 
yy∑˘
[
yy°©e
];

1095 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

1099 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

1100 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

1101 
YYSIZE_T
 
yysize
 = 
yysize0
;

1102 
YYSIZE_T
 
yysize1
;

1103 
yysize_ovîÊow
 = 0;

1104 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1105 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1106 
yyx
;

1111 
	`YY_
("syntaxÉrror, unexpected %s");

1112 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

1113 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

1114 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

1115 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

1117 *
yyfmt
;

1118 c⁄° *
yyf
;

1119 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

1120 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

1121 c⁄° 
yy‹
[] = " or %s";

1122 
yyf‹m©
[ 
yyu√x≥˘ed


1123 +  
yyex≥˘ög
 - 1

1124 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

1125 * ( 
yy‹
 - 1))];

1126 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

1130 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1133 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1134 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1135 
yycou¡
 = 1;

1137 
yy¨g
[0] = 
yyäame
[
yyty≥
];

1138 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

1140 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1141 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

1143 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1145 
yycou¡
 = 1;

1146 
yysize
 = 
yysize0
;

1147 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

1150 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1151 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

1152 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1153 
yysize
 = 
yysize1
;

1154 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

1155 
yy¥efix
 = 
yy‹
;

1158 
yyf
 = 
	`YY_
(
yyf‹m©
);

1159 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

1160 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1161 
yysize
 = 
yysize1
;

1163 i‡(
yysize_ovîÊow
)

1164  
YYSIZE_MAXIMUM
;

1166 i‡(
yyªsu…
)

1171 *
yyp
 = 
yyªsu…
;

1172 
yyi
 = 0;

1173 (*
yyp
 = *
yyf
) != '\0')

1175 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

1177 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1178 
yyf
 += 2;

1182 
yyp
++;

1183 
yyf
++;

1187  
yysize
;

1189 
	}
}

1198 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1199 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1201 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
, 
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
)

1204 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
c⁄ãxt
, 
sˇ¬î
)

1205 c⁄° *
yymsg
;

1206 
yyty≥
;

1207 
YYSTYPE
 *
yyvÆuï
;

1208 
C⁄ãxt
 *
c⁄ãxt
;

1209 
yysˇn_t
 *
sˇ¬î
;

1212 
	`YYUSE
 (
yyvÆuï
);

1213 
	`YYUSE
 (
c⁄ãxt
);

1214 
	`YYUSE
 (
sˇ¬î
);

1216 i‡(!
yymsg
)

1217 
yymsg
 = "Deleting";

1218 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1220 
yyty≥
)

1226 
	}
}

1229 #ifde‡
YYPARSE_PARAM


1230 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1231 
yy∑r£
 (*
YYPARSE_PARAM
);

1233 
yy∑r£
 ();

1236 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1237 
yy∑r£
 (
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
);

1239 
yy∑r£
 ();

1251 #ifde‡
YYPARSE_PARAM


1252 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1253 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1255 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1258 
	$yy∑r£
 (
YYPARSE_PARAM
)

1259 *
YYPARSE_PARAM
;

1262 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1263 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1265 
	$yy∑r£
 (
C⁄ãxt
 *
c⁄ãxt
, 
yysˇn_t
 *
sˇ¬î
)

1268 
	$yy∑r£
 (
c⁄ãxt
, 
sˇ¬î
)

1269 
C⁄ãxt
 *
c⁄ãxt
;

1270 
yysˇn_t
 *
sˇ¬î
;

1275 
yych¨
;

1278 
YYSTYPE
 
yylvÆ
;

1281 
yy√ºs
;

1283 
yy°©e
;

1285 
yyîr°©us
;

1295 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1296 
yyty≥_öt16
 *
yyss
;

1297 
yyty≥_öt16
 *
yys•
;

1300 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1301 
YYSTYPE
 *
yyvs
;

1302 
YYSTYPE
 *
yyv•
;

1304 
YYSIZE_T
 
yy°acksize
;

1306 
yyn
;

1307 
yyªsu…
;

1309 
yytokí
;

1312 
YYSTYPE
 
yyvÆ
;

1314 #i‡
YYERROR_VERBOSE


1316 
yymsgbuf
[128];

1317 *
yymsg
 = 
yymsgbuf
;

1318 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1321 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1325 
yyÀn
 = 0;

1327 
yytokí
 = 0;

1328 
yyss
 = 
yysß
;

1329 
yyvs
 = 
yyvß
;

1330 
yy°acksize
 = 
YYINITDEPTH
;

1332 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1334 
yy°©e
 = 0;

1335 
yyîr°©us
 = 0;

1336 
yy√ºs
 = 0;

1337 
yych¨
 = 
YYEMPTY
;

1343 
yys•
 = 
yyss
;

1344 
yyv•
 = 
yyvs
;

1346 
yy£t°©e
;

1351 
yy√w°©e
:

1354 
yys•
++;

1356 
yy£t°©e
:

1357 *
yys•
 = 
yy°©e
;

1359 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1362 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1364 #ifde‡
yyovîÊow


1369 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1370 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1376 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1377 &
yyss1
, 
yysize
 *  (*
yys•
),

1378 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1379 &
yy°acksize
);

1381 
yyss
 = 
yyss1
;

1382 
yyvs
 = 
yyvs1
;

1385 #i‚de‡
YYSTACK_RELOCATE


1386 
yyexhau°edœb
;

1389 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1390 
yyexhau°edœb
;

1391 
yy°acksize
 *= 2;

1392 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1393 
yy°acksize
 = 
YYMAXDEPTH
;

1396 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1397 
yyÆloc
 *
yy±r
 =

1398 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1399 i‡(! 
yy±r
)

1400 
yyexhau°edœb
;

1401 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1402 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1403 #unde‡
YYSTACK_RELOCATE


1404 i‡(
yyss1
 !
yysß
)

1405 
	`YYSTACK_FREE
 (
yyss1
);

1410 
yys•
 = 
yyss
 + 
yysize
 - 1;

1411 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1413 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1414 (Ë
yy°acksize
));

1416 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1417 
YYABORT
;

1420 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1422 i‡(
yy°©e
 =
YYFINAL
)

1423 
YYACCEPT
;

1425 
yybackup
;

1430 
yybackup
:

1436 
yyn
 = 
yy∑˘
[
yy°©e
];

1437 i‡(
yyn
 =
YYPACT_NINF
)

1438 
yydeÁu…
;

1443 i‡(
yych¨
 =
YYEMPTY
)

1445 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1446 
yych¨
 = 
YYLEX
;

1449 i‡(
yych¨
 <
YYEOF
)

1451 
yych¨
 = 
yytokí
 = 
YYEOF
;

1452 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1456 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1457 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1462 
yyn
 +
yytokí
;

1463 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1464 
yydeÁu…
;

1465 
yyn
 = 
yyèbÀ
[yyn];

1466 i‡(
yyn
 <= 0)

1468 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1469 
yyîæab
;

1470 
yyn
 = -yyn;

1471 
yyªdu˚
;

1476 i‡(
yyîr°©us
)

1477 
yyîr°©us
--;

1480 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1483 
yych¨
 = 
YYEMPTY
;

1485 
yy°©e
 = 
yyn
;

1486 *++
yyv•
 = 
yylvÆ
;

1488 
yy√w°©e
;

1494 
yydeÁu…
:

1495 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1496 i‡(
yyn
 == 0)

1497 
yyîæab
;

1498 
yyªdu˚
;

1504 
yyªdu˚
:

1506 
yyÀn
 = 
yyr2
[
yyn
];

1516 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1519 
	`YY_REDUCE_PRINT
 (
yyn
);

1520 
yyn
)

1548 
c⁄ãxt
->
	`£t_íd
();

1549 
YYACCEPT
;

1558 
c⁄ãxt
->
rc

MEMCACHED_PARSE_USER_ERROR
;

1559 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
NULL
);

1568 
	`memˇched_ª£t
(
c⁄ãxt
->
memc
);

1577 
yydebug
= 1;

1586 i‡((
c⁄ãxt
->
rc

	`memˇched_∑r£_c⁄figuª_fûe
(c⁄ãxt->
memc
, (
yyv•
[(3Ë- (3)].
°rög
).
c_°r
, (yyv•[(3Ë- (3)].°rög).
Àngth
)Ë!
MEMCACHED_SUCCESS
)

1588 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
NULL
);

1598 i‡((
c⁄ãxt
->
rc

	`memˇched_£rvî_add_wôh_weight
(c⁄ãxt->
memc
, (
yyv•
[(2Ë- (4)].
£rvî
).
c_°r
, (yyv•[(2Ë- (4)].£rvî).
p‹t
, (yyv•[(2Ë- (4)].£rvî).
weight
)Ë!
MEMCACHED_SUCCESS
)

1600 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
NULL
);

1602 
c⁄ãxt
->
	`un£t_£rvî
();

1611 i‡((
c⁄ãxt
->
rc

	`memˇched_£rvî_add_wôh_weight
(c⁄ãxt->
memc
, (
yyv•
[(2Ë- (4)].
£rvî
).
c_°r
, (yyv•[(2Ë- (4)].£rvî).
p‹t
, (yyv•[(2Ë- (4)].£rvî).
weight
)Ë!
MEMCACHED_SUCCESS
)

1613 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
NULL
);

1615 
c⁄ãxt
->
	`un£t_£rvî
();

1624 
	`memˇched_£t_c⁄figuøti⁄_fûe
(
c⁄ãxt
->
memc
, (
yyv•
[(2Ë- (2)].
°rög
).
c_°r
, (yyv•[(2Ë- (2)].°rög).
Àngth
);

1633 
c⁄ãxt
->
memc
->
c⁄figuª
.
öôül_poﬁ_size
(
yyv•
[(2Ë- (2)].
numbî
);

1642 
c⁄ãxt
->
memc
->
c⁄figuª
.
max_poﬁ_size
(
yyv•
[(2Ë- (2)].
numbî
);

1651 i‡((
c⁄ãxt
->
rc

	`memˇched_£t_¥efix_key
(c⁄ãxt->
memc
, (
yyv•
[(2Ë- (2)].
°rög
).
c_°r
, (yyv•[(2Ë- (2)].°rög).
Àngth
)Ë!
MEMCACHED_SUCCESS
)

1653 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
NULL
);;

1663 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t
(c⁄ãxt->
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, (
yyv•
[(2Ë- (2)].
di°ributi⁄
))Ë!
MEMCACHED_SUCCESS
)

1665 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
NULL
);;

1675 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t
(c⁄ãxt->
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, (
yyv•
[(2Ë- (4)].
di°ributi⁄
))Ë!
MEMCACHED_SUCCESS
)

1677 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
NULL
);;

1679 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t_di°ributi⁄_hash
(c⁄ãxt->
memc
, (
yyv•
[(4Ë- (4)].
hash
))Ë!
MEMCACHED_SUCCESS
)

1681 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
NULL
);;

1691 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t
(c⁄ãxt->
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
yyv•
[(2Ë- (2)].
hash
))Ë!
MEMCACHED_SUCCESS
)

1693 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
NULL
);;

1703 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t
(c⁄ãxt->
memc
, (
yyv•
[(1Ë- (2)].
behavi‹
), (yyv•[(2Ë- (2)].
numbî
))Ë!
MEMCACHED_SUCCESS
)

1705 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
NULL
);;

1715 i‡((
c⁄ãxt
->
rc

	`memˇched_behavi‹_£t
(c⁄ãxt->
memc
, (
yyv•
[(1Ë- (1)].
behavi‹
), 
åue
)Ë!
MEMCACHED_SUCCESS
)

1717 
	`∑r£r_ab‹t
(
c⁄ãxt
, 
NULL
);;

1735 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
;

1744 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
;

1753 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
;

1762 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK
;

1771 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH
;

1780 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
;

1789 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
;

1798 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
;

1807 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
;

1816 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_SND_TIMEOUT
;

1825 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
;

1834 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
;

1843 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
;

1852 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
;

1861 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY
;

1870 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_NOREPLY
;

1879 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
;

1888 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_SORT_HOSTS
;

1897 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_SUPPORT_CAS
;

1906 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_TCP_NODELAY
;

1915 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
;

1924 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
;

1933 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_USE_UDP
;

1942 (
yyvÆ
.
behavi‹
)
MEMCACHED_BEHAVIOR_VERIFY_KEY
;

1979 (
yyvÆ
.
hash
)
MEMCACHED_HASH_MD5
;

1988 (
yyvÆ
.
hash
)
MEMCACHED_HASH_CRC
;

1997 (
yyvÆ
.
hash
)
MEMCACHED_HASH_FNV1_64
;

2006 (
yyvÆ
.
hash
)
MEMCACHED_HASH_FNV1A_64
;

2015 (
yyvÆ
.
hash
)
MEMCACHED_HASH_FNV1_32
;

2024 (
yyvÆ
.
hash
)
MEMCACHED_HASH_FNV1A_32
;

2033 (
yyvÆ
.
hash
)
MEMCACHED_HASH_HSIEH
;

2042 (
yyvÆ
.
hash
)
MEMCACHED_HASH_MURMUR
;

2051 (
yyvÆ
.
hash
)
MEMCACHED_HASH_JENKINS
;

2060 (
yyvÆ
.
°rög
)(
yyv•
[(1) - (1)].string);

2069 (
yyvÆ
.
°rög
).
c_°r
(
yyv•
[(1) - (1)].string).c_str +1;

2070 (
yyvÆ
.
°rög
).
Àngth
(
yyv•
[(1) - (1)].string).length -1;

2079 (
yyvÆ
.
di°ributi⁄
)
MEMCACHED_DISTRIBUTION_CONSISTENT
;

2088 (
yyvÆ
.
di°ributi⁄
)
MEMCACHED_DISTRIBUTION_MODULA
;

2097 (
yyvÆ
.
di°ributi⁄
)
MEMCACHED_DISTRIBUTION_RANDOM
;

2107 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

2109 
	`YYPOPSTACK
 (
yyÀn
);

2110 
yyÀn
 = 0;

2111 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2113 *++
yyv•
 = 
yyvÆ
;

2119 
yyn
 = 
yyr1
[yyn];

2121 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

2122 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

2123 
yy°©e
 = 
yyèbÀ
[yystate];

2125 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

2127 
yy√w°©e
;

2133 
yyîæab
:

2135 i‡(!
yyîr°©us
)

2137 ++
yy√ºs
;

2138 #i‡! 
YYERROR_VERBOSE


2139 
	`yyîr‹
 (
c⁄ãxt
, 
sˇ¬î
, 
	`YY_
("syntaxÉrror"));

2142 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

2143 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

2145 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

2146 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

2147 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

2148 i‡(
yymsg
 !
yymsgbuf
)

2149 
	`YYSTACK_FREE
 (
yymsg
);

2150 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

2151 i‡(
yymsg
)

2152 
yymsg_Æloc
 = 
yyÆloc
;

2155 
yymsg
 = 
yymsgbuf
;

2156 
yymsg_Æloc
 =  
yymsgbuf
;

2160 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

2162 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

2163 
	`yyîr‹
 (
c⁄ãxt
, 
sˇ¬î
, 
yymsg
);

2167 
	`yyîr‹
 (
c⁄ãxt
, 
sˇ¬î
, 
	`YY_
("syntaxÉrror"));

2168 i‡(
yysize
 != 0)

2169 
yyexhau°edœb
;

2177 i‡(
yyîr°©us
 == 3)

2182 i‡(
yych¨
 <
YYEOF
)

2185 i‡(
yych¨
 =
YYEOF
)

2186 
YYABORT
;

2190 
	`yyde°ru˘
 ("Error: discarding",

2191 
yytokí
, &
yylvÆ
, 
c⁄ãxt
, 
sˇ¬î
);

2192 
yych¨
 = 
YYEMPTY
;

2198 
yyîæab1
;

2204 
yyîr‹œb
:

2210 
yyîr‹œb
;

2214 
	`YYPOPSTACK
 (
yyÀn
);

2215 
yyÀn
 = 0;

2216 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2217 
yy°©e
 = *
yys•
;

2218 
yyîæab1
;

2224 
yyîæab1
:

2225 
yyîr°©us
 = 3;

2229 
yyn
 = 
yy∑˘
[
yy°©e
];

2230 i‡(
yyn
 !
YYPACT_NINF
)

2232 
yyn
 +
YYTERROR
;

2233 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

2235 
yyn
 = 
yyèbÀ
[yyn];

2236 i‡(0 < 
yyn
)

2242 i‡(
yys•
 =
yyss
)

2243 
YYABORT
;

2246 
	`yyde°ru˘
 ("Error:Öopping",

2247 
yy°os
[
yy°©e
], 
yyv•
, 
c⁄ãxt
, 
sˇ¬î
);

2248 
	`YYPOPSTACK
 (1);

2249 
yy°©e
 = *
yys•
;

2250 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2253 *++
yyv•
 = 
yylvÆ
;

2257 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

2259 
yy°©e
 = 
yyn
;

2260 
yy√w°©e
;

2266 
yyac˚±œb
:

2267 
yyªsu…
 = 0;

2268 
yyªtu∫
;

2273 
yyab‹éab
:

2274 
yyªsu…
 = 1;

2275 
yyªtu∫
;

2277 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


2281 
yyexhau°edœb
:

2282 
	`yyîr‹
 (
c⁄ãxt
, 
sˇ¬î
, 
	`YY_
("memoryÉxhausted"));

2283 
yyªsu…
 = 2;

2287 
yyªtu∫
:

2288 i‡(
yych¨
 !
YYEMPTY
)

2289 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

2290 
yytokí
, &
yylvÆ
, 
c⁄ãxt
, 
sˇ¬î
);

2293 
	`YYPOPSTACK
 (
yyÀn
);

2294 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

2295 
yys•
 !
yyss
)

2297 
	`yyde°ru˘
 ("Cleanup:Öopping",

2298 
yy°os
[*
yys•
], 
yyv•
, 
c⁄ãxt
, 
sˇ¬î
);

2299 
	`YYPOPSTACK
 (1);

2301 #i‚de‡
yyovîÊow


2302 i‡(
yyss
 !
yysß
)

2303 
	`YYSTACK_FREE
 (
yyss
);

2305 #i‡
YYERROR_VERBOSE


2306 i‡(
yymsg
 !
yymsgbuf
)

2307 
	`YYSTACK_FREE
 (
yymsg
);

2310  
	`YYID
 (
yyªsu…
);

2311 
	}
}

2319 
	gC⁄ãxt
::
	$°¨t
()

2321 
	`c⁄fig_∑r£
(
this
, (**)
sˇ¬î
);

2322 
	}
}

	@libmemcached/options/parser.h

36 #i‚de‡
YYTOKENTYPE


37 
	#YYTOKENTYPE


	)

40 
	eyytokíty≥
 {

41 
	mCOMMENT
 = 258,

42 
	mEND
 = 259,

43 
	mERROR
 = 260,

44 
	mRESET
 = 261,

45 
	mPARSER_DEBUG
 = 262,

46 
	mINCLUDE
 = 263,

47 
	mCONFIGURE_FILE
 = 264,

48 
	mEMPTY_LINE
 = 265,

49 
	mSERVER
 = 266,

50 
	mSERVERS
 = 267,

51 
	mSERVERS_OPTION
 = 268,

52 
	mUNKNOWN_OPTION
 = 269,

53 
	mUNKNOWN
 = 270,

54 
	mBINARY_PROTOCOL
 = 271,

55 
	mBUFFER_REQUESTS
 = 272,

56 
	mCONNECT_TIMEOUT
 = 273,

57 
	mDISTRIBUTION
 = 274,

58 
	mHASH
 = 275,

59 
	mHASH_WITH_NAMESPACE
 = 276,

60 
	mIO_BYTES_WATERMARK
 = 277,

61 
	mIO_KEY_PREFETCH
 = 278,

62 
	mIO_MSG_WATERMARK
 = 279,

63 
	mKETAMA_HASH
 = 280,

64 
	mKETAMA_WEIGHTED
 = 281,

65 
	mNOREPLY
 = 282,

66 
	mNUMBER_OF_REPLICAS
 = 283,

67 
	mPOLL_TIMEOUT
 = 284,

68 
	mRANDOMIZE_REPLICA_READ
 = 285,

69 
	mRCV_TIMEOUT
 = 286,

70 
	mREMOVE_FAILED_SERVERS
 = 287,

71 
	mRETRY_TIMEOUT
 = 288,

72 
	mSND_TIMEOUT
 = 289,

73 
	mSOCKET_RECV_SIZE
 = 290,

74 
	mSOCKET_SEND_SIZE
 = 291,

75 
	mSORT_HOSTS
 = 292,

76 
	mSUPPORT_CAS
 = 293,

77 
	mUSER_DATA
 = 294,

78 
	mUSE_UDP
 = 295,

79 
	mVERIFY_KEY
 = 296,

80 
	m_TCP_KEEPALIVE
 = 297,

81 
	m_TCP_KEEPIDLE
 = 298,

82 
	m_TCP_NODELAY
 = 299,

83 
	mNAMESPACE
 = 300,

84 
	mPOOL_MIN
 = 301,

85 
	mPOOL_MAX
 = 302,

86 
	mMD5
 = 303,

87 
	mCRC
 = 304,

88 
	mFNV1_64
 = 305,

89 
	mFNV1A_64
 = 306,

90 
	mFNV1_32
 = 307,

91 
	mFNV1A_32
 = 308,

92 
	mHSIEH
 = 309,

93 
	mMURMUR
 = 310,

94 
	mJENKINS
 = 311,

95 
	mCONSISTENT
 = 312,

96 
	mMODULA
 = 313,

97 
	mRANDOM
 = 314,

98 
	mTRUE
 = 315,

99 
	mFALSE
 = 316,

100 
	mFLOAT
 = 317,

101 
	mNUMBER
 = 318,

102 
	mPORT
 = 319,

103 
	mWEIGHT_START
 = 320,

104 
	mIPADDRESS
 = 321,

105 
	mHOSTNAME
 = 322,

106 
	mSTRING
 = 323,

107 
	mQUOTED_STRING
 = 324,

108 
	mFILE_PATH
 = 325

114 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


116 
	#yy°y≥
 
YYSTYPE


	)

117 
	#YYSTYPE_IS_DECLARED
 1

	)

	@libmemcached/options/scanner.cc

4 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

5 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wsign-compare"

6 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-parameter"

8 
	~<libmemˇched/›ti⁄s/c⁄ãxt.h
>

9 
	~<libmemˇched/›ti⁄s/∑r£r.h
>

10 
	~<libmemˇched/›ti⁄s/°rög.h
>

11 
	~<libmemˇched/›ti⁄s/symbﬁ.h
>

13 
	#YY_EXTRA_TYPE
 
C⁄ãxt
*

	)

20 
	#YY_INT_ALIGNED
 

	)

32 
	#FLEX_SCANNER


	)

33 
	#YY_FLEX_MAJOR_VERSION
 2

	)

34 
	#YY_FLEX_MINOR_VERSION
 5

	)

35 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

36 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

37 
	#FLEX_BETA


	)

55 
	~<°dio.h
>

56 
	~<°rög.h
>

57 
	~<î∫o.h
>

58 
	~<°dlib.h
>

68 #i‚de‡
FLEXINT_H


69 
	#FLEXINT_H


	)

73 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

78 #i‚de‡
__STDC_LIMIT_MACROS


79 
	#__STDC_LIMIT_MACROS
 1

	)

82 
	~<öây≥s.h
>

83 
öt8_t
 
	tÊex_öt8_t
;

84 
uöt8_t
 
	tÊex_uöt8_t
;

85 
öt16_t
 
	tÊex_öt16_t
;

86 
uöt16_t
 
	tÊex_uöt16_t
;

87 
öt32_t
 
	tÊex_öt32_t
;

88 
uöt32_t
 
	tÊex_uöt32_t
;

90 sig√d 
	tÊex_öt8_t
;

91 
	tÊex_öt16_t
;

92 
	tÊex_öt32_t
;

93 
	tÊex_uöt8_t
;

94 
	tÊex_uöt16_t
;

95 
	tÊex_uöt32_t
;

99 #i‚de‡
INT8_MIN


100 
	#INT8_MIN
 (-128)

	)

102 #i‚de‡
INT16_MIN


103 
	#INT16_MIN
 (-32767-1)

	)

105 #i‚de‡
INT32_MIN


106 
	#INT32_MIN
 (-2147483647-1)

	)

108 #i‚de‡
INT8_MAX


109 
	#INT8_MAX
 (127)

	)

111 #i‚de‡
INT16_MAX


112 
	#INT16_MAX
 (32767)

	)

114 #i‚de‡
INT32_MAX


115 
	#INT32_MAX
 (2147483647)

	)

117 #i‚de‡
UINT8_MAX


118 
	#UINT8_MAX
 (255U)

	)

120 #i‚de‡
UINT16_MAX


121 
	#UINT16_MAX
 (65535U)

	)

123 #i‚de‡
UINT32_MAX


124 
	#UINT32_MAX
 (4294967295U)

	)

134 #ifde‡
__˝lu•lus


137 
	#YY_USE_CONST


	)

142 #i‡
deföed
 (
__STDC__
)

144 
	#YY_USE_CONST


	)

149 #ifde‡
YY_USE_CONST


150 
	#yyc⁄°
 c⁄°

	)

152 
	#yyc⁄°


	)

158 
	#YY_NULL
 0

	)

168 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

174 #i‚de‡
YY_TYPEDEF_YY_SCANNER_T


175 
	#YY_TYPEDEF_YY_SCANNER_T


	)

176 * 
	tyysˇn_t
;

181 
	#yyö
 
yyg
->
yyö_r


	)

182 
	#yyout
 
yyg
->
yyout_r


	)

183 
	#yyexåa
 
yyg
->
yyexåa_r


	)

184 
	#yyÀng
 
yyg
->
yyÀng_r


	)

185 
	#yyãxt
 
yyg
->
yyãxt_r


	)

186 
	#yylöío
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_löío
)

	)

187 
	#yycﬁumn
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_cﬁumn
)

	)

188 
	#yy_Êex_debug
 
yyg
->
yy_Êex_debug_r


	)

199 
	#BEGIN
 
yyg
->
yy_°¨t
 = 1 + 2 *

	)

205 
	#YY_START
 ((
yyg
->
yy_°¨t
 - 1Ë/ 2)

	)

206 
	#YYSTATE
 
YY_START


	)

209 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

212 
	#YY_NEW_FILE
 
	`c⁄fig_ª°¨t
(
yyö
 ,
yysˇ¬î
 )

	)

214 
	#YY_END_OF_BUFFER_CHAR
 0

	)

217 #i‚de‡
YY_BUF_SIZE


218 
	#YY_BUF_SIZE
 16384

	)

223 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

225 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


226 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

227 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

238 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

239 
	#EOB_ACT_END_OF_FILE
 1

	)

240 
	#EOB_ACT_LAST_MATCH
 2

	)

242 
	#YY_LESS_LINENO
(
n
)

	)

245 
	#yyÀss
(
n
) \

249 
yyÀss_ma¸o_¨g
 = (
n
); \

250 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

251 *
yy_˝
 = 
yyg
->
yy_hﬁd_ch¨
; \

252 
YY_RESTORE_YY_MORE_OFFSET
 \

253 
yyg
->
yy_c_buf_p
 = 
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

254 
YY_DO_BEFORE_ACTION
; \

256  0 )

	)

258 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, 
yyg
->
yyãxt_±r
 , 
yysˇ¬î
 )

	)

260 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


261 
	#YY_TYPEDEF_YY_SIZE_T


	)

262 
size_t
 
	tyy_size_t
;

265 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


266 
	#YY_STRUCT_YY_BUFFER_STATE


	)

267 
	syy_buf„r_°©e


270 
FILE
 *
	myy_öput_fûe
;

276 *
	myy_ch_buf
;

277 *
	myy_buf_pos
;

282 
yy_size_t
 
	myy_buf_size
;

287 
	myy_n_ch¨s
;

293 
	myy_is_our_buf„r
;

300 
	myy_is_öãø˘ive
;

306 
	myy_©_bﬁ
;

308 
	myy_bs_löío
;

309 
	myy_bs_cﬁumn
;

314 
	myy_fûl_buf„r
;

316 
	myy_buf„r_°©us
;

318 
	#YY_BUFFER_NEW
 0

	)

319 
	#YY_BUFFER_NORMAL
 1

	)

330 
	#YY_BUFFER_EOF_PENDING
 2

	)

350 
	#YY_CURRENT_BUFFER
 ( 
yyg
->
yy_buf„r_°ack
 \

351 ? 
yyg
->
yy_buf„r_°ack
[yyg->
yy_buf„r_°ack_t›
] \

352 : 
NULL
)

	)

357 
	#YY_CURRENT_BUFFER_LVALUE
 
yyg
->
yy_buf„r_°ack
[yyg->
yy_buf„r_°ack_t›
]

	)

368 
c⁄fig_ª°¨t
 (
FILE
 *
öput_fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

369 
c⁄fig__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

370 
YY_BUFFER_STATE
 
c⁄fig__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 ,
yysˇn_t
 
yysˇ¬î
 );

371 
c⁄fig__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

372 
c⁄fig__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

373 
c⁄fig_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

374 
c⁄fig_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

376 
c⁄fig_ísuª_buf„r_°ack
 (
yysˇn_t
 
yysˇ¬î
 );

377 
c⁄fig__lﬂd_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

378 
c⁄fig__öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

380 
	#YY_FLUSH_BUFFER
 
	`c⁄fig__Êush_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
)

	)

382 
YY_BUFFER_STATE
 
c⁄fig__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 ,
yysˇn_t
 
yysˇ¬î
 );

383 
YY_BUFFER_STATE
 
c⁄fig__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

384 
YY_BUFFER_STATE
 
c⁄fig__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 ,
yysˇn_t
 
yysˇ¬î
 );

388 *
c⁄fig_Æloc
 (
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

389 *
c⁄fig_ªÆloc
 (*,
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

390 
c⁄fig_‰ì
 (* ,
yysˇn_t
 
yysˇ¬î
 );

392 
	#yy_√w_buf„r
 
c⁄fig__¸óã_buf„r


	)

394 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

396 i‡–! 
YY_CURRENT_BUFFER
 ){ \

397 
	`c⁄fig_ísuª_buf„r_°ack
 (
yysˇ¬î
); \

398 
YY_CURRENT_BUFFER_LVALUE
 = \

399 
	`c⁄fig__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
); \

401 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

402 }

	)

404 
	#yy_£t_bﬁ
(
©_bﬁ
) \

406 i‡–! 
YY_CURRENT_BUFFER
 ){\

407 
	`c⁄fig_ísuª_buf„r_°ack
 (
yysˇ¬î
); \

408 
YY_CURRENT_BUFFER_LVALUE
 = \

409 
	`c⁄fig__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
); \

411 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

412 }

	)

414 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

419 
	#c⁄fig_wøp
(
n
Ë1

	)

420 
	#YY_SKIP_YYWRAP


	)

422 
	#FLEX_DEBUG


	)

424 
	tYY_CHAR
;

426 
	tyy_°©e_ty≥
;

428 
	#yyãxt_±r
 
yyãxt_r


	)

432 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

433 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 ,
yysˇn_t
 
yysˇ¬î
);

434 
yy_gë_√xt_buf„r
 (
yysˇn_t
 
yysˇ¬î
 );

435 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] ,
yysˇn_t
 
yysˇ¬î
 );

442 
	#YY_DO_BEFORE_ACTION
 \

443 
yyg
->
yyãxt_±r
 = 
yy_bp
; \

445 
yyÀng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

446 
yyg
->
yy_hﬁd_ch¨
 = *
yy_˝
; \

447 *
yy_˝
 = '\0'; \

449 
yyg
->
yy_c_buf_p
 = 
yy_˝
;

	)

452 
	#YY_NUM_RULES
 64

	)

453 
	#YY_END_OF_BUFFER
 65

	)

456 
	syy_å™s_öfo


458 
Êex_öt32_t
 
	myy_vîify
;

459 
Êex_öt32_t
 
	myy_nxt
;

461 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[514] =

522 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

554 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[74] =

566 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[518] =

627 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[518] =

688 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[1722] =

882 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[1722] =

1076 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ruÀ_löíum
[64] =

1090 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

1091 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

1092 
	#YY_MORE_ADJ
 0

	)

1093 
	#YY_RESTORE_YY_MORE_OFFSET


	)

1116 
	~<c°dlib
>

1117 
	~<c°rög
>

1119 
	#PARAM
 
	`c⁄fig_gë_exåa
(
yysˇ¬î
)

	)

1121 
	#gë_Àx_ch¨s
(
buf„r
, 
ªsu…
, 
max_size
, 
c⁄ãxt
) \

1123 i‡(
c⁄ãxt
->
pos
 >c⁄ãxt->
Àngth
) \

1125 
ªsu…

YY_NULL
; \

1129 
ªsu…
()(
c⁄ãxt
->
Àngth
 - c⁄ãxt->
pos
); \

1130 (
size_t
)
ªsu…
 > (size_t)
max_size
 ?Ñesult= max_size : 0; \

1131 
	`mem˝y
(
buf„r
, 
c⁄ãxt
->
buf
 + c⁄ãxt->
pos
, 
ªsu…
); \

1132 
c⁄ãxt
->
pos
 +
ªsu…
; \

1134 }

	)

1137 
	#YY_INPUT
(
buf„r
, 
ªsu…
, 
max_size
Ë
	`gë_Àx_ch¨s
(buf„r,Ñesu…, max_size, 
PARAM
)

	)

1141 
	#INITIAL
 0

	)

1143 #i‚de‡
YY_NO_UNISTD_H


1149 
	~<uni°d.h
>

1155 #i‚de‡
YY_EXTRA_TYPE


1156 
	#YY_EXTRA_TYPE
 *

	)

1163 
	syyguts_t


1167 
YY_EXTRA_TYPE
 
	myyexåa_r
;

1170 
FILE
 *
	myyö_r
, *
	myyout_r
;

1171 
size_t
 
	myy_buf„r_°ack_t›
;

1172 
size_t
 
	myy_buf„r_°ack_max
;

1173 
YY_BUFFER_STATE
 * 
	myy_buf„r_°ack
;

1174 
	myy_hﬁd_ch¨
;

1175 
	myy_n_ch¨s
;

1176 
	myyÀng_r
;

1177 *
	myy_c_buf_p
;

1178 
	myy_öô
;

1179 
	myy_°¨t
;

1180 
	myy_did_buf„r_swôch_⁄_eof
;

1181 
	myy_°¨t_°ack_±r
;

1182 
	myy_°¨t_°ack_dïth
;

1183 *
	myy_°¨t_°ack
;

1184 
yy_°©e_ty≥
 
	myy_œ°_ac˚±ög_°©e
;

1185 * 
	myy_œ°_ac˚±ög_˝os
;

1187 
	myylöío_r
;

1188 
	myy_Êex_debug_r
;

1190 *
	myyãxt_r
;

1191 
	myy_m‹e_Êag
;

1192 
	myy_m‹e_Àn
;

1194 
YYSTYPE
 * 
	myylvÆ_r
;

1200 
yy_öô_globÆs
 (
yysˇn_t
 
yysˇ¬î
 );

1208 
	#yylvÆ
 
yyg
->
yylvÆ_r


	)

1210 
c⁄fig_Àx_öô
 (
yysˇn_t
* 
sˇ¬î
);

1212 
c⁄fig_Àx_öô_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
,
yysˇn_t
* 
sˇ¬î
);

1221 
c⁄fig_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
 );

1223 
c⁄fig_gë_debug
 (
yysˇn_t
 
yysˇ¬î
 );

1225 
c⁄fig_£t_debug
 (
debug_Êag
 ,
yysˇn_t
 
yysˇ¬î
 );

1227 
YY_EXTRA_TYPE
 
c⁄fig_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
 );

1229 
c⁄fig_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 ,
yysˇn_t
 
yysˇ¬î
 );

1231 
FILE
 *
c⁄fig_gë_ö
 (
yysˇn_t
 
yysˇ¬î
 );

1233 
c⁄fig_£t_ö
 (
FILE
 * 
ö_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

1235 
FILE
 *
c⁄fig_gë_out
 (
yysˇn_t
 
yysˇ¬î
 );

1237 
c⁄fig_£t_out
 (
FILE
 * 
out_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

1239 
c⁄fig_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
 );

1241 *
c⁄fig_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
 );

1243 
c⁄fig_gë_löío
 (
yysˇn_t
 
yysˇ¬î
 );

1245 
c⁄fig_£t_löío
 (
löe_numbî
 ,
yysˇn_t
 
yysˇ¬î
 );

1247 
c⁄fig_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
 );

1249 
c⁄fig_£t_cﬁumn
 (
cﬁumn_no
 ,
yysˇn_t
 
yysˇ¬î
 );

1253 
YYSTYPE
 * 
c⁄fig_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
 );

1255 
c⁄fig_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
 );

1263 #i‚de‡
YY_SKIP_YYWRAP


1264 #ifde‡
__˝lu•lus


1265 "C" 
c⁄fig_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

1267 
c⁄fig_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

1277 #i‚de‡
yyãxt_±r


1278 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,,
yysˇn_t
 
yysˇ¬î
);

1281 #ifde‡
YY_NEED_STRLEN


1282 
yy_Êex_°æí
 (
yyc⁄°
 * ,
yysˇn_t
 
yysˇ¬î
);

1285 #i‚de‡
YY_NO_INPUT


1289 #ifde‡
__˝lu•lus


1290 
yyöput
 (
yysˇn_t
 
yysˇ¬î
 );

1292 
öput
 (
yysˇn_t
 
yysˇ¬î
 );

1304 #i‚de‡
YY_READ_BUF_SIZE


1305 
	#YY_READ_BUF_SIZE
 8192

	)

1309 #i‚de‡
ECHO


1314 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )Ë{} } 0)

	)

1323 #i‚de‡
YY_INPUT


1324 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

1326 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

1328 
c
 = '*'; \

1329 
n
; \

1330  
n
 = 0;Ç < 
max_size
 && \

1331 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

1332 
buf
[
n
] = (Ë
c
; \

1333 i‡–
c
 == '\n' ) \

1334 
buf
[
n
++] = (Ë
c
; \

1335 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

1336 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1337 
ªsu…
 = 
n
; \

1341 
î∫o
=0; \

1342  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
yyö
))==0 && 
	`„º‹
(yyin)) \

1344 if–
î∫o
 !
EINTR
) \

1346 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1349 
î∫o
=0; \

1350 
	`˛óªº
(
yyö
); \

1355 

	)

1363 #i‚de‡
yyãrmö©e


1364 
	#yyãrmö©e
(Ë 
YY_NULL


	)

1368 #i‚de‡
YY_START_STACK_INCR


1369 
	#YY_START_STACK_INCR
 25

	)

1373 #i‚de‡
YY_FATAL_ERROR


1375 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg , 
yysˇ¬î
)

	)

1397 #i‚de‡
YY_DECL


1398 
	#YY_DECL_IS_OURS
 1

	)

1401 
c⁄fig_Àx
 \

1402 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
);

1404 
	#YY_DECL
 
c⁄fig_Àx
 \

1405 (
YYSTYPE
 * 
yylvÆ_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

	)

1414 #i‚de‡
YY_USER_ACTION


1415 
	#YY_USER_ACTION


	)

1419 #i‚de‡
YY_BREAK


1420 
	#YY_BREAK
 ;

	)

1424 
	#YY_RULE_SETUP
 \

1425 i‡–
yyÀng
 > 0 ) \

1426 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = \

1427 (
yyãxt
[
yyÀng
 - 1] == '\n'); \

1428 
YY_USER_ACTION


	)

1434 
	gYY_DECL


1436 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

1437 *
	gyy_˝
, *
	gyy_bp
;

1438 
	gyy_a˘
;

1439 
yyguts_t
 * 
	gyyg
 = (yyguts_t*)
yysˇ¬î
;

1448 
	gyylvÆ
 = 
yylvÆ_∑øm
;

1450 i‡–!
	gyyg
->
	gyy_öô
 )

1452 
	gyyg
->
	gyy_öô
 = 1;

1454 #ifde‡
YY_USER_INIT


1455 
	gYY_USER_INIT
;

1458 i‡–! 
	gyyg
->
	gyy_°¨t
 )

1459 
	gyyg
->
	gyy_°¨t
 = 1;

1461 i‡–! 
	gyyö
 )

1463 
	gyyö
 = 
°dö
;

1468 i‡–! 
	gyyout
 )

1470 
	gyyout
 = 
°dout
;

1475 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

1476 
c⁄fig_ísuª_buf„r_°ack
 (
yysˇ¬î
);

1477 
	gYY_CURRENT_BUFFER_LVALUE
 =

1478 
c⁄fig__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
);

1481 
c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

1487 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

1490 *
	gyy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

1495 
	gyy_bp
 = 
yy_˝
;

1498 
	gyy_cuºít_°©e
 = 
yyg
->
yy_°¨t
;

1499 
	gyy_cuºít_°©e
 +
YY_AT_BOL
();

1500 
	gyy_m©ch
:

1503 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

1504 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

1506 
	gyyg
->
	gyy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

1507 
	gyyg
->
	gyy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

1509  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

1511 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1512 i‡–
	gyy_cuºít_°©e
 >= 514 )

1513 
yy_c
 = 
yy_mëa
[() yy_c];

1515 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

1516 ++
	gyy_˝
;

1518  
	gyy_ba£
[
yy_cuºít_°©e
] != 1648 );

1520 
	gyy_föd_a˘i⁄
:

1522 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

1523 i‡–
	gyy_a˘
 == 0 )

1525 
yy_˝
 = 
yyg
->
yy_œ°_ac˚±ög_˝os
;

1526 
	gyy_cuºít_°©e
 = 
yyg
->
yy_œ°_ac˚±ög_°©e
;

1527 
	gyy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

1530 
	gYY_DO_BEFORE_ACTION
;

1534 
	gdo_a˘i⁄
:

1537 i‡–
yy_Êex_debug
 )

1539 i‡–
yy_a˘
 == 0 )

1540 
Ârötf
–
°dîr
, "--scanner backing up\n" );

1541 i‡–
	gyy_a˘
 < 64 )

1542 
Ârötf
–
°dîr
, "--acceptingÑuleátÜine %ld (\"%s\")\n",

1543 ()
yy_ruÀ_löíum
[
yy_a˘
], 
yyãxt
 );

1544 i‡–
	gyy_a˘
 == 64 )

1545 
Ârötf
–
°dîr
, "--accepting defaultÑule (\"%s\")\n",

1546 
yyãxt
 );

1547 i‡–
	gyy_a˘
 == 65 )

1548 
Ârötf
–
°dîr
, "--(end of buffer orá NUL)\n" );

1550 
Ârötf
–
°dîr
, "--EOF (°¨àc⁄dôi⁄ %d)\n", 
YY_START
 );

1553  
	gyy_a˘
 )

1558 *
yy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

1559 
	gyy_˝
 = 
yyg
->
yy_œ°_ac˚±ög_˝os
;

1560 
	gyy_cuºít_°©e
 = 
yyg
->
yy_œ°_ac˚±ög_°©e
;

1561 
	gyy_föd_a˘i⁄
;

1564 
YY_RULE_SETUP


1566 {  
yyãxt
[0];}

1567 
YY_BREAK


1569 
YY_RULE_SETUP


1571 { 
yylvÆ
->
numbî
 = 
©oi
(
yyãxt
);  (
	gNUMBER
); }

1572 
YY_BREAK


1574 
YY_RULE_SETUP


1576 { 
yylvÆ
->
£rvî
.
p‹t
 = 
©oi
(
yyãxt
 +1);  
	gPORT
; }

1577 
YY_BREAK


1579 
YY_RULE_SETUP


1581 { 
yylvÆ
->
£rvî
.
weight
 = 
©oi
(
yyãxt
 +2);  
	gWEIGHT_START
; }

1582 
YY_BREAK


1585 
YY_RULE_SETUP


1588 
YY_BREAK


1590 *
yy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

1591 
	gyyg
->
	gyy_c_buf_p
 = 
yy_˝
 -= 1;

1592 
	gYY_DO_BEFORE_ACTION
;

1593 
	gYY_RULE_SETUP


1596  
	gCOMMENT
;

1598 
YY_BREAK


1600 
YY_RULE_SETUP


1602 { 
yyexåa
->
begö

yyãxt
; 
	gyyexåa
->
£t_£rvî
();  
	gSERVER
; }

1603 
YY_BREAK


1605 
YY_RULE_SETUP


1607 { 
yyexåa
->
begö

yyãxt
;  
	gBINARY_PROTOCOL
; }

1608 
YY_BREAK


1610 
YY_RULE_SETUP


1612 { 
yyexåa
->
begö

yyãxt
;  
	gBUFFER_REQUESTS
; }

1613 
YY_BREAK


1615 
YY_RULE_SETUP


1617 { 
yyexåa
->
begö

yyãxt
;  
	gCONFIGURE_FILE
; }

1618 
YY_BREAK


1620 
YY_RULE_SETUP


1622 { 
yyexåa
->
begö

yyãxt
;  
	gCONNECT_TIMEOUT
; }

1623 
YY_BREAK


1625 
YY_RULE_SETUP


1627 { 
yyexåa
->
begö

yyãxt
;  
	gDISTRIBUTION
; }

1628 
YY_BREAK


1630 
YY_RULE_SETUP


1632 { 
yyexåa
->
begö

yyãxt
;  
	gHASH_WITH_NAMESPACE
; }

1633 
YY_BREAK


1635 
YY_RULE_SETUP


1637 { 
yyexåa
->
begö

yyãxt
;  
	gHASH
; }

1638 
YY_BREAK


1640 
YY_RULE_SETUP


1642 { 
yyexåa
->
begö

yyãxt
;  
	gIO_BYTES_WATERMARK
; }

1643 
YY_BREAK


1645 
YY_RULE_SETUP


1647 { 
yyexåa
->
begö

yyãxt
;  
	gIO_KEY_PREFETCH
; }

1648 
YY_BREAK


1650 
YY_RULE_SETUP


1652 { 
yyexåa
->
begö

yyãxt
;  
	gIO_MSG_WATERMARK
; }

1653 
YY_BREAK


1655 
YY_RULE_SETUP


1657 { 
yyexåa
->
begö

yyãxt
;  
	gNOREPLY
; }

1658 
YY_BREAK


1660 
YY_RULE_SETUP


1662 { 
yyexåa
->
begö

yyãxt
;  
	gNUMBER_OF_REPLICAS
; }

1663 
YY_BREAK


1665 
YY_RULE_SETUP


1667 { 
yyexåa
->
begö

yyãxt
;  
	gPOLL_TIMEOUT
; }

1668 
YY_BREAK


1670 
YY_RULE_SETUP


1672 { 
yyexåa
->
begö

yyãxt
;  
	gRANDOMIZE_REPLICA_READ
; }

1673 
YY_BREAK


1675 
YY_RULE_SETUP


1677 { 
yyexåa
->
begö

yyãxt
;  
	gRCV_TIMEOUT
; }

1678 
YY_BREAK


1680 
YY_RULE_SETUP


1682 { 
yyexåa
->
begö

yyãxt
;  
	gREMOVE_FAILED_SERVERS
; }

1683 
YY_BREAK


1685 
YY_RULE_SETUP


1687 { 
yyexåa
->
begö

yyãxt
;  
	gRETRY_TIMEOUT
; }

1688 
YY_BREAK


1690 
YY_RULE_SETUP


1692 { 
yyexåa
->
begö

yyãxt
;  
	gSND_TIMEOUT
; }

1693 
YY_BREAK


1695 
YY_RULE_SETUP


1697 { 
yyexåa
->
begö

yyãxt
;  
	gSOCKET_RECV_SIZE
; }

1698 
YY_BREAK


1700 
YY_RULE_SETUP


1702 { 
yyexåa
->
begö

yyãxt
;  
	gSOCKET_SEND_SIZE
; }

1703 
YY_BREAK


1705 
YY_RULE_SETUP


1707 { 
yyexåa
->
begö

yyãxt
;  
	gSORT_HOSTS
; }

1708 
YY_BREAK


1710 
YY_RULE_SETUP


1712 { 
yyexåa
->
begö

yyãxt
;  
	gSUPPORT_CAS
; }

1713 
YY_BREAK


1715 
YY_RULE_SETUP


1717 { 
yyexåa
->
begö

yyãxt
;  
	g_TCP_KEEPALIVE
; }

1718 
YY_BREAK


1720 
YY_RULE_SETUP


1722 { 
yyexåa
->
begö

yyãxt
;  
	g_TCP_KEEPIDLE
; }

1723 
YY_BREAK


1725 
YY_RULE_SETUP


1727 { 
yyexåa
->
begö

yyãxt
;  
	g_TCP_NODELAY
; }

1728 
YY_BREAK


1730 
YY_RULE_SETUP


1732 { 
yyexåa
->
begö

yyãxt
;  
	gUSE_UDP
; }

1733 
YY_BREAK


1735 
YY_RULE_SETUP


1737 { 
yyexåa
->
begö

yyãxt
;  
	gUSER_DATA
; }

1738 
YY_BREAK


1740 
YY_RULE_SETUP


1742 { 
yyexåa
->
begö

yyãxt
;  
	gVERIFY_KEY
; }

1743 
YY_BREAK


1745 
YY_RULE_SETUP


1747 { 
yyexåa
->
begö

yyãxt
;  
	gPOOL_MIN
; }

1748 
YY_BREAK


1750 
YY_RULE_SETUP


1752 { 
yyexåa
->
begö

yyãxt
;  
	gPOOL_MAX
; }

1753 
YY_BREAK


1755 
YY_RULE_SETUP


1757 { 
yyexåa
->
begö

yyãxt
;  
	gNAMESPACE
; }

1758 
YY_BREAK


1760 
YY_RULE_SETUP


1762 { 
yyexåa
->
begö

yyãxt
;  
	gINCLUDE
; }

1763 
YY_BREAK


1765 
YY_RULE_SETUP


1767 { 
yyexåa
->
begö

yyãxt
;  
	gRESET
; }

1768 
YY_BREAK


1770 
YY_RULE_SETUP


1772 { 
yyexåa
->
begö

yyãxt
;  
	gPARSER_DEBUG
; }

1773 
YY_BREAK


1775 
YY_RULE_SETUP


1777 { 
yyexåa
->
begö

yyãxt
;  
	gSERVERS
; }

1778 
YY_BREAK


1780 
YY_RULE_SETUP


1782 { 
yyexåa
->
begö

yyãxt
;  
	gEND
; }

1783 
YY_BREAK


1785 
YY_RULE_SETUP


1787 { 
yyexåa
->
begö

yyãxt
;  
	gERROR
; }

1788 
YY_BREAK


1790 
YY_RULE_SETUP


1792 {  
TRUE
; }

1793 
YY_BREAK


1795 
YY_RULE_SETUP


1797 {  
FALSE
; }

1798 
YY_BREAK


1800 
YY_RULE_SETUP


1803 
yyexåa
->
begö

yyãxt
;

1804  
	gUNKNOWN_OPTION
;

1806 
YY_BREAK


1808 
YY_RULE_SETUP


1810 {  
CONSISTENT
; }

1811 
YY_BREAK


1813 
YY_RULE_SETUP


1815 {  
MODULA
; }

1816 
YY_BREAK


1818 
YY_RULE_SETUP


1820 {  
RANDOM
; }

1821 
YY_BREAK


1823 
YY_RULE_SETUP


1825 {  
MD5
; }

1826 
YY_BREAK


1828 
YY_RULE_SETUP


1830 {  
CRC
; }

1831 
YY_BREAK


1833 
YY_RULE_SETUP


1835 {  
FNV1_64
; }

1836 
YY_BREAK


1838 
YY_RULE_SETUP


1840 {  
FNV1A_64
; }

1841 
YY_BREAK


1843 
YY_RULE_SETUP


1845 {  
FNV1_32
; }

1846 
YY_BREAK


1848 
YY_RULE_SETUP


1850 {  
FNV1A_32
; }

1851 
YY_BREAK


1853 
YY_RULE_SETUP


1855 {  
HSIEH
; }

1856 
YY_BREAK


1858 
YY_RULE_SETUP


1860 {  
MURMUR
; }

1861 
YY_BREAK


1863 
YY_RULE_SETUP


1865 {  
JENKINS
; }

1866 
YY_BREAK


1868 
YY_RULE_SETUP


1871 
yylvÆ
->
£rvî
.
p‹t

MEMCACHED_DEFAULT_PORT
;

1872 
	gyylvÆ
->
	g£rvî
.
	gweight
= 1;

1873 
	gyylvÆ
->
	g£rvî
.
	gc_°r

yyexåa
->
£t_ho°«me
(
yyãxt
, 
yyÀng
);

1874 i‡(
	gyylvÆ
->
	g£rvî
.
	gc_°r
)

1875 
	gyylvÆ
->
	g£rvî
.
	gÀngth

yyÀng
;

1876  
	gIPADDRESS
;

1878 
YY_BREAK


1880 
YY_RULE_SETUP


1883 i‡(
yyexåa
->
is_£rvî
())

1885 
yylvÆ
->
£rvî
.
p‹t

MEMCACHED_DEFAULT_PORT
;

1886 
	gyylvÆ
->
	g£rvî
.
	gweight
= 1;

1887 
	gyylvÆ
->
	g£rvî
.
	gc_°r

yyexåa
->
£t_ho°«me
(
yyãxt
, 
yyÀng
);

1888 i‡(
	gyylvÆ
->
	g£rvî
.
	gc_°r
)

1889 
	gyylvÆ
->
	g£rvî
.
	gÀngth

yyÀng
;

1891  
	gHOSTNAME
;

1894 
	gyylvÆ
->
	g°rög
.
	gc_°r
 = 
yyãxt
;

1895 
	gyylvÆ
->
	g°rög
.
	gÀngth
 = 
yyÀng
;

1897  
	gSTRING
;

1899 
YY_BREAK


1901 
YY_RULE_SETUP


1904 
yylvÆ
->
°rög
.
c_°r
 = 
yyãxt
;

1905 
	gyylvÆ
->
	g°rög
.
	gÀngth
 = 
yyÀng
;

1906  
	gQUOTED_STRING
;

1908 
YY_BREAK


1910 
YY_RULE_SETUP


1913 
yyexåa
->
begö

yyãxt
;

1914  
	gUNKNOWN
;

1916 
YY_BREAK


1918 
YY_RULE_SETUP


1920 
ECHO
;

1921 
	gYY_BREAK


1923 
YY_STATE_EOF
(
INITIAL
):

1924 
yyãrmö©e
();

1926 
	gYY_END_OF_BUFFER
:

1929 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - 
yyg
->
yyãxt_±r
) - 1;

1932 *
	gyy_˝
 = 
yyg
->
yy_hﬁd_ch¨
;

1933 
YY_RESTORE_YY_MORE_OFFSET


1935 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

1946 
yyg
->
yy_n_ch¨s
 = 
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1947 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
yyö
;

1948 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

1958 i‡–
	gyyg
->
	gyy_c_buf_p
 <&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
] )

1960 
yy_°©e_ty≥
 
yy_√xt_°©e
;

1962 
	gyyg
->
	gyy_c_buf_p
 = 
yyg
->
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

1964 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

1975 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 , 
yysˇ¬î
);

1977 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

1979 i‡–
	gyy_√xt_°©e
 )

1982 
	gyy_˝
 = ++
yyg
->
yy_c_buf_p
;

1983 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

1984 
	gyy_m©ch
;

1990 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

1991 
	gyy_föd_a˘i⁄
;

1995  
yy_gë_√xt_buf„r
–
yysˇ¬î
 ) )

1997 
	gEOB_ACT_END_OF_FILE
:

1999 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 0;

2001 i‡–
c⁄fig_wøp
(
yysˇ¬î
 ) )

2012 
	gyyg
->
	gyy_c_buf_p
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

2014 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

2015 
	gdo_a˘i⁄
;

2020 i‡–! 
	gyyg
->
	gyy_did_buf„r_swôch_⁄_eof
 )

2021 
	gYY_NEW_FILE
;

2026 
	gEOB_ACT_CONTINUE_SCAN
:

2027 
yyg
->
yy_c_buf_p
 =

2028 
yyg
->
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

2030 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

2032 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

2033 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

2034 
	gyy_m©ch
;

2036 
	gEOB_ACT_LAST_MATCH
:

2037 
yyg
->
yy_c_buf_p
 =

2038 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
];

2040 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
–
yysˇ¬î
 );

2042 
	gyy_˝
 = 
yyg
->
yy_c_buf_p
;

2043 
	gyy_bp
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
;

2044 
	gyy_föd_a˘i⁄
;

2050 
YY_FATAL_ERROR
(

2072 
	$yy_gë_√xt_buf„r
 (
yysˇn_t
 
yysˇ¬î
)

2077 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2078 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

2079 *
sour˚
 = 
yyg
->
yyãxt_±r
;

2080 
numbî_to_move
, 
i
;

2081 
ªt_vÆ
;

2083 i‡–
yyg
->
yy_c_buf_p
 > &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[yyg->
yy_n_ch¨s
 + 1] )

2084 
	`YY_FATAL_ERROR
(

2087 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

2089 i‡–
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
 - 
YY_MORE_ADJ
 == 1 )

2094  
EOB_ACT_END_OF_FILE
;

2102  
EOB_ACT_LAST_MATCH
;

2109 
numbî_to_move
 = (Ë(
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
) - 1;

2111  
i
 = 0; i < 
numbî_to_move
; ++i )

2112 *(
de°
++Ë*(
sour˚
++);

2114 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

2118 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars = 0;

2122 
num_to_ªad
 =

2123 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

2125  
num_to_ªad
 <= 0 )

2129 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

2131 
yy_c_buf_p_off£t
 =

2132 (Ë(
yyg
->
yy_c_buf_p
 - 
b
->
yy_ch_buf
);

2134 i‡–
b
->
yy_is_our_buf„r
 )

2136 
√w_size
 = 
b
->
yy_buf_size
 * 2;

2138 i‡–
√w_size
 <= 0 )

2139 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

2141 
b
->
yy_buf_size
 *= 2;

2143 
b
->
yy_ch_buf
 = (*)

2145 
	`c⁄fig_ªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 ,
yysˇ¬î
 );

2149 
b
->
yy_ch_buf
 = 0;

2151 i‡–! 
b
->
yy_ch_buf
 )

2152 
	`YY_FATAL_ERROR
(

2155 
yyg
->
yy_c_buf_p
 = &
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

2157 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

2158 
numbî_to_move
 - 1;

2162 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

2163 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

2166 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

2167 
yyg
->
yy_n_ch¨s
, (
size_t
Ë
num_to_ªad
 );

2169 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

2172 i‡–
yyg
->
yy_n_ch¨s
 == 0 )

2174 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

2176 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

2177 
	`c⁄fig_ª°¨t
(
yyö
 ,
yysˇ¬î
);

2182 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

2183 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

2184 
YY_BUFFER_EOF_PENDING
;

2189 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

2191 i‡((
yy_size_t
Ë(
yyg
->
yy_n_ch¨s
 + 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

2193 
yy_size_t
 
√w_size
 = 
yyg
->
yy_n_ch¨s
 + 
numbî_to_move
 + (yyg->yy_n_chars >> 1);

2194 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`c⁄fig_ªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 ,
yysˇ¬î
 );

2195 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

2196 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

2199 
yyg
->
yy_n_ch¨s
 +
numbî_to_move
;

2200 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
] = 
YY_END_OF_BUFFER_CHAR
;

2201 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
yyg
->
yy_n_ch¨s
 + 1] = 
YY_END_OF_BUFFER_CHAR
;

2203 
yyg
->
yyãxt_±r
 = &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

2205  
ªt_vÆ
;

2206 
	}
}

2213 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 (
yysˇn_t
 
yysˇ¬î
)

2218 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

2219 *
yy_˝
;

2220 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2223 
yy_cuºít_°©e
 = 
yyg
->
yy_°¨t
;

2224 
yy_cuºít_°©e
 +
	`YY_AT_BOL
();

2226  
yy_˝
 = 
yyg
->
yyãxt_±r
 + 
YY_MORE_ADJ
; yy_˝ < yyg->
yy_c_buf_p
; ++yy_cp )

2229 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

2230 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

2232 
yyg
->
yy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

2233 
yyg
->
yy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

2235  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

2237 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

2238 i‡–
yy_cuºít_°©e
 >= 514 )

2239 
yy_c
 = 
yy_mëa
[() yy_c];

2241 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

2244  
yy_cuºít_°©e
;

2245 
	}
}

2253 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 , 
yysˇn_t
 
yysˇ¬î
)

2258 
yy_is_jam
;

2259 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2261 *
yy_˝
 = 
yyg
->
yy_c_buf_p
;

2263 
YY_CHAR
 
yy_c
 = 1;

2264 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

2266 
yyg
->
yy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

2267 
yyg
->
yy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

2269  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

2271 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

2272 i‡–
yy_cuºít_°©e
 >= 514 )

2273 
yy_c
 = 
yy_mëa
[() yy_c];

2275 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

2276 
yy_is_jam
 = (
yy_cuºít_°©e
 == 513);

2278  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

2279 
	}
}

2286 #i‚de‡
YY_NO_INPUT


2287 #ifde‡
__˝lu•lus


2288 
	$yyöput
 (
yysˇn_t
 
yysˇ¬î
)

2290 
	$öput
 (
yysˇn_t
 
yysˇ¬î
)

2297 
c
;

2298 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2300 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

2302 i‡–*
yyg
->
yy_c_buf_p
 =
YY_END_OF_BUFFER_CHAR
 )

2308 i‡–
yyg
->
yy_c_buf_p
 < &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[yyg->
yy_n_ch¨s
] )

2310 *
yyg
->
yy_c_buf_p
 = '\0';

2314 
off£t
 = 
yyg
->
yy_c_buf_p
 - yyg->
yyãxt_±r
;

2315 ++
yyg
->
yy_c_buf_p
;

2317  
	`yy_gë_√xt_buf„r
–
yysˇ¬î
 ) )

2319 
EOB_ACT_LAST_MATCH
:

2331 
	`c⁄fig_ª°¨t
(
yyö
 ,
yysˇ¬î
);

2335 
EOB_ACT_END_OF_FILE
:

2337 i‡–
	`c⁄fig_wøp
(
yysˇ¬î
 ) )

2338  
EOF
;

2340 i‡–! 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 )

2341 
YY_NEW_FILE
;

2342 #ifde‡
__˝lu•lus


2343  
	`yyöput
(
yysˇ¬î
);

2345  
	`öput
(
yysˇ¬î
);

2349 
EOB_ACT_CONTINUE_SCAN
:

2350 
yyg
->
yy_c_buf_p
 = yyg->
yyãxt_±r
 + 
off£t
;

2356 
c
 = *(*Ë
yyg
->
yy_c_buf_p
;

2357 *
yyg
->
yy_c_buf_p
 = '\0';

2358 
yyg
->
yy_hﬁd_ch¨
 = *++yyg->
yy_c_buf_p
;

2361 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = (
c
 == '\n');

2363  
c
;

2364 
	}
}

2375 
	$c⁄fig_ª°¨t
 (
FILE
 * 
öput_fûe
 , 
yysˇn_t
 
yysˇ¬î
)

2380 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2382 i‡–! 
YY_CURRENT_BUFFER
 ){

2383 
	`c⁄fig_ísuª_buf„r_°ack
 (
yysˇ¬î
);

2384 
YY_CURRENT_BUFFER_LVALUE
 =

2385 
	`c⁄fig__¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ,
yysˇ¬î
);

2388 
	`c⁄fig__öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 ,
yysˇ¬î
);

2389 
	`c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2390 
	}
}

2397 
	$c⁄fig__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 , 
yysˇn_t
 
yysˇ¬î
)

2402 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2409 
	`c⁄fig_ísuª_buf„r_°ack
 (
yysˇ¬î
);

2410 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

2413 i‡–
YY_CURRENT_BUFFER
 )

2416 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

2417 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = 
yyg
->
yy_c_buf_p
;

2418 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

2421 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

2422 
	`c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2429 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

2430 
	}
}

2433 
	$c⁄fig__lﬂd_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
)

2438 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2439 
yyg
->
yy_n_ch¨s
 = 
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

2440 
yyg
->
yyãxt_±r
 = yyg->
yy_c_buf_p
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

2441 
yyö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

2442 
yyg
->
yy_hﬁd_ch¨
 = *yyg->
yy_c_buf_p
;

2443 
	}
}

2452 
YY_BUFFER_STATE
 
	$c⁄fig__¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 , 
yysˇn_t
 
yysˇ¬î
)

2457 
YY_BUFFER_STATE
 
b
;

2459 
b
 = (
YY_BUFFER_STATE
Ë
	`c⁄fig_Æloc
(–
yy_buf„r_°©e
 ) ,
yysˇ¬î
 );

2460 i‡–! 
b
 )

2461 
	`YY_FATAL_ERROR
( "out of dynamic memory in config__create_buffer()" );

2463 
b
->
yy_buf_size
 = 
size
;

2468 
b
->
yy_ch_buf
 = (*Ë
	`c⁄fig_Æloc
(b->
yy_buf_size
 + 2 ,
yysˇ¬î
 );

2469 i‡–! 
b
->
yy_ch_buf
 )

2470 
	`YY_FATAL_ERROR
( "out of dynamic memory in config__create_buffer()" );

2472 
b
->
yy_is_our_buf„r
 = 1;

2474 
	`c⁄fig__öô_buf„r
(
b
,
fûe
 ,
yysˇ¬î
);

2476  
b
;

2477 
	}
}

2484 
	$c⁄fig__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 , 
yysˇn_t
 
yysˇ¬î
)

2489 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2491 i‡–! 
b
 )

2494 i‡–
b
 =
YY_CURRENT_BUFFER
 )

2495 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

2497 i‡–
b
->
yy_is_our_buf„r
 )

2498 
	`c⁄fig_‰ì
((*Ë
b
->
yy_ch_buf
 ,
yysˇ¬î
 );

2500 
	`c⁄fig_‰ì
((*Ë
b
 ,
yysˇ¬î
 );

2501 
	}
}

2505 #i‚de‡
__˝lu•lus


2506 
ißây
 ();

2519 
	$c⁄fig__öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 , 
yysˇn_t
 
yysˇ¬î
)

2525 
€ºno
 = 
î∫o
;

2526 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2528 
	`c⁄fig__Êush_buf„r
(
b
 ,
yysˇ¬î
);

2530 
b
->
yy_öput_fûe
 = 
fûe
;

2531 
b
->
yy_fûl_buf„r
 = 1;

2537 i‡(
b
 !
YY_CURRENT_BUFFER
){

2538 
b
->
yy_bs_löío
 = 1;

2539 
b
->
yy_bs_cﬁumn
 = 0;

2544 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

2549 
î∫o
 = 
€ºno
;

2550 
	}
}

2557 
	$c⁄fig__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 , 
yysˇn_t
 
yysˇ¬î
)

2562 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2563 i‡–! 
b
 )

2566 
b
->
yy_n_ch¨s
 = 0;

2572 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

2573 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

2575 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

2577 
b
->
yy_©_bﬁ
 = 1;

2578 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

2580 i‡–
b
 =
YY_CURRENT_BUFFER
 )

2581 
	`c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2582 
	}
}

2592 
	$c⁄fig_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 , 
yysˇn_t
 
yysˇ¬î
)

2597 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2598 i‡(
√w_buf„r
 =
NULL
)

2601 
	`c⁄fig_ísuª_buf„r_°ack
(
yysˇ¬î
);

2604 i‡–
YY_CURRENT_BUFFER
 )

2607 *
yyg
->
yy_c_buf_p
 = yyg->
yy_hﬁd_ch¨
;

2608 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = 
yyg
->
yy_c_buf_p
;

2609 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = 
yyg
->yy_n_chars;

2613 i‡(
YY_CURRENT_BUFFER
)

2614 
yyg
->
yy_buf„r_°ack_t›
++;

2615 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

2618 
	`c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2619 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

2620 
	}
}

2629 
	$c⁄fig_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
)

2634 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2635 i‡(!
YY_CURRENT_BUFFER
)

2638 
	`c⁄fig__dñëe_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
);

2639 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

2640 i‡(
yyg
->
yy_buf„r_°ack_t›
 > 0)

2641 --
yyg
->
yy_buf„r_°ack_t›
;

2643 i‡(
YY_CURRENT_BUFFER
) {

2644 
	`c⁄fig__lﬂd_buf„r_°©e
(
yysˇ¬î
 );

2645 
yyg
->
yy_did_buf„r_swôch_⁄_eof
 = 1;

2647 
	}
}

2655 
	$c⁄fig_ísuª_buf„r_°ack
 (
yysˇn_t
 
yysˇ¬î
)

2660 
num_to_Æloc
;

2661 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2663 i‡(!
yyg
->
yy_buf„r_°ack
) {

2669 
num_to_Æloc
 = 1;

2670 
yyg
->
yy_buf„r_°ack
 = (
yy_buf„r_°©e
**)
c⁄fig_Æloc


2671 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

2672 , 
yysˇ¬î
);

2673 i‡–! 
yyg
->
yy_buf„r_°ack
 )

2674 
	`YY_FATAL_ERROR
( "out of dynamic memory in config_ensure_buffer_stack()" );

2676 
	`mem£t
(
yyg
->
yy_buf„r_°ack
, 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

2678 
yyg
->
yy_buf„r_°ack_max
 = 
num_to_Æloc
;

2679 
yyg
->
yy_buf„r_°ack_t›
 = 0;

2683 i‡(
yyg
->
yy_buf„r_°ack_t›
 >(yyg->
yy_buf„r_°ack_max
) - 1){

2686 
grow_size
 = 8 ;

2688 
num_to_Æloc
 = 
yyg
->
yy_buf„r_°ack_max
 + 
grow_size
;

2689 
yyg
->
yy_buf„r_°ack
 = (
yy_buf„r_°©e
**)
c⁄fig_ªÆloc


2690 (
yyg
->
yy_buf„r_°ack
,

2691 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

2692 , 
yysˇ¬î
);

2693 i‡–! 
yyg
->
yy_buf„r_°ack
 )

2694 
	`YY_FATAL_ERROR
( "out of dynamic memory in config_ensure_buffer_stack()" );

2697 
	`mem£t
(
yyg
->
yy_buf„r_°ack
 + yyg->
yy_buf„r_°ack_max
, 0, 
grow_size
 * (
yy_buf„r_°©e
*));

2698 
yyg
->
yy_buf„r_°ack_max
 = 
num_to_Æloc
;

2700 
	}
}

2710 
YY_BUFFER_STATE
 
	$c⁄fig__sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

2712 
YY_BUFFER_STATE
 
b
;

2714 i‡–
size
 < 2 ||

2715 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

2716 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

2720 
b
 = (
YY_BUFFER_STATE
Ë
	`c⁄fig_Æloc
(–
yy_buf„r_°©e
 ) ,
yysˇ¬î
 );

2721 i‡–! 
b
 )

2722 
	`YY_FATAL_ERROR
( "out of dynamic memory in config__scan_buffer()" );

2724 
b
->
yy_buf_size
 = 
size
 - 2;

2725 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

2726 
b
->
yy_is_our_buf„r
 = 0;

2727 
b
->
yy_öput_fûe
 = 0;

2728 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

2729 
b
->
yy_is_öãø˘ive
 = 0;

2730 
b
->
yy_©_bﬁ
 = 1;

2731 
b
->
yy_fûl_buf„r
 = 0;

2732 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

2734 
	`c⁄fig__swôch_to_buf„r
(
b
 ,
yysˇ¬î
 );

2736  
b
;

2737 
	}
}

2749 
YY_BUFFER_STATE
 
	$c⁄fig__sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 , 
yysˇn_t
 
yysˇ¬î
)

2752  
	`c⁄fig__sˇn_byãs
(
yy°r
,
	`°æí
(yy°rË,
yysˇ¬î
);

2753 
	}
}

2764 
YY_BUFFER_STATE
 
	$c⁄fig__sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 , 
yysˇn_t
 
yysˇ¬î
)

2766 
YY_BUFFER_STATE
 
b
;

2767 *
buf
;

2768 
yy_size_t
 
n
;

2769 
i
;

2772 
n
 = 
_yybyãs_Àn
 + 2;

2773 
buf
 = (*Ë
	`c⁄fig_Æloc
(
n
 ,
yysˇ¬î
 );

2774 i‡–! 
buf
 )

2775 
	`YY_FATAL_ERROR
( "out of dynamic memory in config__scan_bytes()" );

2777  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

2778 
buf
[
i
] = 
yybyãs
[i];

2780 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

2782 
b
 = 
	`c⁄fig__sˇn_buf„r
(
buf
,
n
 ,
yysˇ¬î
);

2783 i‡–! 
b
 )

2784 
	`YY_FATAL_ERROR
( "bad buffer in config__scan_bytes()" );

2789 
b
->
yy_is_our_buf„r
 = 1;

2791  
b
;

2792 
	}
}

2795 #i‚de‡
YY_EXIT_FAILURE


2796 
	#YY_EXIT_FAILURE
 2

	)

2800 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 , 
yysˇn_t
 
yysˇ¬î
)

2802 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

2803 
	`exô
–
YY_EXIT_FAILURE
 );

2804 
	}
}

2811 #unde‡
yyÀss


2812 
	#yyÀss
(
n
) \

2816 
yyÀss_ma¸o_¨g
 = (
n
); \

2817 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

2818 
yyãxt
[
yyÀng
] = 
yyg
->
yy_hﬁd_ch¨
; \

2819 
yyg
->
yy_c_buf_p
 = 
yyãxt
 + 
yyÀss_ma¸o_¨g
; \

2820 
yyg
->
yy_hﬁd_ch¨
 = *yyg->
yy_c_buf_p
; \

2821 *
yyg
->
yy_c_buf_p
 = '\0'; \

2822 
yyÀng
 = 
yyÀss_ma¸o_¨g
; \

2824  0 )

	)

2834 
YY_EXTRA_TYPE
 
	$c⁄fig_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
)

2836 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2837  
yyexåa
;

2838 
	}
}

2845 
	$c⁄fig_gë_löío
 (
yysˇn_t
 
yysˇ¬î
)

2847 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2849 i‡(! 
YY_CURRENT_BUFFER
)

2852  
yylöío
;

2853 
	}
}

2858 
	$c⁄fig_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
)

2860 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2862 i‡(! 
YY_CURRENT_BUFFER
)

2865  
yycﬁumn
;

2866 
	}
}

2871 
FILE
 *
	$c⁄fig_gë_ö
 (
yysˇn_t
 
yysˇ¬î
)

2873 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2874  
yyö
;

2875 
	}
}

2880 
FILE
 *
	$c⁄fig_gë_out
 (
yysˇn_t
 
yysˇ¬î
)

2882 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2883  
yyout
;

2884 
	}
}

2889 
	$c⁄fig_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
)

2891 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2892  
yyÀng
;

2893 
	}
}

2899 *
	$c⁄fig_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
)

2901 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2902  
yyãxt
;

2903 
	}
}

2911 
	$c⁄fig_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 , 
yysˇn_t
 
yysˇ¬î
)

2913 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2914 
yyexåa
 = 
u£r_deföed
 ;

2915 
	}
}

2923 
	$c⁄fig_£t_löío
 (
löe_numbî
 , 
yysˇn_t
 
yysˇ¬î
)

2925 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2928 i‡(! 
YY_CURRENT_BUFFER
 )

2929 
	`yy_Áèl_îr‹
–"c⁄fig_£t_löíÿˇŒed wôhÇÿbuf„r" , 
yysˇ¬î
);

2931 
yylöío
 = 
löe_numbî
;

2932 
	}
}

2938 
	$c⁄fig_£t_cﬁumn
 (
cﬁumn_no
 , 
yysˇn_t
 
yysˇ¬î
)

2940 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2943 i‡(! 
YY_CURRENT_BUFFER
 )

2944 
	`yy_Áèl_îr‹
–"c⁄fig_£t_cﬁum¿ˇŒed wôhÇÿbuf„r" , 
yysˇ¬î
);

2946 
yycﬁumn
 = 
cﬁumn_no
;

2947 
	}
}

2955 
	$c⁄fig_£t_ö
 (
FILE
 * 
ö_°r
 , 
yysˇn_t
 
yysˇ¬î
)

2957 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2958 
yyö
 = 
ö_°r
 ;

2959 
	}
}

2961 
	$c⁄fig_£t_out
 (
FILE
 * 
out_°r
 , 
yysˇn_t
 
yysˇ¬î
)

2963 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2964 
yyout
 = 
out_°r
 ;

2965 
	}
}

2967 
	$c⁄fig_gë_debug
 (
yysˇn_t
 
yysˇ¬î
)

2969 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2970  
yy_Êex_debug
;

2971 
	}
}

2973 
	$c⁄fig_£t_debug
 (
bdebug
 , 
yysˇn_t
 
yysˇ¬î
)

2975 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2976 
yy_Êex_debug
 = 
bdebug
 ;

2977 
	}
}

2986 
YYSTYPE
 * 
	$c⁄fig_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
)

2988 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2989  
yylvÆ
;

2990 
	}
}

2992 
	$c⁄fig_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

2994 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

2995 
yylvÆ
 = 
yylvÆ_∑øm
;

2996 
	}
}

3007 
	$c⁄fig_Àx_öô
(
yysˇn_t
* 
±r_yy_globÆs
)

3010 i‡(
±r_yy_globÆs
 =
NULL
){

3011 
î∫o
 = 
EINVAL
;

3015 *
±r_yy_globÆs
 = (
yysˇn_t
Ë
	`c⁄fig_Æloc
 ( –
yyguts_t
 ), 
NULL
 );

3017 i‡(*
±r_yy_globÆs
 =
NULL
){

3018 
î∫o
 = 
ENOMEM
;

3023 
	`mem£t
(*
±r_yy_globÆs
,0x00,(
yyguts_t
));

3025  
	`yy_öô_globÆs
 ( *
±r_yy_globÆs
 );

3026 
	}
}

3036 
	$c⁄fig_Àx_öô_exåa
(
YY_EXTRA_TYPE
 
yy_u£r_deföed
,
yysˇn_t
* 
±r_yy_globÆs
 )

3039 
yyguts_t
 
dummy_yyguts
;

3041 
	`c⁄fig_£t_exåa
 (
yy_u£r_deföed
, &
dummy_yyguts
);

3043 i‡(
±r_yy_globÆs
 =
NULL
){

3044 
î∫o
 = 
EINVAL
;

3048 *
±r_yy_globÆs
 = (
yysˇn_t
Ë
	`c⁄fig_Æloc
 ( –
yyguts_t
 ), &
dummy_yyguts
 );

3050 i‡(*
±r_yy_globÆs
 =
NULL
){

3051 
î∫o
 = 
ENOMEM
;

3057 
	`mem£t
(*
±r_yy_globÆs
,0x00,(
yyguts_t
));

3059 
	`c⁄fig_£t_exåa
 (
yy_u£r_deföed
, *
±r_yy_globÆs
);

3061  
	`yy_öô_globÆs
 ( *
±r_yy_globÆs
 );

3062 
	}
}

3067 
	$yy_öô_globÆs
 (
yysˇn_t
 
yysˇ¬î
)

3069 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

3074 
yyg
->
yy_buf„r_°ack
 = 0;

3075 
yyg
->
yy_buf„r_°ack_t›
 = 0;

3076 
yyg
->
yy_buf„r_°ack_max
 = 0;

3077 
yyg
->
yy_c_buf_p
 = (*) 0;

3078 
yyg
->
yy_öô
 = 0;

3079 
yyg
->
yy_°¨t
 = 0;

3081 
yyg
->
yy_°¨t_°ack_±r
 = 0;

3082 
yyg
->
yy_°¨t_°ack_dïth
 = 0;

3083 
yyg
->
yy_°¨t_°ack
 = 
NULL
;

3086 #ifde‡
YY_STDINIT


3087 
yyö
 = 
°dö
;

3088 
yyout
 = 
°dout
;

3090 
yyö
 = (
FILE
 *) 0;

3091 
yyout
 = (
FILE
 *) 0;

3098 
	}
}

3103 
	$c⁄fig_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
)

3105 
yyguts_t
 * 
yyg
 = (yyguts_t*)
yysˇ¬î
;

3108 
YY_CURRENT_BUFFER
){

3109 
	`c⁄fig__dñëe_buf„r
(
YY_CURRENT_BUFFER
 ,
yysˇ¬î
 );

3110 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

3111 
	`c⁄fig_p›_buf„r_°©e
(
yysˇ¬î
);

3115 
	`c⁄fig_‰ì
(
yyg
->
yy_buf„r_°ack
 ,
yysˇ¬î
);

3116 
yyg
->
yy_buf„r_°ack
 = 
NULL
;

3119 
	`c⁄fig_‰ì
(
yyg
->
yy_°¨t_°ack
 ,
yysˇ¬î
 );

3120 
yyg
->
yy_°¨t_°ack
 = 
NULL
;

3124 
	`yy_öô_globÆs
–
yysˇ¬î
);

3128 
	`c⁄fig_‰ì
 ( 
yysˇ¬î
 , yyscanner );

3129 
yysˇ¬î
 = 
NULL
;

3132 
	}
}

3139 #i‚de‡
yyãxt_±r


3140 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 , 
yysˇn_t
 
yysˇ¬î
)

3142 
i
;

3143  
i
 = 0; i < 
n
; ++i )

3144 
s1
[
i
] = 
s2
[i];

3145 
	}
}

3148 #ifde‡
YY_NEED_STRLEN


3149 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 , 
yysˇn_t
 
yysˇ¬î
)

3151 
n
;

3152  
n
 = 0; 
s
[n]; ++n )

3155  
n
;

3156 
	}
}

3159 *
	$c⁄fig_Æloc
 (
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

3161  (*Ë
	`mÆloc
–
size
 );

3162 
	}
}

3164 *
	$c⁄fig_ªÆloc
 (* 
±r
, 
yy_size_t
 
size
 , 
yysˇn_t
 
yysˇ¬î
)

3173  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

3174 
	}
}

3176 
	$c⁄fig_‰ì
 (* 
±r
 , 
yysˇn_t
 
yysˇ¬î
)

3178 
	`‰ì
–(*Ë
±r
 );

3179 
	}
}

3183 
	#YYTABLES_NAME
 "yyèbÀs"

	)

3192 
	gC⁄ãxt
::
	$öô_sˇ¬î
()

3194 
	`c⁄fig_Àx_öô
(&
sˇ¬î
);

3195 
	`c⁄fig_£t_exåa
(
this
,
sˇ¬î
);

3196 
	}
}

3198 
	gC⁄ãxt
::
	$de°roy_sˇ¬î
()

3200 
	`c⁄fig_Àx_de°roy
(
sˇ¬î
);

3201 
	}
}

	@libmemcached/options/scanner.h

1 #i‚de‡
c⁄fig_HEADER_H


2 
	#c⁄fig_HEADER_H
 1

	)

3 
	#c⁄fig_IN_HEADER
 1

	)

8 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wold-style-cast"

9 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wsign-compare"

10 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-parameter"

12 
	~<libmemˇched/›ti⁄s/c⁄ãxt.h
>

13 
	~<libmemˇched/›ti⁄s/∑r£r.h
>

14 
	~<libmemˇched/›ti⁄s/°rög.h
>

15 
	~<libmemˇched/›ti⁄s/symbﬁ.h
>

17 
	#YY_EXTRA_TYPE
 
C⁄ãxt
*

	)

24 
	#YY_INT_ALIGNED
 

	)

30 
	#FLEX_SCANNER


	)

31 
	#YY_FLEX_MAJOR_VERSION
 2

	)

32 
	#YY_FLEX_MINOR_VERSION
 5

	)

33 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

34 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

35 
	#FLEX_BETA


	)

53 
	~<°dio.h
>

54 
	~<°rög.h
>

55 
	~<î∫o.h
>

56 
	~<°dlib.h
>

66 #i‚de‡
FLEXINT_H


67 
	#FLEXINT_H


	)

71 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

76 #i‚de‡
__STDC_LIMIT_MACROS


77 
	#__STDC_LIMIT_MACROS
 1

	)

80 
	~<öây≥s.h
>

81 
öt8_t
 
	tÊex_öt8_t
;

82 
uöt8_t
 
	tÊex_uöt8_t
;

83 
öt16_t
 
	tÊex_öt16_t
;

84 
uöt16_t
 
	tÊex_uöt16_t
;

85 
öt32_t
 
	tÊex_öt32_t
;

86 
uöt32_t
 
	tÊex_uöt32_t
;

88 sig√d 
	tÊex_öt8_t
;

89 
	tÊex_öt16_t
;

90 
	tÊex_öt32_t
;

91 
	tÊex_uöt8_t
;

92 
	tÊex_uöt16_t
;

93 
	tÊex_uöt32_t
;

97 #i‚de‡
INT8_MIN


98 
	#INT8_MIN
 (-128)

	)

100 #i‚de‡
INT16_MIN


101 
	#INT16_MIN
 (-32767-1)

	)

103 #i‚de‡
INT32_MIN


104 
	#INT32_MIN
 (-2147483647-1)

	)

106 #i‚de‡
INT8_MAX


107 
	#INT8_MAX
 (127)

	)

109 #i‚de‡
INT16_MAX


110 
	#INT16_MAX
 (32767)

	)

112 #i‚de‡
INT32_MAX


113 
	#INT32_MAX
 (2147483647)

	)

115 #i‚de‡
UINT8_MAX


116 
	#UINT8_MAX
 (255U)

	)

118 #i‚de‡
UINT16_MAX


119 
	#UINT16_MAX
 (65535U)

	)

121 #i‚de‡
UINT32_MAX


122 
	#UINT32_MAX
 (4294967295U)

	)

132 #ifde‡
__˝lu•lus


135 
	#YY_USE_CONST


	)

140 #i‡
deföed
 (
__STDC__
)

142 
	#YY_USE_CONST


	)

147 #ifde‡
YY_USE_CONST


148 
	#yyc⁄°
 c⁄°

	)

150 
	#yyc⁄°


	)

160 #i‚de‡
YY_TYPEDEF_YY_SCANNER_T


161 
	#YY_TYPEDEF_YY_SCANNER_T


	)

162 * 
	tyysˇn_t
;

167 
	#yyö
 
yyg
->
yyö_r


	)

168 
	#yyout
 
yyg
->
yyout_r


	)

169 
	#yyexåa
 
yyg
->
yyexåa_r


	)

170 
	#yyÀng
 
yyg
->
yyÀng_r


	)

171 
	#yyãxt
 
yyg
->
yyãxt_r


	)

172 
	#yylöío
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_löío
)

	)

173 
	#yycﬁumn
 (
YY_CURRENT_BUFFER_LVALUE
->
yy_bs_cﬁumn
)

	)

174 
	#yy_Êex_debug
 
yyg
->
yy_Êex_debug_r


	)

182 #i‚de‡
YY_BUF_SIZE


183 
	#YY_BUF_SIZE
 16384

	)

186 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


187 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

188 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

199 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


200 
	#YY_TYPEDEF_YY_SIZE_T


	)

201 
size_t
 
	tyy_size_t
;

204 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


205 
	#YY_STRUCT_YY_BUFFER_STATE


	)

206 
	syy_buf„r_°©e


209 
FILE
 *
	myy_öput_fûe
;

215 *
	myy_ch_buf
;

216 *
	myy_buf_pos
;

221 
yy_size_t
 
	myy_buf_size
;

226 
	myy_n_ch¨s
;

232 
	myy_is_our_buf„r
;

239 
	myy_is_öãø˘ive
;

245 
	myy_©_bﬁ
;

247 
	myy_bs_löío
;

248 
	myy_bs_cﬁumn
;

253 
	myy_fûl_buf„r
;

255 
	myy_buf„r_°©us
;

272 
c⁄fig_ª°¨t
 (
FILE
 *
öput_fûe
 ,
yysˇn_t
 
yysˇ¬î
 );

273 
c⁄fig__swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

274 
YY_BUFFER_STATE
 
c⁄fig__¸óã_buf„r
 (
FILE
 *
fûe
,
size
 ,
yysˇn_t
 
yysˇ¬î
 );

275 
c⁄fig__dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

276 
c⁄fig__Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 ,
yysˇn_t
 
yysˇ¬î
 );

277 
c⁄fig_push_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 ,
yysˇn_t
 
yysˇ¬î
 );

278 
c⁄fig_p›_buf„r_°©e
 (
yysˇn_t
 
yysˇ¬î
 );

280 
YY_BUFFER_STATE
 
c⁄fig__sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 ,
yysˇn_t
 
yysˇ¬î
 );

281 
YY_BUFFER_STATE
 
c⁄fig__sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

282 
YY_BUFFER_STATE
 
c⁄fig__sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 ,
yysˇn_t
 
yysˇ¬î
 );

286 *
c⁄fig_Æloc
 (
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

287 *
c⁄fig_ªÆloc
 (*,
yy_size_t
 ,
yysˇn_t
 
yysˇ¬î
 );

288 
c⁄fig_‰ì
 (* ,
yysˇn_t
 
yysˇ¬î
 );

293 
	#c⁄fig_wøp
(
n
Ë1

	)

294 
	#YY_SKIP_YYWRAP


	)

296 
	#FLEX_DEBUG


	)

298 
	#yyãxt_±r
 
yyãxt_r


	)

304 #ifde‡
YY_HEADER_EXPORT_START_CONDITIONS


305 
	#INITIAL
 0

	)

309 #i‚de‡
YY_NO_UNISTD_H


315 
	~<uni°d.h
>

321 #i‚de‡
YY_EXTRA_TYPE


322 
	#YY_EXTRA_TYPE
 *

	)

334 
c⁄fig_Àx_öô
 (
yysˇn_t
* 
sˇ¬î
);

336 
c⁄fig_Àx_öô_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
,
yysˇn_t
* 
sˇ¬î
);

345 
c⁄fig_Àx_de°roy
 (
yysˇn_t
 
yysˇ¬î
 );

347 
c⁄fig_gë_debug
 (
yysˇn_t
 
yysˇ¬î
 );

349 
c⁄fig_£t_debug
 (
debug_Êag
 ,
yysˇn_t
 
yysˇ¬î
 );

351 
YY_EXTRA_TYPE
 
c⁄fig_gë_exåa
 (
yysˇn_t
 
yysˇ¬î
 );

353 
c⁄fig_£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 ,
yysˇn_t
 
yysˇ¬î
 );

355 
FILE
 *
c⁄fig_gë_ö
 (
yysˇn_t
 
yysˇ¬î
 );

357 
c⁄fig_£t_ö
 (
FILE
 * 
ö_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

359 
FILE
 *
c⁄fig_gë_out
 (
yysˇn_t
 
yysˇ¬î
 );

361 
c⁄fig_£t_out
 (
FILE
 * 
out_°r
 ,
yysˇn_t
 
yysˇ¬î
 );

363 
c⁄fig_gë_Àng
 (
yysˇn_t
 
yysˇ¬î
 );

365 *
c⁄fig_gë_ãxt
 (
yysˇn_t
 
yysˇ¬î
 );

367 
c⁄fig_gë_löío
 (
yysˇn_t
 
yysˇ¬î
 );

369 
c⁄fig_£t_löío
 (
löe_numbî
 ,
yysˇn_t
 
yysˇ¬î
 );

371 
c⁄fig_gë_cﬁumn
 (
yysˇn_t
 
yysˇ¬î
 );

373 
c⁄fig_£t_cﬁumn
 (
cﬁumn_no
 ,
yysˇn_t
 
yysˇ¬î
 );

377 
YYSTYPE
 * 
c⁄fig_gë_lvÆ
 (
yysˇn_t
 
yysˇ¬î
 );

379 
c⁄fig_£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
 );

387 #i‚de‡
YY_SKIP_YYWRAP


388 #ifde‡
__˝lu•lus


389 "C" 
c⁄fig_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

391 
c⁄fig_wøp
 (
yysˇn_t
 
yysˇ¬î
 );

399 #i‚de‡
yyãxt_±r


400 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,,
yysˇn_t
 
yysˇ¬î
);

403 #ifde‡
YY_NEED_STRLEN


404 
yy_Êex_°æí
 (
yyc⁄°
 * ,
yysˇn_t
 
yysˇ¬î
);

407 #i‚de‡
YY_NO_INPUT


419 #i‚de‡
YY_READ_BUF_SIZE


420 
	#YY_READ_BUF_SIZE
 8192

	)

424 #i‚de‡
YY_START_STACK_INCR


425 
	#YY_START_STACK_INCR
 25

	)

436 #i‚de‡
YY_DECL


437 
	#YY_DECL_IS_OURS
 1

	)

440 
c⁄fig_Àx
 \

441 (
YYSTYPE
 * 
yylvÆ_∑øm
 ,
yysˇn_t
 
yysˇ¬î
);

443 
	#YY_DECL
 
c⁄fig_Àx
 \

444 (
YYSTYPE
 * 
yylvÆ_∑øm
 , 
yysˇn_t
 
yysˇ¬î
)

	)

462 #unde‡
YY_NEW_FILE


463 #unde‡
YY_FLUSH_BUFFER


464 #unde‡
yy_£t_bﬁ


465 #unde‡
yy_√w_buf„r


466 #unde‡
yy_£t_öãø˘ive


467 #unde‡
YY_DO_BEFORE_ACTION


469 #ifde‡
YY_DECL_IS_OURS


470 #unde‡
YY_DECL_IS_OURS


471 #unde‡
YY_DECL


478 #unde‡
c⁄fig_IN_HEADER


	@libmemcached/options/server.h

38 #¥agm®
⁄˚


40 
	~<c°dlib
>

41 
	~<io°ªam
>

42 
	~<¨∑/öë.h
>

44 
	s£rvî_t


46 
ö_p‹t_t
 
	mp‹t
;

47 
uöt32_t
 
	mweight
;

48 
size_t
 
	mÀngth
;

49 c⁄° *
	mc_°r
;

52 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	g£rvî_t
& 
	g¨g
)

54 
	gouçut
.
wrôe
(
¨g
.
c_°r
,árg.
Àngth
);

55 
	gouçut
 << ':' << 
	g¨g
.
	gp‹t
;

56 
	gouçut
 << '+' << 
	g¨g
.
	gweight
;

57  
	gouçut
;

	@libmemcached/options/string.h

38 #¥agm®
⁄˚


40 
	~<c°dlib
>

41 
	~<io°ªam
>

43 
	s°rög_t


45 c⁄° *
	mc_°r
;

46 
size_t
 
	mÀngth
;

49 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
ouçut
, c⁄° 
	g°rög_t
& 
	g¨g
)

51 
	gouçut
.
wrôe
(
¨g
.
c_°r
,árg.
Àngth
);

52  
	gouçut
;

	@libmemcached/options/symbol.h

38 #¥agm®
⁄˚


40 
	~<libmemˇched/c⁄°™ts.h
>

41 
	~<libmemˇched/›ti⁄s/°rög.h
>

42 
	~<libmemˇched/›ti⁄s/£rvî.h
>

44 
	uYYSTYPE


46 
	mnumbî
;

47 
°rög_t
 
	m°rög
;

48 
°rög_t
 
	m›ti⁄
;

49 
	mdoubÀ_numbî
;

50 
memˇched_£rvî_di°ributi⁄_t
 
	mdi°ributi⁄
;

51 
memˇched_hash_t
 
	mhash
;

52 
memˇched_behavi‹_t
 
	mbehavi‹
;

53 
boﬁ
 
	mboﬁón
;

54 
£rvî_t
 
	m£rvî
;

57 
YYSTYPE
 
	tYYSTYPE
;

	@libmemcached/parse.c

8 
	~"comm⁄.h
"

10 
memˇched_£rvî_li°_°
 
	$memˇched_£rvîs_∑r£
(c⁄° *
£rvî_°rögs
)

12 *
°rög
;

13 c⁄° *
begö_±r
;

14 c⁄° *
íd_±r
;

15 
memˇched_£rvî_°
 *
£rvîs

NULL
;

16 
memˇched_ªtu∫_t
 
rc
;

18 
	`WATCHPOINT_ASSERT
(
£rvî_°rögs
);

20 
íd_±r

£rvî_°rögs
 + 
	`°æí
(server_strings);

22 
begö_±r

£rvî_°rögs
, 
°rög

	`ödex
(server_strings, ',');

23 
begö_±r
 !
íd_±r
;

24 
°rög

	`ödex
(
begö_±r
, ','))

26 
buf„r
[
HUGE_STRING_LEN
];

27 *
±r
, *
±r2
;

28 
uöt32_t
 
weight
= 0;

30 i‡(
°rög
)

32 
	`mem˝y
(
buf„r
, 
begö_±r
, (
size_t
Ë(
°rög
 - begin_ptr));

33 
buf„r
[()(
°rög
 - 
begö_±r
)]= 0;

34 
begö_±r

°rög
+1;

38 
size_t
 
Àngth

	`°æí
(
begö_±r
);

39 
	`mem˝y
(
buf„r
, 
begö_±r
, 
Àngth
);

40 
buf„r
[
Àngth
]= 0;

41 
begö_±r

íd_±r
;

44 
±r

	`ödex
(
buf„r
, ':');

46 
ö_p‹t_t
 
p‹t
= 0;

47 i‡(
±r
)

49 
±r
[0]= 0;

51 
±r
++;

53 
p‹t
(
ö_p‹t_t
Ë
	`°πoul
(
±r
, (**)
NULL
, 10);

55 
±r2

	`ödex
(
±r
, ' ');

56 i‡(! 
±r2
)

57 
±r2

	`ödex
(
±r
, ':');

59 i‡(
±r2
)

61 
±r2
++;

62 
weight
 = (
uöt32_t
Ë
	`°πoul
(
±r2
, (**)
NULL
, 10);

66 
£rvîs

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(£rvîs, 
buf„r
, 
p‹t
, 
weight
, &
rc
);

68 i‡(
	`is•a˚
(*
begö_±r
))

69 
begö_±r
++;

72  
£rvîs
;

73 
	}
}

	@libmemcached/parse.h

12 #¥agm®
⁄˚


14 #ifde‡
__˝lu•lus


18 
LIBMEMCACHED_API


19 
memˇched_£rvî_li°_°
 
memˇched_£rvîs_∑r£
(c⁄° *
£rvî_°rögs
);

21 #ifde‡
__˝lu•lus


	@libmemcached/platform.h

11 #i‚de‡
LIBMEMCACHED_PLATFORM_H


12 
	#LIBMEMCACHED_PLATFORM_H
 1

	)

14 #ifde‡
WIN32


16 
	~<wösock2.h
>

17 
	~<ws2t˝ù.h
>

18 
	tö_p‹t_t
;

19 
SOCKET
 
	tmemˇched_sockë_t
;

21 
	tmemˇched_sockë_t
;

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<√tdb.h
>

26 
	~<sys/un.h
>

27 
	~<√töë/t˝.h
>

	@libmemcached/prefix_key.cc

38 
	~<libmemˇched/comm⁄.h
>

40 
memˇched_ªtu∫_t
 
	$memˇched_£t_¥efix_key
(
memˇched_°
 *
£lf
, c⁄° *
key
, 
size_t
 
key_Àngth
)

42 i‡(
key
 && 
key_Àngth
)

44 i‡(
	`memˇched_key_ã°
((c⁄° **)&
key
, &
key_Àngth
, 1Ë=
MEMCACHED_BAD_KEY_PROVIDED
)

45  
	`memˇched_£t_îr‹
(
£lf
, 
MEMCACHED_BAD_KEY_PROVIDED
, 
NULL
);

47 i‡((
key_Àngth
 > 
MEMCACHED_PREFIX_KEY_MAX_SIZE
 -1))

48  
	`memˇched_£t_îr‹
(
£lf
, 
MEMCACHED_KEY_TOO_BIG
, 
NULL
);

50 
	`memˇched_¨øy_‰ì
(
£lf
->
¥efix_key
);

51 
£lf
->
¥efix_key

	`memˇched_°r˝y
(£lf, 
key
, 
key_Àngth
);

53 i‡(! 
£lf
->
¥efix_key
)

54  
	`memˇched_£t_îr‹
(
£lf
, 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
, 
NULL
);

58 
	`memˇched_¨øy_‰ì
(
£lf
->
¥efix_key
);

59 
£lf
->
¥efix_key

NULL
;

62  
MEMCACHED_SUCCESS
;

63 
	}
}

	@libmemcached/prefix_key.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_LOCAL


45 
memˇched_ªtu∫_t
 
memˇched_£t_¥efix_key
(
memˇched_°
 *
£lf
, c⁄° *
°r
, 
size_t
 
Àngth
);

47 #ifde‡
__˝lu•lus


	@libmemcached/protocol/ascii_handler.c

2 
	~"libmemˇched/¥Ÿocﬁ/comm⁄.h
"

4 
	~<˘y≥.h
>

5 
	~<°rög.h
>

6 
	~<°rögs.h
>

7 
	~<°dio.h
>

16 
uöt16_t
 
	$∑r£_ascii_key
(**
°¨t
)

18 
uöt16_t
 
Àn
= 0;

19 *
c
*
°¨t
;

21 
	`is•a˚
(*
c
))

23 ++
c
;

26 *
°¨t

c
;

28 *
c
 !'\0' && !
	`is•a˚
(*cË&& !
	`is˙ål
(*c))

30 ++
c
;

31 ++
Àn
;

35 i‡(
Àn
 =0 ||Üí > 240 || (*
c
 !'\0' && *¯!'\r' && 
	`is˙ål
(*c)))

40  
Àn
;

41 
	}
}

49 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


50 
	$•oﬁ_°rög
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, c⁄° *
ãxt
)

52  
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ãxt
, 
	`°æí
(text));

53 
	}
}

60 
	$£nd_comm™d_ußge
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
)

62 c⁄° *
îrmsg
[]= {

63 [
GET_CMD
]= "CLIENT_ERROR: SyntaxÉrror: get <key>*\r\n",

64 [
GETS_CMD
]= "CLIENT_ERROR: SyntaxÉrror: gets <key>*\r\n",

65 [
SET_CMD
]= "CLIENT_ERROR: SyntaxÉrror: set <key> <flags> <exptime> <bytes> [noreply]\r\n",

66 [
ADD_CMD
]= "CLIENT_ERROR: SyntaxÉrror:ádd <key> <flags> <exptime> <bytes> [noreply]\r\n",

67 [
REPLACE_CMD
]= "CLIENT_ERROR: SyntaxÉrror:Ñeplace <key> <flags> <exptime> <bytes> [noreply]\r\n",

68 [
CAS_CMD
]= "CLIENT_ERROR: SyntaxÉrror: cas <key> <flags> <exptime> <bytes> <casid> [noreply]\r\n",

69 [
APPEND_CMD
]= "CLIENT_ERROR: SyntaxÉrror:áppend <key> <flags> <exptime> <bytes> [noreply]\r\n",

70 [
PREPEND_CMD
]= "CLIENT_ERROR: SyntaxÉrror:Örepend <key> <flags> <exptime> <bytes> [noreply]\r\n",

71 [
DELETE_CMD
]= "CLIENT_ERROR: SyntaxÉrror: delete <key> [noreply]\r\n",

72 [
INCR_CMD
]= "CLIENT_ERROR: SyntaxÉrror: incr <key> <value> [noreply]\r\n",

73 [
DECR_CMD
]= "CLIENT_ERROR: SyntaxÉrror: decr <key> <value> [noreply]\r\n",

74 [
STATS_CMD
]= "CLIENT_ERROR: SyntaxÉrror: stats [key]\r\n",

75 [
FLUSH_ALL_CMD
]= "CLIENT_ERROR: SyntaxÉrror: flush_all [timeout] [noreply]\r\n",

76 [
VERSION_CMD
]= "CLIENT_ERROR: SyntaxÉrror: version\r\n",

77 [
QUIT_CMD
]="CLIENT_ERROR: SyntaxÉrror: quit\r\n",

79 [
VERBOSITY_CMD
]= "CLIENT_ERROR: SyntaxÉrror: verbosity <num>\r\n",

80 [
UNKNOWN_CMD
]= "CLIENT_ERROR: Unknown command\r\n",

83 
˛õ¡
->
muã
 = 
Ál£
;

84 
	`•oﬁ_°rög
(
˛õ¡
, 
îrmsg
[˛õ¡->
ascii_comm™d
]);

85 
	}
}

93 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


94 
	$ascii_vîsi⁄_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

95 c⁄° *
ãxt
,

96 
uöt32_t
 
ãxéí
)

98 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(memˇched_¥Ÿocﬁ_˛õ¡_°*)
cookõ
;

99 
	`•oﬁ_°rög
(
˛õ¡
, "VERSION ");

100 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ãxt
, 
ãxéí
);

101 
	`•oﬁ_°rög
(
˛õ¡
, "\r\n");

102  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

103 
	}
}

115 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


116 
	$ascii_gë_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

117 c⁄° *
key
,

118 
uöt16_t
 
keyÀn
,

119 c⁄° *
body
,

120 
uöt32_t
 
bodyÀn
,

121 
uöt32_t
 
Êags
,

122 
uöt64_t
 
ˇs
)

124 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

125 
buf„r
[300];

126 
	`°r˝y
(
buf„r
, "VALUE ");

127 c⁄° *
sour˚

key
;

128 *
de°

buf„r
 + 6;

130 
x
0; x < 
keyÀn
; ++x)

132 i‡(*
sour˚
 !'\0' && !
	`is•a˚
(*sour˚Ë&& !
	`is˙ål
(*source))

134 *
de°
*
sour˚
;

138  
PROTOCOL_BINARY_RESPONSE_EINVAL
;

141 ++
de°
;

142 ++
sour˚
;

145 
size_t
 
u£d
(size_t)(
de°
 - 
buf„r
);

147 i‡(
˛õ¡
->
ascii_comm™d
 =
GETS_CMD
)

149 
	`¢¥ötf
(
de°
, (
buf„r
Ë- 
u£d
, " %u %u %" 
PRIu64
 "\r\n", 
Êags
,

150 
bodyÀn
, 
ˇs
);

154 
	`¢¥ötf
(
de°
, (
buf„r
Ë- 
u£d
, " %u %u\r\n", 
Êags
, 
bodyÀn
);

157 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
buf„r
, 
	`°æí
(buffer));

158 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
body
, 
bodyÀn
);

159 
˛õ¡
->
roŸ
->
	`•oﬁ
(client, "\r\n", 2);

161  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

162 
	}
}

172 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


173 
	$ascii_°©_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

174 c⁄° *
key
,

175 
uöt16_t
 
keyÀn
,

176 c⁄° *
body
,

177 
uöt32_t
 
bodyÀn
)

180 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

182 i‡(
key
 !
NULL
)

184 
	`•oﬁ_°rög
(
˛õ¡
, "STAT ");

185 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
key
, 
keyÀn
);

186 
	`•oﬁ_°rög
(
˛õ¡
, " ");

187 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
body
, 
bodyÀn
);

188 
	`•oﬁ_°rög
(
˛õ¡
, "\r\n");

192 
	`•oﬁ_°rög
(
˛õ¡
, "END\r\n");

195  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

196 
	}
}

204 
	$ascii_¥o˚ss_gës
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

205 *
buf„r
, *
íd
)

207 *
key

buf„r
;

210 
key
 +(
˛õ¡
->
ascii_comm™d
 =
GETS_CMD
) ? 5 : 4;

212 
num_keys
= 0;

213 
key
 < 
íd
)

215 
uöt16_t
 
nkey

	`∑r£_ascii_key
(&
key
);

216 i‡(
nkey
 == 0)

221 ()
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`gë
(˛õ¡, 
key
, 
nkey
,

222 
ascii_gë_ª•⁄£_h™dÀr
);

223 
key
 +
nkey
;

224 ++
num_keys
;

227 i‡(
num_keys
 == 0)

229 
	`£nd_comm™d_ußge
(
˛õ¡
);

232 
˛õ¡
->
roŸ
->
	`•oﬁ
(client, "END\r\n", 5);

233 
	}
}

244 
	$ascii_tokíize_comm™d
(*
°r
, *
íd
, **
vec
, 
size
)

246 
ñem
= 0;

248 
°r
 < 
íd
)

251 
°r
 < 
íd
 && 
	`is•a˚
(*str))

253 ++
°r
;

256 i‡(
°r
 =
íd
)

258  
ñem
;

261 
vec
[
ñem
++]
°r
;

263 
°r
 < 
íd
 && !
	`is•a˚
(*str))

265 ++
°r
;

269 *
°r
= '\0';

270 ++
°r
;

273 i‡(
ñem
 =
size
)

279  
ñem
;

280 
	}
}

291 
	$ªcovî_tokíize_comm™d
(*
°¨t
, *
íd
)

293 
°¨t
 < 
íd
)

295 i‡(*
°¨t
 == '\0')

296 *
°¨t
= ' ';

297 ++
°¨t
;

300 *
íd
= '\n';

301 
	}
}

306 
ascii_cmd
 
	$ascii_to_cmd
(*
°¨t
, 
size_t
 
Àngth
)

309 c⁄° *
cmd
;

310 
size_t
 
Àn
;

311 
ascii_cmd
 
cc
;

312 } 
comm™ds
[]= {

313 { .
cmd
"gë", .
Àn
3, .
cc

GET_CMD
 },

314 { .
cmd
"gës", .
Àn
4, .
cc

GETS_CMD
 },

315 { .
cmd
"£t", .
Àn
3, .
cc

SET_CMD
 },

316 { .
cmd
"add", .
Àn
3, .
cc

ADD_CMD
 },

317 { .
cmd
"ª∂a˚", .
Àn
7, .
cc

REPLACE_CMD
 },

318 { .
cmd
"ˇs", .
Àn
3, .
cc

CAS_CMD
 },

319 { .
cmd
"≠≥nd", .
Àn
6, .
cc

APPEND_CMD
 },

320 { .
cmd
"¥ïíd", .
Àn
7, .
cc

PREPEND_CMD
 },

321 { .
cmd
"dñëe", .
Àn
6, .
cc

DELETE_CMD
 },

322 { .
cmd
"ö¸", .
Àn
4, .
cc

INCR_CMD
 },

323 { .
cmd
"de¸", .
Àn
4, .
cc

DECR_CMD
 },

324 { .
cmd
"°©s", .
Àn
5, .
cc

STATS_CMD
 },

325 { .
cmd
"Êush_Æl", .
Àn
9, .
cc

FLUSH_ALL_CMD
 },

326 { .
cmd
"vîsi⁄", .
Àn
7, .
cc

VERSION_CMD
 },

327 { .
cmd
"quô", .
Àn
4, .
cc

QUIT_CMD
 },

328 { .
cmd
"vîbosôy", .
Àn
9, .
cc

VERBOSITY_CMD
 },

329 { .
cmd

NULL
, .
Àn
0, .
cc

UNKNOWN_CMD
 }};

331 
x
= 0;

332 
comm™ds
[
x
].
Àn
 > 0) {

333 i‡(
Àngth
 >
comm™ds
[
x
].
Àn
)

335 i‡(
	`°∫cmp
(
°¨t
, 
comm™ds
[
x
].
cmd
, comm™ds[x].
Àn
) == 0)

338 i‡(
Àngth
 =
comm™ds
[
x
].
Àn
 || 
	`is•a˚
(*(
°¨t
 + commands[x].len)))

340  
comm™ds
[
x
].
cc
;

344 ++
x
;

347  
UNKNOWN_CMD
;

348 
	}
}

357 
	$¥o˚ss_dñëe
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

358 **
tokís
, 
¡okís
)

360 *
key

tokís
[1];

361 
uöt16_t
 
nkey
;

363 i‡(
¡okís
 !2 || (
nkey

	`∑r£_ascii_key
(&
key
)) == 0)

365 
	`£nd_comm™d_ußge
(
˛õ¡
);

369 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
dñëe
 =
NULL
)

371 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

375 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

376 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`dñëe
(˛õ¡, 
key
, 
nkey
, 0);

378 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

380 
	`•oﬁ_°rög
(
˛õ¡
, "DELETED\r\n");

382 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
)

384 
	`•oﬁ_°rög
(
˛õ¡
, "NOT_FOUND\r\n");

388 
msg
[80];

389 
	`¢¥ötf
(
msg
, (msg), "SERVER_ERROR: dñëêÁûed %u\r\n",(
uöt32_t
)
rvÆ
);

390 
	`•oﬁ_°rög
(
˛õ¡
, 
msg
);

392 
	}
}

394 
	$¥o˚ss_¨ôhmëic
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

395 **
tokís
, 
¡okís
)

397 *
key

tokís
[1];

398 
uöt16_t
 
nkey
;

400 i‡(
¡okís
 !3 || (
nkey

	`∑r£_ascii_key
(&
key
)) == 0)

402 
	`£nd_comm™d_ußge
(
˛õ¡
);

406 
uöt64_t
 
ˇs
;

407 
uöt64_t
 
ªsu…
;

408 
uöt64_t
 
dñè

	`°πouŒ
(
tokís
[2], 
NULL
, 10);

410 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

411 i‡(
˛õ¡
->
ascii_comm™d
 =
INCR_CMD
)

413 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
ö¸emít
 =
NULL
)

415 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

418 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`ö¸emít
(client,

419 
key
, 
nkey
,

420 
dñè
, 0,

422 &
ªsu…
,

423 &
ˇs
);

427 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
de¸emít
 =
NULL
)

429 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

432 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`de¸emít
(client,

433 
key
, 
nkey
,

434 
dñè
, 0,

436 &
ªsu…
,

437 &
ˇs
);

440 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

442 
buf„r
[80];

443 
	`¢¥ötf
(
buf„r
, (buf„r), "%"
PRIu64
"\r\n", 
ªsu…
);

444 
	`•oﬁ_°rög
(
˛õ¡
, 
buf„r
);

448 
	`•oﬁ_°rög
(
˛õ¡
, "NOT_FOUND\r\n");

450 
	}
}

457 
	$¥o˚ss_°©s
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

458 *
key
, *
íd
)

460 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
°©
 =
NULL
)

462 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

466 
	`is•a˚
(*
key
))

467 
key
++;

469 
uöt16_t
 
nkey
(uöt16_t)(
íd
 - 
key
);

470 ()
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`°©
(˛õ¡, 
key
, 
nkey
,

471 
ascii_°©_ª•⁄£_h™dÀr
);

472 
	}
}

474 
	$¥o˚ss_vîsi⁄
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

475 **
tokís
, 
¡okís
)

477 ()
tokís
;

478 i‡(
¡okís
 != 1)

480 
	`£nd_comm™d_ußge
(
˛õ¡
);

484 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
vîsi⁄
 =
NULL
)

486 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

490 
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`vîsi⁄
(client,

491 
ascii_vîsi⁄_ª•⁄£_h™dÀr
);

492 
	}
}

494 
	$¥o˚ss_Êush
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

495 **
tokís
, 
¡okís
)

497 i‡(
¡okís
 > 2)

499 
	`£nd_comm™d_ußge
(
˛õ¡
);

503 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
Êush
 =
NULL
)

505 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

509 
uöt32_t
 
timeout
= 0;

510 i‡(
¡okís
 == 2)

512 
timeout
(
uöt32_t
)
	`°πoul
(
tokís
[1], 
NULL
, 10);

515 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

516 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`Êush
(˛õ¡, 
timeout
);

517 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

518 
	`•oﬁ_°rög
(
˛õ¡
, "OK\r\n");

520 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: internalÉrror\r\n");

521 
	}
}

537 
ölöe
 
	$¥o˚ss_°‹age_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

538 **
tokís
, 
¡okís
, *
°¨t
,

539 **
íd
, 
ssize_t
 
Àngth
)

541 ()
¡okís
;

542 *
key

tokís
[1];

543 
uöt16_t
 
nkey

	`∑r£_ascii_key
(&
key
);

544 i‡(
nkey
 == 0)

547 
	`•oﬁ_°rög
(
˛õ¡
, "CLIENT_ERROR: bad key\r\n");

551 
uöt32_t
 
Êags
(uöt32_t)
	`°πoul
(
tokís
[2], 
NULL
, 10);

552 
uöt32_t
 
timeout
(uöt32_t)
	`°πoul
(
tokís
[3], 
NULL
, 10);

553 
nbyãs

	`°πoul
(
tokís
[4], 
NULL
, 10);

556 
√ed

nbyãs
 + ()((*
íd
 - 
°¨t
) + 1) + 2;

557 i‡((
ssize_t
)
√ed
 > 
Àngth
)

560 
	`ªcovî_tokíize_comm™d
(
°¨t
, *
íd
);

564 *
d©a
(*
íd
) + 1;

565 
uöt64_t
 
ˇs
= 0;

566 
uöt64_t
 
ªsu…_ˇs
;

567 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

568 
˛õ¡
->
ascii_comm™d
)

570 
SET_CMD
:

571 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`£t
(˛õ¡, 
key
,

572 (
uöt16_t
)
nkey
,

573 
d©a
,

574 (
uöt32_t
)
nbyãs
,

575 
Êags
,

576 
timeout
, 
ˇs
,

577 &
ªsu…_ˇs
);

579 
ADD_CMD
:

580 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`add
(˛õ¡, 
key
,

581 (
uöt16_t
)
nkey
,

582 
d©a
,

583 (
uöt32_t
)
nbyãs
,

584 
Êags
,

585 
timeout
, &
ªsu…_ˇs
);

587 
CAS_CMD
:

588 
ˇs

	`°πouŒ
(
tokís
[5], 
NULL
, 10);

590 
REPLACE_CMD
:

591 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`ª∂a˚
(˛õ¡, 
key
,

592 (
uöt16_t
)
nkey
,

593 
d©a
,

594 (
uöt32_t
)
nbyãs
,

595 
Êags
,

596 
timeout
, 
ˇs
,

597 &
ªsu…_ˇs
);

599 
APPEND_CMD
:

600 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`≠≥nd
(˛õ¡, 
key
,

601 (
uöt16_t
)
nkey
,

602 
d©a
,

603 (
uöt32_t
)
nbyãs
,

604 
ˇs
,

605 &
ªsu…_ˇs
);

607 
PREPEND_CMD
:

608 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`¥ïíd
(˛õ¡, 
key
,

609 (
uöt16_t
)
nkey
,

610 
d©a
,

611 (
uöt32_t
)
nbyãs
,

612 
ˇs
,

613 &
ªsu…_ˇs
);

617 
GET_CMD
:

618 
GETS_CMD
:

619 
DELETE_CMD
:

620 
DECR_CMD
:

621 
INCR_CMD
:

622 
STATS_CMD
:

623 
FLUSH_ALL_CMD
:

624 
VERSION_CMD
:

625 
QUIT_CMD
:

626 
VERBOSITY_CMD
:

627 
UNKNOWN_CMD
:

629 
	`ab‹t
();

632 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

634 
	`•oﬁ_°rög
(
˛õ¡
, "STORED\r\n");

638 i‡(
˛õ¡
->
ascii_comm™d
 =
CAS_CMD
)

640 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
)

642 
	`•oﬁ_°rög
(
˛õ¡
, "EXISTS\r\n");

644 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
)

646 
	`•oﬁ_°rög
(
˛õ¡
, "NOT_FOUND\r\n");

650 
	`•oﬁ_°rög
(
˛õ¡
, "NOT_STORED\r\n");

655 
	`•oﬁ_°rög
(
˛õ¡
, "NOT_STORED\r\n");

659 *
íd
 +
nbyãs
 + 2;

662 
	}
}

664 
	$¥o˚ss_ˇs_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

665 **
tokís
, 
¡okís
, *
°¨t
,

666 **
íd
, 
ssize_t
 
Àngth
)

668 i‡(
¡okís
 != 6)

670 
	`£nd_comm™d_ußge
(
˛õ¡
);

671  
Ál£
;

674 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
ª∂a˚
 =
NULL
)

676 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

677  
Ál£
;

680  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

681 
	}
}

683 
	$¥o˚ss_£t_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

684 **
tokís
, 
¡okís
, *
°¨t
,

685 **
íd
, 
ssize_t
 
Àngth
)

687 i‡(
¡okís
 != 5)

689 
	`£nd_comm™d_ußge
(
˛õ¡
);

690  
Ál£
;

693 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
£t
 =
NULL
)

695 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

696  
Ál£
;

699  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

700 
	}
}

702 
	$¥o˚ss_add_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

703 **
tokís
, 
¡okís
, *
°¨t
,

704 **
íd
, 
ssize_t
 
Àngth
)

706 i‡(
¡okís
 != 5)

708 
	`£nd_comm™d_ußge
(
˛õ¡
);

709  
Ál£
;

712 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
add
 =
NULL
)

714 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

715  
Ál£
;

718  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

719 
	}
}

721 
	$¥o˚ss_ª∂a˚_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

722 **
tokís
, 
¡okís
, *
°¨t
,

723 **
íd
, 
ssize_t
 
Àngth
)

725 i‡(
¡okís
 != 5)

727 
	`£nd_comm™d_ußge
(
˛õ¡
);

728  
Ál£
;

731 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
ª∂a˚
 =
NULL
)

733 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

734  
Ál£
;

737  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

738 
	}
}

740 
	$¥o˚ss_≠≥nd_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

741 **
tokís
, 
¡okís
, *
°¨t
,

742 **
íd
, 
ssize_t
 
Àngth
)

744 i‡(
¡okís
 != 5)

746 
	`£nd_comm™d_ußge
(
˛õ¡
);

747  
Ál£
;

750 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
≠≥nd
 =
NULL
)

752 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

753  
Ál£
;

756  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

757 
	}
}

759 
	$¥o˚ss_¥ïíd_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

760 **
tokís
, 
¡okís
, *
°¨t
,

761 **
íd
, 
ssize_t
 
Àngth
)

763 i‡(
¡okís
 != 5)

765 
	`£nd_comm™d_ußge
(
˛õ¡
);

766  
Ál£
;

769 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
¥ïíd
 =
NULL
)

771 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: callbackÇot implemented\r\n");

772  
Ál£
;

775  
	`¥o˚ss_°‹age_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
°¨t
, 
íd
, 
Àngth
);

776 
	}
}

783 
memˇched_¥Ÿocﬁ_evít_t
 
	$memˇched_ascii_¥Ÿocﬁ_¥o˚ss_d©a
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
ssize_t
 *
Àngth
, **
íd±r
)

785 *
±r
(*)
˛õ¡
->
roŸ
->
öput_buf„r
;

786 *
íd±r

±r
;

790 *
íd

	`memchr
(
±r
, '\n', (
size_t
)*
Àngth
);

791 i‡(
íd
 =
NULL
)

793 *
íd±r

±r
;

794  
MEMCACHED_PROTOCOL_READ_EVENT
;

797 
˛õ¡
->
ascii_comm™d

	`ascii_to_cmd
(
±r
, (
size_t
)(*
Àngth
));

803 i‡(
˛õ¡
->
ascii_comm™d
 =
GET_CMD
 ||

804 
˛õ¡
->
ascii_comm™d
 =
GETS_CMD
) {

805 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
gë
 !
NULL
)

806 
	`ascii_¥o˚ss_gës
(
˛õ¡
, 
±r
, 
íd
);

808 
	`•oﬁ_°rög
(
˛õ¡
, "SERVER_ERROR: CommandÇot implemented\n");

813 *
tokís
[10];

814 
¡okís

	`ascii_tokíize_comm™d
(
±r
, 
íd
, 
tokís
, 10);

816 i‡(
¡okís
 < 10)

818 
˛õ¡
->
muã

	`°rcmp
(
tokís
[
¡okís
 - 1], "noreply") == 0;

819 i‡(
˛õ¡
->
muã
)

820 --
¡okís
;

823 
îr‹
= 0;

825 
˛õ¡
->
ascii_comm™d
) {

826 
SET_CMD
:

827 
îr‹

	`¥o˚ss_£t_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
±r
, &
íd
, *
Àngth
);

829 
ADD_CMD
:

830 
îr‹

	`¥o˚ss_add_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
±r
, &
íd
, *
Àngth
);

832 
REPLACE_CMD
:

833 
îr‹

	`¥o˚ss_ª∂a˚_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
,

834 
±r
, &
íd
, *
Àngth
);

836 
CAS_CMD
:

837 
îr‹

	`¥o˚ss_ˇs_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
, 
±r
, &
íd
, *
Àngth
);

839 
APPEND_CMD
:

840 
îr‹

	`¥o˚ss_≠≥nd_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
,

841 
±r
, &
íd
, *
Àngth
);

843 
PREPEND_CMD
:

844 
îr‹

	`¥o˚ss_¥ïíd_comm™d
(
˛õ¡
, 
tokís
, 
¡okís
,

845 
±r
, &
íd
, *
Àngth
);

847 
DELETE_CMD
:

848 
	`¥o˚ss_dñëe
(
˛õ¡
, 
tokís
, 
¡okís
);

851 
INCR_CMD
:

852 
DECR_CMD
:

853 
	`¥o˚ss_¨ôhmëic
(
˛õ¡
, 
tokís
, 
¡okís
);

855 
STATS_CMD
:

856 i‡(
˛õ¡
->
muã
)

858 
	`£nd_comm™d_ußge
(
˛õ¡
);

862 
	`ªcovî_tokíize_comm™d
(
±r
, 
íd
);

863 
	`¥o˚ss_°©s
(
˛õ¡
, 
±r
 + 6, 
íd
);

866 
FLUSH_ALL_CMD
:

867 
	`¥o˚ss_Êush
(
˛õ¡
, 
tokís
, 
¡okís
);

869 
VERSION_CMD
:

870 i‡(
˛õ¡
->
muã
)

872 
	`£nd_comm™d_ußge
(
˛õ¡
);

876 
	`¥o˚ss_vîsi⁄
(
˛õ¡
, 
tokís
, 
¡okís
);

879 
QUIT_CMD
:

880 i‡(
¡okís
 !1 || 
˛õ¡
->
muã
)

882 
	`£nd_comm™d_ußge
(
˛õ¡
);

886 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
quô
 !
NULL
)

887 
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`quô
(client);

889  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

893 
VERBOSITY_CMD
:

894 i‡(
¡okís
 != 2)

895 
	`£nd_comm™d_ußge
(
˛õ¡
);

897 
	`•oﬁ_°rög
(
˛õ¡
, "OK\r\n");

900 
UNKNOWN_CMD
:

901 
	`£nd_comm™d_ußge
(
˛õ¡
);

904 
GET_CMD
:

905 
GETS_CMD
:

908 
	`ab‹t
();

911 i‡(
îr‹
 == -1)

912  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

913 i‡(
îr‹
 == 1)

914  
MEMCACHED_PROTOCOL_READ_EVENT
;

918 ++
íd
;

919 *
Àngth
 -
íd
 - 
±r
;

920 
±r

íd
;

921 } *
Àngth
 > 0);

923 *
íd±r

±r
;

924  
MEMCACHED_PROTOCOL_READ_EVENT
;

925 
	}
}

	@libmemcached/protocol/ascii_handler.h

2 #i‚de‡
LIBMEMCACHED_PROTOCOL_ASCII_HANDLER_H


3 
	#LIBMEMCACHED_PROTOCOL_ASCII_HANDLER_H


	)

5 
LIBMEMCACHED_LOCAL


6 
memˇched_¥Ÿocﬁ_evít_t
 
memˇched_ascii_¥Ÿocﬁ_¥o˚ss_d©a
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
ssize_t
 *
Àngth
, **
íd±r
);

	@libmemcached/protocol/binary_handler.c

2 
	~"libmemˇched/¥Ÿocﬁ/comm⁄.h
"

4 
	~<°dlib.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<î∫o.h
>

7 
	~<°dboﬁ.h
>

8 
	~<°rög.h
>

9 
	~<°dio.h
>

27 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


28 
	$øw_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

29 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
ªque°
,

30 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *
ª•⁄£
)

32 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

34 i‡(
˛õ¡
->
roŸ
->
≥d™tic
 &&

35 !
	`memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ª•⁄£
(
ªque°
, 
ª•⁄£
))

37  
PROTOCOL_BINARY_RESPONSE_EINVAL
;

40 i‡(!
˛õ¡
->
roŸ
->
	`døö
(client))

42  
PROTOCOL_BINARY_RESPONSE_EINTERNAL
;

45 
size_t
 
Àn
(*
ª•⁄£
Ë+ 
	`ht⁄l
‘e•⁄£->ª•⁄£.
bodyÀn
);

46 
size_t
 
off£t
= 0;

47 *
±r
(*)
ª•⁄£
;

49 i‡(
˛õ¡
->
ouçut
 =
NULL
)

54 
size_t
 
num_byãs

Àn
 - 
off£t
;

55 
ssize_t
 
nw

˛õ¡
->
roŸ
->
	`£nd
(client,

56 
˛õ¡
->
sock
,

57 
±r
 + 
off£t
,

58 
num_byãs
);

59 i‡(
nw
 == -1)

61 i‡(
	`gë_sockë_î∫o
(Ë=
EWOULDBLOCK
)

65 i‡(
	`gë_sockë_î∫o
(Ë!
EINTR
)

67 
˛õ¡
->
îr‹

î∫o
;

68  
PROTOCOL_BINARY_RESPONSE_EINTERNAL
;

73 
off£t
 +(
size_t
)
nw
;

75 } 
off£t
 < 
Àn
);

78  
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
±r
, 
Àn
 - 
off£t
);

79 
	}
}

99 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


100 
	$gë_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

101 c⁄° *
key
,

102 
uöt16_t
 
keyÀn
,

103 c⁄° *
body
,

104 
uöt32_t
 
bodyÀn
,

105 
uöt32_t
 
Êags
,

106 
uöt64_t
 
ˇs
) {

108 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

109 
uöt8_t
 
›code

˛õ¡
->
cuºít_comm™d
->
ªque°
.opcode;

111 i‡(
›code
 =
PROTOCOL_BINARY_CMD_GET
 || opcodê=
PROTOCOL_BINARY_CMD_GETQ
)

113 
keyÀn
= 0;

116 
¥Ÿocﬁ_bö¨y_ª•⁄£_gë
 
ª•⁄£
= {

117 .
mesßge
.
hódî
.
ª•⁄£
= {

118 .
magic

PROTOCOL_BINARY_RES
,

119 .
›code
= opcode,

120 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

121 .
›aque

˛õ¡
->
cuºít_comm™d
->
ªque°
.opaque,

122 .
ˇs

	`ht⁄Œ
(cas),

123 .
keyÀn

	`ht⁄s
(keylen),

124 .
exéí
= 4,

125 .
bodyÀn

	`ht⁄l
(bodyÀ¿+ 
keyÀn
 + 4),

129 
ª•⁄£
.
mesßge
.
body
.
Êags

	`ht⁄l
(flags);

131 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

132 c⁄° 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
suc˚ss

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

133 i‡((
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ª•⁄£
.
byãs
, ‘e•⁄£.byãs))Ë!
suc˚ss
 ||

134 (
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
key
, 
keyÀn
)Ë!
suc˚ss
 ||

135 (
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
body
, 
bodyÀn
)Ë!
suc˚ss
)

137  
rvÆ
;

140  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

141 
	}
}

151 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


152 
	$°©_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

153 c⁄° *
key
,

154 
uöt16_t
 
keyÀn
,

155 c⁄° *
body
,

156 
uöt32_t
 
bodyÀn
) {

158 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

160 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

161 .
mesßge
.
hódî
.
ª•⁄£
= {

162 .
magic

PROTOCOL_BINARY_RES
,

163 .
›code

˛õ¡
->
cuºít_comm™d
->
ªque°
.opcode,

164 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

165 .
›aque

˛õ¡
->
cuºít_comm™d
->
ªque°
.opaque,

166 .
keyÀn

	`ht⁄s
(keylen),

167 .
bodyÀn

	`ht⁄l
(bodyÀ¿+ 
keyÀn
),

171 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

172 c⁄° 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
suc˚ss

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

173 i‡((
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ª•⁄£
.
byãs
, ‘e•⁄£.byãs))Ë!
suc˚ss
 ||

174 (
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
key
, 
keyÀn
)Ë!
suc˚ss
 ||

175 (
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
body
, 
bodyÀn
)Ë!
suc˚ss
)

177  
rvÆ
;

180  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

181 
	}
}

189 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


190 
	$vîsi⁄_ª•⁄£_h™dÀr
(c⁄° *
cookõ
,

191 c⁄° *
ãxt
,

192 
uöt32_t
 
ãxéí
) {

194 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

196 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

197 .
mesßge
.
hódî
.
ª•⁄£
= {

198 .
magic

PROTOCOL_BINARY_RES
,

199 .
›code

˛õ¡
->
cuºít_comm™d
->
ªque°
.opcode,

200 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

201 .
›aque

˛õ¡
->
cuºít_comm™d
->
ªque°
.opaque,

202 .
bodyÀn

	`ht⁄l
(
ãxéí
),

206 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

207 c⁄° 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
suc˚ss

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

208 i‡((
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ª•⁄£
.
byãs
, ‘e•⁄£.byãs))Ë!
suc˚ss
 ||

209 (
rvÆ

˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
ãxt
, 
ãxéí
)Ë!
suc˚ss
)

211  
rvÆ
;

214  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

215 
	}
}

224 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


225 
	$add_comm™d_h™dÀr
(c⁄° *
cookõ
,

226 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

227 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

229 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

231 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

232 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
add
 !
NULL
)

234 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

235 
uöt32_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

236 
¥Ÿocﬁ_bö¨y_ªque°_add
 *
ªque°
(*)
hódî
;

237 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

238 
uöt32_t
 
timeout

	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

239 *
key
((*)
hódî
) + (*header) + 8;

240 *
d©a

key
 + 
keyÀn
;

241 
uöt64_t
 
ˇs
;

243 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`add
(
cookõ
, 
key
, 
keyÀn
,

244 
d©a
, 
d©Æí
, 
Êags
,

245 
timeout
, &
ˇs
);

247 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

248 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_ADD
)

251 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

252 .
mesßge
= {

253 .
hódî
.
ª•⁄£
= {

254 .
magic

PROTOCOL_BINARY_RES
,

255 .
›code

PROTOCOL_BINARY_CMD_ADD
,

256 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

257 .
›aque

hódî
->
ªque°
.opaque,

258 .
ˇs

	`¡ohŒ
(cas)

262 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

267 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

270  
rvÆ
;

271 
	}
}

280 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


281 
	$de¸emít_comm™d_h™dÀr
(c⁄° *
cookõ
,

282 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

283 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

285 ()
ª•⁄£_h™dÀr
;

286 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

288 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

289 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
de¸emít
 !
NULL
)

291 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

292 
¥Ÿocﬁ_bö¨y_ªque°_de¸
 *
ªque°
(*)
hódî
;

293 
uöt64_t
 
öô

	`¡ohŒ
(
ªque°
->
mesßge
.
body
.
öôül
);

294 
uöt64_t
 
dñè

	`¡ohŒ
(
ªque°
->
mesßge
.
body
.delta);

295 
uöt32_t
 
timeout

	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

296 *
key

ªque°
->
byãs
 + (request->bytes);

297 
uöt64_t
 
ªsu…
;

298 
uöt64_t
 
ˇs
;

300 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`de¸emít
(
cookõ
, 
key
, 
keyÀn
,

301 
dñè
, 
öô
, 
timeout
,

302 &
ªsu…
, &
ˇs
);

303 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

304 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_DECREMENT
)

307 
¥Ÿocﬁ_bö¨y_ª•⁄£_de¸
 
ª•⁄£
= {

308 .
mesßge
= {

309 .
hódî
.
ª•⁄£
= {

310 .
magic

PROTOCOL_BINARY_RES
,

311 .
›code

PROTOCOL_BINARY_CMD_DECREMENT
,

312 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

313 .
›aque

hódî
->
ªque°
.opaque,

314 .
ˇs

	`¡ohŒ
(cas),

315 .
bodyÀn

	`ht⁄l
(8)

317 .
body
.
vÆue

	`ht⁄Œ
(
ªsu…
)

320 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

325 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

328  
rvÆ
;

329 
	}
}

338 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


339 
	$dñëe_comm™d_h™dÀr
(c⁄° *
cookõ
,

340 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

341 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

343 ()
ª•⁄£_h™dÀr
;

344 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

346 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

347 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
dñëe
 !
NULL
)

349 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

350 *
key
(
hódî
 + 1);

351 
uöt64_t
 
ˇs

	`¡ohŒ
(
hódî
->
ªque°
.cas);

352 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`dñëe
(
cookõ
, 
key
, 
keyÀn
, 
ˇs
);

353 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

354 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_DELETE
)

357 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

358 .
mesßge
= {

359 .
hódî
.
ª•⁄£
= {

360 .
magic

PROTOCOL_BINARY_RES
,

361 .
›code

PROTOCOL_BINARY_CMD_DELETE
,

362 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

363 .
›aque

hódî
->
ªque°
.opaque,

367 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

372 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

375  
rvÆ
;

376 
	}
}

385 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


386 
	$Êush_comm™d_h™dÀr
(c⁄° *
cookõ
,

387 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

388 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

390 ()
ª•⁄£_h™dÀr
;

391 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

393 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

394 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
Êush
 !
NULL
)

396 
¥Ÿocﬁ_bö¨y_ªque°_Êush
 *
Êush
(*)
hódî
;

397 
uöt32_t
 
timeout
= 0;

398 i‡(
	`ht⁄l
(
hódî
->
ªque°
.
bodyÀn
) == 4)

400 
timeout

	`¡ohl
(
Êush
->
mesßge
.
body
.
expú©i⁄
);

403 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`Êush
(
cookõ
, 
timeout
);

404 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

405 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_FLUSH
)

408 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

409 .
mesßge
= {

410 .
hódî
.
ª•⁄£
= {

411 .
magic

PROTOCOL_BINARY_RES
,

412 .
›code

PROTOCOL_BINARY_CMD_FLUSH
,

413 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

414 .
›aque

hódî
->
ªque°
.opaque,

418 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

423 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

426  
rvÆ
;

427 
	}
}

436 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


437 
	$gë_comm™d_h™dÀr
(c⁄° *
cookõ
,

438 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

439 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

441 ()
ª•⁄£_h™dÀr
;

442 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

444 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

445 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
gë
 !
NULL
)

447 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

448 *
key
(
hódî
 + 1);

449 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`gë
(
cookõ
, 
key
, 
keyÀn
,

450 
gë_ª•⁄£_h™dÀr
);

452 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
 &&

453 (
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_GETQ
 ||

454 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_GETKQ
))

457 
rvÆ

PROTOCOL_BINARY_RESPONSE_SUCCESS
;

462 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

465  
rvÆ
;

466 
	}
}

475 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


476 
	$ö¸emít_comm™d_h™dÀr
(c⁄° *
cookõ
,

477 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

478 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

480 ()
ª•⁄£_h™dÀr
;

481 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

483 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

484 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
ö¸emít
 !
NULL
)

486 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

487 
¥Ÿocﬁ_bö¨y_ªque°_ö¸
 *
ªque°
(*)
hódî
;

488 
uöt64_t
 
öô

	`¡ohŒ
(
ªque°
->
mesßge
.
body
.
öôül
);

489 
uöt64_t
 
dñè

	`¡ohŒ
(
ªque°
->
mesßge
.
body
.delta);

490 
uöt32_t
 
timeout

	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

491 *
key

ªque°
->
byãs
 + (request->bytes);

492 
uöt64_t
 
ˇs
;

493 
uöt64_t
 
ªsu…
;

495 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`ö¸emít
(
cookõ
, 
key
, 
keyÀn
,

496 
dñè
, 
öô
, 
timeout
,

497 &
ªsu…
, &
ˇs
);

498 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

499 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_INCREMENT
)

502 
¥Ÿocﬁ_bö¨y_ª•⁄£_ö¸
 
ª•⁄£
= {

503 .
mesßge
= {

504 .
hódî
.
ª•⁄£
= {

505 .
magic

PROTOCOL_BINARY_RES
,

506 .
›code

PROTOCOL_BINARY_CMD_INCREMENT
,

507 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

508 .
›aque

hódî
->
ªque°
.opaque,

509 .
ˇs

	`¡ohŒ
(cas),

510 .
bodyÀn

	`ht⁄l
(8)

512 .
body
.
vÆue

	`ht⁄Œ
(
ªsu…
)

516 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

521 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

524  
rvÆ
;

525 
	}
}

536 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


537 
	$no›_comm™d_h™dÀr
(c⁄° *
cookõ
,

538 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

539 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

541 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

542 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
no›
 !
NULL
)

544 
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`no›
(
cookõ
);

547 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

548 .
mesßge
= {

549 .
hódî
.
ª•⁄£
= {

550 .
magic

PROTOCOL_BINARY_RES
,

551 .
›code

PROTOCOL_BINARY_CMD_NOOP
,

552 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

553 .
›aque

hódî
->
ªque°
.opaque,

558  
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

559 
	}
}

568 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


569 
	$≠≥nd_comm™d_h™dÀr
(c⁄° *
cookõ
,

570 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

571 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

573 ()
ª•⁄£_h™dÀr
;

574 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

576 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

577 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
≠≥nd
 !
NULL
)

579 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

580 
uöt32_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
;

581 *
key
(*)(
hódî
 + 1);

582 *
d©a

key
 + 
keyÀn
;

583 
uöt64_t
 
ˇs

	`¡ohŒ
(
hódî
->
ªque°
.cas);

584 
uöt64_t
 
ªsu…_ˇs
;

586 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`≠≥nd
(
cookõ
, 
key
, 
keyÀn
,

587 
d©a
, 
d©Æí
, 
ˇs
,

588 &
ªsu…_ˇs
);

589 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

590 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_APPEND
)

593 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

594 .
mesßge
= {

595 .
hódî
.
ª•⁄£
= {

596 .
magic

PROTOCOL_BINARY_RES
,

597 .
›code

PROTOCOL_BINARY_CMD_APPEND
,

598 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

599 .
›aque

hódî
->
ªque°
.opaque,

600 .
ˇs

	`¡ohŒ
(
ªsu…_ˇs
),

604 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

609 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

612  
rvÆ
;

613 
	}
}

622 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


623 
	$¥ïíd_comm™d_h™dÀr
(c⁄° *
cookõ
,

624 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

625 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

627 ()
ª•⁄£_h™dÀr
;

628 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

630 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

631 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
¥ïíd
 !
NULL
)

633 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

634 
uöt32_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
;

635 *
key
(*)(
hódî
 + 1);

636 *
d©a

key
 + 
keyÀn
;

637 
uöt64_t
 
ˇs

	`¡ohŒ
(
hódî
->
ªque°
.cas);

638 
uöt64_t
 
ªsu…_ˇs
;

639 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`¥ïíd
(
cookõ
, 
key
, 
keyÀn
,

640 
d©a
, 
d©Æí
, 
ˇs
,

641 &
ªsu…_ˇs
);

642 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

643 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_PREPEND
)

646 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

647 .
mesßge
= {

648 .
hódî
.
ª•⁄£
= {

649 .
magic

PROTOCOL_BINARY_RES
,

650 .
›code

PROTOCOL_BINARY_CMD_PREPEND
,

651 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

652 .
›aque

hódî
->
ªque°
.opaque,

653 .
ˇs

	`¡ohŒ
(
ªsu…_ˇs
),

657 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

662 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

665  
rvÆ
;

666 
	}
}

675 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


676 
	$quô_comm™d_h™dÀr
(c⁄° *
cookõ
,

677 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

678 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

680 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

681 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
quô
 !
NULL
)

683 
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`quô
(
cookõ
);

686 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

687 .
mesßge
= {

688 .
hódî
.
ª•⁄£
= {

689 .
magic

PROTOCOL_BINARY_RES
,

690 .
›code

PROTOCOL_BINARY_CMD_QUIT
,

691 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

692 .
›aque

hódî
->
ªque°
.opaque

697 i‡(
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_QUIT
)

699 
	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

703  
PROTOCOL_BINARY_RESPONSE_EINTERNAL
;

704 
	}
}

713 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


714 
	$ª∂a˚_comm™d_h™dÀr
(c⁄° *
cookõ
,

715 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

716 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

718 ()
ª•⁄£_h™dÀr
;

719 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

721 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

722 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
ª∂a˚
 !
NULL
)

724 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

725 
uöt32_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

726 
¥Ÿocﬁ_bö¨y_ªque°_ª∂a˚
 *
ªque°
(*)
hódî
;

727 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

728 
uöt32_t
 
timeout

	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

729 *
key
((*)
hódî
) + (*header) + 8;

730 *
d©a

key
 + 
keyÀn
;

731 
uöt64_t
 
ˇs

	`¡ohŒ
(
hódî
->
ªque°
.cas);

732 
uöt64_t
 
ªsu…_ˇs
;

734 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`ª∂a˚
(
cookõ
, 
key
, 
keyÀn
,

735 
d©a
, 
d©Æí
, 
Êags
,

736 
timeout
, 
ˇs
,

737 &
ªsu…_ˇs
);

738 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

739 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_REPLACE
)

742 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

743 .
mesßge
= {

744 .
hódî
.
ª•⁄£
= {

745 .
magic

PROTOCOL_BINARY_RES
,

746 .
›code

PROTOCOL_BINARY_CMD_REPLACE
,

747 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

748 .
›aque

hódî
->
ªque°
.opaque,

749 .
ˇs

	`¡ohŒ
(
ªsu…_ˇs
),

753 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

758 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

761  
rvÆ
;

762 
	}
}

771 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


772 
	$£t_comm™d_h™dÀr
(c⁄° *
cookõ
,

773 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

774 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

776 ()
ª•⁄£_h™dÀr
;

777 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

779 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

780 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
£t
 !
NULL
)

782 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

783 
uöt32_t
 
d©Æí

	`¡ohl
(
hódî
->
ªque°
.
bodyÀn
Ë- 
keyÀn
 - 8;

784 
¥Ÿocﬁ_bö¨y_ªque°_ª∂a˚
 *
ªque°
(*)
hódî
;

785 
uöt32_t
 
Êags

	`¡ohl
(
ªque°
->
mesßge
.
body
.flags);

786 
uöt32_t
 
timeout

	`¡ohl
(
ªque°
->
mesßge
.
body
.
expú©i⁄
);

787 *
key
((*)
hódî
) + (*header) + 8;

788 *
d©a

key
 + 
keyÀn
;

789 
uöt64_t
 
ˇs

	`¡ohŒ
(
hódî
->
ªque°
.cas);

790 
uöt64_t
 
ªsu…_ˇs
;

793 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`£t
(
cookõ
, 
key
, 
keyÀn
,

794 
d©a
, 
d©Æí
, 
Êags
,

795 
timeout
, 
ˇs
, &
ªsu…_ˇs
);

796 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

797 
hódî
->
ªque°
.
›code
 =
PROTOCOL_BINARY_CMD_SET
)

800 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

801 .
mesßge
= {

802 .
hódî
.
ª•⁄£
= {

803 .
magic

PROTOCOL_BINARY_RES
,

804 .
›code

PROTOCOL_BINARY_CMD_SET
,

805 .
°©us

	`ht⁄s
(
PROTOCOL_BINARY_RESPONSE_SUCCESS
),

806 .
›aque

hódî
->
ªque°
.opaque,

807 .
ˇs

	`¡ohŒ
(
ªsu…_ˇs
),

811 
rvÆ

	`ª•⁄£_h™dÀr
(
cookõ
, 
hódî
, (*)&
ª•⁄£
);

816 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

819  
rvÆ
;

820 
	}
}

829 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


830 
	$°©_comm™d_h™dÀr
(c⁄° *
cookõ
,

831 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

832 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

834 ()
ª•⁄£_h™dÀr
;

835 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

837 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

838 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
°©
 !
NULL
)

840 
uöt16_t
 
keyÀn

	`¡ohs
(
hódî
->
ªque°
.keylen);

842 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`°©
(
cookõ
,

843 (*)(
hódî
 + 1),

844 
keyÀn
,

845 
°©_ª•⁄£_h™dÀr
);

849 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

852  
rvÆ
;

853 
	}
}

862 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


863 
	$vîsi⁄_comm™d_h™dÀr
(c⁄° *
cookõ
,

864 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

865 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
)

867 ()
ª•⁄£_h™dÀr
;

868 ()
hódî
;

869 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

871 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
(*)
cookõ
;

872 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
vîsi⁄
 !
NULL
)

874 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v1
.
	`vîsi⁄
(
cookõ
,

875 
vîsi⁄_ª•⁄£_h™dÀr
);

879 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

882  
rvÆ
;

883 
	}
}

888 
memˇched_bö¨y_¥Ÿocﬁ_comm™d_h™dÀr
 
	gcomcode_v0_v1_ªm≠
[256]= {

889 [
PROTOCOL_BINARY_CMD_ADDQ
]
add_comm™d_h™dÀr
,

890 [
PROTOCOL_BINARY_CMD_ADD
]
add_comm™d_h™dÀr
,

891 [
PROTOCOL_BINARY_CMD_APPENDQ
]
≠≥nd_comm™d_h™dÀr
,

892 [
PROTOCOL_BINARY_CMD_APPEND
]
≠≥nd_comm™d_h™dÀr
,

893 [
PROTOCOL_BINARY_CMD_DECREMENTQ
]
de¸emít_comm™d_h™dÀr
,

894 [
PROTOCOL_BINARY_CMD_DECREMENT
]
de¸emít_comm™d_h™dÀr
,

895 [
PROTOCOL_BINARY_CMD_DELETEQ
]
dñëe_comm™d_h™dÀr
,

896 [
PROTOCOL_BINARY_CMD_DELETE
]
dñëe_comm™d_h™dÀr
,

897 [
PROTOCOL_BINARY_CMD_FLUSHQ
]
Êush_comm™d_h™dÀr
,

898 [
PROTOCOL_BINARY_CMD_FLUSH
]
Êush_comm™d_h™dÀr
,

899 [
PROTOCOL_BINARY_CMD_GETKQ
]
gë_comm™d_h™dÀr
,

900 [
PROTOCOL_BINARY_CMD_GETK
]
gë_comm™d_h™dÀr
,

901 [
PROTOCOL_BINARY_CMD_GETQ
]
gë_comm™d_h™dÀr
,

902 [
PROTOCOL_BINARY_CMD_GET
]
gë_comm™d_h™dÀr
,

903 [
PROTOCOL_BINARY_CMD_INCREMENTQ
]
ö¸emít_comm™d_h™dÀr
,

904 [
PROTOCOL_BINARY_CMD_INCREMENT
]
ö¸emít_comm™d_h™dÀr
,

905 [
PROTOCOL_BINARY_CMD_NOOP
]
no›_comm™d_h™dÀr
,

906 [
PROTOCOL_BINARY_CMD_PREPENDQ
]
¥ïíd_comm™d_h™dÀr
,

907 [
PROTOCOL_BINARY_CMD_PREPEND
]
¥ïíd_comm™d_h™dÀr
,

908 [
PROTOCOL_BINARY_CMD_QUITQ
]
quô_comm™d_h™dÀr
,

909 [
PROTOCOL_BINARY_CMD_QUIT
]
quô_comm™d_h™dÀr
,

910 [
PROTOCOL_BINARY_CMD_REPLACEQ
]
ª∂a˚_comm™d_h™dÀr
,

911 [
PROTOCOL_BINARY_CMD_REPLACE
]
ª∂a˚_comm™d_h™dÀr
,

912 [
PROTOCOL_BINARY_CMD_SETQ
]
£t_comm™d_h™dÀr
,

913 [
PROTOCOL_BINARY_CMD_SET
]
£t_comm™d_h™dÀr
,

914 [
PROTOCOL_BINARY_CMD_STAT
]
°©_comm™d_h™dÀr
,

915 [
PROTOCOL_BINARY_CMD_VERSION
]
vîsi⁄_comm™d_h™dÀr
,

927 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$execuã_comm™d
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
)

929 i‡(
˛õ¡
->
roŸ
->
≥d™tic
 &&

930 
	`memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ªque°
(
hódî
))

936 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
¥e_execuã
 !
NULL
)

938 
˛õ¡
->
roŸ
->
ˇŒback
->
	`¥e_execuã
(˛õ¡, 
hódî
);

941 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rvÆ
;

942 
rvÆ

PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
;

943 
uöt8_t
 
cc

hódî
->
ªque°
.
›code
;

945 
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚_vîsi⁄
)

948 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v0
.
comcode
[
cc
] !
NULL
) {

949 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚
.
v0
.
comcode
[
cc
](˛õ¡, 
hódî
, 
øw_ª•⁄£_h™dÀr
);

953 i‡(
comcode_v0_v1_ªm≠
[
cc
] !
NULL
) {

954 
rvÆ

comcode_v0_v1_ªm≠
[
cc
](
˛õ¡
, 
hódî
, 
øw_ª•⁄£_h™dÀr
);

962 
	`ab‹t
();

966 i‡(
rvÆ
 =
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
 &&

967 
˛õ¡
->
roŸ
->
ˇŒback
->
unknown
 !
NULL
)

969 
rvÆ

˛õ¡
->
roŸ
->
ˇŒback
->
	`unknown
(˛õ¡, 
hódî
, 
øw_ª•⁄£_h™dÀr
);

972 i‡(
rvÆ
 !
PROTOCOL_BINARY_RESPONSE_SUCCESS
 &&

973 
rvÆ
 !
PROTOCOL_BINARY_RESPONSE_EINTERNAL
 &&

974 
rvÆ
 !
PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED
)

976 
¥Ÿocﬁ_bö¨y_ª•⁄£_no_exåas
 
ª•⁄£
= {

977 .
mesßge
= {

978 .
hódî
.
ª•⁄£
= {

979 .
magic

PROTOCOL_BINARY_RES
,

980 .
›code

cc
,

981 .
°©us

	`ht⁄s
(
rvÆ
),

982 .
›aque

hódî
->
ªque°
.opaque,

986 
rvÆ

	`øw_ª•⁄£_h™dÀr
(
˛õ¡
, 
hódî
, (*)&
ª•⁄£
);

989 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
po°_execuã
 !
NULL
)

991 
˛õ¡
->
roŸ
->
ˇŒback
->
	`po°_execuã
(˛õ¡, 
hódî
);

994  
rvÆ
;

995 
	}
}

1002 
memˇched_¥Ÿocﬁ_evít_t
 
	$memˇched_bö¨y_¥Ÿocﬁ_¥o˚ss_d©a
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
ssize_t
 *
Àngth
, **
íd±r
)

1005 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
;

1006 
hódî
(*)
˛õ¡
->
roŸ
->
öput_buf„r
;

1007 i‡(
hódî
->
ªque°
.
magic
 !(
uöt8_t
)
PROTOCOL_BINARY_REQ
)

1009 
˛õ¡
->
îr‹

EINVAL
;

1010  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

1012 
ssize_t
 
Àn
*
Àngth
;

1014 
Àn
 >(
ssize_t
)(*
hódî
) &&

1015 (
Àn
 >(
ssize_t
)((*
hódî
Ë+ 
	`¡ohl
(hódî->
ªque°
.
bodyÀn
))))

1018 
˛õ¡
->
cuºít_comm™d

hódî
;

1019 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
rv

	`execuã_comm™d
(
˛õ¡
, 
hódî
);

1021 i‡(
rv
 =
PROTOCOL_BINARY_RESPONSE_EINTERNAL
)

1023 *
Àngth

Àn
;

1024 *
íd±r
(*)
hódî
;

1025  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

1026 } i‡(
rv
 =
PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED
)

1027  
MEMCACHED_PROTOCOL_PAUSE_EVENT
;

1029 
ssize_t
 
tŸÆ
(ssize_t)((*
hódî
Ë+ 
	`¡ohl
(hódî->
ªque°
.
bodyÀn
));

1030 
Àn
 -
tŸÆ
;

1031 i‡(
Àn
 > 0)

1033 
öçå_t
 
±r
(öçå_t)
hódî
;

1034 
±r
 +
tŸÆ
;

1035 i‡((
±r
 % 8) == 0)

1037 
hódî
(*)
±r
;

1042 
	`memmove
(
˛õ¡
->
roŸ
->
öput_buf„r
, (*)
±r
, (
size_t
)
Àn
);

1043 
hódî
(*)
˛õ¡
->
roŸ
->
öput_buf„r
;

1046 *
Àngth

Àn
;

1047 *
íd±r
(*)
hódî
;

1050  
MEMCACHED_PROTOCOL_READ_EVENT
;

1051 
	}
}

1058 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
	$memˇched_bö¨y_¥Ÿocﬁ_gë_ˇŒbacks
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
)

1060  
ö°™˚
->
ˇŒback
;

1061 
	}
}

1063 
	$memˇched_bö¨y_¥Ÿocﬁ_£t_ˇŒbacks
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
ˇŒback
)

1065 
ö°™˚
->
ˇŒback
= callback;

1066 
	}
}

1068 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
	$memˇched_bö¨y_¥Ÿocﬁ_gë_øw_ª•⁄£_h™dÀr
(c⁄° *
cookõ
)

1070 ()
cookõ
;

1071  
øw_ª•⁄£_h™dÀr
;

1072 
	}
}

1074 
	$memˇched_bö¨y_¥Ÿocﬁ_£t_≥d™tic
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
boﬁ
 
íabÀ
)

1076 
ö°™˚
->
≥d™tic

íabÀ
;

1077 
	}
}

1079 
boﬁ
 
	$memˇched_bö¨y_¥Ÿocﬁ_gë_≥d™tic
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
)

1081  
ö°™˚
->
≥d™tic
;

1082 
	}
}

	@libmemcached/protocol/binary_handler.h

2 #i‚de‡
LIBMEMCACHED_PROTOCOL_BINARY_HANDLER_H


3 
	#LIBMEMCACHED_PROTOCOL_BINARY_HANDLER_H


	)

5 
LIBMEMCACHED_LOCAL


6 
boﬁ
 
memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ªque°
(c⁄° 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
ªque°
);

8 
LIBMEMCACHED_LOCAL


9 
boﬁ
 
memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ª•⁄£
(c⁄° 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
ªque°
,

10 c⁄° 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *
ª•⁄£
);

12 
LIBMEMCACHED_LOCAL


13 
memˇched_¥Ÿocﬁ_evít_t
 
memˇched_bö¨y_¥Ÿocﬁ_¥o˚ss_d©a
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
ssize_t
 *
Àngth
, **
íd±r
);

	@libmemcached/protocol/cache.c

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<öây≥s.h
>

6 #i‚de‡
NDEBUG


7 
	~<sig«l.h
>

10 
	~"ˇche.h
"

12 #i‚de‡
NDEBUG


13 c⁄° 
uöt64_t
 
	gªdz⁄e_∑âîn
 = 0xdeadbeefcafebabe;

14 
	gˇche_îr‹
 = 0;

17 c⁄° 
size_t
 
	göôül_poﬁ_size
 = 64;

19 
ˇche_t
* 
	$ˇche_¸óã
(c⁄° *
«me
, 
size_t
 
bufsize
, size_à
Æign
,

20 
ˇche_c⁄°ru˘‹_t
* 
c⁄°ru˘‹
,

21 
ˇche_de°ru˘‹_t
* 
de°ru˘‹
) {

22 
ˇche_t
* 
ªt
 = 
	`ˇŒoc
(1, (cache_t));

23 * 
nm
 = 
	`°rdup
(
«me
);

24 ** 
±r
 = 
	`ˇŒoc
(
öôül_poﬁ_size
, 
bufsize
);

25 i‡(
ªt
 =
NULL
 || 
nm
 =NULL || 
±r
 == NULL ||

26 
	`±hªad_muãx_öô
(&
ªt
->
muãx
, 
NULL
) == -1) {

27 
	`‰ì
(
ªt
);

28 
	`‰ì
(
nm
);

29 
	`‰ì
(
±r
);

30  
NULL
;

33 
ªt
->
«me
 = 
nm
;

34 
ªt
->
±r
 =Ötr;

35 
ªt
->
‰ìtŸÆ
 = 
öôül_poﬁ_size
;

36 
ªt
->
c⁄°ru˘‹
 = constructor;

37 
ªt
->
de°ru˘‹
 = destructor;

39 #i‚de‡
NDEBUG


40 
ªt
->
bufsize
 = bufsizê+ 2 * (
ªdz⁄e_∑âîn
);

42 
ªt
->
bufsize
 = bufsize;

45 ()
Æign
;

47  
ªt
;

48 
	}
}

50 
ölöe
 * 
	$gë_obje˘
(*
±r
) {

51 #i‚de‡
NDEBUG


52 
uöt64_t
 *
¥e
 = 
±r
;

53  
¥e
 + 1;

55  
±r
;

57 
	}
}

59 
	$ˇche_de°roy
(
ˇche_t
 *
ˇche
) {

60 
ˇche
->
‰ìcuº
 > 0) {

61 *
±r
 = 
ˇche
->±r[--ˇche->
‰ìcuº
];

62 i‡(
ˇche
->
de°ru˘‹
) {

63 
ˇche
->
	`de°ru˘‹
(
	`gë_obje˘
(
±r
), 
NULL
);

65 
	`‰ì
(
±r
);

67 
	`‰ì
(
ˇche
->
«me
);

68 
	`‰ì
(
ˇche
->
±r
);

69 
	`±hªad_muãx_de°roy
(&
ˇche
->
muãx
);

70 
	}
}

72 * 
	$ˇche_Æloc
(
ˇche_t
 *
ˇche
) {

73 *
ªt
;

74 *
obje˘
;

75 
	`±hªad_muãx_lock
(&
ˇche
->
muãx
);

76 i‡(
ˇche
->
‰ìcuº
 > 0) {

77 
ªt
 = 
ˇche
->
±r
[--ˇche->
‰ìcuº
];

78 
obje˘
 = 
	`gë_obje˘
(
ªt
);

80 
obje˘
 = 
ªt
 = 
	`mÆloc
(
ˇche
->
bufsize
);

81 i‡(
ªt
 !
NULL
) {

82 
obje˘
 = 
	`gë_obje˘
(
ªt
);

84 i‡(
ˇche
->
c⁄°ru˘‹
 !
NULL
 &&

85 
ˇche
->
	`c⁄°ru˘‹
(
obje˘
, 
NULL
, 0) != 0) {

86 
	`‰ì
(
ªt
);

87 
obje˘
 = 
NULL
;

91 
	`±hªad_muãx_u∆ock
(&
ˇche
->
muãx
);

93 #i‚de‡
NDEBUG


94 i‡(
obje˘
 !
NULL
) {

96 
uöt64_t
 *
¥e
 = 
ªt
;

97 *
¥e
 = 
ªdz⁄e_∑âîn
;

98 
ªt
 = 
¥e
+1;

99 
	`mem˝y
(((*)
ªt
Ë+ 
ˇche
->
bufsize
 - (2 * (
ªdz⁄e_∑âîn
)),

100 &
ªdz⁄e_∑âîn
, (redzone_pattern));

104  
obje˘
;

105 
	}
}

107 
	$ˇche_‰ì
(
ˇche_t
 *
ˇche
, *
±r
) {

108 
	`±hªad_muãx_lock
(&
ˇche
->
muãx
);

110 #i‚de‡
NDEBUG


112 i‡(
	`memcmp
(((*)
±r
Ë+ 
ˇche
->
bufsize
 - (2 * (
ªdz⁄e_∑âîn
)),

113 &
ªdz⁄e_∑âîn
, (redzone_pattern)) != 0) {

114 
	`øi£
(
SIGABRT
);

115 
ˇche_îr‹
 = 1;

116 
	`±hªad_muãx_u∆ock
(&
ˇche
->
muãx
);

119 
uöt64_t
 *
¥e
 = 
±r
;

120 --
¥e
;

121 i‡(*
¥e
 !
ªdz⁄e_∑âîn
) {

122 
	`øi£
(
SIGABRT
);

123 
ˇche_îr‹
 = -1;

124 
	`±hªad_muãx_u∆ock
(&
ˇche
->
muãx
);

127 
±r
 = 
¥e
;

129 i‡(
ˇche
->
‰ìcuº
 < cache->
‰ìtŸÆ
) {

130 
ˇche
->
±r
[ˇche->
‰ìcuº
++] =Ötr;

133 
size_t
 
√wtŸÆ
 = 
ˇche
->
‰ìtŸÆ
 * 2;

134 **
√w_‰ì
 = 
	`ªÆloc
(
ˇche
->
±r
, (*Ë* 
√wtŸÆ
);

135 i‡(
√w_‰ì
) {

136 
ˇche
->
‰ìtŸÆ
 = 
√wtŸÆ
;

137 
ˇche
->
±r
 = 
√w_‰ì
;

138 
ˇche
->
±r
[ˇche->
‰ìcuº
++] =Ötr;

140 i‡(
ˇche
->
de°ru˘‹
) {

141 
ˇche
->
	`de°ru˘‹
(
±r
, 
NULL
);

143 
	`‰ì
(
±r
);

147 
	`±hªad_muãx_u∆ock
(&
ˇche
->
muãx
);

148 
	}
}

	@libmemcached/protocol/cache.h

2 #i‚de‡
CACHE_H


3 
	#CACHE_H


	)

4 
	~<±hªad.h
>

6 #ifde‡
HAVE_UMEM_H


7 
	~<umem.h
>

8 
	#ˇche_t
 
umem_ˇche_t


	)

9 
	#ˇche_Æloc
(
a
Ë
	`umem_ˇche_Æloc
◊, 
UMEM_DEFAULT
)

	)

10 
	#ˇche_‰ì
(
a
, 
b
Ë
	`umem_ˇche_‰ì
◊, b)

	)

11 
	#ˇche_¸óã
(
a
,
b
,
c
,
d
,
e
Ë
	`umem_ˇche_¸óã
((*Ô, b, c, d,É, 
NULL
, NULL, NULL, 0)

	)

12 
	#ˇche_de°roy
(
a
Ë
	`umem_ˇche_de°roy
◊);

	)

16 #i‚de‡
NDEBUG


18 
ˇche_îr‹
;

29 
	tˇche_c⁄°ru˘‹_t
(* 
	tobj
, * 
	tnŸu£d1
, 
	tnŸu£d2
);

39 
	tˇche_de°ru˘‹_t
(* 
	tobj
, * 
	tnŸu£d
);

48 
±hªad_muãx_t
 
	mmuãx
;

50 *
	m«me
;

52 **
	m±r
;

54 
size_t
 
	mbufsize
;

56 
size_t
 
	m‰ìtŸÆ
;

58 
size_t
 
	m‰ìcuº
;

60 
ˇche_c⁄°ru˘‹_t
* 
	mc⁄°ru˘‹
;

62 
ˇche_de°ru˘‹_t
* 
	mde°ru˘‹
;

63 } 
	tˇche_t
;

83 
ˇche_t
* 
ˇche_¸óã
(c⁄° * 
«me
, 
size_t
 
bufsize
, size_à
Æign
,

84 
ˇche_c⁄°ru˘‹_t
* 
c⁄°ru˘‹
,

85 
ˇche_de°ru˘‹_t
* 
de°ru˘‹
);

95 
ˇche_de°roy
(
ˇche_t
* 
h™dÀ
);

103 * 
ˇche_Æloc
(
ˇche_t
* 
h™dÀ
);

113 
ˇche_‰ì
(
ˇche_t
* 
h™dÀ
, * 
±r
);

	@libmemcached/protocol/callback.h

8 #i‚de‡
LIBMEMCACHEDPROTOCOL_CALLBACK_H


9 
	#LIBMEMCACHEDPROTOCOL_CALLBACK_H


	)

23 
	g¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


24 (*
	tmemˇched_bö¨y_¥Ÿocﬁ_gë_ª•⁄£_h™dÀr
)(c⁄° *
	tcookõ
,

25 c⁄° *
	tkey
,

26 
	tuöt16_t
 
	tkeyÀn
,

27 c⁄° *
	tbody
,

28 
	tuöt32_t
 
	tbodyÀn
,

29 
	tuöt32_t
 
	tÊags
,

30 
	tuöt64_t
 
	tˇs
);

40 
	g¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


41 (*
	tmemˇched_bö¨y_¥Ÿocﬁ_°©_ª•⁄£_h™dÀr
)(c⁄° *
	tcookõ
,

42 c⁄° *
	tkey
,

43 
	tuöt16_t
 
	tkeyÀn
,

44 c⁄° *
	tbody
,

45 
	tuöt32_t
 
	tbodyÀn
);

53 
	g¥Ÿocﬁ_bö¨y_ª•⁄£_°©us


54 (*
	tmemˇched_bö¨y_¥Ÿocﬁ_vîsi⁄_ª•⁄£_h™dÀr
)(c⁄° *
	tcookõ
,

55 c⁄° *
	tãxt
,

56 
	tuöt32_t
 
	tÀngth
);

68 
	$¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
	tmemˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
)(c⁄° *
	tcookõ
,

69 
	t¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
	tªque°
,

70 
	t¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *
	tª•⁄£
);

81 
	$¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
	tmemˇched_bö¨y_¥Ÿocﬁ_comm™d_h™dÀr
)(c⁄° *
	tcookõ
,

82 
	t¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
	thódî
,

83 
	tmemˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
	tª•⁄£_h™dÀr
);

91 
memˇched_bö¨y_¥Ÿocﬁ_comm™d_h™dÀr
 
comcode
[256];

92 } 
	tmemˇched_bö¨y_¥Ÿocﬁ_ˇŒback_v0_°
;

115 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
add
)(c⁄° *
cookõ
,

116 c⁄° *
key
,

117 
uöt16_t
 
keyÀn
,

118 c⁄° * 
vÆ
,

119 
uöt32_t
 
vÆÀn
,

120 
uöt32_t
 
Êags
,

121 
uöt32_t
 
ex±ime
,

122 
uöt64_t
 *
ˇs
);

136 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
≠≥nd
)(c⁄° *
cookõ
,

137 c⁄° *
key
,

138 
uöt16_t
 
keyÀn
,

139 c⁄° * 
vÆ
,

140 
uöt32_t
 
vÆÀn
,

141 
uöt64_t
 
ˇs
,

142 
uöt64_t
 *
ªsu…_ˇs
);

158 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
de¸emít
)(c⁄° *
cookõ
,

159 c⁄° *
key
,

160 
uöt16_t
 
keyÀn
,

161 
uöt64_t
 
dñè
,

162 
uöt64_t
 
öôül
,

163 
uöt32_t
 
expú©i⁄
,

164 
uöt64_t
 *
ªsu…
,

165 
uöt64_t
 *
ªsu…_ˇs
);

175 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
dñëe
)(c⁄° *
cookõ
,

176 c⁄° *
key
,

177 
uöt16_t
 
keyÀn
,

178 
uöt64_t
 
ˇs
);

187 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
Êush
)(c⁄° *
cookõ
,

188 
uöt32_t
 
whí
);

200 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
gë
)(c⁄° *
cookõ
,

201 c⁄° *
key
,

202 
uöt16_t
 
keyÀn
,

203 
memˇched_bö¨y_¥Ÿocﬁ_gë_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
);

219 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
ö¸emít
)(c⁄° *
cookõ
,

220 c⁄° *
key
,

221 
uöt16_t
 
keyÀn
,

222 
uöt64_t
 
dñè
,

223 
uöt64_t
 
öôül
,

224 
uöt32_t
 
expú©i⁄
,

225 
uöt64_t
 *
ªsu…
,

226 
uöt64_t
 *
ªsu…_ˇs
);

234 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
no›
)(c⁄° *
cookõ
);

248 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
¥ïíd
)(c⁄° *
cookõ
,

249 c⁄° *
key
,

250 
uöt16_t
 
keyÀn
,

251 c⁄° * 
vÆ
,

252 
uöt32_t
 
vÆÀn
,

253 
uöt64_t
 
ˇs
,

254 
uöt64_t
 *
ªsu…_ˇs
);

262 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
quô
)(c⁄° *
cookõ
);

278 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
ª∂a˚
)(c⁄° *
cookõ
,

279 c⁄° *
key
,

280 
uöt16_t
 
keyÀn
,

281 c⁄° * 
vÆ
,

282 
uöt32_t
 
vÆÀn
,

283 
uöt32_t
 
Êags
,

284 
uöt32_t
 
ex±ime
,

285 
uöt64_t
 
ˇs
,

286 
uöt64_t
 *
ªsu…_ˇs
);

302 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
£t
)(c⁄° *
cookõ
,

303 c⁄° *
key
,

304 
uöt16_t
 
keyÀn
,

305 c⁄° * 
vÆ
,

306 
uöt32_t
 
vÆÀn
,

307 
uöt32_t
 
Êags
,

308 
uöt32_t
 
ex±ime
,

309 
uöt64_t
 
ˇs
,

310 
uöt64_t
 *
ªsu…_ˇs
);

324 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
°©
)(c⁄° *
cookõ
,

325 c⁄° *
key
,

326 
uöt16_t
 
keyÀn
,

327 
memˇched_bö¨y_¥Ÿocﬁ_°©_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
);

337 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
vîsi⁄
)(c⁄° *
cookõ
,

338 
memˇched_bö¨y_¥Ÿocﬁ_vîsi⁄_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
);

339 } 
	tmemˇched_bö¨y_¥Ÿocﬁ_ˇŒback_v1_°
;

347 
MEMCACHED_PROTOCOL_HANDLER_V0
= 0,

352 
MEMCACHED_PROTOCOL_HANDLER_V1
= 1,

353 } 
	tmemˇched_¥Ÿocﬁ_öãrÁ˚_vîsi⁄_t
;

362 
memˇched_¥Ÿocﬁ_öãrÁ˚_vîsi⁄_t
 
öãrÁ˚_vîsi⁄
;

372 (*
¥e_execuã
)(c⁄° *
cookõ
,

373 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
);

384 (*
po°_execuã
)(c⁄° *
cookõ
,

385 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
);

397 
	`¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
unknown
)(c⁄° *
cookõ
,

398 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
hódî
,

399 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
ª•⁄£_h™dÀr
);

407 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_v0_°
 
v0
;

414 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_v1_°
 
v1
;

415 } 
öãrÁ˚
;

416 } 
	tmemˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
;

	@libmemcached/protocol/common.h

2 #i‚de‡
LIBMEMCACHED_PROTOCOL_COMMON_H


3 
	#LIBMEMCACHED_PROTOCOL_COMMON_H


	)

5 
	~"c⁄fig.h
"

6 #i‡!
deföed
(
__˝lu•lus
)

7 
	~<°dboﬁ.h
>

9 
	~<as£π.h
>

14 
	#BUILDING_LIBMEMCACHED
 1

	)

16 
	~<libmemˇched/byã‹dî.h
>

17 
	~<libmemˇched/¥Ÿocﬁ_h™dÀr.h
>

18 
	~<libmemˇched/¥Ÿocﬁ/ˇche.h
>

27 
	$boﬁ
 (*
	tdøö_func
)(
	tmemˇched_¥Ÿocﬁ_˛õ¡_°
 *
	t˛õ¡
);

28 
	$¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 (*
	t•oﬁ_func
)(
	tmemˇched_¥Ÿocﬁ_˛õ¡_°
 *
	t˛õ¡
,

29 c⁄° *
	td©a
,

30 
	tsize_t
 
	tÀngth
);

35 
	smemˇched_¥Ÿocﬁ_°
 {

36 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
ˇŒback
;

37 
memˇched_¥Ÿocﬁ_ªcv_func
 
ªcv
;

38 
memˇched_¥Ÿocﬁ_£nd_func
 
£nd
;

44 
døö_func
 
døö
;

45 
•oﬁ_func
 
•oﬁ
;

54 
uöt8_t
 *
öput_buf„r
;

55 
size_t
 
öput_buf„r_size
;

57 
boﬁ
 
≥d™tic
;

59 
ˇche_t
 *
buf„r_ˇche
;

62 
	schunk_°
 {

64 *
d©a
;

66 
size_t
 
off£t
;

68 
size_t
 
nbyãs
;

70 
size_t
 
size
;

72 
chunk_°
 *
√xt
;

75 
	#CHUNK_BUFFERSIZE
 2048

	)

77 
	$memˇched_¥Ÿocﬁ_evít_t
 (*
	t¥o˚ss_d©a
)(
	tmemˇched_¥Ÿocﬁ_˛õ¡_°
 *
	t˛õ¡
, 
	tssize_t
 *
	tÀngth
, **
	tíd±r
);

79 
	eascii_cmd
 {

80 
GET_CMD
,

81 
GETS_CMD
,

82 
SET_CMD
,

83 
ADD_CMD
,

84 
REPLACE_CMD
,

85 
CAS_CMD
,

86 
APPEND_CMD
,

87 
PREPEND_CMD
,

88 
DELETE_CMD
,

89 
INCR_CMD
,

90 
DECR_CMD
,

91 
STATS_CMD
,

92 
FLUSH_ALL_CMD
,

93 
VERSION_CMD
,

94 
QUIT_CMD
,

95 
VERBOSITY_CMD
,

96 
UNKNOWN_CMD


99 
	smemˇched_¥Ÿocﬁ_˛õ¡_°
 {

100 
memˇched_¥Ÿocﬁ_°
 *
roŸ
;

101 
memˇched_sockë_t
 
sock
;

102 
îr‹
;

105 
chunk_°
 *
ouçut
;

106 
chunk_°
 *
ouçut_èû
;

113 
uöt8_t
 *
öput_buf„r
;

114 
size_t
 
öput_buf„r_size
;

115 
size_t
 
öput_buf„r_off£t
;

118 
¥o˚ss_d©a
 
w‹k
;

124 
boﬁ
 
muã
;

127 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
cuºít_comm™d
;

130 
ascii_cmd
 
ascii_comm™d
;

133 
	~"ascii_h™dÀr.h
"

134 
	~"bö¨y_h™dÀr.h
"

	@libmemcached/protocol/pedantic.c

2 
	~"libmemˇched/¥Ÿocﬁ/comm⁄.h
"

4 
	~<sys/ty≥s.h
>

5 
	~<öây≥s.h
>

7 
	#ísuª
(
a
Ëi‡(!◊)Ë{  
Ál£
; }

	)

9 
boﬁ
 
	$memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ªque°
(c⁄° 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
ªque°
)

11 
	`ísuª
(
ªque°
->ªque°.
magic
 =
PROTOCOL_BINARY_REQ
);

12 
	`ísuª
(
ªque°
->ªque°.
d©©y≥
 =
PROTOCOL_BINARY_RAW_BYTES
);

14 
	`ísuª
(
ªque°
->
byãs
[6] == 0);

15 
	`ísuª
(
ªque°
->
byãs
[7] == 0);

17 
uöt8_t
 
›code

ªque°
->request.opcode;

18 
uöt16_t
 
keyÀn

	`¡ohs
(
ªque°
->request.keylen);

19 
uöt8_t
 
exéí

ªque°
->request.extlen;

20 
uöt32_t
 
bodyÀn

	`¡ohl
(
ªque°
->request.bodylen);

22 
	`ísuª
(
bodyÀn
 >(
keyÀn
 + 
exéí
));

24 
›code
) {

25 
PROTOCOL_BINARY_CMD_GET
:

26 
PROTOCOL_BINARY_CMD_GETK
:

27 
PROTOCOL_BINARY_CMD_GETKQ
:

28 
PROTOCOL_BINARY_CMD_GETQ
:

29 
	`ísuª
(
exéí
 == 0);

30 
	`ísuª
(
keyÀn
 > 0);

31 
	`ísuª
(
keyÀn
 =
bodyÀn
);

32 
	`ísuª
(
ªque°
->ªque°.
ˇs
 == 0);

35 
PROTOCOL_BINARY_CMD_ADD
:

36 
PROTOCOL_BINARY_CMD_ADDQ
:

38 
	`ísuª
(
ªque°
->ªque°.
ˇs
 == 0);

40 
PROTOCOL_BINARY_CMD_SET
:

41 
PROTOCOL_BINARY_CMD_SETQ
:

42 
PROTOCOL_BINARY_CMD_REPLACE
:

43 
PROTOCOL_BINARY_CMD_REPLACEQ
:

44 
	`ísuª
(
keyÀn
 > 0);

45 
	`ísuª
(
exéí
 == 8);

48 
PROTOCOL_BINARY_CMD_DELETE
:

49 
PROTOCOL_BINARY_CMD_DELETEQ
:

50 
	`ísuª
(
exéí
 == 0);

51 
	`ísuª
(
keyÀn
 > 0);

52 
	`ísuª
(
keyÀn
 =
bodyÀn
);

55 
PROTOCOL_BINARY_CMD_INCREMENT
:

56 
PROTOCOL_BINARY_CMD_INCREMENTQ
:

57 
PROTOCOL_BINARY_CMD_DECREMENT
:

58 
PROTOCOL_BINARY_CMD_DECREMENTQ
:

59 
	`ísuª
(
exéí
 == 20);

60 
	`ísuª
(
keyÀn
 > 0);

61 
	`ísuª
(
keyÀn
 + 
exéí
 =
bodyÀn
);

64 
PROTOCOL_BINARY_CMD_QUIT
:

65 
PROTOCOL_BINARY_CMD_QUITQ
:

66 
PROTOCOL_BINARY_CMD_NOOP
:

67 
PROTOCOL_BINARY_CMD_VERSION
:

68 
	`ísuª
(
exéí
 == 0);

69 
	`ísuª
(
keyÀn
 == 0);

70 
	`ísuª
(
bodyÀn
 == 0);

73 
PROTOCOL_BINARY_CMD_FLUSH
:

74 
PROTOCOL_BINARY_CMD_FLUSHQ
:

75 
	`ísuª
(
exéí
 == 0 ||Éxtlen == 4);

76 
	`ísuª
(
keyÀn
 == 0);

77 
	`ísuª
(
bodyÀn
 =
exéí
);

80 
PROTOCOL_BINARY_CMD_STAT
:

81 
	`ísuª
(
exéí
 == 0);

83 
	`ísuª
(
keyÀn
 =
bodyÀn
);

86 
PROTOCOL_BINARY_CMD_APPEND
:

87 
PROTOCOL_BINARY_CMD_APPENDQ
:

88 
PROTOCOL_BINARY_CMD_PREPEND
:

89 
PROTOCOL_BINARY_CMD_PREPENDQ
:

90 
	`ísuª
(
exéí
 == 0);

91 
	`ísuª
(
keyÀn
 > 0);

98  
åue
;

99 
	}
}

101 
boﬁ
 
	$memˇched_bö¨y_¥Ÿocﬁ_≥d™tic_check_ª•⁄£
(c⁄° 
¥Ÿocﬁ_bö¨y_ªque°_hódî
 *
ªque°
,

102 c⁄° 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 *
ª•⁄£
)

104 
	`ísuª
(
ª•⁄£
->ª•⁄£.
magic
 =
PROTOCOL_BINARY_RES
);

105 
	`ísuª
(
ª•⁄£
->ª•⁄£.
d©©y≥
 =
PROTOCOL_BINARY_RAW_BYTES
);

106 
	`ísuª
(
ª•⁄£
->ª•⁄£.
›aque
 =
ªque°
->request.opaque);

108 
uöt16_t
 
°©us

	`¡ohs
(
ª•⁄£
->response.status);

109 
uöt8_t
 
›code

ª•⁄£
->response.opcode;

111 i‡(
°©us
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
)

113 
›code
) {

114 
PROTOCOL_BINARY_CMD_ADDQ
:

115 
PROTOCOL_BINARY_CMD_APPENDQ
:

116 
PROTOCOL_BINARY_CMD_DECREMENTQ
:

117 
PROTOCOL_BINARY_CMD_DELETEQ
:

118 
PROTOCOL_BINARY_CMD_FLUSHQ
:

119 
PROTOCOL_BINARY_CMD_INCREMENTQ
:

120 
PROTOCOL_BINARY_CMD_PREPENDQ
:

121 
PROTOCOL_BINARY_CMD_QUITQ
:

122 
PROTOCOL_BINARY_CMD_REPLACEQ
:

123 
PROTOCOL_BINARY_CMD_SETQ
:

125  
Ál£
;

130 
›code
) {

131 
PROTOCOL_BINARY_CMD_ADD
:

132 
PROTOCOL_BINARY_CMD_REPLACE
:

133 
PROTOCOL_BINARY_CMD_SET
:

134 
PROTOCOL_BINARY_CMD_APPEND
:

135 
PROTOCOL_BINARY_CMD_PREPEND
:

136 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

137 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

138 
	`ísuª
(
ª•⁄£
->ª•⁄£.
bodyÀn
 == 0);

139 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 != 0);

141 
PROTOCOL_BINARY_CMD_FLUSH
:

142 
PROTOCOL_BINARY_CMD_NOOP
:

143 
PROTOCOL_BINARY_CMD_QUIT
:

144 
PROTOCOL_BINARY_CMD_DELETE
:

145 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

146 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

147 
	`ísuª
(
ª•⁄£
->ª•⁄£.
bodyÀn
 == 0);

148 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 == 0);

151 
PROTOCOL_BINARY_CMD_DECREMENT
:

152 
PROTOCOL_BINARY_CMD_INCREMENT
:

153 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

154 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

155 
	`ísuª
(
	`¡ohl
(
ª•⁄£
->ª•⁄£.
bodyÀn
) == 8);

156 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 != 0);

159 
PROTOCOL_BINARY_CMD_STAT
:

160 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

162 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 == 0);

165 
PROTOCOL_BINARY_CMD_VERSION
:

166 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

167 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

168 
	`ísuª
(
ª•⁄£
->ª•⁄£.
bodyÀn
 != 0);

169 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 == 0);

172 
PROTOCOL_BINARY_CMD_GET
:

173 
PROTOCOL_BINARY_CMD_GETQ
:

174 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

175 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 4);

176 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 != 0);

179 
PROTOCOL_BINARY_CMD_GETK
:

180 
PROTOCOL_BINARY_CMD_GETKQ
:

181 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 != 0);

182 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 4);

183 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 != 0);

193 
	`ísuª
(
ª•⁄£
->ª•⁄£.
ˇs
 == 0);

194 
	`ísuª
(
ª•⁄£
->ª•⁄£.
exéí
 == 0);

195 i‡(
›code
 !
PROTOCOL_BINARY_CMD_GETK
)

197 
	`ísuª
(
ª•⁄£
->ª•⁄£.
keyÀn
 == 0);

201  
åue
;

202 
	}
}

	@libmemcached/protocol/protocol_handler.c

2 
	~"libmemˇched/¥Ÿocﬁ/comm⁄.h
"

4 
	~<°dlib.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<î∫o.h
>

7 
	~<°dboﬁ.h
>

8 
	~<°rög.h
>

9 
	~<°rögs.h
>

10 
	~<˘y≥.h
>

11 
	~<°dio.h
>

30 
ssize_t
 
	$deÁu…_ªcv
(c⁄° *
cookõ
,

31 
memˇched_sockë_t
 
sock
,

32 *
buf
,

33 
size_t
 
nbyãs
)

35 ()
cookõ
;

36  
	`ªcv
(
sock
, 
buf
, 
nbyãs
, 0);

37 
	}
}

50 
ssize_t
 
	$deÁu…_£nd
(c⁄° *
cookõ
,

51 
memˇched_sockë_t
 
fd
,

52 c⁄° *
buf
,

53 
size_t
 
nbyãs
)

55 ()
cookõ
;

56  
	`£nd
(
fd
, 
buf
, 
nbyãs
, 0);

57 
	}
}

67 
boﬁ
 
	$døö_ouçut
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
)

69 
ssize_t
 
Àn
;

72 
˛õ¡
->
ouçut
 !
NULL
)

74 
Àn

˛õ¡
->
roŸ
->
	`£nd
(client,

75 
˛õ¡
->
sock
,

76 
˛õ¡
->
ouçut
->
d©a
 + clõ¡->ouçut->
off£t
,

77 
˛õ¡
->
ouçut
->
nbyãs
 - clõ¡->ouçut->
off£t
);

79 i‡(
Àn
 == -1)

81 i‡(
	`gë_sockë_î∫o
(Ë=
EWOULDBLOCK
)

83  
åue
;

85 i‡(
	`gë_sockë_î∫o
(Ë!
EINTR
)

87 
˛õ¡
->
îr‹

	`gë_sockë_î∫o
();

88  
Ál£
;

93 
˛õ¡
->
ouçut
->
off£t
 +(
size_t
)
Àn
;

94 i‡(
˛õ¡
->
ouçut
->
off£t
 =˛õ¡->ouçut->
nbyãs
)

97 
chunk_°
 *
ﬁd

˛õ¡
->
ouçut
;

98 
˛õ¡
->
ouçut
˛õ¡->ouçut->
√xt
;

99 i‡(
˛õ¡
->
ouçut
 =
NULL
)

101 
˛õ¡
->
ouçut_èû

NULL
;

103 
	`ˇche_‰ì
(
˛õ¡
->
roŸ
->
buf„r_ˇche
, 
ﬁd
);

108  
åue
;

109 
	}
}

117 
chunk_°
 *
	$Æloˇã_ouçut_chunk
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
)

119 
chunk_°
 *
ªt

	`ˇche_Æloc
(
˛õ¡
->
roŸ
->
buf„r_ˇche
);

121 i‡(
ªt
 =
NULL
)

123  
NULL
;

126 
ªt
->
off£t
ªt->
nbyãs
= 0;

127 
ªt
->
√xt

NULL
;

128 
ªt
->
size

CHUNK_BUFFERSIZE
;

129 
ªt
->
d©a
= (*)(ret + 1);

130 i‡(
˛õ¡
->
ouçut
 =
NULL
)

132 
˛õ¡
->
ouçut
˛õ¡->
ouçut_èû

ªt
;

136 
˛õ¡
->
ouçut_èû
->
√xt

ªt
;

137 
˛õ¡
->
ouçut_èû

ªt
;

140  
ªt
;

141 
	}
}

152 
¥Ÿocﬁ_bö¨y_ª•⁄£_°©us
 
	$•oﬁ_ouçut
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
,

153 c⁄° *
d©a
,

154 
size_t
 
Àngth
)

156 i‡(
˛õ¡
->
muã
)

158  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

161 
size_t
 
off£t
= 0;

163 
chunk_°
 *
chunk

˛õ¡
->
ouçut
;

164 
off£t
 < 
Àngth
)

166 i‡(
chunk
 =
NULL
 || (chunk->
size
 - chunk->
nbyãs
) == 0)

168 i‡((
chunk

	`Æloˇã_ouçut_chunk
(
˛õ¡
)Ë=
NULL
)

170  
PROTOCOL_BINARY_RESPONSE_ENOMEM
;

174 
size_t
 
bulk

Àngth
 - 
off£t
;

175 i‡(
bulk
 > 
chunk
->
size
 - chunk->
nbyãs
)

177 
bulk

chunk
->
size
 - chunk->
nbyãs
;

180 
	`mem˝y
(
chunk
->
d©a
 + chunk->
nbyãs
, d©a, 
bulk
);

181 
chunk
->
nbyãs
 +
bulk
;

182 
off£t
 +
bulk
;

185  
PROTOCOL_BINARY_RESPONSE_SUCCESS
;

186 
	}
}

196 
memˇched_¥Ÿocﬁ_evít_t
 
	$dëîmöe_¥Ÿocﬁ
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
, 
ssize_t
 *
Àngth
, **
íd±r
)

198 i‡(*
˛õ¡
->
roŸ
->
öput_buf„r
 =(
uöt8_t
)
PROTOCOL_BINARY_REQ
)

200 
˛õ¡
->
w‹k

memˇched_bö¨y_¥Ÿocﬁ_¥o˚ss_d©a
;

202 i‡(
˛õ¡
->
roŸ
->
ˇŒback
->
öãrÁ˚_vîsi⁄
 == 1)

212 
˛õ¡
->
w‹k

memˇched_ascii_¥Ÿocﬁ_¥o˚ss_d©a
;

219 c⁄° *
îr
= "CLIENT_ERROR: UnsupportedÖrotocol\r\n";

220 
˛õ¡
->
roŸ
->
	`•oﬁ
(˛õ¡, 
îr
, 
	`°æí
(err));

221 
˛õ¡
->
roŸ
->
	`døö
(client);

222  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

225  
˛õ¡
->
	`w‹k
(˛õ¡, 
Àngth
, 
íd±r
);

226 
	}
}

234 
memˇched_¥Ÿocﬁ_°
 *
	$memˇched_¥Ÿocﬁ_¸óã_ö°™˚
()

236 
memˇched_¥Ÿocﬁ_°
 *
ªt

	`ˇŒoc
(1, (*ret));

237 i‡(
ªt
 !
NULL
)

239 
ªt
->
ªcv

deÁu…_ªcv
;

240 
ªt
->
£nd

deÁu…_£nd
;

241 
ªt
->
døö

døö_ouçut
;

242 
ªt
->
•oﬁ

•oﬁ_ouçut
;

243 
ªt
->
öput_buf„r_size
= 1 * 1024 * 1024;

244 
ªt
->
öput_buf„r

	`mÆloc
‘ë->
öput_buf„r_size
);

245 i‡(
ªt
->
öput_buf„r
 =
NULL
)

247 
	`‰ì
(
ªt
);

248 
ªt

NULL
;

249  
NULL
;

252 
ªt
->
buf„r_ˇche

	`ˇche_¸óã
("protocol_handler",

253 
CHUNK_BUFFERSIZE
 + (
chunk_°
),

254 0, 
NULL
, NULL);

255 i‡(
ªt
->
buf„r_ˇche
 =
NULL
)

257 
	`‰ì
(
ªt
->
öput_buf„r
);

258 
	`‰ì
(
ªt
);

262  
ªt
;

263 
	}
}

265 
	$memˇched_¥Ÿocﬁ_de°roy_ö°™˚
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
)

267 
	`ˇche_de°roy
(
ö°™˚
->
buf„r_ˇche
);

268 
	`‰ì
(
ö°™˚
->
öput_buf„r
);

269 
	`‰ì
(
ö°™˚
);

270 
	}
}

272 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
	$memˇched_¥Ÿocﬁ_¸óã_˛õ¡
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
memˇched_sockë_t
 
sock
)

274 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
ªt

	`ˇŒoc
(1, (*ret));

275 i‡(
ªt
 !
NULL
)

277 
ªt
->
roŸ

ö°™˚
;

278 
ªt
->
sock
= sock;

279 
ªt
->
w‹k

dëîmöe_¥Ÿocﬁ
;

282  
ªt
;

283 
	}
}

285 
	$memˇched_¥Ÿocﬁ_˛õ¡_de°roy
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
)

287 
	`‰ì
(
˛õ¡
);

288 
	}
}

290 
memˇched_¥Ÿocﬁ_evít_t
 
	$memˇched_¥Ÿocﬁ_˛õ¡_w‹k
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
)

293 
boﬁ
 
m‹e_d©a

åue
;

296 
ssize_t
 
Àn

˛õ¡
->
roŸ
->
	`ªcv
(client,

297 
˛õ¡
->
sock
,

298 
˛õ¡
->
roŸ
->
öput_buf„r
 + clõ¡->
öput_buf„r_off£t
,

299 
˛õ¡
->
roŸ
->
öput_buf„r_size
 - clõ¡->
öput_buf„r_off£t
);

301 i‡(
Àn
 > 0)

304 i‡(
˛õ¡
->
öput_buf„r_off£t
 > 0)

306 
	`mem˝y
(
˛õ¡
->
roŸ
->
öput_buf„r
, client->input_buffer,

307 
˛õ¡
->
öput_buf„r_off£t
);

308 
Àn
 +(
ssize_t
)
˛õ¡
->
öput_buf„r_off£t
;

311 
	`‰ì
(
˛õ¡
->
öput_buf„r
);

312 
˛õ¡
->
öput_buf„r_off£t
= 0;

315 *
íd±r
;

316 
memˇched_¥Ÿocﬁ_evít_t
 
evíts

˛õ¡
->
	`w‹k
(˛õ¡, &
Àn
, &
íd±r
);

317 i‡(
evíts
 =
MEMCACHED_PROTOCOL_ERROR_EVENT
)

319  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

322 i‡(
Àn
 > 0)

326 
˛õ¡
->
öput_buf„r

	`mÆloc
((
size_t
)
Àn
);

327 i‡(
˛õ¡
->
öput_buf„r
 =
NULL
)

329 
˛õ¡
->
îr‹

ENOMEM
;

330  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

332 
	`mem˝y
(
˛õ¡
->
öput_buf„r
, 
íd±r
, (
size_t
)
Àn
);

333 
˛õ¡
->
öput_buf„r_off£t
(
size_t
)
Àn
;

334 
m‹e_d©a

Ál£
;

337 i‡(
Àn
 == 0)

340 
	`døö_ouçut
(
˛õ¡
);

341  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

345 i‡(
	`gë_sockë_î∫o
(Ë!
EWOULDBLOCK
)

347 
˛õ¡
->
îr‹

	`gë_sockë_î∫o
();

349  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

351 
m‹e_d©a

Ál£
;

353 } 
m‹e_d©a
);

355 i‡(!
	`døö_ouçut
(
˛õ¡
))

357  
MEMCACHED_PROTOCOL_ERROR_EVENT
;

360 
memˇched_¥Ÿocﬁ_evít_t
 
ªt

MEMCACHED_PROTOCOL_READ_EVENT
;

361 i‡(
˛õ¡
->
ouçut
)

362 
ªt
|
MEMCACHED_PROTOCOL_READ_EVENT
;

364  
ªt
;

365 
	}
}

	@libmemcached/protocol_handler.h

14 #i‚de‡
__LIBMEMCACHED_PROTOCOL_H__


15 
	#__LIBMEMCACHED_PROTOCOL_H__


	)

17 
	~<sys/ty≥s.h
>

18 #i‡!
deföed
(
__˝lu•lus
)

19 
	~<°dboﬁ.h
>

22 
	~<libmemˇched/∂©f‹m.h
>

23 
	~<libmemˇched/memˇched/¥Ÿocﬁ_bö¨y.h
>

24 
	~<libmemˇched/visibûôy.h
>

25 
	~<libmemˇched/¥Ÿocﬁ/ˇŒback.h
>

33 
memˇched_¥Ÿocﬁ_°
 
	tmemˇched_¥Ÿocﬁ_°
;

34 
memˇched_¥Ÿocﬁ_˛õ¡_°
 
	tmemˇched_¥Ÿocﬁ_˛õ¡_°
;

36 #ifde‡
__˝lu•lus


51 
ssize_t
 (*
	tmemˇched_¥Ÿocﬁ_ªcv_func
)(c⁄° *
	tcookõ
,

52 
	tmemˇched_sockë_t
 
	tfd
,

53 *
	tbuf
,

54 
	tsize_t
 
	tnbuf
);

67 
ssize_t
 (*
	tmemˇched_¥Ÿocﬁ_£nd_func
)(c⁄° *
	tcookõ
,

68 
	tmemˇched_sockë_t
 
	tfd
,

69 c⁄° *
	tbuf
,

70 
	tsize_t
 
	tnbuf
);

77 
LIBMEMCACHED_API


78 
memˇched_¥Ÿocﬁ_°
 *
memˇched_¥Ÿocﬁ_¸óã_ö°™˚
();

84 
LIBMEMCACHED_API


85 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
memˇched_bö¨y_¥Ÿocﬁ_gë_ˇŒbacks
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
);

92 
LIBMEMCACHED_API


93 
memˇched_bö¨y_¥Ÿocﬁ_£t_ˇŒbacks
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
memˇched_bö¨y_¥Ÿocﬁ_ˇŒback_°
 *
ˇŒback
);

103 
LIBMEMCACHED_API


104 
memˇched_bö¨y_¥Ÿocﬁ_£t_≥d™tic
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
boﬁ
 
íabÀ
);

111 
LIBMEMCACHED_API


112 
boﬁ
 
memˇched_bö¨y_¥Ÿocﬁ_gë_≥d™tic
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
);

119 
LIBMEMCACHED_API


120 
memˇched_¥Ÿocﬁ_de°roy_ö°™˚
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
);

130 
LIBMEMCACHED_API


131 
memached_¥Ÿocﬁ_£t_io_fun˘i⁄s
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
,

132 
memˇched_¥Ÿocﬁ_ªcv_func
 
ªcv
,

133 
memˇched_¥Ÿocﬁ_£nd_func
 
£nd
);

142 
LIBMEMCACHED_API


143 
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
memˇched_¥Ÿocﬁ_¸óã_˛õ¡
(
memˇched_¥Ÿocﬁ_°
 *
ö°™˚
, 
memˇched_sockë_t
 
sock
);

153 
LIBMEMCACHED_API


154 
memˇched_¥Ÿocﬁ_˛õ¡_de°roy
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
);

160 
	#MEMCACHED_PROTOCOL_ERROR_EVENT
 1

	)

164 
	#MEMCACHED_PROTOCOL_READ_EVENT
 2

	)

168 
	#MEMCACHED_PROTOCOL_WRITE_EVENT
 4

	)

172 
	#MEMCACHED_PROTOCOL_PAUSE_EVENT
 8

	)

178 
uöt32_t
 
	tmemˇched_¥Ÿocﬁ_evít_t
;

186 
LIBMEMCACHED_API


187 
memˇched_¥Ÿocﬁ_evít_t
 
memˇched_¥Ÿocﬁ_˛õ¡_w‹k
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
);

194 
LIBMEMCACHED_API


195 
memˇched_sockë_t
 
memˇched_¥Ÿocﬁ_˛õ¡_gë_sockë
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
);

202 
LIBMEMCACHED_API


203 
memˇched_¥Ÿocﬁ_˛õ¡_gë_î∫o
(
memˇched_¥Ÿocﬁ_˛õ¡_°
 *
˛õ¡
);

211 
LIBMEMCACHED_API


212 
memˇched_bö¨y_¥Ÿocﬁ_øw_ª•⁄£_h™dÀr
 
memˇched_bö¨y_¥Ÿocﬁ_gë_øw_ª•⁄£_h™dÀr
(c⁄° *
cookõ
);

214 #ifde‡
__˝lu•lus


	@libmemcached/purge.c

1 
	~"comm⁄.h
"

3 
memˇched_ªtu∫_t
 
	$memˇched_purge
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
)

5 
uöt32_t
 
x
;

6 
memˇched_ªtu∫_t
 
ªt

MEMCACHED_SUCCESS
;

7 
memˇched_°
 *
roŸ
(memˇched_° *)
±r
->root;

9 i‡(
	`memˇched_is_purgög
(
±r
->
roŸ
) ||

10 (
	`memˇched_£rvî_ª•⁄£_cou¡
(
±r
Ë<Öå->
roŸ
->
io_msg_w©îm¨k
 &&

11 
±r
->
io_byãs_£¡
 <Öå->
roŸ
->
io_byãs_w©îm¨k
) ||

12 (
±r
->
io_byãs_£¡
 >±r->
roŸ
->
io_byãs_w©îm¨k
 &&

13 
	`memˇched_£rvî_ª•⁄£_cou¡
(
±r
) < 2))

15  
MEMCACHED_SUCCESS
;

20 
	`memˇched_£t_purgög
(
roŸ
, 
åue
);

22 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 != -1);

25 i‡(
	`memˇched_io_wrôe
(
±r
, 
NULL
, 0, 
åue
) == -1)

27 
	`memˇched_£t_purgög
(
roŸ
, 
åue
);

29  
MEMCACHED_WRITE_FAILURE
;

31 
	`WATCHPOINT_ASSERT
(
±r
->
fd
 != -1);

33 
uöt32_t
 
no_msg

	`memˇched_£rvî_ª•⁄£_cou¡
(
±r
) - 1;

34 i‡(
no_msg
 > 0)

36 
memˇched_ªsu…_°
 
ªsu…
;

37 
memˇched_ªsu…_°
 *
ªsu…_±r
;

38 
buf„r
[
SMALL_STRING_LEN
];

45 c⁄° 
öt32_t
 
timeo

±r
->
roŸ
->
pﬁl_timeout
;

46 
roŸ
->
pﬁl_timeout
= 2000;

48 
ªsu…_±r

	`memˇched_ªsu…_¸óã
(
roŸ
, &
ªsu…
);

49 
	`WATCHPOINT_ASSERT
(
ªsu…_±r
);

51 
x
0; x < 
no_msg
; x++)

53 
	`memˇched_ªsu…_ª£t
(
ªsu…_±r
);

54 
memˇched_ªtu∫_t
 
rc

	`memˇched_ªad_⁄e_ª•⁄£
(
±r
, 
buf„r
,

55  (
buf„r
),

56 
ªsu…_±r
);

62 i‡(
rc
=
MEMCACHED_PROTOCOL_ERROR
 ||Ñ¯=
MEMCACHED_UNKNOWN_READ_FAILURE
)

64 
	`WATCHPOINT_ERROR
(
rc
);

65 
ªt
 = 
rc
;

66 
	`memˇched_io_ª£t
(
±r
);

69 i‡(
±r
->
roŸ
->
ˇŒbacks
 !
NULL
)

71 
memˇched_ˇŒback_°
 
cb
 = *
±r
->
roŸ
->
ˇŒbacks
;

72 i‡(
rc
 =
MEMCACHED_SUCCESS
)

74 
uöt32_t
 
y
0; y < 
cb
.
numbî_of_ˇŒback
; y++)

76 
rc
 = (*
cb
.
ˇŒback
[
y
])(
±r
->
roŸ
, 
ªsu…_±r
, cb.
c⁄ãxt
);

77 i‡(
rc
 !
MEMCACHED_SUCCESS
)

84 
	`memˇched_ªsu…_‰ì
(
ªsu…_±r
);

85 
roŸ
->
pﬁl_timeout

timeo
;

87 
	`memˇched_£t_purgög
(
roŸ
, 
Ál£
);

89  
ªt
;

90 
	}
}

	@libmemcached/quit.c

1 
	~"comm⁄.h
"

12 
	$memˇched_quô_£rvî
(
memˇched_£rvî_°
 *
±r
, 
boﬁ
 
io_dóth
)

14 i‡(
±r
->
fd
 !
INVALID_SOCKET
)

16 i‡(
io_dóth
 =
Ál£
 && 
±r
->
ty≥
 !
MEMCACHED_CONNECTION_UDP
 &&Öå->
›ti⁄s
.
is_shuâög_down
 == false)

18 
memˇched_ªtu∫_t
 
rc
;

19 
buf„r
[
MEMCACHED_MAX_BUFFER
];

21 
±r
->
›ti⁄s
.
is_shuâög_down

åue
;

23 i‡(
±r
->
roŸ
->
Êags
.
bö¨y_¥Ÿocﬁ
)

25 
¥Ÿocﬁ_bö¨y_ªque°_quô
 
ªque°
 = {.
byãs
= {0}};

26 
ªque°
.
mesßge
.
hódî
.ªque°.
magic
 = 
PROTOCOL_BINARY_REQ
;

27 
ªque°
.
mesßge
.
hódî
.ªque°.
›code
 = 
PROTOCOL_BINARY_CMD_QUIT
;

28 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥
 = 
PROTOCOL_BINARY_RAW_BYTES
;

29 
rc

	`memˇched_do
(
±r
, 
ªque°
.
byãs
, ‘eque°.byãs), 
åue
);

33 
rc

	`memˇched_do
(
±r
, "quô\r\n", ("quô\r\n"Ë-1, 
åue
);

36 
	`WATCHPOINT_ASSERT
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_FETCH_NOTFINISHED
);

37 ()
rc
;

47 i‡(
±r
->
roŸ
->
Êags
.
buf„r_ªque°s
 ||Öå->roŸ->
numbî_of_ª∂iˇs
)

49 
ssize_t
 
ƒód
;

50 
	`memˇched_io_ªad
(
±r
, 
buf„r
, (buffer)/(*buffer),

51 &
ƒód
Ë=
MEMCACHED_SUCCESS
);

62 
±r
->
£rvî_Áûuª_cou¡î
= 0;

64 
	`memˇched_io_˛o£
(
±r
);

67 
±r
->
fd

INVALID_SOCKET
;

68 
±r
->
io_byãs_£¡
= 0;

69 
±r
->
wrôe_buf„r_off£t
(
size_t
Ë(’å->
ty≥
 =
MEMCACHED_CONNECTION_UDP
Ë? 
UDP_DATAGRAM_HEADER_LENGTH
 : 0);

70 
±r
->
ªad_buf„r_Àngth
= 0;

71 
±r
->
ªad_±r
±r->
ªad_buf„r
;

72 
±r
->
›ti⁄s
.
is_shuâög_down

Ál£
;

73 
	`memˇched_£rvî_ª•⁄£_ª£t
(
±r
);

77 
±r
->
maj‹_vîsi⁄
±r->
mö‹_vîsi⁄
±r->
mi¸o_vîsi⁄

UINT8_MAX
;

79 i‡(
io_dóth
)

81 
±r
->
£rvî_Áûuª_cou¡î
++;

82 
	`£t_œ°_disc⁄√˘ed_ho°
(
±r
);

84 
	}
}

86 
	$£nd_quô
(
memˇched_°
 *
±r
)

88 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

90 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

91 
	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
x
);

93 
	`memˇched_quô_£rvî
(
ö°™˚
, 
Ál£
);

95 
	}
}

97 
	$memˇched_quô
(
memˇched_°
 *
±r
)

99 i‡(
	`öôülize_quîy
(
±r
Ë!
MEMCACHED_SUCCESS
)

104 
	`£nd_quô
(
±r
);

105 
	}
}

	@libmemcached/quit.h

12 #i‚de‡
__LIBMEMCACHED_QUIT_H__


13 
	#__LIBMEMCACHED_QUIT_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
memˇched_quô
(
memˇched_°
 *
±r
);

22 
LIBMEMCACHED_LOCAL


23 
memˇched_quô_£rvî
(
memˇched_£rvî_°
 *
±r
, 
boﬁ
 
io_dóth
);

25 
LIBMEMCACHED_LOCAL


26 
£nd_quô
(
memˇched_°
 *
±r
);

28 #ifde‡
__˝lu•lus


	@libmemcached/response.c

12 
	~"comm⁄.h
"

14 
memˇched_ªtu∫_t
 
ãxtuÆ_ªad_⁄e_ª•⁄£
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

15 *
buf„r
, 
size_t
 
buf„r_Àngth
,

16 
memˇched_ªsu…_°
 *
ªsu…
);

17 
memˇched_ªtu∫_t
 
bö¨y_ªad_⁄e_ª•⁄£
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

18 *
buf„r
, 
size_t
 
buf„r_Àngth
,

19 
memˇched_ªsu…_°
 *
ªsu…
);

21 
memˇched_ªtu∫_t
 
	$memˇched_ªad_⁄e_ª•⁄£
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

22 *
buf„r
, 
size_t
 
buf„r_Àngth
,

23 
memˇched_ªsu…_°
 *
ªsu…
)

25 
	`memˇched_£rvî_ª•⁄£_de¸emít
(
±r
);

27 i‡(
ªsu…
 =
NULL
)

29 
memˇched_°
 *
roŸ
(memˇched_° *)
±r
->root;

30 
ªsu…
 = &
roŸ
->result;

33 
memˇched_ªtu∫_t
 
rc
;

34 i‡(
±r
->
roŸ
->
Êags
.
bö¨y_¥Ÿocﬁ
)

35 
rc

	`bö¨y_ªad_⁄e_ª•⁄£
(
±r
, 
buf„r
, 
buf„r_Àngth
, 
ªsu…
);

37 
rc

	`ãxtuÆ_ªad_⁄e_ª•⁄£
(
±r
, 
buf„r
, 
buf„r_Àngth
, 
ªsu…
);

39 
	`u∆ikñy
(
rc
 =
MEMCACHED_UNKNOWN_READ_FAILURE
 ||

40 
rc
 =
MEMCACHED_PROTOCOL_ERROR
 ||

41 
rc
 =
MEMCACHED_CLIENT_ERROR
 ||

42 
rc
 =
MEMCACHED_MEMORY_ALLOCATION_FAILURE
)

43 
	`memˇched_io_ª£t
(
±r
);

45  
rc
;

46 
	}
}

48 
memˇched_ªtu∫_t
 
	$memˇched_ª•⁄£
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

49 *
buf„r
, 
size_t
 
buf„r_Àngth
,

50 
memˇched_ªsu…_°
 *
ªsu…
)

53 i‡((
±r
->
roŸ
->
Êags
.
no_block
Ë&& (
	`memˇched_is_¥o˚ssög_öput
’å->roŸË=
Ál£
))

55 ()
	`memˇched_io_wrôe
(
±r
, 
NULL
, 0, 
åue
);

63 i‡(
±r
->
roŸ
->
Êags
.
bö¨y_¥Ÿocﬁ
 =
Ál£
)

65 
	`memˇched_£rvî_ª•⁄£_cou¡
(
±r
) > 1)

67 
memˇched_ªtu∫_t
 
rc

	`memˇched_ªad_⁄e_ª•⁄£
(
±r
, 
buf„r
, 
buf„r_Àngth
, 
ªsu…
);

69 
	`u∆ikñy
 (
rc
 !
MEMCACHED_END
 &&

70 
rc
 !
MEMCACHED_STORED
 &&

71 
rc
 !
MEMCACHED_SUCCESS
 &&

72 
rc
 !
MEMCACHED_STAT
 &&

73 
rc
 !
MEMCACHED_DELETED
 &&

74 
rc
 !
MEMCACHED_NOTFOUND
 &&

75 
rc
 !
MEMCACHED_NOTSTORED
 &&

76 
rc
 !
MEMCACHED_DATA_EXISTS
)

77  
rc
;

81  
	`memˇched_ªad_⁄e_ª•⁄£
(
±r
, 
buf„r
, 
buf„r_Àngth
, 
ªsu…
);

82 
	}
}

84 
memˇched_ªtu∫_t
 
	$ãxtuÆ_vÆue_„tch
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

85 *
buf„r
,

86 
memˇched_ªsu…_°
 *
ªsu…
)

88 
memˇched_ªtu∫_t
 
rc

MEMCACHED_SUCCESS
;

89 *
°rög_±r
;

90 *
íd_±r
;

91 *
√xt_±r
;

92 
size_t
 
vÆue_Àngth
;

93 
size_t
 
to_ªad
;

94 *
vÆue_±r
;

95 
ssize_t
 
ªad_Àngth
= 0;

96 
memˇched_ªtu∫_t
 
ºc
;

98 i‡(
±r
->
roŸ
->
Êags
.
u£_udp
)

99  
MEMCACHED_NOT_SUPPORTED
;

101 
	`WATCHPOINT_ASSERT
(
±r
->
roŸ
);

102 
íd_±r

buf„r
 + 
MEMCACHED_DEFAULT_COMMAND_SIZE
;

104 
	`memˇched_ªsu…_ª£t
(
ªsu…
);

106 
°rög_±r

buf„r
;

107 
°rög_±r
+= 6;

112 *
key
;

113 
size_t
 
¥efix_Àngth
;

115 
key

ªsu…
->
ôem_key
;

116 
ªsu…
->
key_Àngth
= 0;

118 
¥efix_Àngth

	`memˇched_¨øy_size
(
±r
->
roŸ
->
¥efix_key
); !(
	`is˙ål
(*
°rög_±r
Ë|| 
	`is•a˚
(*string_ptr)) ; string_ptr++)

120 i‡(
¥efix_Àngth
 == 0)

122 *
key
*
°rög_±r
;

123 
key
++;

124 
ªsu…
->
key_Àngth
++;

127 
¥efix_Àngth
--;

129 
ªsu…
->
ôem_key
[ªsu…->
key_Àngth
]= 0;

132 i‡(
íd_±r
 =
°rög_±r
)

133 
ªad_îr‹
;

136 
°rög_±r
++;

137 i‡(
íd_±r
 =
°rög_±r
)

138 
ªad_îr‹
;

139 
√xt_±r

°rög_±r
; 
	`isdigô
(*string_ptr); string_ptr++);

140 
ªsu…
->
ôem_Êags
(
uöt32_t
Ë
	`°πoul
(
√xt_±r
, &
°rög_±r
, 10);

142 i‡(
íd_±r
 =
°rög_±r
)

143 
ªad_îr‹
;

146 
°rög_±r
++;

147 i‡(
íd_±r
 =
°rög_±r
)

148 
ªad_îr‹
;

150 
√xt_±r

°rög_±r
; 
	`isdigô
(*string_ptr); string_ptr++);

151 
vÆue_Àngth
(
size_t
)
	`°πouŒ
(
√xt_±r
, &
°rög_±r
, 10);

153 i‡(
íd_±r
 =
°rög_±r
)

154 
ªad_îr‹
;

157 i‡(*
°rög_±r
 == '\r')

160 
°rög_±r
+= 2;

164 
°rög_±r
++;

165 
√xt_±r

°rög_±r
; 
	`isdigô
(*string_ptr); string_ptr++);

166 
ªsu…
->
ôem_ˇs

	`°πouŒ
(
√xt_±r
, &
°rög_±r
, 10);

169 i‡(
íd_±r
 < 
°rög_±r
)

170 
ªad_îr‹
;

173 
rc

	`memˇched_°rög_check
(&
ªsu…
->
vÆue
, 
vÆue_Àngth
+2);

174 i‡(
rc
 !
MEMCACHED_SUCCESS
)

176 
vÆue_Àngth
= 0;

177  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

180 
vÆue_±r

	`memˇched_°rög_vÆue_muèbÀ
(&
ªsu…
->
vÆue
);

188 
to_ªad
(
vÆue_Àngth
) + 2;

189 
ºc

	`memˇched_io_ªad
(
±r
, 
vÆue_±r
, 
to_ªad
, &
ªad_Àngth
);

190 i‡(
ºc
 !
MEMCACHED_SUCCESS
)

191  
ºc
;

193 i‡(
ªad_Àngth
 !(
ssize_t
)(
vÆue_Àngth
 + 2))

195 
ªad_îr‹
;

200 *
ch¨_±r
;

201 
ch¨_±r

	`memˇched_°rög_vÆue_muèbÀ
(&
ªsu…
->
vÆue
);;

202 
ch¨_±r
[
vÆue_Àngth
]= 0;

203 
ch¨_±r
[
vÆue_Àngth
 + 1]= 0;

204 
	`memˇched_°rög_£t_Àngth
(&
ªsu…
->
vÆue
, 
vÆue_Àngth
);

207  
MEMCACHED_SUCCESS
;

209 
ªad_îr‹
:

210 
	`memˇched_io_ª£t
(
±r
);

212  
MEMCACHED_PARTIAL_READ
;

213 
	}
}

215 
memˇched_ªtu∫_t
 
	$ãxtuÆ_ªad_⁄e_ª•⁄£
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

216 *
buf„r
, 
size_t
 
buf„r_Àngth
,

217 
memˇched_ªsu…_°
 *
ªsu…
)

219 
memˇched_ªtu∫_t
 
rc

	`memˇched_io_ªadlöe
(
±r
, 
buf„r
, 
buf„r_Àngth
);

220 i‡(
rc
 !
MEMCACHED_SUCCESS
)

221  
rc
;

223 
buf„r
[0])

226 i‡(
buf„r
[1] == 'A')

229 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
±r
);

230  
	`ãxtuÆ_vÆue_„tch
(
±r
, 
buf„r
, 
ªsu…
);

232 i‡(
buf„r
[1] == 'E')

234  
MEMCACHED_SUCCESS
;

238 
	`WATCHPOINT_STRING
(
buf„r
);

239  
MEMCACHED_UNKNOWN_READ_FAILURE
;

242  
MEMCACHED_SUCCESS
;

245 i‡(
buf„r
[2] == 'A')

247 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
±r
);

248  
MEMCACHED_STAT
;

250 i‡(
buf„r
[1] == 'E')

252 *
ªl_±r
;

253 *
°¨çå

buf„r
 + 13, *
íd±r
= startptr;

255 *
íd±r
 != '\r' && *endptr != '\n')Éndptr++;

263 
ªl_±r
(*)
	`libmemˇched_ªÆloc
(
±r
->
roŸ
,

264 
±r
->
ˇched_£rvî_îr‹
,

265 (
size_t
Ë(
íd±r
 - 
°¨çå
 + 1));

267 i‡(
ªl_±r
 =
NULL
)

270 i‡(
±r
->
ˇched_£rvî_îr‹
)

271 
±r
->
ˇched_£rvî_îr‹
[0]= 0;

272  
MEMCACHED_SERVER_ERROR
;

274 
±r
->
ˇched_£rvî_îr‹

ªl_±r
;

276 
	`mem˝y
(
±r
->
ˇched_£rvî_îr‹
, 
°¨çå
, (
size_t
Ë(
íd±r
 - startptr));

277 
±r
->
ˇched_£rvî_îr‹
[
íd±r
 - 
°¨çå
]= 0;

278  
MEMCACHED_SERVER_ERROR
;

280 i‡(
buf„r
[1] == 'T')

281  
MEMCACHED_STORED
;

284 
	`WATCHPOINT_STRING
(
buf„r
);

285  
MEMCACHED_UNKNOWN_READ_FAILURE
;

289  
MEMCACHED_DELETED
;

292 i‡(
buf„r
[4] == 'F')

293  
MEMCACHED_NOTFOUND
;

294 i‡(
buf„r
[4] == 'S')

295  
MEMCACHED_NOTSTORED
;

298 
	`WATCHPOINT_STRING
(
buf„r
);

299  
MEMCACHED_UNKNOWN_READ_FAILURE
;

304 i‡(
buf„r
[1] == 'N')

305  
MEMCACHED_END
;

306 i‡(
buf„r
[1] == 'R')

307  
MEMCACHED_PROTOCOL_ERROR
;

308 i‡(
buf„r
[1] == 'X')

309  
MEMCACHED_DATA_EXISTS
;

312 
	`WATCHPOINT_STRING
(
buf„r
);

313  
MEMCACHED_UNKNOWN_READ_FAILURE
;

319 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
±r
);

320  
MEMCACHED_ITEM
;

322  
MEMCACHED_CLIENT_ERROR
;

325 
auto_ªtu∫_vÆue
;

327 i‡(
	`ssˇnf
(
buf„r
, "%Œu", &
auto_ªtu∫_vÆue
) == 1)

328  
MEMCACHED_SUCCESS
;

330 
	`WATCHPOINT_STRING
(
buf„r
);

331  
MEMCACHED_UNKNOWN_READ_FAILURE
;

336 
	}
}

338 
memˇched_ªtu∫_t
 
	$bö¨y_ªad_⁄e_ª•⁄£
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

339 *
buf„r
, 
size_t
 
buf„r_Àngth
,

340 
memˇched_ªsu…_°
 *
ªsu…
)

342 
memˇched_ªtu∫_t
 
rc
;

343 
¥Ÿocﬁ_bö¨y_ª•⁄£_hódî
 
hódî
;

345 i‡((
rc

	`memˇched_ß„_ªad
(
±r
, &
hódî
.
byãs
, (hódî.byãs))Ë!
MEMCACHED_SUCCESS
)

347 
	`WATCHPOINT_ERROR
(
rc
);

348  
rc
;

351 i‡(
hódî
.
ª•⁄£
.
magic
 !
PROTOCOL_BINARY_RES
)

353  
MEMCACHED_PROTOCOL_ERROR
;

359 
hódî
.
ª•⁄£
.
keyÀn

	`¡ohs
(header.response.keylen);

360 
hódî
.
ª•⁄£
.
°©us

	`¡ohs
(header.response.status);

361 
hódî
.
ª•⁄£
.
bodyÀn

	`¡ohl
(header.response.bodylen);

362 
hódî
.
ª•⁄£
.
ˇs

	`¡ohŒ
(header.response.cas);

363 
uöt32_t
 
bodyÀn

hódî
.
ª•⁄£
.bodylen;

365 i‡(
hódî
.
ª•⁄£
.
°©us
 =
PROTOCOL_BINARY_RESPONSE_SUCCESS
 ||

366 
hódî
.
ª•⁄£
.
°©us
 =
PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE
)

368 
hódî
.
ª•⁄£
.
›code
)

370 
PROTOCOL_BINARY_CMD_GETKQ
:

375 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
±r
);

377 
PROTOCOL_BINARY_CMD_GETK
:

379 
uöt16_t
 
keyÀn

hódî
.
ª•⁄£
.keylen;

380 
	`memˇched_ªsu…_ª£t
(
ªsu…
);

381 
ªsu…
->
ôem_ˇs

hódî
.
ª•⁄£
.
ˇs
;

383 i‡((
rc

	`memˇched_ß„_ªad
(
±r
, &
ªsu…
->
ôem_Êags
,  (ªsu…->ôem_Êags))Ë!
MEMCACHED_SUCCESS
)

385 
	`WATCHPOINT_ERROR
(
rc
);

386  
MEMCACHED_UNKNOWN_READ_FAILURE
;

389 
ªsu…
->
ôem_Êags

	`¡ohl
(result->item_flags);

390 
bodyÀn
 -
hódî
.
ª•⁄£
.
exéí
;

392 
ªsu…
->
key_Àngth

keyÀn
;

393 i‡((
rc

	`memˇched_ß„_ªad
(
±r
, 
ªsu…
->
ôem_key
, 
keyÀn
)Ë!
MEMCACHED_SUCCESS
)

395 
	`WATCHPOINT_ERROR
(
rc
);

396  
MEMCACHED_UNKNOWN_READ_FAILURE
;

399 
bodyÀn
 -
keyÀn
;

400 i‡(
	`memˇched_°rög_check
(&
ªsu…
->
vÆue
,

401 
bodyÀn
Ë!
MEMCACHED_SUCCESS
)

402  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

404 *
v±r

	`memˇched_°rög_vÆue_muèbÀ
(&
ªsu…
->
vÆue
);

405 i‡((
rc

	`memˇched_ß„_ªad
(
±r
, 
v±r
, 
bodyÀn
)Ë!
MEMCACHED_SUCCESS
)

407 
	`WATCHPOINT_ERROR
(
rc
);

408  
MEMCACHED_UNKNOWN_READ_FAILURE
;

411 
	`memˇched_°rög_£t_Àngth
(&
ªsu…
->
vÆue
, 
bodyÀn
);

414 
PROTOCOL_BINARY_CMD_INCREMENT
:

415 
PROTOCOL_BINARY_CMD_DECREMENT
:

417 i‡(
bodyÀn
 !(
uöt64_t
Ë|| 
buf„r_Àngth
 != (uint64_t))

418  
MEMCACHED_PROTOCOL_ERROR
;

420 
	`WATCHPOINT_ASSERT
(
bodyÀn
 =
buf„r_Àngth
);

421 
uöt64_t
 
vÆ
;

422 i‡((
rc

	`memˇched_ß„_ªad
(
±r
, &
vÆ
, (vÆ))Ë!
MEMCACHED_SUCCESS
)

424 
	`WATCHPOINT_ERROR
(
rc
);

425  
MEMCACHED_UNKNOWN_READ_FAILURE
;

428 
vÆ

	`¡ohŒ
(val);

429 
	`mem˝y
(
buf„r
, &
vÆ
, (val));

432 
PROTOCOL_BINARY_CMD_SASL_LIST_MECHS
:

433 
PROTOCOL_BINARY_CMD_VERSION
:

435 
	`mem£t
(
buf„r
, 0, 
buf„r_Àngth
);

436 i‡(
bodyÀn
 >
buf„r_Àngth
)

439  
MEMCACHED_UNKNOWN_READ_FAILURE
;

441 i‡((
rc

	`memˇched_ß„_ªad
(
±r
, 
buf„r
, 
bodyÀn
)Ë!
MEMCACHED_SUCCESS
)

443 
	`WATCHPOINT_ERROR
(
rc
);

444  
MEMCACHED_UNKNOWN_READ_FAILURE
;

448 
PROTOCOL_BINARY_CMD_FLUSH
:

449 
PROTOCOL_BINARY_CMD_QUIT
:

450 
PROTOCOL_BINARY_CMD_SET
:

451 
PROTOCOL_BINARY_CMD_ADD
:

452 
PROTOCOL_BINARY_CMD_REPLACE
:

453 
PROTOCOL_BINARY_CMD_APPEND
:

454 
PROTOCOL_BINARY_CMD_PREPEND
:

455 
PROTOCOL_BINARY_CMD_DELETE
:

457 
	`WATCHPOINT_ASSERT
(
bodyÀn
 == 0);

458  
MEMCACHED_SUCCESS
;

460 
PROTOCOL_BINARY_CMD_NOOP
:

462 
	`WATCHPOINT_ASSERT
(
bodyÀn
 == 0);

463  
MEMCACHED_END
;

465 
PROTOCOL_BINARY_CMD_STAT
:

467 i‡(
bodyÀn
 == 0)

469  
MEMCACHED_END
;

471 i‡(
bodyÀn
 + 1 > 
buf„r_Àngth
)

474  
MEMCACHED_UNKNOWN_READ_FAILURE
;

478 
size_t
 
keyÀn

hódî
.
ª•⁄£
.keylen;

479 
	`mem£t
(
buf„r
, 0, 
buf„r_Àngth
);

480 i‡((
rc

	`memˇched_ß„_ªad
(
±r
, 
buf„r
, 
keyÀn
)Ë!
MEMCACHED_SUCCESS
 ||

481 (
rc

	`memˇched_ß„_ªad
(
±r
, 
buf„r
 + 
keyÀn
 + 1, 
bodyÀn
 - keyÀn)Ë!
MEMCACHED_SUCCESS
)

483 
	`WATCHPOINT_ERROR
(
rc
);

484  
MEMCACHED_UNKNOWN_READ_FAILURE
;

490 
PROTOCOL_BINARY_CMD_SASL_AUTH
:

491 
PROTOCOL_BINARY_CMD_SASL_STEP
:

493 
	`memˇched_ªsu…_ª£t
(
ªsu…
);

494 
ªsu…
->
ôem_ˇs

hódî
.
ª•⁄£
.
ˇs
;

496 i‡(
	`memˇched_°rög_check
(&
ªsu…
->
vÆue
,

497 
bodyÀn
Ë!
MEMCACHED_SUCCESS
)

498  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

500 *
v±r

	`memˇched_°rög_vÆue_muèbÀ
(&
ªsu…
->
vÆue
);

501 i‡((
rc

	`memˇched_ß„_ªad
(
±r
, 
v±r
, 
bodyÀn
)Ë!
MEMCACHED_SUCCESS
)

503 
	`WATCHPOINT_ERROR
(
rc
);

504  
MEMCACHED_UNKNOWN_READ_FAILURE
;

507 
	`memˇched_°rög_£t_Àngth
(&
ªsu…
->
vÆue
, 
bodyÀn
);

513 
	`WATCHPOINT_ASSERT
(0);

514  
MEMCACHED_PROTOCOL_ERROR
;

518 i‡(
hódî
.
ª•⁄£
.
bodyÀn
)

521 
hﬁe
[
SMALL_STRING_LEN
];

522 
bodyÀn
 > 0)

524 
size_t
 
ƒ
(
bodyÀn
 > 
SMALL_STRING_LEN
) ? SMALL_STRING_LEN : bodylen;

525 i‡((
rc

	`memˇched_ß„_ªad
(
±r
, 
hﬁe
, 
ƒ
)Ë!
MEMCACHED_SUCCESS
)

527 
	`WATCHPOINT_ERROR
(
rc
);

528  
MEMCACHED_UNKNOWN_READ_FAILURE
;

530 
bodyÀn
-(
uöt32_t
Ë
ƒ
;

537 
hódî
.
ª•⁄£
.
›code
)

539 
PROTOCOL_BINARY_CMD_SETQ
:

540 
PROTOCOL_BINARY_CMD_ADDQ
:

541 
PROTOCOL_BINARY_CMD_REPLACEQ
:

542 
PROTOCOL_BINARY_CMD_APPENDQ
:

543 
PROTOCOL_BINARY_CMD_PREPENDQ
:

544  
	`bö¨y_ªad_⁄e_ª•⁄£
(
±r
, 
buf„r
, 
buf„r_Àngth
, 
ªsu…
);

550 
rc

MEMCACHED_SUCCESS
;

551 
	`u∆ikñy
(
hódî
.
ª•⁄£
.
°©us
 != 0)

552 
hódî
.
ª•⁄£
.
°©us
)

554 
PROTOCOL_BINARY_RESPONSE_KEY_ENOENT
:

555 
rc

MEMCACHED_NOTFOUND
;

557 
PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS
:

558 
rc

MEMCACHED_DATA_EXISTS
;

560 
PROTOCOL_BINARY_RESPONSE_NOT_STORED
:

561 
rc

MEMCACHED_NOTSTORED
;

563 
PROTOCOL_BINARY_RESPONSE_E2BIG
:

564 
rc

MEMCACHED_E2BIG
;

566 
PROTOCOL_BINARY_RESPONSE_ENOMEM
:

567 
rc

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

569 
PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE
:

570 
rc

MEMCACHED_AUTH_CONTINUE
;

572 
PROTOCOL_BINARY_RESPONSE_AUTH_ERROR
:

573 
rc

MEMCACHED_AUTH_FAILURE
;

575 
PROTOCOL_BINARY_RESPONSE_EINVAL
:

576 
PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND
:

579 
rc

MEMCACHED_PROTOCOL_ERROR
;

583  
rc
;

584 
	}
}

	@libmemcached/response.h

12 #i‚de‡
__LIBMEMCACHED_RESPONSE_H__


13 
	#__LIBMEMCACHED_RESPONSE_H__


	)

15 #ifde‡
__˝lu•lus


20 
LIBMEMCACHED_LOCAL


21 
memˇched_ªtu∫_t
 
memˇched_ªad_⁄e_ª•⁄£
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

22 *
buf„r
, 
size_t
 
buf„r_Àngth
,

23 
memˇched_ªsu…_°
 *
ªsu…
);

25 
LIBMEMCACHED_LOCAL


26 
memˇched_ªtu∫_t
 
memˇched_ª•⁄£
(
memˇched_£rvî_wrôe_ö°™˚_°
 
±r
,

27 *
buf„r
, 
size_t
 
buf„r_Àngth
,

28 
memˇched_ªsu…_°
 *
ªsu…
);

30 #ifde‡
__˝lu•lus


	@libmemcached/result.c

18 
	~"comm⁄.h
"

20 
ölöe
 
	$_ªsu…_öô
(
memˇched_ªsu…_°
 *
£lf
,

21 
memˇched_°
 *
memc
)

23 
£lf
->
ôem_Êags
= 0;

24 
£lf
->
ôem_expú©i⁄
= 0;

25 
£lf
->
key_Àngth
= 0;

26 
£lf
->
ôem_ˇs
= 0;

27 
£lf
->
roŸ

memc
;

28 
£lf
->
ôem_key
[0]= 0;

29 
	}
}

31 
memˇched_ªsu…_°
 *
	$memˇched_ªsu…_¸óã
(c⁄° 
memˇched_°
 *
memc
,

32 
memˇched_ªsu…_°
 *
±r
)

34 
	`WATCHPOINT_ASSERT
(
memc
);

37 i‡(
±r
)

39 
±r
->
›ti⁄s
.
is_Æloˇãd

Ál£
;

43 
±r

	`libmemˇched_mÆloc
(
memc
, (
memˇched_ªsu…_°
));

45 i‡(
±r
 =
NULL
)

46  
NULL
;

48 
±r
->
›ti⁄s
.
is_Æloˇãd

åue
;

51 
±r
->
›ti⁄s
.
is_öôülized

åue
;

53 
	`_ªsu…_öô
(
±r
, (
memˇched_°
 *)
memc
);

55 
	`WATCHPOINT_SET
(
±r
->
vÆue
.
›ti⁄s
.
is_öôülized

Ál£
);

56 
	`memˇched_°rög_¸óã
(
memc
, &
±r
->
vÆue
, 0);

57 
	`WATCHPOINT_ASSERT_INITIALIZED
(&
±r
->
vÆue
);

58 
	`WATCHPOINT_ASSERT
(
±r
->
vÆue
.
°rög
 =
NULL
);

60  
±r
;

61 
	}
}

63 
	$memˇched_ªsu…_ª£t
(
memˇched_ªsu…_°
 *
±r
)

65 
±r
->
key_Àngth
= 0;

66 
	`memˇched_°rög_ª£t
(&
±r
->
vÆue
);

67 
±r
->
ôem_Êags
= 0;

68 
±r
->
ôem_ˇs
= 0;

69 
±r
->
ôem_expú©i⁄
= 0;

70 
	}
}

72 
	$memˇched_ªsu…_‰ì
(
memˇched_ªsu…_°
 *
±r
)

74 i‡(
±r
 =
NULL
)

77 
	`memˇched_°rög_‰ì
(&
±r
->
vÆue
);

79 i‡(
	`memˇched_is_Æloˇãd
(
±r
))

81 
	`WATCHPOINT_ASSERT
(
±r
->
roŸ
);

82 
	`libmemˇched_‰ì
(
±r
->
roŸ
,Ötr);

86 
±r
->
›ti⁄s
.
is_öôülized

Ál£
;

88 
	}
}

90 
memˇched_ªtu∫_t
 
	$memˇched_ªsu…_£t_vÆue
(
memˇched_ªsu…_°
 *
±r
,

91 c⁄° *
vÆue
,

92 
size_t
 
Àngth
)

94 
memˇched_ªtu∫_t
 
rc

	`memˇched_°rög_≠≥nd
(&
±r
->
vÆue
, vÆue, 
Àngth
);

96 i‡(
rc
 =
MEMCACHED_MEMORY_ALLOCATION_FAILURE
)

98 
	`memˇched_£t_î∫o
(
±r
->
roŸ
, 
î∫o
, 
NULL
);

101  
rc
;

102 
	}
}

104 c⁄° *
	$memˇched_ªsu…_key_vÆue
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

106  
£lf
->
key_Àngth
 ? sñf->
ôem_key
 : 
NULL
;

107 
	}
}

109 
size_t
 
	$memˇched_ªsu…_key_Àngth
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

111  
£lf
->
key_Àngth
;

112 
	}
}

114 c⁄° *
	$memˇched_ªsu…_vÆue
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

116 c⁄° 
memˇched_°rög_°
 *
•å
&
£lf
->
vÆue
;

117  
	`memˇched_°rög_vÆue
(
•å
);

118 
	}
}

120 
size_t
 
	$memˇched_ªsu…_Àngth
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

122 c⁄° 
memˇched_°rög_°
 *
•å
&
£lf
->
vÆue
;

123  
	`memˇched_°rög_Àngth
(
•å
);

124 
	}
}

126 
uöt32_t
 
	$memˇched_ªsu…_Êags
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

128  
£lf
->
ôem_Êags
;

129 
	}
}

131 
uöt64_t
 
	$memˇched_ªsu…_ˇs
(c⁄° 
memˇched_ªsu…_°
 *
£lf
)

133  
£lf
->
ôem_ˇs
;

134 
	}
}

136 
	$memˇched_ªsu…_£t_Êags
(
memˇched_ªsu…_°
 *
£lf
, 
uöt32_t
 
Êags
)

138 
£lf
->
ôem_Êags

Êags
;

139 
	}
}

141 
	$memˇched_ªsu…_£t_expú©i⁄
(
memˇched_ªsu…_°
 *
£lf
, 
time_t
 
expú©i⁄
)

143 
£lf
->
ôem_expú©i⁄

expú©i⁄
;

144 
	}
}

	@libmemcached/result.h

12 #i‚de‡
__LIBMEMCACHED_RESULT_H__


13 
	#__LIBMEMCACHED_RESULT_H__


	)

15 
	smemˇched_ªsu…_°
 {

16 
uöt32_t
 
	môem_Êags
;

17 
time_t
 
	môem_expú©i⁄
;

18 
size_t
 
	mkey_Àngth
;

19 
uöt64_t
 
	môem_ˇs
;

20 
memˇched_°
 *
	mroŸ
;

21 
memˇched_°rög_°
 
	mvÆue
;

22 
	môem_key
[
MEMCACHED_MAX_KEY
];

24 
boﬁ
 
	mis_Æloˇãd
:1;

25 
boﬁ
 
	mis_öôülized
:1;

26 } 
	m›ti⁄s
;

30 #ifde‡
__˝lu•lus


35 
LIBMEMCACHED_API


36 
memˇched_ªsu…_‰ì
(
memˇched_ªsu…_°
 *
ªsu…
);

38 
LIBMEMCACHED_API


39 
memˇched_ªsu…_ª£t
(
memˇched_ªsu…_°
 *
±r
);

41 
LIBMEMCACHED_API


42 
memˇched_ªsu…_°
 *
memˇched_ªsu…_¸óã
(c⁄° 
memˇched_°
 *
±r
,

43 
memˇched_ªsu…_°
 *
ªsu…
);

45 
LIBMEMCACHED_API


46 c⁄° *
memˇched_ªsu…_key_vÆue
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

48 
LIBMEMCACHED_API


49 
size_t
 
memˇched_ªsu…_key_Àngth
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

51 
LIBMEMCACHED_API


52 c⁄° *
memˇched_ªsu…_vÆue
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

54 
LIBMEMCACHED_API


55 
size_t
 
memˇched_ªsu…_Àngth
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

57 
LIBMEMCACHED_API


58 
uöt32_t
 
memˇched_ªsu…_Êags
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

60 
LIBMEMCACHED_API


61 
uöt64_t
 
memˇched_ªsu…_ˇs
(c⁄° 
memˇched_ªsu…_°
 *
£lf
);

63 
LIBMEMCACHED_API


64 
memˇched_ªtu∫_t
 
memˇched_ªsu…_£t_vÆue
(
memˇched_ªsu…_°
 *
±r
, c⁄° *
vÆue
, 
size_t
 
Àngth
);

66 
LIBMEMCACHED_API


67 
memˇched_ªsu…_£t_Êags
(
memˇched_ªsu…_°
 *
£lf
, 
uöt32_t
 
Êags
);

69 
LIBMEMCACHED_API


70 
memˇched_ªsu…_£t_expú©i⁄
(
memˇched_ªsu…_°
 *
£lf
, 
time_t
 
expú©i⁄
);

72 #ifde‡
__˝lu•lus


	@libmemcached/sasl.c

12 
	~"comm⁄.h
"

14 
	$memˇched_£t_ß¶_ˇŒbacks
(
memˇched_°
 *
±r
,

15 c⁄° 
ß¶_ˇŒback_t
 *
ˇŒbacks
)

17 
±r
->
ß¶
.
ˇŒbacks
= callbacks;

18 
±r
->
ß¶
.
is_Æloˇãd

Ál£
;

19 
	}
}

21 c⁄° 
ß¶_ˇŒback_t
 *
	$memˇched_gë_ß¶_ˇŒbacks
(
memˇched_°
 *
±r
)

23  
±r
->
ß¶
.
ˇŒbacks
;

24 
	}
}

33 
boﬁ
 
	$ªsﬁve_«mes
(
fd
, *
œddr
, 
size_t
 
œddr_Àngth
, *
øddr
, size_à
øddr_Àngth
)

35 
ho°
[
NI_MAXHOST
];

36 
p‹t
[
NI_MAXSERV
];

37 
sockaddr_°‹age
 
ßddr
;

38 
sockÀn_t
 
ßÀn
(
ßddr
);

40 i‡((
	`gësock«me
(
fd
, (
sockaddr
 *)&
ßddr
, &
ßÀn
) < 0) ||

41 (
	`gë«meöfo
((
sockaddr
 *)&
ßddr
, 
ßÀn
, 
ho°
, (host),

42 
p‹t
, ’‹t), 
NI_NUMERICHOST
 | 
NI_NUMERICSERV
) < 0))

44  
Ál£
;

47 ()
	`¢¥ötf
(
œddr
, 
œddr_Àngth
, "%s;%s", 
ho°
, 
p‹t
);

48 
ßÀn
(
ßddr
);

50 i‡((
	`gë≥î«me
(
fd
, (
sockaddr
 *)&
ßddr
, &
ßÀn
) < 0) ||

51 (
	`gë«meöfo
((
sockaddr
 *)&
ßddr
, 
ßÀn
, 
ho°
, (host),

52 
p‹t
, ’‹t), 
NI_NUMERICHOST
 | 
NI_NUMERICSERV
) < 0))

54  
Ál£
;

57 ()
	`¢¥ötf
(
øddr
, 
øddr_Àngth
, "%s;%s", 
ho°
, 
p‹t
);

59  
åue
;

60 
	}
}

62 
memˇched_ªtu∫_t
 
	$memˇched_ß¶_authítiˇã_c⁄√˘i⁄
(
memˇched_£rvî_°
 *
£rvî
)

64 
memˇched_ªtu∫_t
 
rc
;

67 
	`u∆ikñy
 (!
£rvî
->
roŸ
->
Êags
.
bö¨y_¥Ÿocﬁ
)

68  
MEMCACHED_FAILURE
;

74 
¥Ÿocﬁ_bö¨y_ªque°_no_exåas
 
ªque°
= {

75 .
mesßge
.
hódî
.
ªque°
= {

76 .
magic

PROTOCOL_BINARY_REQ
,

77 .
›code

PROTOCOL_BINARY_CMD_SASL_LIST_MECHS


81 i‡(
	`memˇched_io_wrôe
(
£rvî
, 
ªque°
.
byãs
,

82 (
ªque°
.
byãs
), 1) != (request.bytes))

84  
MEMCACHED_WRITE_FAILURE
;

87 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
£rvî
);

89 
mech
[
MEMCACHED_MAX_BUFFER
];

90 
rc

	`memˇched_ª•⁄£
(
£rvî
, 
mech
, (mech), 
NULL
);

91 i‡(
rc
 !
MEMCACHED_SUCCESS
)

93 i‡(
rc
 =
MEMCACHED_PROTOCOL_ERROR
)

101 
rc

MEMCACHED_SUCCESS
;

104  
rc
;

108 
œddr
[
NI_MAXHOST
 + 
NI_MAXSERV
];

109 
øddr
[
NI_MAXHOST
 + 
NI_MAXSERV
];

111 
	`u∆ikñy
 (!
	`ªsﬁve_«mes
(
£rvî
->
fd
, 
œddr
, ÷addr), 
øddr
, (raddr)))

113 
£rvî
->
ˇched_î∫o

î∫o
;

114  
MEMCACHED_ERRNO
;

117 
ß¶_c⁄n_t
 *
c⁄n
;

118 
ªt

	`ß¶_˛õ¡_√w
("memˇched", 
£rvî
->
ho°«me
, 
œddr
, 
øddr
,

119 
£rvî
->
roŸ
->
ß¶
.
ˇŒbacks
, 0, &
c⁄n
);

120 i‡(
ªt
 !
SASL_OK
)

122  
MEMCACHED_AUTH_PROBLEM
;

125 c⁄° *
d©a
;

126 c⁄° *
cho£nmech
;

127 
Àn
;

128 
ªt

	`ß¶_˛õ¡_°¨t
(
c⁄n
, 
mech
, 
NULL
, &
d©a
, &
Àn
, &
cho£nmech
);

130 i‡(
ªt
 !
SASL_OK
 &&Ñë !
SASL_CONTINUE
)

132 
rc

MEMCACHED_AUTH_PROBLEM
;

133 
íd
;

136 
uöt16_t
 
keyÀn
(uöt16_t)
	`°æí
(
cho£nmech
);

137 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_SASL_AUTH
;

138 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
(keylen);

139 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
(
Àn
 + 
keyÀn
);

144 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

146 { .
Àngth
(
ªque°
.
byãs
), .
buf„r
=Ñequest.bytes },

147 { .
Àngth

keyÀn
, .
buf„r

cho£nmech
 },

148 { .
Àngth

Àn
, .
buf„r

d©a
 }

151 i‡(
	`memˇched_io_wrôev
(
£rvî
, 
ve˘‹
, 3, 
åue
) == -1)

153 
rc

MEMCACHED_WRITE_FAILURE
;

154 
íd
;

156 
	`memˇched_£rvî_ª•⁄£_ö¸emít
(
£rvî
);

159 
rc

	`memˇched_ª•⁄£
(
£rvî
, 
NULL
, 0, NULL);

160 i‡(
rc
 !
MEMCACHED_AUTH_CONTINUE
)

162 
íd
;

165 
ªt

	`ß¶_˛õ¡_°ï
(
c⁄n
, 
	`memˇched_ªsu…_vÆue
(&
£rvî
->
roŸ
->
ªsu…
),

166 ()
	`memˇched_ªsu…_Àngth
(&
£rvî
->
roŸ
->
ªsu…
),

167 
NULL
, &
d©a
, &
Àn
);

169 i‡(
ªt
 !
SASL_OK
 &&Ñë !
SASL_CONTINUE
)

171 
rc

MEMCACHED_AUTH_PROBLEM
;

172 
íd
;

175 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_SASL_STEP
;

176 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
(
Àn
 + 
keyÀn
);

177 } 
åue
);

179 
íd
:

181 
	`ß¶_di•o£
(&
c⁄n
);

183  
rc
;

184 
	}
}

186 
	$gë_u£∫ame
(*
c⁄ãxt
, 
id
, c⁄° **
ªsu…
,

187 *
Àn
)

189 i‡(!
c⁄ãxt
 || !
ªsu…
 || (
id
 !
SASL_CB_USER
 && id !
SASL_CB_AUTHNAME
))

191  
SASL_BADPARAM
;

194 *
ªsu…

c⁄ãxt
;

195 i‡(
Àn
)

197 *
Àn
()
	`°æí
(*
ªsu…
);

200  
SASL_OK
;

201 
	}
}

203 
	$gë_∑ssw‹d
(
ß¶_c⁄n_t
 *
c⁄n
, *
c⁄ãxt
, 
id
,

204 
ß¶_£¸ë_t
 **
p£¸ë
)

206 i‡(!
c⁄n
 || ! 
p£¸ë
 || 
id
 !
SASL_CB_PASS
)

208  
SASL_BADPARAM
;

211 *
p£¸ë

c⁄ãxt
;

213  
SASL_OK
;

214 
	}
}

216 
memˇched_ªtu∫_t
 
	$memˇched_£t_ß¶_auth_d©a
(
memˇched_°
 *
±r
,

217 c⁄° *
u£∫ame
,

218 c⁄° *
∑ssw‹d
)

220 i‡(
±r
 =
NULL
 || 
u£∫ame
 == NULL ||

221 
∑ssw‹d
 =
NULL
 || 
±r
->
ß¶
.
ˇŒbacks
 != NULL)

223  
MEMCACHED_FAILURE
;

226 
ß¶_ˇŒback_t
 *
cb

	`libmemˇched_ˇŒoc
(
±r
, 4, (sasl_callback_t));

227 *
«me

	`libmemˇched_mÆloc
(
±r
, 
	`°æí
(
u£∫ame
) + 1);

228 
size_t
 
∑ssw‹d_Àngth

	`°æí
(
∑ssw‹d
);

229 
ß¶_£¸ë_t
 *
£¸ë

	`libmemˇched_mÆloc
(
±r
, 
∑ssw‹d_Àngth
 +1 + (*secret));

230 i‡(
cb
 =
NULL
 || 
«me
 =NULL || 
£¸ë
 == NULL)

232 
	`libmemˇched_‰ì
(
±r
, 
cb
);

233 
	`libmemˇched_‰ì
(
±r
, 
«me
);

234 
	`libmemˇched_‰ì
(
±r
, 
£¸ë
);

235  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

238 
£¸ë
->
Àn

	`°æí
(
∑ssw‹d
);

239 
	`mem˝y
(
£¸ë
->
d©a
, 
∑ssw‹d
, 
∑ssw‹d_Àngth
);

240 
£¸ë
->
d©a
[
∑ssw‹d_Àngth
]= 0;

242 
cb
[0].
id

SASL_CB_USER
;

243 
cb
[0].
¥oc

gë_u£∫ame
;

244 
cb
[0].
c⁄ãxt

	`°∫˝y
(
«me
, 
u£∫ame
, (cb[0].context));

245 
cb
[1].
id

SASL_CB_AUTHNAME
;

246 
cb
[1].
¥oc

gë_u£∫ame
;

247 
cb
[1].
c⁄ãxt

«me
;

248 
cb
[2].
id

SASL_CB_PASS
;

249 
cb
[2].
¥oc

gë_∑ssw‹d
;

250 
cb
[2].
c⁄ãxt

£¸ë
;

251 
cb
[3].
id

SASL_CB_LIST_END
;

253 
±r
->
ß¶
.
ˇŒbacks

cb
;

254 
±r
->
ß¶
.
is_Æloˇãd

åue
;

256  
MEMCACHED_SUCCESS
;

257 
	}
}

259 
memˇched_ªtu∫_t
 
	$memˇched_de°roy_ß¶_auth_d©a
(
memˇched_°
 *
±r
)

261 i‡(
±r
 =
NULL
 ||Öå->
ß¶
.
ˇŒbacks
 == NULL)

263  
MEMCACHED_FAILURE
;

266 i‡(
±r
->
ß¶
.
is_Æloˇãd
)

268 
	`libmemˇched_‰ì
(
±r
,Öå->
ß¶
.
ˇŒbacks
[0].
c⁄ãxt
);

269 
	`libmemˇched_‰ì
(
±r
,Öå->
ß¶
.
ˇŒbacks
[2].
c⁄ãxt
);

270 
	`libmemˇched_‰ì
(
±r
, (*Ìå->
ß¶
.
ˇŒbacks
);

271 
±r
->
ß¶
.
is_Æloˇãd

Ál£
;

274 
±r
->
ß¶
.
ˇŒbacks

NULL
;

276  
MEMCACHED_SUCCESS
;

277 
	}
}

279 
memˇched_ªtu∫_t
 
	$memˇched_˛⁄e_ß¶
(
memˇched_°
 *
˛⁄e
, c⁄° memˇched_° *
sour˚
)

282 i‡(
sour˚
->
ß¶
.
ˇŒbacks
 =
NULL
)

284  
MEMCACHED_SUCCESS
;

288 i‡(
sour˚
->
ß¶
.
ˇŒbacks
[0].
id
 =
SASL_CB_USER
 &&

289 
sour˚
->
ß¶
.
ˇŒbacks
[0].
¥oc
 =
gë_u£∫ame
 &&

290 
sour˚
->
ß¶
.
ˇŒbacks
[1].
id
 =
SASL_CB_AUTHNAME
 &&

291 
sour˚
->
ß¶
.
ˇŒbacks
[1].
¥oc
 =
gë_u£∫ame
 &&

292 
sour˚
->
ß¶
.
ˇŒbacks
[2].
id
 =
SASL_CB_PASS
 &&

293 
sour˚
->
ß¶
.
ˇŒbacks
[2].
¥oc
 =
gë_∑ssw‹d
 &&

294 
sour˚
->
ß¶
.
ˇŒbacks
[3].
id
 =
SASL_CB_LIST_END
)

296 
ß¶_£¸ë_t
 *
£¸ë

sour˚
->
ß¶
.
ˇŒbacks
[2].
c⁄ãxt
;

297  
	`memˇched_£t_ß¶_auth_d©a
(
˛⁄e
,

298 
sour˚
->
ß¶
.
ˇŒbacks
[0].
c⁄ãxt
,

299 (c⁄° *)
£¸ë
->
d©a
);

307 
size_t
 
tŸÆ
= 0;

309 
sour˚
->
ß¶
.
ˇŒbacks
[
tŸÆ
].
id
 !
SASL_CB_LIST_END
)

311 
sour˚
->
ß¶
.
ˇŒbacks
[
tŸÆ
].
id
)

313 
SASL_CB_USER
:

314 
SASL_CB_AUTHNAME
:

315 
SASL_CB_PASS
:

319  
MEMCACHED_NOT_SUPPORTED
;

322 ++
tŸÆ
;

325 
ß¶_ˇŒback_t
 *
cb

	`libmemˇched_ˇŒoc
(
˛⁄e
, 
tŸÆ
 + 1, (sasl_callback_t));

326 i‡(
cb
 =
NULL
)

328  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

330 
	`mem˝y
(
cb
, 
sour˚
->
ß¶
.
ˇŒbacks
, (
tŸÆ
 + 1Ë* (
ß¶_ˇŒback_t
));

333 
size_t
 
x
0; x < 
tŸÆ
; ++x)

335 i‡(
cb
[
x
].
id
 =
SASL_CB_USER
 || cb[x].id =
SASL_CB_AUTHNAME
)

337 
cb
[
x
].
c⁄ãxt

	`libmemˇched_mÆloc
(
˛⁄e
, 
	`°æí
(
sour˚
->
ß¶
.
ˇŒbacks
[x].context));

339 i‡(
cb
[
x
].
c⁄ãxt
 =
NULL
)

342 
size_t
 
y
0; y < 
x
; ++y)

344 
	`libmemˇched_‰ì
(
˛⁄e
, cl⁄e->
ß¶
.
ˇŒbacks
[
y
].
c⁄ãxt
);

347 
	`libmemˇched_‰ì
(
˛⁄e
, 
cb
);

348  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

350 
	`°∫˝y
(
cb
[
x
].
c⁄ãxt
, 
sour˚
->
ß¶
.
ˇŒbacks
[x].context, (cb[x].context));

354 
ß¶_£¸ë_t
 *
§c
 = 
sour˚
->
ß¶
.
ˇŒbacks
[
x
].
c⁄ãxt
;

355 
ß¶_£¸ë_t
 *
n
 = 
	`libmemˇched_mÆloc
(
˛⁄e
, 
§c
->
Àn
 + 1 + (*n));

356 i‡(
n
 =
NULL
)

359 
size_t
 
y
0; y < 
x
; ++y)

361 
	`libmemˇched_‰ì
(
˛⁄e
, cl⁄e->
ß¶
.
ˇŒbacks
[
y
].
c⁄ãxt
);

364 
	`libmemˇched_‰ì
(
˛⁄e
, 
cb
);

365  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

367 
	`mem˝y
(
n
, 
§c
, src->
Àn
 + 1 + (*n));

368 
cb
[
x
].
c⁄ãxt

n
;

372 
˛⁄e
->
ß¶
.
ˇŒbacks

cb
;

373 
˛⁄e
->
ß¶
.
is_Æloˇãd

åue
;

375  
MEMCACHED_SUCCESS
;

376 
	}
}

	@libmemcached/sasl.h

12 #i‚de‡
LIBMEMCACHED_MEMCACHED_SASL_H


13 
	#LIBMEMCACHED_MEMCACHED_SASL_H


	)

15 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


16 
	~<ß¶/ß¶.h
>

18 #ifde‡
__˝lu•lus


22 
LIBMEMCACHED_API


23 
memˇched_£t_ß¶_ˇŒbacks
(
memˇched_°
 *
±r
,

24 c⁄° 
ß¶_ˇŒback_t
 *
ˇŒbacks
);

26 
LIBMEMCACHED_API


27 
memˇched_ªtu∫_t
 
memˇched_£t_ß¶_auth_d©a
(
memˇched_°
 *
±r
,

28 c⁄° *
u£∫ame
,

29 c⁄° *
∑ssw‹d
);

31 
LIBMEMCACHED_API


32 
memˇched_ªtu∫_t
 
memˇched_de°roy_ß¶_auth_d©a
(
memˇched_°
 *
±r
);

35 
LIBMEMCACHED_API


36 c⁄° 
ß¶_ˇŒback_t
 *
memˇched_gë_ß¶_ˇŒbacks
(
memˇched_°
 *
±r
);

38 
LIBMEMCACHED_LOCAL


39 
memˇched_ªtu∫_t
 
memˇched_˛⁄e_ß¶
(
memˇched_°
 *
˛⁄e
, c⁄° memˇched_° *
sour˚
);

41 
LIBMEMCACHED_LOCAL


42 
memˇched_ªtu∫_t
 
memˇched_ß¶_authítiˇã_c⁄√˘i⁄
(
memˇched_£rvî_°
 *
£rvî
);

44 #ifde‡
__˝lu•lus


50 
	smemˇched_ß¶_°
 {

51 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


52 c⁄° 
ß¶_ˇŒback_t
 *
ˇŒbacks
;

54 c⁄° *
ˇŒbacks
;

60 
boﬁ
 
is_Æloˇãd
;

	@libmemcached/server.c

15 
	~<libmemˇched/comm⁄.h
>

17 
ölöe
 
	$_£rvî_öô
(
memˇched_£rvî_°
 *
£lf
, c⁄° 
memˇched_°
 *
roŸ
,

18 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
,

19 
uöt32_t
 
weight
, 
memˇched_c⁄√˘i⁄_t
 
ty≥
)

21 
£lf
->
›ti⁄s
.
is_shuâög_down

Ál£
;

22 
£lf
->
›ti⁄s
.
is_dód

Ál£
;

23 
£lf
->
numbî_of_ho°s
= 0;

24 
£lf
->
curs‹_a˘ive
= 0;

25 
£lf
->
p‹t
=Öort;

26 
£lf
->
ˇched_î∫o
= 0;

27 
£lf
->
fd
= -1;

28 
£lf
->
io_byãs_£¡
= 0;

29 
£lf
->
£rvî_Áûuª_cou¡î
= 0;

30 
£lf
->
weight
= weight ? weight : 1;

31 
	`WATCHPOINT_SET
(
£lf
->
io_waô_cou¡
.
ªad
= 0);

32 
	`WATCHPOINT_SET
(
£lf
->
io_waô_cou¡
.
wrôe
= 0);

33 
£lf
->
maj‹_vîsi⁄

UINT8_MAX
;

34 
£lf
->
mi¸o_vîsi⁄

UINT8_MAX
;

35 
£lf
->
mö‹_vîsi⁄

UINT8_MAX
;

36 
£lf
->
ty≥
=Åype;

37 
£lf
->
ªad_±r
£lf->
ªad_buf„r
;

38 
£lf
->
ˇched_£rvî_îr‹

NULL
;

39 
£lf
->
ªad_buf„r_Àngth
= 0;

40 
£lf
->
ªad_d©a_Àngth
= 0;

41 
£lf
->
wrôe_buf„r_off£t
= 0;

42 
£lf
->
addªss_öfo

NULL
;

43 
£lf
->
addªss_öfo_√xt

NULL
;

45 i‡(
roŸ
)

47 
£lf
->
√xt_ªåy

roŸ
->
ªåy_timeout
;

51 
£lf
->
√xt_ªåy
= 0;

54 i‡(
£lf
->
weight
 > 1 && 
roŸ
)

56 ((
memˇched_°
 *)
roŸ
)->
këama
.
weighãd

åue
;

59 
£lf
->
roŸ
=Ñoot;

60 
£lf
->
limô_maxbyãs
= 0;

61 i‡(
ho°«me
 =
NULL
)

63 
£lf
->
ho°«me
[0]= 0;

67 
	`°∫˝y
(
£lf
->
ho°«me
, ho°«me, 
NI_MAXHOST
 - 1);

69 
	}
}

71 
memˇched_£rvî_°
 *
	$_£rvî_¸óã
(
memˇched_£rvî_°
 *
£lf
, c⁄° 
memˇched_°
 *
memc
)

73 i‡(
£lf
 =
NULL
)

75 
£lf
(
memˇched_£rvî_°
 *)
	`libmemˇched_mÆloc
(
memc
, (memcached_server_st));

77 i‡(! 
£lf
)

78  
NULL
;

80 
£lf
->
›ti⁄s
.
is_Æloˇãd

åue
;

84 
£lf
->
›ti⁄s
.
is_Æloˇãd

Ál£
;

87 
£lf
->
›ti⁄s
.
is_öôülized

åue
;

89  
£lf
;

90 
	}
}

92 
memˇched_£rvî_°
 *
	$memˇched_£rvî_¸óã_wôh
(c⁄° 
memˇched_°
 *
memc
,

93 
memˇched_£rvî_wrôe_ö°™˚_°
 
£lf
,

94 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
,

95 
uöt32_t
 
weight
, 
memˇched_c⁄√˘i⁄_t
 
ty≥
)

97 
£lf

	`_£rvî_¸óã
(£lf, 
memc
);

99 i‡(
£lf
 =
NULL
)

100  
NULL
;

102 
	`_£rvî_öô
(
£lf
, 
memc
, 
ho°«me
, 
p‹t
, 
weight
, 
ty≥
);

105 i‡(
ty≥
 =
MEMCACHED_CONNECTION_UDP
)

107 
£lf
->
wrôe_buf„r_off£t

UDP_DATAGRAM_HEADER_LENGTH
;

108 
	`memˇched_io_öô_udp_hódî
(
£lf
, 0);

111  
£lf
;

112 
	}
}

114 
	$memˇched_£rvî_‰ì
(
memˇched_£rvî_°
 *
£lf
)

116 
	`memˇched_quô_£rvî
(
£lf
, 
Ál£
);

118 i‡(
£lf
->
ˇched_£rvî_îr‹
)

119 
	`‰ì
(
£lf
->
ˇched_£rvî_îr‹
);

121 i‡(
£lf
->
addªss_öfo
)

122 
	`‰ìaddröfo
(
£lf
->
addªss_öfo
);

124 i‡(
	`memˇched_is_Æloˇãd
(
£lf
))

126 i‡(
£lf
->
roŸ
)

128 
	`libmemˇched_‰ì
(
£lf
->
roŸ
, self);

132 
	`‰ì
(
£lf
);

137 
£lf
->
›ti⁄s
.
is_öôülized

Ál£
;

139 
	}
}

144 
memˇched_£rvî_°
 *
	$memˇched_£rvî_˛⁄e
(
memˇched_£rvî_°
 *
de°ö©i⁄
,

145 c⁄° 
memˇched_£rvî_°
 *
sour˚
)

148 i‡(
sour˚
 =
NULL
)

149  
NULL
;

151 
de°ö©i⁄

	`memˇched_£rvî_¸óã_wôh
(
sour˚
->
roŸ
, destination,

152 
sour˚
->
ho°«me
, sour˚->
p‹t
, sour˚->
weight
,

153 
sour˚
->
ty≥
);

154 i‡(
de°ö©i⁄
 !
NULL
)

156 
de°ö©i⁄
->
ˇched_î∫o

sour˚
->cached_errno;

158 i‡(
sour˚
->
ˇched_£rvî_îr‹
)

159 
de°ö©i⁄
->
ˇched_£rvî_îr‹

	`°rdup
(
sour˚
->cached_server_error);

162  
de°ö©i⁄
;

164 
	}
}

166 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_curs‹
(c⁄° 
memˇched_°
 *
±r
,

167 c⁄° 
memˇched_£rvî_‚
 *
ˇŒback
,

168 *
c⁄ãxt
,

169 
uöt32_t
 
numbî_of_ˇŒbacks
)

171 
memˇched_ªtu∫_t
 
rc
;

172 i‡((
rc

	`öôülize_c⁄°_quîy
(
±r
)Ë!
MEMCACHED_SUCCESS
)

174  
rc
;

177 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

179 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

180 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
±r
, 
x
);

182 
uöt32_t
 
y
0; y < 
numbî_of_ˇŒbacks
; y++)

184 
i„º‹
;

186 
i„º‹
(*
ˇŒback
[
y
])(
±r
, 
ö°™˚
, 
c⁄ãxt
);

188 i‡(
i„º‹
)

193  
MEMCACHED_SUCCESS
;

194 
	}
}

196 
memˇched_ªtu∫_t
 
	$memˇched_£rvî_execuã
(
memˇched_°
 *
±r
,

197 
memˇched_£rvî_execuã_‚
 
ˇŒback
,

198 *
c⁄ãxt
)

200 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

202 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

203 
	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
x
);

205 
i„º‹
;

207 
i„º‹
(*
ˇŒback
)(
±r
, 
ö°™˚
, 
c⁄ãxt
);

209 i‡(
i„º‹
)

213  
MEMCACHED_SUCCESS
;

214 
	}
}

216 
memˇched_£rvî_ö°™˚_°
 
	$memˇched_£rvî_by_key
(c⁄° 
memˇched_°
 *
±r
,

217 c⁄° *
key
,

218 
size_t
 
key_Àngth
,

219 
memˇched_ªtu∫_t
 *
îr‹
)

221 
uöt32_t
 
£rvî_key
;

222 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
;

224 
memˇched_ªtu∫_t
 
rc
;

225 i‡((
rc

	`öôülize_c⁄°_quîy
(
±r
)Ë!
MEMCACHED_SUCCESS
)

227 i‡(
îr‹
)

228 *
îr‹

rc
;

230  
NULL
;

233 i‡((
rc

	`memˇched_vÆid©e_key_Àngth
(
key_Àngth
, 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)Ë!
MEMCACHED_SUCCESS
)

235 i‡(
îr‹
)

236 *
îr‹

rc
;

238  
NULL
;

241 i‡(
±r
->
Êags
.
vîify_key
 && (
	`memˇched_key_ã°
((c⁄° **)&
key
, &
key_Àngth
, 1Ë=
MEMCACHED_BAD_KEY_PROVIDED
))

243 *
îr‹

MEMCACHED_BAD_KEY_PROVIDED
;

244  
NULL
;

247 
£rvî_key

	`memˇched_gíî©e_hash
(
±r
, 
key
, 
key_Àngth
);

248 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
±r
, 
£rvî_key
);

250  
ö°™˚
;

252 
	}
}

254 
	$memˇched_£rvî_îr‹_ª£t
(
memˇched_£rvî_°
 *
£lf
)

256 
	`WATCHPOINT_ASSERT
(
£lf
);

257 i‡(! 
£lf
)

260 
£lf
->
ˇched_£rvî_îr‹
[0]= 0;

261 
	}
}

263 
memˇched_£rvî_ö°™˚_°
 
	$memˇched_£rvî_gë_œ°_disc⁄√˘
(c⁄° 
memˇched_°
 *
£lf
)

265 
	`WATCHPOINT_ASSERT
(
£lf
);

266 i‡(! 
£lf
)

269  
£lf
->
œ°_disc⁄√˘ed_£rvî
;

270 
	}
}

272 
	$memˇched_£rvî_li°_‰ì
(
memˇched_£rvî_li°_°
 
£lf
)

274 i‡(
£lf
 =
NULL
)

277 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_li°_cou¡
(
£lf
); x++)

279 i‡(
£lf
[
x
].
addªss_öfo
)

281 
	`‰ìaddröfo
(
£lf
[
x
].
addªss_öfo
);

282 
£lf
[
x
].
addªss_öfo

NULL
;

286 c⁄° 
memˇched_°
 *
roŸ

£lf
->root;

287 i‡(
roŸ
)

289 
	`libmemˇched_‰ì
(
roŸ
, 
£lf
);

293 
	`‰ì
(
£lf
);

295 
	}
}

297 
uöt32_t
 
	$memˇched_£rvîs_£t_cou¡
(
memˇched_£rvî_°
 *
£rvîs
, 
uöt32_t
 
cou¡
)

299 
	`WATCHPOINT_ASSERT
(
£rvîs
);

300 i‡(! 
£rvîs
)

303  
£rvîs
->
numbî_of_ho°s

cou¡
;

304 
	}
}

306 
uöt32_t
 
	$memˇched_£rvî_cou¡
(c⁄° 
memˇched_°
 *
£lf
)

308 
	`WATCHPOINT_ASSERT
(
£lf
);

309 i‡(! 
£lf
)

312  
£lf
->
numbî_of_ho°s
;

313 
	}
}

315 c⁄° *
	$memˇched_£rvî_«me
(
memˇched_£rvî_ö°™˚_°
 
£lf
)

317 
	`WATCHPOINT_ASSERT
(
£lf
);

318 i‡(! 
£lf
)

319  
NULL
;

321  
£lf
->
ho°«me
;

322 
	}
}

324 
ö_p‹t_t
 
	$memˇched_£rvî_p‹t
(
memˇched_£rvî_ö°™˚_°
 
£lf
)

326 
	`WATCHPOINT_ASSERT
(
£lf
);

327 i‡(! 
£lf
)

330  
£lf
->
p‹t
;

331 
	}
}

333 
uöt32_t
 
	$memˇched_£rvî_ª•⁄£_cou¡
(
memˇched_£rvî_ö°™˚_°
 
£lf
)

335 
	`WATCHPOINT_ASSERT
(
£lf
);

336 i‡(! 
£lf
)

339  
£lf
->
curs‹_a˘ive
;

340 
	}
}

342 c⁄° *
	$memˇched_£rvî_îr‹
(
memˇched_£rvî_ö°™˚_°
 
±r
)

344  
±r


345 ? 
±r
->
ˇched_£rvî_îr‹


346 : 
NULL
;

347 
	}
}

	@libmemcached/server.h

12 #i‚de‡
__LIBMEMCACHED_SERVER_H__


13 
	#__LIBMEMCACHED_SERVER_H__


	)

16 
	smemˇched_£rvî_°
 {

18 
boﬁ
 
	mis_Æloˇãd
:1;

19 
boﬁ
 
	mis_öôülized
:1;

20 
boﬁ
 
	mis_shuâög_down
:1;

21 
boﬁ
 
	mis_dód
:1;

22 } 
	m›ti⁄s
;

23 
uöt32_t
 
	mnumbî_of_ho°s
;

24 
uöt32_t
 
	mcurs‹_a˘ive
;

25 
ö_p‹t_t
 
	mp‹t
;

26 
	mˇched_î∫o
;

27 
memˇched_sockë_t
 
	mfd
;

28 
uöt32_t
 
	mio_byãs_£¡
;

29 
uöt32_t
 
	m£rvî_Áûuª_cou¡î
;

30 
uöt32_t
 
	mweight
;

32 
uöt32_t
 
	mªad
;

33 
uöt32_t
 
	mwrôe
;

34 } 
	mio_waô_cou¡
;

35 
uöt8_t
 
	mmaj‹_vîsi⁄
;

36 
uöt8_t
 
	mmi¸o_vîsi⁄
;

37 
uöt8_t
 
	mmö‹_vîsi⁄
;

38 
memˇched_c⁄√˘i⁄_t
 
	mty≥
;

39 *
	mªad_±r
;

40 *
	mˇched_£rvî_îr‹
;

41 
size_t
 
	mªad_buf„r_Àngth
;

42 
size_t
 
	mªad_d©a_Àngth
;

43 
size_t
 
	mwrôe_buf„r_off£t
;

44 
addröfo
 *
	maddªss_öfo
;

45 
addröfo
 *
	maddªss_öfo_√xt
;

46 
time_t
 
	m√xt_ªåy
;

47 c⁄° 
memˇched_°
 *
	mroŸ
;

48 
uöt64_t
 
	mlimô_maxbyãs
;

49 
	mªad_buf„r
[
MEMCACHED_MAX_BUFFER
];

50 
	mwrôe_buf„r
[
MEMCACHED_MAX_BUFFER
];

51 
	mho°«me
[
NI_MAXHOST
];

55 #ifde‡
__˝lu•lus


59 
LIBMEMCACHED_API


60 
memˇched_ªtu∫_t
 
memˇched_£rvî_curs‹
(c⁄° 
memˇched_°
 *
±r
,

61 c⁄° 
memˇched_£rvî_‚
 *
ˇŒback
,

62 *
c⁄ãxt
,

63 
uöt32_t
 
numbî_of_ˇŒbacks
);

65 
LIBMEMCACHED_API


66 
memˇched_£rvî_ö°™˚_°
 
memˇched_£rvî_by_key
(c⁄° 
memˇched_°
 *
±r
,

67 c⁄° *
key
,

68 
size_t
 
key_Àngth
,

69 
memˇched_ªtu∫_t
 *
îr‹
);

71 
LIBMEMCACHED_API


72 
memˇched_£rvî_îr‹_ª£t
(
memˇched_£rvî_°
 *
±r
);

74 
LIBMEMCACHED_API


75 
memˇched_£rvî_‰ì
(
memˇched_£rvî_°
 *
±r
);

77 
LIBMEMCACHED_LOCAL


78 
memˇched_£rvî_°
 *
memˇched_£rvî_˛⁄e
(memˇched_£rvî_° *
de°ö©i⁄
,

79 c⁄° 
memˇched_£rvî_°
 *
sour˚
);

81 
LIBMEMCACHED_API


82 
memˇched_£rvî_ö°™˚_°
 
memˇched_£rvî_gë_œ°_disc⁄√˘
(c⁄° 
memˇched_°
 *
±r
);

85 
LIBMEMCACHED_API


86 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_udp
(
memˇched_°
 *
±r
,

87 c⁄° *
ho°«me
,

88 
ö_p‹t_t
 
p‹t
);

89 
LIBMEMCACHED_API


90 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_unix_sockë
(
memˇched_°
 *
±r
,

91 c⁄° *
fûíame
);

92 
LIBMEMCACHED_API


93 
memˇched_ªtu∫_t
 
memˇched_£rvî_add
(
memˇched_°
 *
±r
,

94 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
);

96 
LIBMEMCACHED_LOCAL


97 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_∑r£d
(
memˇched_°
 *
±r
,

98 c⁄° *
ho°«me
,

99 
size_t
 
ho°«me_Àngth
,

100 
ö_p‹t_t
 
p‹t
,

101 
uöt32_t
 
weight
);

103 
LIBMEMCACHED_API


104 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_udp_wôh_weight
(
memˇched_°
 *
±r
,

105 c⁄° *
ho°«me
,

106 
ö_p‹t_t
 
p‹t
,

107 
uöt32_t
 
weight
);

108 
LIBMEMCACHED_API


109 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_unix_sockë_wôh_weight
(
memˇched_°
 *
±r
,

110 c⁄° *
fûíame
,

111 
uöt32_t
 
weight
);

112 
LIBMEMCACHED_API


113 
memˇched_ªtu∫_t
 
memˇched_£rvî_add_wôh_weight
(
memˇched_°
 *
±r
, c⁄° *
ho°«me
,

114 
ö_p‹t_t
 
p‹t
,

115 
uöt32_t
 
weight
);

120 
LIBMEMCACHED_API


121 
uöt32_t
 
memˇched_£rvî_ª•⁄£_cou¡
(
memˇched_£rvî_ö°™˚_°
 
£lf
);

123 
LIBMEMCACHED_API


124 c⁄° *
memˇched_£rvî_«me
(
memˇched_£rvî_ö°™˚_°
 
£lf
);

126 
LIBMEMCACHED_API


127 
ö_p‹t_t
 
memˇched_£rvî_p‹t
(
memˇched_£rvî_ö°™˚_°
 
£lf
);

129 
LIBMEMCACHED_API


130 c⁄° *
memˇched_£rvî_îr‹
(
memˇched_£rvî_ö°™˚_°
 
±r
);

134 #ifde‡
__˝lu•lus


	@libmemcached/server_list.c

13 
	~"comm⁄.h
"

15 
memˇched_£rvî_li°_°


16 
	$memˇched_£rvî_li°_≠≥nd_wôh_weight
(
memˇched_£rvî_li°_°
 
±r
,

17 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
,

18 
uöt32_t
 
weight
,

19 
memˇched_ªtu∫_t
 *
îr‹
)

21 
uöt32_t
 
cou¡
;

22 
memˇched_£rvî_li°_°
 
√w_ho°_li°
;

24 i‡(
ho°«me
 =
NULL
 || 
îr‹
 == NULL)

25  
NULL
;

27 i‡(
ho°«me
[0] == '/')

28 
p‹t
 = 0;

29 i‡(! 
p‹t
)

30 
p‹t

MEMCACHED_DEFAULT_PORT
;

33 
cou¡
= 1;

34 i‡(
±r
 !
NULL
)

36 
cou¡
+
	`memˇched_£rvî_li°_cou¡
(
±r
);

39 
√w_ho°_li°
(
memˇched_£rvî_wrôe_ö°™˚_°
)
	`ªÆloc
(
±r
, (
memˇched_£rvî_°
Ë* 
cou¡
);

40 i‡(!
√w_ho°_li°
)

42 
±r
->
ˇched_î∫o

î∫o
;

43 *
îr‹

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

44  
NULL
;

48 
	`memˇched_£rvî_¸óã_wôh
(
NULL
, &
√w_ho°_li°
[
cou¡
-1], 
ho°«me
, 
p‹t
, 
weight
,Ö‹à? 
MEMCACHED_CONNECTION_TCP
 : 
MEMCACHED_CONNECTION_UNIX_SOCKET
);

51 
√w_ho°_li°
->
›ti⁄s
.
is_Æloˇãd

åue
;

54 
	`memˇched_£rvîs_£t_cou¡
(
√w_ho°_li°
, 
cou¡
);

56 *
îr‹

MEMCACHED_SUCCESS
;

57  
√w_ho°_li°
;

58 
	}
}

60 
memˇched_£rvî_li°_°


61 
	$memˇched_£rvî_li°_≠≥nd
(
memˇched_£rvî_li°_°
 
±r
,

62 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
,

63 
memˇched_ªtu∫_t
 *
îr‹
)

65  
	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
±r
, 
ho°«me
, 
p‹t
, 0, 
îr‹
);

66 
	}
}

68 
uöt32_t
 
	$memˇched_£rvî_li°_cou¡
(c⁄° 
memˇched_£rvî_li°_°
 
£lf
)

70  (
£lf
 =
NULL
)

72 : 
£lf
->
numbî_of_ho°s
;

73 
	}
}

75 
memˇched_£rvî_°
 *
	$memˇched_£rvî_li°
(c⁄° 
memˇched_°
 *
£lf
)

77  
£lf
->
£rvîs
;

78 
	}
}

80 
	$memˇched_£rvî_li°_£t
(
memˇched_°
 *
£lf
, 
memˇched_£rvî_°
 *
li°
)

82 
£lf
->
£rvîs

li°
;

83 
	}
}

	@libmemcached/server_list.h

12 #i‚de‡
__LIBMEMCACHED_SERVER_LIST_H__


13 
	#__LIBMEMCACHED_SERVER_LIST_H__


	)

15 #ifde‡
__˝lu•lus


20 
LIBMEMCACHED_API


21 
memˇched_£rvî_li°_‰ì
(
memˇched_£rvî_li°_°
 
±r
);

23 
LIBMEMCACHED_API


24 
memˇched_ªtu∫_t
 
memˇched_£rvî_push
(
memˇched_°
 *
±r
, c⁄° 
memˇched_£rvî_li°_°
 
li°
);

26 
LIBMEMCACHED_API


27 
memˇched_£rvî_li°_°
 
memˇched_£rvî_li°_≠≥nd
(memˇched_£rvî_li°_° 
±r
,

28 c⁄° *
ho°«me
,

29 
ö_p‹t_t
 
p‹t
,

30 
memˇched_ªtu∫_t
 *
îr‹
);

31 
LIBMEMCACHED_API


32 
memˇched_£rvî_li°_°
 
memˇched_£rvî_li°_≠≥nd_wôh_weight
(memˇched_£rvî_li°_° 
±r
,

33 c⁄° *
ho°«me
,

34 
ö_p‹t_t
 
p‹t
,

35 
uöt32_t
 
weight
,

36 
memˇched_ªtu∫_t
 *
îr‹
);

37 
LIBMEMCACHED_API


38 
uöt32_t
 
memˇched_£rvî_li°_cou¡
(c⁄° 
memˇched_£rvî_li°_°
 
±r
);

40 
LIBMEMCACHED_LOCAL


41 
uöt32_t
 
memˇched_£rvîs_£t_cou¡
(
memˇched_£rvî_li°_°
 
£rvîs
, uöt32_à
cou¡
);

43 
LIBMEMCACHED_LOCAL


44 
memˇched_£rvî_°
 *
memˇched_£rvî_li°
(c⁄° 
memˇched_°
 *);

46 
LIBMEMCACHED_LOCAL


47 
memˇched_£rvî_li°_£t
(
memˇched_°
 *
£lf
, 
memˇched_£rvî_li°_°
 
li°
);

49 #ifde‡
__˝lu•lus


	@libmemcached/stats.c

4 
	~"comm⁄.h
"

6 c⁄° *
	gmemˇched_°©_keys
[] = {

29 
NULL


32 
	sloˇl_c⁄ãxt


34 
memˇched_°©_‚
 
	mfunc
;

35 *
	mc⁄ãxt
;

36 c⁄° *
	m¨gs
;

40 
memˇched_ªtu∫_t
 
	$£t_d©a
(
memˇched_°©_°
 *
memc_°©
, *
key
, *
vÆue
)

43 i‡(
	`°æí
(
key
) < 1)

45 
	`WATCHPOINT_STRING
(
key
);

46  
MEMCACHED_UNKNOWN_STAT_KEY
;

48 i‡(!
	`°rcmp
("pid", 
key
))

50 
memc_°©
->
pid
(
uöt32_t
Ë
	`°πﬁ
(
vÆue
, (**)
NULL
, 10);

52 i‡(!
	`°rcmp
("u±ime", 
key
))

54 
memc_°©
->
u±ime
(
uöt32_t
Ë
	`°πﬁ
(
vÆue
, (**)
NULL
, 10);

56 i‡(!
	`°rcmp
("time", 
key
))

58 
memc_°©
->
time
(
uöt32_t
Ë
	`°πﬁ
(
vÆue
, (**)
NULL
, 10);

60 i‡(!
	`°rcmp
("vîsi⁄", 
key
))

62 
	`mem˝y
(
memc_°©
->
vîsi⁄
, 
vÆue
, 
	`°æí
(value));

63 
memc_°©
->
vîsi⁄
[
	`°æí
(
vÆue
)]= 0;

65 i‡(!
	`°rcmp
("poöãr_size", 
key
))

67 
memc_°©
->
poöãr_size
(
uöt32_t
Ë
	`°πﬁ
(
vÆue
, (**)
NULL
, 10);

69 i‡(!
	`°rcmp
("rußge_u£r", 
key
))

71 *
wÆk_±r
;

72 
wÆk_±r

vÆue
; (!
	`i•un˘
(*walk_ptr)); walk_ptr++);

73 *
wÆk_±r
= 0;

74 
wÆk_±r
++;

75 
memc_°©
->
rußge_u£r_£c⁄ds
(
uöt32_t
Ë
	`°πﬁ
(
vÆue
, (**)
NULL
, 10);

76 
memc_°©
->
rußge_u£r_mi¸o£c⁄ds
(
uöt32_t
Ë
	`°πﬁ
(
wÆk_±r
, (**)
NULL
, 10);

78 i‡(!
	`°rcmp
("rußge_sy°em", 
key
))

80 *
wÆk_±r
;

81 
wÆk_±r

vÆue
; (!
	`i•un˘
(*walk_ptr)); walk_ptr++);

82 *
wÆk_±r
= 0;

83 
wÆk_±r
++;

84 
memc_°©
->
rußge_sy°em_£c⁄ds
(
uöt32_t
Ë
	`°πﬁ
(
vÆue
, (**)
NULL
, 10);

85 
memc_°©
->
rußge_sy°em_mi¸o£c⁄ds
(
uöt32_t
Ë
	`°πﬁ
(
wÆk_±r
, (**)
NULL
, 10);

87 i‡(!
	`°rcmp
("cuº_ôems", 
key
))

89 
memc_°©
->
cuº_ôems
(
uöt32_t
Ë
	`°πﬁ
(
vÆue
, (**)
NULL
, 10);

91 i‡(!
	`°rcmp
("tŸÆ_ôems", 
key
))

93 
memc_°©
->
tŸÆ_ôems
(
uöt32_t
Ë
	`°πﬁ
(
vÆue
, (**)
NULL
, 10);

95 i‡(!
	`°rcmp
("byãs_ªad", 
key
))

97 
memc_°©
->
byãs_ªad
(
uöt32_t
Ë
	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

99 i‡(!
	`°rcmp
("byãs_wrôãn", 
key
))

101 
memc_°©
->
byãs_wrôãn
(
uöt32_t
Ë
	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

103 i‡(!
	`°rcmp
("byãs", 
key
))

105 
memc_°©
->
byãs
(
uöt32_t
Ë
	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

107 i‡(!
	`°rcmp
("cuº_c⁄√˘i⁄s", 
key
))

109 
memc_°©
->
cuº_c⁄√˘i⁄s
(
uöt32_t
Ë
	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

111 i‡(!
	`°rcmp
("tŸÆ_c⁄√˘i⁄s", 
key
))

113 
memc_°©
->
tŸÆ_c⁄√˘i⁄s
(
uöt32_t
Ë
	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

115 i‡(!
	`°rcmp
("c⁄√˘i⁄_°ru˘uªs", 
key
))

117 
memc_°©
->
c⁄√˘i⁄_°ru˘uªs
(
uöt32_t
Ë
	`°πﬁ
(
vÆue
, (**)
NULL
, 10);

119 i‡(!
	`°rcmp
("cmd_gë", 
key
))

121 
memc_°©
->
cmd_gë
(
uöt64_t
Ë
	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

123 i‡(!
	`°rcmp
("cmd_£t", 
key
))

125 
memc_°©
->
cmd_£t
(
uöt64_t
Ë
	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

127 i‡(!
	`°rcmp
("gë_hôs", 
key
))

129 
memc_°©
->
gë_hôs
(
uöt64_t
Ë
	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

131 i‡(!
	`°rcmp
("gë_mis£s", 
key
))

133 
memc_°©
->
gë_mis£s
(
uöt64_t
)
	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

135 i‡(!
	`°rcmp
("evi˘i⁄s", 
key
))

137 
memc_°©
->
evi˘i⁄s
(
uöt64_t
)
	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

139 i‡(!
	`°rcmp
("limô_maxbyãs", 
key
))

141 
memc_°©
->
limô_maxbyãs
(
uöt64_t
Ë
	`°πﬁl
(
vÆue
, (**)
NULL
, 10);

143 i‡(!
	`°rcmp
("thªads", 
key
))

145 
memc_°©
->
thªads
(
uöt32_t
Ë
	`°πﬁ
(
vÆue
, (**)
NULL
, 10);

147 i‡(!(
	`°rcmp
("dñëe_mis£s", 
key
) == 0 ||

148 
	`°rcmp
("dñëe_hôs", 
key
) == 0 ||

149 
	`°rcmp
("ö¸_mis£s", 
key
) == 0 ||

150 
	`°rcmp
("ö¸_hôs", 
key
) == 0 ||

151 
	`°rcmp
("de¸_mis£s", 
key
) == 0 ||

152 
	`°rcmp
("de¸_hôs", 
key
) == 0 ||

153 
	`°rcmp
("ˇs_mis£s", 
key
) == 0 ||

154 
	`°rcmp
("ˇs_hôs", 
key
) == 0 ||

155 
	`°rcmp
("ˇs_badvÆ", 
key
) == 0 ||

156 
	`°rcmp
("cmd_Êush", 
key
) == 0 ||

157 
	`°rcmp
("ac˚±ög_c⁄ns", 
key
) == 0 ||

158 
	`°rcmp
("li°í_dißbÀd_num", 
key
) == 0 ||

159 
	`°rcmp
("c⁄n_yõlds", 
key
) == 0 ||

160 
	`°rcmp
("auth_cmds", 
key
) == 0 ||

161 
	`°rcmp
("auth_îr‹s", 
key
) == 0 ||

162 
	`°rcmp
("ª˛aimed", 
key
) == 0))

164 
	`WATCHPOINT_STRING
(
key
);

166  
MEMCACHED_SUCCESS
;

169  
MEMCACHED_SUCCESS
;

170 
	}
}

172 *
	$memˇched_°©_gë_vÆue
(c⁄° 
memˇched_°
 *
±r
, 
memˇched_°©_°
 *
memc_°©
,

173 c⁄° *
key
, 
memˇched_ªtu∫_t
 *
îr‹
)

175 
buf„r
[
SMALL_STRING_LEN
];

176 
Àngth
;

177 *
ªt
;

179 *
îr‹

MEMCACHED_SUCCESS
;

181 i‡(!
	`memcmp
("pid", 
key
, ("pid") -1))

182 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%u", 
memc_°©
->
pid
);

183 i‡(!
	`memcmp
("u±ime", 
key
, ("uptime") -1))

184 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%u", 
memc_°©
->
u±ime
);

185 i‡(!
	`memcmp
("time", 
key
, ("time") -1))

186 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
time
);

187 i‡(!
	`memcmp
("vîsi⁄", 
key
, ("version") -1))

188 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%s", 
memc_°©
->
vîsi⁄
);

189 i‡(!
	`memcmp
("poöãr_size", 
key
, ("pointer_size") -1))

190 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%u", 
memc_°©
->
poöãr_size
);

191 i‡(!
	`memcmp
("rußge_u£r", 
key
, ("rusage_user") -1))

192 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%u.%u", 
memc_°©
->
rußge_u£r_£c⁄ds
, memc_°©->
rußge_u£r_mi¸o£c⁄ds
);

193 i‡(!
	`memcmp
("rußge_sy°em", 
key
, ("rusage_system") -1))

194 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%u.%u", 
memc_°©
->
rußge_sy°em_£c⁄ds
, memc_°©->
rußge_sy°em_mi¸o£c⁄ds
);

195 i‡(!
	`memcmp
("cuº_ôems", 
key
, ("curr_items") -1))

196 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%u", 
memc_°©
->
cuº_ôems
);

197 i‡(!
	`memcmp
("tŸÆ_ôems", 
key
, ("total_items") -1))

198 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%u", 
memc_°©
->
tŸÆ_ôems
);

199 i‡(!
	`memcmp
("cuº_c⁄√˘i⁄s", 
key
, ("curr_connections") -1))

200 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%u", 
memc_°©
->
cuº_c⁄√˘i⁄s
);

201 i‡(!
	`memcmp
("tŸÆ_c⁄√˘i⁄s", 
key
, ("total_connections") -1))

202 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%u", 
memc_°©
->
tŸÆ_c⁄√˘i⁄s
);

203 i‡(!
	`memcmp
("c⁄√˘i⁄_°ru˘uªs", 
key
, ("connection_structures") -1))

204 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%u", 
memc_°©
->
c⁄√˘i⁄_°ru˘uªs
);

205 i‡(!
	`memcmp
("cmd_gë", 
key
, ("cmd_get") -1))

206 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
cmd_gë
);

207 i‡(!
	`memcmp
("cmd_£t", 
key
, ("cmd_set") -1))

208 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
cmd_£t
);

209 i‡(!
	`memcmp
("gë_hôs", 
key
, ("get_hits") -1))

210 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
gë_hôs
);

211 i‡(!
	`memcmp
("gë_mis£s", 
key
, ("get_misses") -1))

212 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
gë_mis£s
);

213 i‡(!
	`memcmp
("evi˘i⁄s", 
key
, ("evictions") -1))

214 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
evi˘i⁄s
);

215 i‡(!
	`memcmp
("byãs_ªad", 
key
, ("bytes_read") -1))

216 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
byãs_ªad
);

217 i‡(!
	`memcmp
("byãs_wrôãn", 
key
, ("bytes_written") -1))

218 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
byãs_wrôãn
);

219 i‡(!
	`memcmp
("byãs", 
key
, ("bytes") -1))

220 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
byãs
);

221 i‡(!
	`memcmp
("limô_maxbyãs", 
key
, ("limit_maxbytes") -1))

222 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%Œu", ()
memc_°©
->
limô_maxbyãs
);

223 i‡(! 
	`memcmp
("thªads", 
key
, ("threads") -1))

224 
Àngth

	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
,"%u", 
memc_°©
->
thªads
);

227 *
îr‹

MEMCACHED_NOTFOUND
;

228  
NULL
;

231 i‡(
Àngth
 >
SMALL_STRING_LEN
 ||Üength < 0)

233 *
îr‹

MEMCACHED_FAILURE
;

234  
NULL
;

237 
ªt

	`libmemˇched_mÆloc
(
±r
, (
size_t
Ë(
Àngth
 + 1));

238 
	`mem˝y
(
ªt
, 
buf„r
, (
size_t
Ë
Àngth
);

239 
ªt
[
Àngth
]= '\0';

241  
ªt
;

242 
	}
}

244 
memˇched_ªtu∫_t
 
	$bö¨y_°©s_„tch
(
memˇched_°©_°
 *
memc_°©
,

245 c⁄° *
¨gs
,

246 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
,

247 
loˇl_c⁄ãxt
 *
check
)

249 
memˇched_ªtu∫_t
 
rc
;

251 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

252 
¥Ÿocﬁ_bö¨y_ªque°_°©s
 
ªque°
{.
byãs
= {0}};

253 
ªque°
.
mesßge
.
hódî
.ªque°.
magic

PROTOCOL_BINARY_REQ
;

254 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_STAT
;

255 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

257 i‡(
¨gs
 !
NULL
)

259 
size_t
 
Àn

	`°æí
(
¨gs
);

261 
rc

	`memˇched_vÆid©e_key_Àngth
(
Àn
, 
åue
);

262 
	`u∆ikñy
 (
rc
 !
MEMCACHED_SUCCESS
)

263  
rc
;

265 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
((
uöt16_t
)
Àn
);

266 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
((
uöt32_t
Ë
Àn
);

268 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

270 { .
Àngth
(
ªque°
.
byãs
), .
buf„r
=Ñequest.bytes },

271 { .
Àngth

Àn
, .
buf„r

¨gs
 }

274 i‡(
	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 2, 
åue
Ë!
MEMCACHED_SUCCESS
)

276 
	`memˇched_io_ª£t
(
ö°™˚
);

277  
MEMCACHED_WRITE_FAILURE
;

282 i‡(
	`memˇched_do
(
ö°™˚
, 
ªque°
.
byãs
,

283 (
ªque°
.
byãs
), 
åue
Ë!
MEMCACHED_SUCCESS
)

285 
	`memˇched_io_ª£t
(
ö°™˚
);

286  
MEMCACHED_WRITE_FAILURE
;

290 
	`memˇched_£rvî_ª•⁄£_de¸emít
(
ö°™˚
);

293 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, (buf„r), 
NULL
);

295 i‡(
rc
 =
MEMCACHED_END
)

298 
	`u∆ikñy
 (
rc
 !
MEMCACHED_SUCCESS
)

300 
	`memˇched_io_ª£t
(
ö°™˚
);

301  
rc
;

304 i‡(
memc_°©
)

306 
	`u∆ikñy
((
	`£t_d©a
(
memc_°©
, 
buf„r
, buf„∏+ 
	`°æí
(buf„rË+ 1)Ë=
MEMCACHED_UNKNOWN_STAT_KEY
)

308 
	`WATCHPOINT_ERROR
(
MEMCACHED_UNKNOWN_STAT_KEY
);

309 
	`WATCHPOINT_ASSERT
(0);

313 i‡(
check
 && check->
func
)

315 
size_t
 
key_Àngth

	`°æí
(
buf„r
);

317 
check
->
	`func
(
ö°™˚
,

318 
buf„r
, 
key_Àngth
,

319 
buf„r
+
key_Àngth
+1, 
	`°æí
(buffer+key_length+1),

320 
check
->
c⁄ãxt
);

327 
ö°™˚
->
curs‹_a˘ive
= 0;

329  
MEMCACHED_SUCCESS
;

330 
	}
}

332 
memˇched_ªtu∫_t
 
	$ascii_°©s_„tch
(
memˇched_°©_°
 *
memc_°©
,

333 c⁄° *
¨gs
,

334 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
,

335 
loˇl_c⁄ãxt
 *
check
)

337 
memˇched_ªtu∫_t
 
rc
;

338 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

339 
£nd_Àngth
;

341 i‡(
¨gs
)

342 
£nd_Àngth
(
size_t
Ë
	`¢¥ötf
(
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
,

343 "°©†%s\r\n", 
¨gs
);

345 
£nd_Àngth
(
size_t
Ë
	`¢¥ötf
(
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
,

348 i‡(
£nd_Àngth
 >
MEMCACHED_DEFAULT_COMMAND_SIZE
 || send_length < 0)

349  
MEMCACHED_WRITE_FAILURE
;

351 
rc

	`memˇched_do
(
ö°™˚
, 
buf„r
, (
size_t
)
£nd_Àngth
, 
åue
);

352 i‡(
rc
 !
MEMCACHED_SUCCESS
)

353 
îr‹
;

357 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, 
NULL
);

359 i‡(
rc
 =
MEMCACHED_STAT
)

361 *
°rög_±r
, *
íd_±r
;

362 *
key
, *
vÆue
;

364 
°rög_±r

buf„r
;

365 
°rög_±r
+= 5;

366 
íd_±r

°rög_±r
; 
	`isgøph
(*end_ptr);Énd_ptr++);

367 
key

°rög_±r
;

368 
key
[(
size_t
)(
íd_±r
-
°rög_±r
)]= 0;

370 
°rög_±r

íd_±r
 + 1;

371 
íd_±r

°rög_±r
; !(
	`is•a˚
(*end_ptr));Énd_ptr++);

372 
vÆue

°rög_±r
;

373 
vÆue
[(
size_t
)(
íd_±r
-
°rög_±r
)]= 0;

374 
°rög_±r

íd_±r
 + 2;

375 i‡(
memc_°©
)

377 
	`u∆ikñy
((
	`£t_d©a
(
memc_°©
, 
key
, 
vÆue
)Ë=
MEMCACHED_UNKNOWN_STAT_KEY
)

379 
	`WATCHPOINT_ERROR
(
MEMCACHED_UNKNOWN_STAT_KEY
);

380 
	`WATCHPOINT_ASSERT
(0);

384 i‡(
check
 && check->
func
)

386 
check
->
	`func
(
ö°™˚
,

387 
key
, 
	`°æí
(key),

388 
vÆue
, 
	`°æí
(value),

389 
check
->
c⁄ãxt
);

396 
îr‹
:

397 i‡(
rc
 =
MEMCACHED_END
)

398  
MEMCACHED_SUCCESS
;

400  
rc
;

401 
	}
}

403 
memˇched_°©_°
 *
	$memˇched_°©
(
memˇched_°
 *
£lf
, *
¨gs
, 
memˇched_ªtu∫_t
 *
îr‹
)

405 
memˇched_ªtu∫_t
 
rc
;

406 
memˇched_°©_°
 *
°©s
;

408 i‡((
rc

	`öôülize_quîy
(
£lf
)Ë!
MEMCACHED_SUCCESS
)

410 i‡(
îr‹
)

411 *
îr‹

rc
;

413  
NULL
;

416 
	`WATCHPOINT_ASSERT
(
îr‹
);

418 
	`u∆ikñy
 (
£lf
->
Êags
.
u£_udp
)

420 i‡(
îr‹
)

421 *
îr‹

MEMCACHED_NOT_SUPPORTED
;

423  
NULL
;

426 
°©s

	`libmemˇched_ˇŒoc
(
£lf
, 
	`memˇched_£rvî_cou¡
(£lf), (
memˇched_°©_°
));

428 i‡(! 
°©s
)

430 i‡(
îr‹
)

431 *
îr‹

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

433  
NULL
;

436 
	`WATCHPOINT_ASSERT
(
rc
 =
MEMCACHED_SUCCESS
);

437 
rc

MEMCACHED_SUCCESS
;

438 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
£lf
); x++)

440 
memˇched_ªtu∫_t
 
ãmp_ªtu∫
;

441 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

442 
memˇched_°©_°
 *
°©_ö°™˚
;

444 
°©_ö°™˚

°©s
 + 
x
;

446 
°©_ö°™˚
->
roŸ

£lf
;

448 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
£lf
, 
x
);

450 i‡(
£lf
->
Êags
.
bö¨y_¥Ÿocﬁ
)

452 
ãmp_ªtu∫

	`bö¨y_°©s_„tch
(
°©_ö°™˚
, 
¨gs
, 
ö°™˚
, 
NULL
);

456 
ãmp_ªtu∫

	`ascii_°©s_„tch
(
°©_ö°™˚
, 
¨gs
, 
ö°™˚
, 
NULL
);

459 i‡(
ãmp_ªtu∫
 !
MEMCACHED_SUCCESS
)

460 
rc

MEMCACHED_SOME_ERRORS
;

463 i‡(
îr‹
)

464 *
îr‹

rc
;

466  
°©s
;

467 
	}
}

469 
memˇched_ªtu∫_t
 
	$memˇched_°©_£rvî«me
(
memˇched_°©_°
 *
memc_°©
, *
¨gs
,

470 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
)

472 
memˇched_°
 
memc
;

473 
memˇched_°
 *
memc_±r
;

474 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

476 
	`mem£t
(
memc_°©
, 0, (
memˇched_°©_°
));

478 
memc_±r

	`memˇched_¸óã
(&
memc
);

479 i‡(! 
memc_±r
)

480  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

482 
	`memˇched_£rvî_add
(&
memc
, 
ho°«me
, 
p‹t
);

484 
memˇched_ªtu∫_t
 
rc
;

485 i‡((
rc

	`öôülize_quîy
(
memc_±r
)Ë!
MEMCACHED_SUCCESS
)

487  
rc
;

490 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
memc_±r
, 0);

492 i‡(
memc
.
Êags
.
bö¨y_¥Ÿocﬁ
)

494 
rc

	`bö¨y_°©s_„tch
(
memc_°©
, 
¨gs
, 
ö°™˚
, 
NULL
);

498 
rc

	`ascii_°©s_„tch
(
memc_°©
, 
¨gs
, 
ö°™˚
, 
NULL
);

501 
	`memˇched_‰ì
(&
memc
);

503  
rc
;

504 
	}
}

510 ** 
	$memˇched_°©_gë_keys
(c⁄° 
memˇched_°
 *
±r
,

511 
memˇched_°©_°
 *
memc_°©
,

512 
memˇched_ªtu∫_t
 *
îr‹
)

514 **
li°
;

515 
size_t
 
Àngth
(
memˇched_°©_keys
);

517 ()
memc_°©
;

519 
li°

	`libmemˇched_mÆloc
(
±r
, 
Àngth
);

521 i‡(! 
li°
)

523 *
îr‹

MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

524  
NULL
;

527 
	`mem˝y
(
li°
, 
memˇched_°©_keys
, (memcached_stat_keys));

529 *
îr‹

MEMCACHED_SUCCESS
;

531  
li°
;

532 
	}
}

534 
	$memˇched_°©_‰ì
(c⁄° 
memˇched_°
 *
±r
, 
memˇched_°©_°
 *
memc_°©
)

536 i‡(
memc_°©
 =
NULL
)

538 
	`WATCHPOINT_ASSERT
(0);

542 i‡(
memc_°©
->
roŸ
)

544 
	`libmemˇched_‰ì
(
memc_°©
->
roŸ
, memc_stat);

546 i‡(
±r
)

548 
	`libmemˇched_‰ì
(
±r
, 
memc_°©
);

552 
	`‰ì
(
memc_°©
);

554 
	}
}

556 
memˇched_ªtu∫_t
 
	$ˇŒ_°©_‚
(
memˇched_°
 *
±r
,

557 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
,

558 *
c⁄ãxt
)

560 
memˇched_ªtu∫_t
 
rc
;

561 
loˇl_c⁄ãxt
 *
check
(loˇl_c⁄ãxà*)
c⁄ãxt
;

563 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

565 
rc

	`bö¨y_°©s_„tch
(
NULL
, 
check
->
¨gs
, 
ö°™˚
, check);

569 
rc

	`ascii_°©s_„tch
(
NULL
, 
check
->
¨gs
, 
ö°™˚
, check);

572  
rc
;

573 
	}
}

575 
memˇched_ªtu∫_t
 
	$memˇched_°©_execuã
(
memˇched_°
 *
memc
, c⁄° *
¨gs
, 
memˇched_°©_‚
 
func
, *
c⁄ãxt
)

577 
	`memˇched_vîsi⁄
(
memc
);

579 
loˇl_c⁄ãxt
 
check
{ .
func
func, .
c⁄ãxt
c⁄ãxt, .
¨gs
=árgs };

581  
	`memˇched_£rvî_execuã
(
memc
, 
ˇŒ_°©_‚
, (*)&
check
);

582 
	}
}

	@libmemcached/stats.h

12 #i‚de‡
__LIBMEMCACHED_STATS_H__


13 
	#__LIBMEMCACHED_STATS_H__


	)

15 
	smemˇched_°©_°
 {

16 
uöt32_t
 
	mc⁄√˘i⁄_°ru˘uªs
;

17 
uöt32_t
 
	mcuº_c⁄√˘i⁄s
;

18 
uöt32_t
 
	mcuº_ôems
;

19 
uöt32_t
 
	mpid
;

20 
uöt32_t
 
	mpoöãr_size
;

21 
uöt32_t
 
	mrußge_sy°em_mi¸o£c⁄ds
;

22 
uöt32_t
 
	mrußge_sy°em_£c⁄ds
;

23 
uöt32_t
 
	mrußge_u£r_mi¸o£c⁄ds
;

24 
uöt32_t
 
	mrußge_u£r_£c⁄ds
;

25 
uöt32_t
 
	mthªads
;

26 
uöt32_t
 
	mtime
;

27 
uöt32_t
 
	mtŸÆ_c⁄√˘i⁄s
;

28 
uöt32_t
 
	mtŸÆ_ôems
;

29 
uöt32_t
 
	mu±ime
;

30 
uöt64_t
 
	mbyãs
;

31 
uöt64_t
 
	mbyãs_ªad
;

32 
uöt64_t
 
	mbyãs_wrôãn
;

33 
uöt64_t
 
	mcmd_gë
;

34 
uöt64_t
 
	mcmd_£t
;

35 
uöt64_t
 
	mevi˘i⁄s
;

36 
uöt64_t
 
	mgë_hôs
;

37 
uöt64_t
 
	mgë_mis£s
;

38 
uöt64_t
 
	mlimô_maxbyãs
;

39 
	mvîsi⁄
[
MEMCACHED_VERSION_STRING_LENGTH
];

40 
memˇched_°
 *
	mroŸ
;

43 #ifde‡
__˝lu•lus


47 
LIBMEMCACHED_API


48 
memˇched_°©_‰ì
(c⁄° 
memˇched_°
 *, 
memˇched_°©_°
 *);

50 
LIBMEMCACHED_API


51 
memˇched_°©_°
 *
memˇched_°©
(
memˇched_°
 *
±r
, *
¨gs
, 
memˇched_ªtu∫_t
 *
îr‹
);

53 
LIBMEMCACHED_API


54 
memˇched_ªtu∫_t
 
memˇched_°©_£rvî«me
(
memˇched_°©_°
 *
memc_°©
, *
¨gs
,

55 c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
);

57 
LIBMEMCACHED_API


58 *
memˇched_°©_gë_vÆue
(c⁄° 
memˇched_°
 *
±r
, 
memˇched_°©_°
 *
memc_°©
,

59 c⁄° *
key
, 
memˇched_ªtu∫_t
 *
îr‹
);

61 
LIBMEMCACHED_API


62 ** 
memˇched_°©_gë_keys
(c⁄° 
memˇched_°
 *
±r
, 
memˇched_°©_°
 *
memc_°©
,

63 
memˇched_ªtu∫_t
 *
îr‹
);

65 
LIBMEMCACHED_API


66 
memˇched_ªtu∫_t
 
memˇched_°©_execuã
(
memˇched_°
 *
memc
, c⁄° *
¨gs
, 
memˇched_°©_‚
 
func
, *
c⁄ãxt
);

68 #ifde‡
__˝lu•lus


	@libmemcached/storage.c

12 
	~"comm⁄.h
"

15 
	mSET_OP
,

16 
	mREPLACE_OP
,

17 
	mADD_OP
,

18 
	mPREPEND_OP
,

19 
	mAPPEND_OP
,

20 
	mCAS_OP
,

21 } 
	tmemˇched_°‹age_a˘i⁄_t
;

24 
ölöe
 c⁄° *
	$°‹age_›_°rög
(
memˇched_°‹age_a˘i⁄_t
 
vîb
)

26 
vîb
)

28 
SET_OP
:

30 
REPLACE_OP
:

32 
ADD_OP
:

34 
PREPEND_OP
:

36 
APPEND_OP
:

38 
CAS_OP
:

45 
	}
}

47 
memˇched_ªtu∫_t
 
memˇched_£nd_bö¨y
(
memˇched_°
 *
±r
,

48 
memˇched_£rvî_wrôe_ö°™˚_°
 
£rvî
,

49 
uöt32_t
 
£rvî_key
,

50 c⁄° *
key
,

51 
size_t
 
key_Àngth
,

52 c⁄° *
vÆue
,

53 
size_t
 
vÆue_Àngth
,

54 
time_t
 
expú©i⁄
,

55 
uöt32_t
 
Êags
,

56 
uöt64_t
 
ˇs
,

57 
memˇched_°‹age_a˘i⁄_t
 
vîb
);

59 
ölöe
 
memˇched_ªtu∫_t
 
	$memˇched_£nd
(
memˇched_°
 *
±r
,

60 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

61 c⁄° *
key
, 
size_t
 
key_Àngth
,

62 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

63 
time_t
 
expú©i⁄
,

64 
uöt32_t
 
Êags
,

65 
uöt64_t
 
ˇs
,

66 
memˇched_°‹age_a˘i⁄_t
 
vîb
)

68 
boﬁ
 
to_wrôe
;

69 
size_t
 
wrôe_Àngth
;

70 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

71 
uöt32_t
 
£rvî_key
;

72 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

74 
	`WATCHPOINT_ASSERT
(!(
vÆue
 =
NULL
 && 
vÆue_Àngth
 > 0));

76 
memˇched_ªtu∫_t
 
rc
;

77 i‡((
rc

	`öôülize_quîy
(
±r
)Ë!
MEMCACHED_SUCCESS
)

79  
rc
;

82 
rc

	`memˇched_vÆid©e_key_Àngth
(
key_Àngth
, 
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
);

83 
	`u∆ikñy
 (
rc
 !
MEMCACHED_SUCCESS
)

84  
rc
;

86 i‡(
±r
->
Êags
.
vîify_key
 && (
	`memˇched_key_ã°
((c⁄° **)&
key
, &
key_Àngth
, 1Ë=
MEMCACHED_BAD_KEY_PROVIDED
))

87  
MEMCACHED_BAD_KEY_PROVIDED
;

89 
£rvî_key

	`memˇched_gíî©e_hash_wôh_ªdi°ributi⁄
(
±r
, 
group_key
, 
group_key_Àngth
);

90 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
£rvî_key
);

92 
	`WATCHPOINT_SET
(
ö°™˚
->
io_waô_cou¡
.
ªad
= 0);

93 
	`WATCHPOINT_SET
(
ö°™˚
->
io_waô_cou¡
.
wrôe
= 0);

95 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

97 
rc

	`memˇched_£nd_bö¨y
(
±r
, 
ö°™˚
, 
£rvî_key
,

98 
key
, 
key_Àngth
,

99 
vÆue
, 
vÆue_Àngth
, 
expú©i⁄
,

100 
Êags
, 
ˇs
, 
vîb
);

101 
	`WATCHPOINT_IF_LABELED_NUMBER
(
ö°™˚
->
io_waô_cou¡
.
ªad
 > 2, "read IO_WAIT", instance->io_wait_count.read);

102 
	`WATCHPOINT_IF_LABELED_NUMBER
(
ö°™˚
->
io_waô_cou¡
.
wrôe
 > 2, "write_IO_WAIT", instance->io_wait_count.write);

107 i‡(
ˇs
)

109 
check_Àngth
;

110 
check_Àngth

	`¢¥ötf
(
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
,

112 
	`°‹age_›_°rög
(
vîb
),

113 
	`memˇched_¥öt_¨øy
(
±r
->
¥efix_key
),

114 ()
key_Àngth
, 
key
, 
Êags
,

115 ()
expú©i⁄
, ()
vÆue_Àngth
,

116 ()
ˇs
,

117 (
±r
->
Êags
.
no_ª∂y
) ? "Çoreply" : "");

118 i‡(
check_Àngth
 >
MEMCACHED_DEFAULT_COMMAND_SIZE
 || check_length < 0)

120 
rc

MEMCACHED_WRITE_FAILURE
;

121 
	`memˇched_io_ª£t
(
ö°™˚
);

123  
rc
;

125 
wrôe_Àngth

check_Àngth
;

129 *
buf„r_±r

buf„r
;

130 c⁄° *
comm™d

	`°‹age_›_°rög
(
vîb
);

133 
	`mem˝y
(
buf„r_±r
, 
comm™d
, 
	`°æí
(command));

136 
buf„r_±r

	`mem˝y
((buf„r_±∏+ 
	`°æí
(
comm™d
)), 
	`memˇched_¨øy_°rög
(
±r
->
¥efix_key
), 
	`memˇched_¨øy_size
(ptr->prefix_key));

139 
buf„r_±r

	`mem˝y
(buf„r_±∏+ 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
),

140 
key
, 
key_Àngth
);

141 
buf„r_±r
+
key_Àngth
;

142 
buf„r_±r
[0]= ' ';

143 
buf„r_±r
++;

145 
wrôe_Àngth
(
size_t
)(
buf„r_±r
 - 
buf„r
);

146 
check_Àngth
;

147 
check_Àngth

	`¢¥ötf
(
buf„r_±r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
 -(
size_t
)(buf„r_±∏- 
buf„r
),

149 
Êags
,

150 ()
expú©i⁄
, ()
vÆue_Àngth
,

151 
±r
->
Êags
.
no_ª∂y
 ? "Çoreply" : "");

152 i‡((
size_t
)
check_Àngth
 >
MEMCACHED_DEFAULT_COMMAND_SIZE
 -(size_t)(
buf„r_±r
 - 
buf„r
) || check_length < 0)

154 
rc

MEMCACHED_WRITE_FAILURE
;

155 
	`memˇched_io_ª£t
(
ö°™˚
);

157  
rc
;

160 
wrôe_Àngth
+(
size_t
)
check_Àngth
;

161 
	`WATCHPOINT_ASSERT
(
wrôe_Àngth
 < 
MEMCACHED_DEFAULT_COMMAND_SIZE
);

164 i‡(
±r
->
Êags
.
u£_udp
 &&Öå->Êags.
buf„r_ªque°s
)

166 
size_t
 
cmd_size

wrôe_Àngth
 + 
vÆue_Àngth
 + 2;

167 i‡(
cmd_size
 > 
MAX_UDP_DATAGRAM_LENGTH
 - 
UDP_DATAGRAM_HEADER_LENGTH
)

168  
MEMCACHED_WRITE_FAILURE
;

169 i‡(
cmd_size
 + 
ö°™˚
->
wrôe_buf„r_off£t
 > 
MAX_UDP_DATAGRAM_LENGTH
)

170 
	`memˇched_io_wrôe
(
ö°™˚
, 
NULL
, 0, 
åue
);

173 i‡(
wrôe_Àngth
 >
MEMCACHED_DEFAULT_COMMAND_SIZE
)

175 
rc

MEMCACHED_WRITE_FAILURE
;

179 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

181 { .
Àngth

wrôe_Àngth
, .
buf„r
= buffer },

182 { .
Àngth

vÆue_Àngth
, .
buf„r

vÆue
 },

183 { .
Àngth
2, .
buf„r
= "\r\n" }

186 i‡(
±r
->
Êags
.
buf„r_ªque°s
 && 
vîb
 =
SET_OP
)

188 
to_wrôe

Ál£
;

192 
to_wrôe

åue
;

196 
rc

	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 3, 
to_wrôe
);

197 i‡(
rc
 =
MEMCACHED_SUCCESS
)

200 i‡(
±r
->
Êags
.
no_ª∂y
)

202 
rc
(
to_wrôe
 =
Ál£
Ë? 
MEMCACHED_BUFFERED
 : 
MEMCACHED_SUCCESS
;

204 i‡(
to_wrôe
 =
Ál£
)

206 
rc

MEMCACHED_BUFFERED
;

210 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, 
NULL
);

212 i‡(
rc
 =
MEMCACHED_STORED
)

213 
rc

MEMCACHED_SUCCESS
;

218 i‡(
rc
 =
MEMCACHED_WRITE_FAILURE
)

219 
	`memˇched_io_ª£t
(
ö°™˚
);

222 
	`WATCHPOINT_IF_LABELED_NUMBER
(
ö°™˚
->
io_waô_cou¡
.
ªad
 > 2, "read IO_WAIT", instance->io_wait_count.read);

223 
	`WATCHPOINT_IF_LABELED_NUMBER
(
ö°™˚
->
io_waô_cou¡
.
wrôe
 > 2, "write_IO_WAIT", instance->io_wait_count.write);

225  
rc
;

226 
	}
}

229 
memˇched_ªtu∫_t
 
	$memˇched_£t
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
,

230 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

231 
time_t
 
expú©i⁄
,

232 
uöt32_t
 
Êags
)

234 
memˇched_ªtu∫_t
 
rc
;

235 
	`LIBMEMCACHED_MEMCACHED_SET_START
();

236 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

237 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

238 
expú©i⁄
, 
Êags
, 0, 
SET_OP
);

239 
	`LIBMEMCACHED_MEMCACHED_SET_END
();

240  
rc
;

241 
	}
}

243 
memˇched_ªtu∫_t
 
	$memˇched_add
(
memˇched_°
 *
±r
,

244 c⁄° *
key
, 
size_t
 
key_Àngth
,

245 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

246 
time_t
 
expú©i⁄
,

247 
uöt32_t
 
Êags
)

249 
memˇched_ªtu∫_t
 
rc
;

250 
	`LIBMEMCACHED_MEMCACHED_ADD_START
();

251 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

252 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

253 
expú©i⁄
, 
Êags
, 0, 
ADD_OP
);

254 
	`LIBMEMCACHED_MEMCACHED_ADD_END
();

255  
rc
;

256 
	}
}

258 
memˇched_ªtu∫_t
 
	$memˇched_ª∂a˚
(
memˇched_°
 *
±r
,

259 c⁄° *
key
, 
size_t
 
key_Àngth
,

260 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

261 
time_t
 
expú©i⁄
,

262 
uöt32_t
 
Êags
)

264 
memˇched_ªtu∫_t
 
rc
;

265 
	`LIBMEMCACHED_MEMCACHED_REPLACE_START
();

266 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

267 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

268 
expú©i⁄
, 
Êags
, 0, 
REPLACE_OP
);

269 
	`LIBMEMCACHED_MEMCACHED_REPLACE_END
();

270  
rc
;

271 
	}
}

273 
memˇched_ªtu∫_t
 
	$memˇched_¥ïíd
(
memˇched_°
 *
±r
,

274 c⁄° *
key
, 
size_t
 
key_Àngth
,

275 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

276 
time_t
 
expú©i⁄
,

277 
uöt32_t
 
Êags
)

279 
memˇched_ªtu∫_t
 
rc
;

280 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

281 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

282 
expú©i⁄
, 
Êags
, 0, 
PREPEND_OP
);

283  
rc
;

284 
	}
}

286 
memˇched_ªtu∫_t
 
	$memˇched_≠≥nd
(
memˇched_°
 *
±r
,

287 c⁄° *
key
, 
size_t
 
key_Àngth
,

288 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

289 
time_t
 
expú©i⁄
,

290 
uöt32_t
 
Êags
)

292 
memˇched_ªtu∫_t
 
rc
;

293 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

294 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

295 
expú©i⁄
, 
Êags
, 0, 
APPEND_OP
);

296  
rc
;

297 
	}
}

299 
memˇched_ªtu∫_t
 
	$memˇched_ˇs
(
memˇched_°
 *
±r
,

300 c⁄° *
key
, 
size_t
 
key_Àngth
,

301 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

302 
time_t
 
expú©i⁄
,

303 
uöt32_t
 
Êags
,

304 
uöt64_t
 
ˇs
)

306 
memˇched_ªtu∫_t
 
rc
;

307 
rc

	`memˇched_£nd
(
±r
, 
key
, 
key_Àngth
,

308 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

309 
expú©i⁄
, 
Êags
, 
ˇs
, 
CAS_OP
);

310  
rc
;

311 
	}
}

313 
memˇched_ªtu∫_t
 
	$memˇched_£t_by_key
(
memˇched_°
 *
±r
,

314 c⁄° *
group_key
,

315 
size_t
 
group_key_Àngth
,

316 c⁄° *
key
, 
size_t
 
key_Àngth
,

317 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

318 
time_t
 
expú©i⁄
,

319 
uöt32_t
 
Êags
)

321 
memˇched_ªtu∫_t
 
rc
;

322 
	`LIBMEMCACHED_MEMCACHED_SET_START
();

323 
rc

	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

324 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

325 
expú©i⁄
, 
Êags
, 0, 
SET_OP
);

326 
	`LIBMEMCACHED_MEMCACHED_SET_END
();

327  
rc
;

328 
	}
}

330 
memˇched_ªtu∫_t
 
	$memˇched_add_by_key
(
memˇched_°
 *
±r
,

331 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

332 c⁄° *
key
, 
size_t
 
key_Àngth
,

333 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

334 
time_t
 
expú©i⁄
,

335 
uöt32_t
 
Êags
)

337 
memˇched_ªtu∫_t
 
rc
;

338 
	`LIBMEMCACHED_MEMCACHED_ADD_START
();

339 
rc

	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

340 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

341 
expú©i⁄
, 
Êags
, 0, 
ADD_OP
);

342 
	`LIBMEMCACHED_MEMCACHED_ADD_END
();

343  
rc
;

344 
	}
}

346 
memˇched_ªtu∫_t
 
	$memˇched_ª∂a˚_by_key
(
memˇched_°
 *
±r
,

347 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

348 c⁄° *
key
, 
size_t
 
key_Àngth
,

349 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

350 
time_t
 
expú©i⁄
,

351 
uöt32_t
 
Êags
)

353 
memˇched_ªtu∫_t
 
rc
;

354 
	`LIBMEMCACHED_MEMCACHED_REPLACE_START
();

355 
rc

	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

356 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

357 
expú©i⁄
, 
Êags
, 0, 
REPLACE_OP
);

358 
	`LIBMEMCACHED_MEMCACHED_REPLACE_END
();

359  
rc
;

360 
	}
}

362 
memˇched_ªtu∫_t
 
	$memˇched_¥ïíd_by_key
(
memˇched_°
 *
±r
,

363 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

364 c⁄° *
key
, 
size_t
 
key_Àngth
,

365 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

366 
time_t
 
expú©i⁄
,

367 
uöt32_t
 
Êags
)

369 
memˇched_ªtu∫_t
 
rc
;

370 
rc

	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

371 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

372 
expú©i⁄
, 
Êags
, 0, 
PREPEND_OP
);

373  
rc
;

374 
	}
}

376 
memˇched_ªtu∫_t
 
	$memˇched_≠≥nd_by_key
(
memˇched_°
 *
±r
,

377 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

378 c⁄° *
key
, 
size_t
 
key_Àngth
,

379 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

380 
time_t
 
expú©i⁄
,

381 
uöt32_t
 
Êags
)

383 
memˇched_ªtu∫_t
 
rc
;

384 
rc

	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

385 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

386 
expú©i⁄
, 
Êags
, 0, 
APPEND_OP
);

387  
rc
;

388 
	}
}

390 
memˇched_ªtu∫_t
 
	$memˇched_ˇs_by_key
(
memˇched_°
 *
±r
,

391 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

392 c⁄° *
key
, 
size_t
 
key_Àngth
,

393 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

394 
time_t
 
expú©i⁄
,

395 
uöt32_t
 
Êags
,

396 
uöt64_t
 
ˇs
)

398 
memˇched_ªtu∫_t
 
rc
;

399 
rc

	`memˇched_£nd
(
±r
, 
group_key
, 
group_key_Àngth
,

400 
key
, 
key_Àngth
, 
vÆue
, 
vÆue_Àngth
,

401 
expú©i⁄
, 
Êags
, 
ˇs
, 
CAS_OP
);

402  
rc
;

403 
	}
}

405 
ölöe
 
uöt8_t
 
	$gë_com_code
(
memˇched_°‹age_a˘i⁄_t
 
vîb
, 
boﬁ
 
n‹ïly
)

409 
uöt8_t
 
ªt
= 0;

411 i‡(
n‹ïly
)

412 
vîb
)

414 
SET_OP
:

415 
ªt
=
PROTOCOL_BINARY_CMD_SETQ
;

417 
ADD_OP
:

418 
ªt
=
PROTOCOL_BINARY_CMD_ADDQ
;

420 
CAS_OP
:

421 
REPLACE_OP
:

422 
ªt
=
PROTOCOL_BINARY_CMD_REPLACEQ
;

424 
APPEND_OP
:

425 
ªt
=
PROTOCOL_BINARY_CMD_APPENDQ
;

427 
PREPEND_OP
:

428 
ªt
=
PROTOCOL_BINARY_CMD_PREPENDQ
;

431 
	`WATCHPOINT_ASSERT
(
vîb
);

435 
vîb
)

437 
SET_OP
:

438 
ªt
=
PROTOCOL_BINARY_CMD_SET
;

440 
ADD_OP
:

441 
ªt
=
PROTOCOL_BINARY_CMD_ADD
;

443 
CAS_OP
:

444 
REPLACE_OP
:

445 
ªt
=
PROTOCOL_BINARY_CMD_REPLACE
;

447 
APPEND_OP
:

448 
ªt
=
PROTOCOL_BINARY_CMD_APPEND
;

450 
PREPEND_OP
:

451 
ªt
=
PROTOCOL_BINARY_CMD_PREPEND
;

454 
	`WATCHPOINT_ASSERT
(
vîb
);

458  
ªt
;

459 
	}
}

463 
memˇched_ªtu∫_t
 
	$memˇched_£nd_bö¨y
(
memˇched_°
 *
±r
,

464 
memˇched_£rvî_wrôe_ö°™˚_°
 
£rvî
,

465 
uöt32_t
 
£rvî_key
,

466 c⁄° *
key
,

467 
size_t
 
key_Àngth
,

468 c⁄° *
vÆue
,

469 
size_t
 
vÆue_Àngth
,

470 
time_t
 
expú©i⁄
,

471 
uöt32_t
 
Êags
,

472 
uöt64_t
 
ˇs
,

473 
memˇched_°‹age_a˘i⁄_t
 
vîb
)

475 
boﬁ
 
Êush
;

476 
¥Ÿocﬁ_bö¨y_ªque°_£t
 
ªque°
{.
byãs
= {0}};

477 
size_t
 
£nd_Àngth
(
ªque°
.
byãs
);

479 
boﬁ
 
n‹ïly

£rvî
->
roŸ
->
Êags
.
no_ª∂y
;

481 
ªque°
.
mesßge
.
hódî
.ªque°.
magic

PROTOCOL_BINARY_REQ
;

482 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

	`gë_com_code
(
vîb
, 
n‹ïly
);

483 
ªque°
.
mesßge
.
hódî
.ªque°.
keyÀn

	`ht⁄s
((
uöt16_t
)(
key_Àngth
 + 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
)));

484 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

485 i‡(
vîb
 =
APPEND_OP
 || vîb =
PREPEND_OP
)

486 
£nd_Àngth
 -= 8;

489 
ªque°
.
mesßge
.
hódî
.ªque°.
exéí
= 8;

490 
ªque°
.
mesßge
.
body
.
Êags

	`ht⁄l
(flags);

491 
ªque°
.
mesßge
.
body
.
expú©i⁄

	`ht⁄l
((
uöt32_t
)expiration);

494 
ªque°
.
mesßge
.
hódî
.ªque°.
bodyÀn

	`ht⁄l
((
uöt32_t
Ë(
key_Àngth
 + 
	`memˇched_¨øy_size
(
±r
->
¥efix_key
Ë+ 
vÆue_Àngth
 +

495 
ªque°
.
mesßge
.
hódî
.ªque°.
exéí
));

497 i‡(
ˇs
)

498 
ªque°
.
mesßge
.
hódî
.ªque°.
ˇs

	`ht⁄Œ
(cas);

500 
Êush
(
boﬁ
Ë((
£rvî
->
roŸ
->
Êags
.
buf„r_ªque°s
 && 
vîb
 =
SET_OP
) ? 0 : 1);

502 i‡(
£rvî
->
roŸ
->
Êags
.
u£_udp
 && ! 
Êush
)

504 
size_t
 
cmd_size

£nd_Àngth
 + 
key_Àngth
 + 
vÆue_Àngth
;

506 i‡(
cmd_size
 > 
MAX_UDP_DATAGRAM_LENGTH
 - 
UDP_DATAGRAM_HEADER_LENGTH
)

508  
MEMCACHED_WRITE_FAILURE
;

510 i‡(
cmd_size
 + 
£rvî
->
wrôe_buf„r_off£t
 > 
MAX_UDP_DATAGRAM_LENGTH
)

512 
	`memˇched_io_wrôe
(
£rvî
, 
NULL
, 0, 
åue
);

516 
libmemˇched_io_ve˘‹_°
 
ve˘‹
[]=

518 { .
Àngth

£nd_Àngth
, .
buf„r

ªque°
.
byãs
 },

519 { .
Àngth

	`memˇched_¨øy_size
(
±r
->
¥efix_key
), .
buf„r

	`memˇched_¨øy_°rög
(ptr->prefix_key) },

520 { .
Àngth

key_Àngth
, .
buf„r

key
 },

521 { .
Àngth

vÆue_Àngth
, .
buf„r

vÆue
 }

525 
memˇched_ªtu∫_t
 
rc
;

526 i‡((
rc

	`memˇched_vdo
(
£rvî
, 
ve˘‹
, 4, 
Êush
)Ë!
MEMCACHED_SUCCESS
)

528 
	`memˇched_io_ª£t
(
£rvî
);

529  (
rc
 =
MEMCACHED_SUCCESS
Ë? 
MEMCACHED_WRITE_FAILURE
 :Ñc;

532 i‡(
vîb
 =
SET_OP
 && 
±r
->
numbî_of_ª∂iˇs
 > 0)

534 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_SETQ
;

535 
	`WATCHPOINT_STRING
("replicating");

537 
uöt32_t
 
x
0; x < 
±r
->
numbî_of_ª∂iˇs
; x++)

539 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
;

541 ++
£rvî_key
;

542 i‡(
£rvî_key
 =
	`memˇched_£rvî_cou¡
(
±r
))

543 
£rvî_key
= 0;

545 
ö°™˚

	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
£rvî_key
);

547 i‡(
	`memˇched_vdo
(
ö°™˚
, 
ve˘‹
, 4, 
Ál£
Ë!
MEMCACHED_SUCCESS
)

549 
	`memˇched_io_ª£t
(
ö°™˚
);

553 
	`memˇched_£rvî_ª•⁄£_de¸emít
(
ö°™˚
);

558 i‡(
Êush
 =
Ál£
)

560  
MEMCACHED_BUFFERED
;

563 i‡(
n‹ïly
)

565  
MEMCACHED_SUCCESS
;

568  
	`memˇched_ª•⁄£
(
£rvî
, 
NULL
, 0, NULL);

569 
	}
}

	@libmemcached/storage.h

12 #i‚de‡
__LIBMEMCACHED_STORAGE_H__


13 
	#__LIBMEMCACHED_STORAGE_H__


	)

15 
	~"libmemˇched/memˇched.h
"

17 #ifde‡
__˝lu•lus


22 
LIBMEMCACHED_API


23 
memˇched_ªtu∫_t
 
memˇched_£t
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
,

24 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

25 
time_t
 
expú©i⁄
,

26 
uöt32_t
 
Êags
);

27 
LIBMEMCACHED_API


28 
memˇched_ªtu∫_t
 
memˇched_add
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
,

29 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

30 
time_t
 
expú©i⁄
,

31 
uöt32_t
 
Êags
);

32 
LIBMEMCACHED_API


33 
memˇched_ªtu∫_t
 
memˇched_ª∂a˚
(
memˇched_°
 *
±r
, c⁄° *
key
, 
size_t
 
key_Àngth
,

34 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

35 
time_t
 
expú©i⁄
,

36 
uöt32_t
 
Êags
);

37 
LIBMEMCACHED_API


38 
memˇched_ªtu∫_t
 
memˇched_≠≥nd
(
memˇched_°
 *
±r
,

39 c⁄° *
key
, 
size_t
 
key_Àngth
,

40 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

41 
time_t
 
expú©i⁄
,

42 
uöt32_t
 
Êags
);

43 
LIBMEMCACHED_API


44 
memˇched_ªtu∫_t
 
memˇched_¥ïíd
(
memˇched_°
 *
±r
,

45 c⁄° *
key
, 
size_t
 
key_Àngth
,

46 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

47 
time_t
 
expú©i⁄
,

48 
uöt32_t
 
Êags
);

49 
LIBMEMCACHED_API


50 
memˇched_ªtu∫_t
 
memˇched_ˇs
(
memˇched_°
 *
±r
,

51 c⁄° *
key
, 
size_t
 
key_Àngth
,

52 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

53 
time_t
 
expú©i⁄
,

54 
uöt32_t
 
Êags
,

55 
uöt64_t
 
ˇs
);

57 
LIBMEMCACHED_API


58 
memˇched_ªtu∫_t
 
memˇched_£t_by_key
(
memˇched_°
 *
±r
,

59 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

60 c⁄° *
key
, 
size_t
 
key_Àngth
,

61 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

62 
time_t
 
expú©i⁄
,

63 
uöt32_t
 
Êags
);

65 
LIBMEMCACHED_API


66 
memˇched_ªtu∫_t
 
memˇched_add_by_key
(
memˇched_°
 *
±r
,

67 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

68 c⁄° *
key
, 
size_t
 
key_Àngth
,

69 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

70 
time_t
 
expú©i⁄
,

71 
uöt32_t
 
Êags
);

73 
LIBMEMCACHED_API


74 
memˇched_ªtu∫_t
 
memˇched_ª∂a˚_by_key
(
memˇched_°
 *
±r
,

75 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

76 c⁄° *
key
, 
size_t
 
key_Àngth
,

77 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

78 
time_t
 
expú©i⁄
,

79 
uöt32_t
 
Êags
);

81 
LIBMEMCACHED_API


82 
memˇched_ªtu∫_t
 
memˇched_¥ïíd_by_key
(
memˇched_°
 *
±r
,

83 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

84 c⁄° *
key
, 
size_t
 
key_Àngth
,

85 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

86 
time_t
 
expú©i⁄
,

87 
uöt32_t
 
Êags
);

89 
LIBMEMCACHED_API


90 
memˇched_ªtu∫_t
 
memˇched_≠≥nd_by_key
(
memˇched_°
 *
±r
,

91 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

92 c⁄° *
key
, 
size_t
 
key_Àngth
,

93 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

94 
time_t
 
expú©i⁄
,

95 
uöt32_t
 
Êags
);

97 
LIBMEMCACHED_API


98 
memˇched_ªtu∫_t
 
memˇched_ˇs_by_key
(
memˇched_°
 *
±r
,

99 c⁄° *
group_key
, 
size_t
 
group_key_Àngth
,

100 c⁄° *
key
, 
size_t
 
key_Àngth
,

101 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

102 
time_t
 
expú©i⁄
,

103 
uöt32_t
 
Êags
,

104 
uöt64_t
 
ˇs
);

106 #ifde‡
__˝lu•lus


	@libmemcached/strerror.c

1 
	~"comm⁄.h
"

3 c⁄° *
	$memˇched_°ªº‹
(
memˇched_°
 *
±r
, 
memˇched_ªtu∫_t
 
rc
)

5 ()
±r
;

6 
rc
)

8 
MEMCACHED_SUCCESS
:

10 
MEMCACHED_FAILURE
:

12 
MEMCACHED_HOST_LOOKUP_FAILURE
:

14 
MEMCACHED_CONNECTION_FAILURE
:

16 
MEMCACHED_CONNECTION_BIND_FAILURE
:

18 
MEMCACHED_READ_FAILURE
:

20 
MEMCACHED_UNKNOWN_READ_FAILURE
:

22 
MEMCACHED_PROTOCOL_ERROR
:

24 
MEMCACHED_CLIENT_ERROR
:

26 
MEMCACHED_SERVER_ERROR
:

28 
MEMCACHED_WRITE_FAILURE
:

30 
MEMCACHED_CONNECTION_SOCKET_CREATE_FAILURE
:

32 
MEMCACHED_DATA_EXISTS
:

34 
MEMCACHED_DATA_DOES_NOT_EXIST
:

36 
MEMCACHED_NOTSTORED
:

38 
MEMCACHED_STORED
:

40 
MEMCACHED_NOTFOUND
:

42 
MEMCACHED_MEMORY_ALLOCATION_FAILURE
:

44 
MEMCACHED_PARTIAL_READ
:

46 
MEMCACHED_SOME_ERRORS
:

48 
MEMCACHED_NO_SERVERS
:

50 
MEMCACHED_END
:

52 
MEMCACHED_DELETED
:

54 
MEMCACHED_VALUE
:

56 
MEMCACHED_STAT
:

58 
MEMCACHED_ITEM
:

60 
MEMCACHED_ERRNO
:

62 
MEMCACHED_FAIL_UNIX_SOCKET
:

64 
MEMCACHED_NOT_SUPPORTED
:

66 
MEMCACHED_FETCH_NOTFINISHED
:

68 
MEMCACHED_NO_KEY_PROVIDED
:

70 
MEMCACHED_BUFFERED
:

72 
MEMCACHED_TIMEOUT
:

74 
MEMCACHED_BAD_KEY_PROVIDED
:

76 
MEMCACHED_INVALID_HOST_PROTOCOL
:

78 
MEMCACHED_SERVER_MARKED_DEAD
:

80 
MEMCACHED_UNKNOWN_STAT_KEY
:

82 
MEMCACHED_E2BIG
:

84 
MEMCACHED_INVALID_ARGUMENTS
:

86 
MEMCACHED_KEY_TOO_BIG
:

88 
MEMCACHED_AUTH_PROBLEM
:

90 
MEMCACHED_AUTH_FAILURE
:

92 
MEMCACHED_AUTH_CONTINUE
:

94 
MEMCACHED_PARSE_ERROR
:

96 
MEMCACHED_PARSE_USER_ERROR
:

98 
MEMCACHED_DEPRECATED
:

100 
MEMCACHED_MAXIMUM_RETURN
:

105 
	}
}

	@libmemcached/strerror.h

12 #i‚de‡
__LIBMEMCACHED_STRERROR_H__


13 
	#__LIBMEMCACHED_STRERROR_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 c⁄° *
memˇched_°ªº‹
(
memˇched_°
 *
±r
, 
memˇched_ªtu∫_t
 
rc
);

22 #ifde‡
__˝lu•lus


	@libmemcached/string.c

12 
	~"comm⁄.h
"

14 
ölöe
 
memˇched_ªtu∫_t
 
	$_°rög_check
(
memˇched_°rög_°
 *
°rög
, 
size_t
 
√ed
)

16 i‡(
√ed
 &&Çìd > (
size_t
)(
°rög
->
cuºít_size
 - (size_t)(°rög->
íd
 - string->string)))

18 
size_t
 
cuºít_off£t
(size_tË(
°rög
->
íd
 - string->string);

19 *
√w_vÆue
;

20 
size_t
 
adju°
;

21 
size_t
 
√w_size
;

24 
adju°
(
√ed
 - (
size_t
)(
°rög
->
cuºít_size
 - (size_t)(°rög->
íd
 - såög->°rög))Ë/ 
MEMCACHED_BLOCK_SIZE
;

25 
adju°
++;

27 
√w_size
(Ë* (
size_t
)((
adju°
 * 
MEMCACHED_BLOCK_SIZE
Ë+ 
°rög
->
cuºít_size
);

29 i‡(
√w_size
 < 
√ed
)

30  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

32 
√w_vÆue

	`libmemˇched_ªÆloc
(
°rög
->
roŸ
, såög->°rög, 
√w_size
);

34 i‡(
√w_vÆue
 =
NULL
)

36  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

39 
°rög
->°rög
√w_vÆue
;

40 
°rög
->
íd
°rög->°rög + 
cuºít_off£t
;

42 
°rög
->
cuºít_size
+(
MEMCACHED_BLOCK_SIZE
 * 
adju°
);

45  
MEMCACHED_SUCCESS
;

46 
	}
}

48 
ölöe
 
	$_öô_°rög
(
memˇched_°rög_°
 *
£lf
)

50 
£lf
->
cuºít_size
= 0;

51 
£lf
->
íd
£lf->
°rög

NULL
;

52 
	}
}

54 
memˇched_°rög_°
 *
	$memˇched_°rög_¸óã
(c⁄° 
memˇched_°
 *
memc
, 
memˇched_°rög_°
 *
£lf
, 
size_t
 
öôül_size
)

56 
memˇched_ªtu∫_t
 
rc
;

58 
	`WATCHPOINT_ASSERT
(
memc
);

61 i‡(
£lf
)

63 
	`WATCHPOINT_ASSERT
(
£lf
->
›ti⁄s
.
is_öôülized
 =
Ál£
);

65 
£lf
->
›ti⁄s
.
is_Æloˇãd

Ál£
;

69 
£lf

	`libmemˇched_mÆloc
(
memc
, (
memˇched_°rög_°
));

71 i‡(
£lf
 =
NULL
)

73  
NULL
;

76 
£lf
->
›ti⁄s
.
is_Æloˇãd

åue
;

78 
£lf
->
roŸ
(
memˇched_°
 *)
memc
;

80 
	`_öô_°rög
(
£lf
);

82 
rc

	`_°rög_check
(
£lf
, 
öôül_size
);

83 i‡(
rc
 !
MEMCACHED_SUCCESS
)

85 i‡(
rc
 =
MEMCACHED_MEMORY_ALLOCATION_FAILURE
)

87 
	`memˇched_£t_î∫o
(
£lf
->
roŸ
, 
î∫o
, 
NULL
);

89 
	`libmemˇched_‰ì
(
memc
, 
£lf
);

91  
NULL
;

94 
£lf
->
›ti⁄s
.
is_öôülized

åue
;

96 
	`WATCHPOINT_ASSERT
(
£lf
->
°rög
 =£lf->
íd
);

98  
£lf
;

99 
	}
}

101 
memˇched_ªtu∫_t
 
	$memˇched_°rög_≠≥nd_ch¨a˘î
(
memˇched_°rög_°
 *
°rög
,

102 
ch¨a˘î
)

104 
memˇched_ªtu∫_t
 
rc
;

106 
rc

	`_°rög_check
(
°rög
, 1);

108 i‡(
rc
 !
MEMCACHED_SUCCESS
)

110  
rc
;

113 *
°rög
->
íd

ch¨a˘î
;

114 
°rög
->
íd
++;

116  
MEMCACHED_SUCCESS
;

117 
	}
}

119 
memˇched_ªtu∫_t
 
	$memˇched_°rög_≠≥nd
(
memˇched_°rög_°
 *
°rög
,

120 c⁄° *
vÆue
, 
size_t
 
Àngth
)

122 
memˇched_ªtu∫_t
 
rc
;

124 
rc

	`_°rög_check
(
°rög
, 
Àngth
);

126 i‡(
rc
 !
MEMCACHED_SUCCESS
)

128  
rc
;

131 
	`WATCHPOINT_ASSERT
(
Àngth
 <
°rög
->
cuºít_size
);

132 
	`WATCHPOINT_ASSERT
(
°rög
->string);

133 
	`WATCHPOINT_ASSERT
(
°rög
->
íd
 >= string->string);

135 
	`mem˝y
(
°rög
->
íd
, 
vÆue
, 
Àngth
);

136 
°rög
->
íd
+
Àngth
;

138  
MEMCACHED_SUCCESS
;

139 
	}
}

141 *
	$memˇched_°rög_c_c›y
(
memˇched_°rög_°
 *
°rög
)

143 *
c_±r
;

145 i‡(
	`memˇched_°rög_Àngth
(
°rög
) == 0)

146  
NULL
;

148 
c_±r

	`libmemˇched_mÆloc
(
°rög
->
roŸ
, (
	`memˇched_°rög_Àngth
(string)+1) * ());

150 i‡(
c_±r
 =
NULL
)

151  
NULL
;

153 
	`mem˝y
(
c_±r
, 
	`memˇched_°rög_vÆue
(
°rög
), 
	`memˇched_°rög_Àngth
(string));

154 
c_±r
[
	`memˇched_°rög_Àngth
(
°rög
)]= 0;

156  
c_±r
;

157 
	}
}

159 
memˇched_ªtu∫_t
 
	$memˇched_°rög_ª£t
(
memˇched_°rög_°
 *
°rög
)

161 
°rög
->
íd
= string->string;

163  
MEMCACHED_SUCCESS
;

164 
	}
}

166 
	$memˇched_°rög_‰ì
(
memˇched_°rög_°
 *
±r
)

168 i‡(
±r
 =
NULL
)

171 i‡(
±r
->
°rög
)

173 
	`libmemˇched_‰ì
(
±r
->
roŸ
,Öå->
°rög
);

176 i‡(
	`memˇched_is_Æloˇãd
(
±r
))

178 
	`libmemˇched_‰ì
(
±r
->
roŸ
,Ötr);

182 
±r
->
›ti⁄s
.
is_öôülized

Ál£
;

184 
	}
}

186 
memˇched_ªtu∫_t
 
	$memˇched_°rög_check
(
memˇched_°rög_°
 *
°rög
, 
size_t
 
√ed
)

188  
	`_°rög_check
(
°rög
, 
√ed
);

189 
	}
}

191 
size_t
 
	$memˇched_°rög_Àngth
(c⁄° 
memˇched_°rög_°
 *
£lf
)

193  (
size_t
)(
£lf
->
íd
 - sñf->
°rög
);

194 
	}
}

196 
size_t
 
	$memˇched_°rög_size
(c⁄° 
memˇched_°rög_°
 *
£lf
)

198  
£lf
->
cuºít_size
;

199 
	}
}

201 c⁄° *
	$memˇched_°rög_vÆue
(c⁄° 
memˇched_°rög_°
 *
£lf
)

203  
£lf
->
°rög
;

204 
	}
}

206 *
	$memˇched_°rög_vÆue_muèbÀ
(c⁄° 
memˇched_°rög_°
 *
£lf
)

208  
£lf
->
°rög
;

209 
	}
}

211 
	$memˇched_°rög_£t_Àngth
(
memˇched_°rög_°
 *
£lf
, 
size_t
 
Àngth
)

213 
£lf
->
íd
£lf->
°rög
 + 
Àngth
;

214 
	}
}

	@libmemcached/string.h

12 #¥agm®
⁄˚


13 #i‚de‡
__LIBMEMCACHED_STRING_H__


14 
	#__LIBMEMCACHED_STRING_H__


	)

26 
	smemˇched_°rög_°
 {

27 *
	míd
;

28 *
	m°rög
;

29 
size_t
 
	mcuºít_size
;

30 
memˇched_°
 *
	mroŸ
;

32 
boﬁ
 
	mis_Æloˇãd
:1;

33 
boﬁ
 
	mis_öôülized
:1;

34 } 
	m›ti⁄s
;

37 
	smemˇched_°rög_t
 {

38 
size_t
 
	msize
;

39 c⁄° *
	mc_°r
;

42 #ifde‡
__˝lu•lus


46 
LIBMEMCACHED_LOCAL


47 
memˇched_°rög_°
 *
memˇched_°rög_¸óã
(c⁄° 
memˇched_°
 *
±r
,

48 
memˇched_°rög_°
 *
°rög
,

49 
size_t
 
öôül_size
);

50 
LIBMEMCACHED_LOCAL


51 
memˇched_ªtu∫_t
 
memˇched_°rög_check
(
memˇched_°rög_°
 *
°rög
, 
size_t
 
√ed
);

53 
LIBMEMCACHED_LOCAL


54 *
memˇched_°rög_c_c›y
(
memˇched_°rög_°
 *
°rög
);

56 
LIBMEMCACHED_LOCAL


57 
memˇched_ªtu∫_t
 
memˇched_°rög_≠≥nd_ch¨a˘î
(
memˇched_°rög_°
 *
°rög
,

58 
ch¨a˘î
);

59 
LIBMEMCACHED_LOCAL


60 
memˇched_ªtu∫_t
 
memˇched_°rög_≠≥nd
(
memˇched_°rög_°
 *
°rög
,

61 c⁄° *
vÆue
, 
size_t
 
Àngth
);

62 
LIBMEMCACHED_LOCAL


63 
memˇched_ªtu∫_t
 
memˇched_°rög_ª£t
(
memˇched_°rög_°
 *
°rög
);

65 
LIBMEMCACHED_LOCAL


66 
memˇched_°rög_‰ì
(
memˇched_°rög_°
 *
°rög
);

68 
LIBMEMCACHED_LOCAL


69 
size_t
 
memˇched_°rög_Àngth
(c⁄° 
memˇched_°rög_°
 *
£lf
);

71 
LIBMEMCACHED_LOCAL


72 
size_t
 
memˇched_°rög_size
(c⁄° 
memˇched_°rög_°
 *
£lf
);

74 
LIBMEMCACHED_LOCAL


75 c⁄° *
memˇched_°rög_vÆue
(c⁄° 
memˇched_°rög_°
 *
£lf
);

77 
LIBMEMCACHED_LOCAL


78 *
memˇched_°rög_vÆue_muèbÀ
(c⁄° 
memˇched_°rög_°
 *
£lf
);

80 
LIBMEMCACHED_LOCAL


81 
memˇched_°rög_£t_Àngth
(
memˇched_°rög_°
 *
£lf
, 
size_t
 
Àngth
);

83 #ifde‡
__˝lu•lus


87 #ifde‡
BUILDING_LIBMEMCACHED


89 #ifde‡
__˝lu•lus


90 
	#memˇched_°rög_wôh_size
(
X
Ë(X), (
°©ic_ˇ°
<
size_t
>(((XË- 1)))

	)

91 
	#memˇched_°rög_make
(
X
Ë(
°©ic_ˇ°
<
size_t
>(((XË- 1))), (X)

	)

93 
	#memˇched_°rög_wôh_size
(
X
Ë(X), ((
size_t
)(((XË- 1)))

	)

94 
	#memˇched_°rög_make
(
X
Ë(((
size_t
)(((XË- 1))), (X)

	)

97 
	#memˇched_°rög_make_‰om_c°r
(
X
Ë(X), ((XË? 
	`°æí
(XË: 0)

	)

	@libmemcached/types.h

12 #i‚de‡
__LIBMEMCACHED_TYPES_H__


13 
	#__LIBMEMCACHED_TYPES_H__


	)

15 
memˇched_°
 
	tmemˇched_°
;

16 
memˇched_°©_°
 
	tmemˇched_°©_°
;

17 
memˇched_™Æysis_°
 
	tmemˇched_™Æysis_°
;

18 
memˇched_ªsu…_°
 
	tmemˇched_ªsu…_°
;

19 
memˇched_¨øy_°
 
	tmemˇched_¨øy_°
;

20 
memˇched_îr‹_t
 
	tmemˇched_îr‹_t
;

23 
memˇched_£rvî_°
 
	tmemˇched_£rvî_°
;

24 c⁄° 
	tmemˇched_£rvî_°
 *
	tmemˇched_£rvî_ö°™˚_°
;

25 
memˇched_£rvî_°
 *
	tmemˇched_£rvî_li°_°
;

27 
memˇched_ˇŒback_°
 
	tmemˇched_ˇŒback_°
;

30 
memˇched_°rög_°
 
	tmemˇched_°rög_°
;

31 
memˇched_°rög_t
 
	tmemˇched_°rög_t
;

32 
memˇched_c⁄töuum_ôem_°
 
	tmemˇched_c⁄töuum_ôem_°
;

35 #ifde‡
__˝lu•lus


39 
memˇched_ªtu∫_t
 (*
	tmemˇched_˛⁄e_‚
)(
	tmemˇched_°
 *
	tde°ö©i⁄
, c⁄° memˇched_° *
	tsour˚
);

40 
memˇched_ªtu∫_t
 (*
	tmemˇched_˛ónup_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
);

45 (*
memˇched_‰ì_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, *
	tmem
, *
	tc⁄ãxt
);

46 *(*
	tmemˇched_mÆloc_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, c⁄° 
	tsize_t
 
	tsize
, *
	tc⁄ãxt
);

47 *(*
	tmemˇched_ªÆloc_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, *
	tmem
, c⁄° 
	tsize_t
 
	tsize
, *
	tc⁄ãxt
);

48 *(*
	tmemˇched_ˇŒoc_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, 
	tsize_t
 
	t√Àm
, c⁄° size_à
	tñsize
, *
	tc⁄ãxt
);

51 
memˇched_ªtu∫_t
 (*
	tmemˇched_execuã_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, 
	tmemˇched_ªsu…_°
 *
	tªsu…
, *
	tc⁄ãxt
);

52 
memˇched_ªtu∫_t
 (*
	tmemˇched_£rvî_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
, 
	tmemˇched_£rvî_ö°™˚_°
 
	t£rvî
, *
	tc⁄ãxt
);

53 
memˇched_ªtu∫_t
 (*
	tmemˇched_°©_‚
)(
	tmemˇched_£rvî_ö°™˚_°
 
	t£rvî
,

54 c⁄° *
	tkey
, 
	tsize_t
 
	tkey_Àngth
,

55 c⁄° *
	tvÆue
, 
	tsize_t
 
	tvÆue_Àngth
,

56 *
	tc⁄ãxt
);

61 
memˇched_ªtu∫_t
 (*
	tmemˇched_åiggî_key_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
,

62 c⁄° *
	tkey
, 
	tsize_t
 
	tkey_Àngth
,

63 
	tmemˇched_ªsu…_°
 *
	tªsu…
);

64 
memˇched_ªtu∫_t
 (*
	tmemˇched_åiggî_dñëe_key_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
,

65 c⁄° *
	tkey
, 
	tsize_t
 
	tkey_Àngth
);

67 
memˇched_ªtu∫_t
 (*
	tmemˇched_dump_‚
)(c⁄° 
	tmemˇched_°
 *
	t±r
,

68 c⁄° *
	tkey
,

69 
	tsize_t
 
	tkey_Àngth
,

70 *
	tc⁄ãxt
);

72 #ifde‡
__˝lu•lus


79 
memˇched_ªtu∫_t
 
	tmemˇched_ªtu∫
;

80 
memˇched_£rvî_di°ributi⁄_t
 
	tmemˇched_£rvî_di°ributi⁄
;

81 
memˇched_behavi‹_t
 
	tmemˇched_behavi‹
;

82 
memˇched_ˇŒback_t
 
	tmemˇched_ˇŒback
;

83 
memˇched_hash_t
 
	tmemˇched_hash
;

84 
memˇched_c⁄√˘i⁄_t
 
	tmemˇched_c⁄√˘i⁄
;

85 
memˇched_˛⁄e_‚
 
	tmemˇched_˛⁄e_func
;

86 
memˇched_˛ónup_‚
 
	tmemˇched_˛ónup_func
;

87 
memˇched_execuã_‚
 
	tmemˇched_execuã_fun˘i⁄
;

88 
memˇched_£rvî_‚
 
	tmemˇched_£rvî_fun˘i⁄
;

89 
memˇched_åiggî_key_‚
 
	tmemˇched_åiggî_key
;

90 
memˇched_åiggî_dñëe_key_‚
 
	tmemˇched_åiggî_dñëe_key
;

91 
memˇched_dump_‚
 
	tmemˇched_dump_func
;

	@libmemcached/util.h

15 #i‚de‡
__LIBMEMCACHED__UTIL_H__


16 
	#__LIBMEMCACHED__UTIL_H__


	)

18 
	~<libmemˇched/memˇched_utû.h
>

	@libmemcached/util/ping.c

12 
	~"libmemˇched/comm⁄.h
"

13 
	~"libmemˇched/memˇched_utû.h
"

16 
boﬁ
 
	$libmemˇched_utû_pög
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, 
memˇched_ªtu∫_t
 *
ªt
)

18 
memˇched_ªtu∫_t
 
rc
;

19 
memˇched_°
 
memc
, *
memc_±r
;

21 
memc_±r

	`memˇched_¸óã
(&
memc
);

23 
rc

	`memˇched_£rvî_add
(
memc_±r
, 
ho°«me
, 
p‹t
);

25 i‡(
rc
 =
MEMCACHED_SUCCESS
)

27 
rc

	`memˇched_vîsi⁄
(
memc_±r
);

30 
	`memˇched_‰ì
(
memc_±r
);

32 i‡(
ªt
)

34 *
ªt

rc
;

37  
rc
 =
MEMCACHED_SUCCESS
;

38 
	}
}

	@libmemcached/util/ping.h

12 #i‚de‡
__LIBMEMCACHED_PING_H__


13 
	#__LIBMEMCACHED_PING_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
boﬁ
 
libmemˇched_utû_pög
(c⁄° *
ho°«me
, 
ö_p‹t_t
 
p‹t
, 
memˇched_ªtu∫_t
 *
ªt
);

22 #ifde‡
__˝lu•lus


	@libmemcached/util/pool.c

13 
	~"libmemˇched/comm⁄.h
"

14 
	~"libmemˇched/memˇched_utû.h
"

16 
	~<î∫o.h
>

17 
	~<±hªad.h
>

19 
	smemˇched_poﬁ_°


21 
±hªad_muãx_t
 
	mmuãx
;

22 
±hªad_c⁄d_t
 
	mc⁄d
;

23 
memˇched_°
 *
	mma°î
;

24 
memˇched_°
 **
	mmmc
;

25 
	mfú°‰ì
;

26 
uöt32_t
 
	msize
;

27 
uöt32_t
 
	mcuºít_size
;

28 
boﬁ
 
	m_owns_ma°î
;

29 *
	mvîsi⁄
;

32 
memˇched_ªtu∫_t
 
	$muãx_íãr
(
±hªad_muãx_t
 *
muãx
)

34 
ªt
;

36 
ªt

	`±hªad_muãx_lock
(
muãx
);

37 
ªt
 =-1 && 
î∫o
 =
EINTR
);

39  (
ªt
 =-1Ë? 
MEMCACHED_ERRNO
 : 
MEMCACHED_SUCCESS
;

40 
	}
}

42 
memˇched_ªtu∫_t
 
	$muãx_exô
(
±hªad_muãx_t
 *
muãx
)

44 
ªt
;

46 
ªt

	`±hªad_muãx_u∆ock
(
muãx
);

47 
ªt
 =-1 && 
î∫o
 =
EINTR
);

49  (
ªt
 =-1Ë? 
MEMCACHED_ERRNO
 : 
MEMCACHED_SUCCESS
;

50 
	}
}

56 
	$grow_poﬁ
(
memˇched_poﬁ_°
* 
poﬁ
)

58 
memˇched_°
 *
obj

	`ˇŒoc
(1, (*obj));

60 i‡(
obj
 =
NULL
)

63 i‡(
	`memˇched_˛⁄e
(
obj
, 
poﬁ
->
ma°î
Ë=
NULL
)

65 
	`‰ì
(
obj
);

69 
poﬁ
->
mmc
[++poﬁ->
fú°‰ì
] = 
obj
;

70 
poﬁ
->
cuºít_size
++;

72  
EXIT_SUCCESS
;

73 
	}
}

75 
ölöe
 
memˇched_poﬁ_°
 *
	$_poﬁ_¸óã
(
memˇched_°
* 
mmc
, 
uöt32_t
 
öôül
, uöt32_à
max
)

77 
memˇched_poﬁ_°
* 
ªt

NULL
;

79 i‡(! 
öôül
 || ! 
max
 || initial > max)

81 
î∫o

EINVAL
;

82  
NULL
;

85 
memˇched_poﬁ_°
 
obje˘
{ .
muãx
 = 
PTHREAD_MUTEX_INITIALIZER
,

86 .
c⁄d

PTHREAD_COND_INITIALIZER
,

87 .
ma°î

mmc
,

88 .
mmc

	`ˇŒoc
(
max
, (
memˇched_°
*)),

89 .
fú°‰ì
= -1,

90 .
size

max
,

91 .
cuºít_size
= 0,

92 .
_owns_ma°î

Ál£
};

94 i‡(
obje˘
.
mmc
 !
NULL
)

96 
ªt
(
memˇched_poﬁ_°
*)
	`ˇŒoc
(1, (memcached_pool_st));

97 i‡(
ªt
 =
NULL
)

99 
	`‰ì
(
obje˘
.
mmc
);

100 
î∫o

ENOMEM
;

101  
NULL
;

104 *
ªt

obje˘
;

110 
ii
0; iò< 
öôül
; ++ii)

112 i‡(
	`grow_poﬁ
(
ªt
) == -1)

117  
ªt
;

118 
	}
}

120 
memˇched_poﬁ_°
 *
	$memˇched_poﬁ_¸óã
(
memˇched_°
* 
mmc
, 
uöt32_t
 
öôül
, uöt32_à
max
)

122  
	`_poﬁ_¸óã
(
mmc
, 
öôül
, 
max
);

123 
	}
}

125 
memˇched_poﬁ_°
 * 
	$memˇched_poﬁ
(c⁄° *
›ti⁄_°rög
, 
size_t
 
›ti⁄_°rög_Àngth
)

127 
memˇched_poﬁ_°
 *
£lf
;

128 
memˇched_°
 *
memc

	`memˇched
(
›ti⁄_°rög
, 
›ti⁄_°rög_Àngth
);

130 i‡(! 
memc
)

131  
NULL
;

133 
£lf

	`memˇched_poﬁ_¸óã
(
memc
, memc->
c⁄figuª
.
öôül_poﬁ_size
, memc->c⁄figuª.
max_poﬁ_size
);

134 i‡(! 
£lf
)

136 
	`memˇched_‰ì
(
memc
);

137 
î∫o

ENOMEM
;

138  
NULL
;

140 
î∫o
= 0;

142 
£lf
->
_owns_ma°î

åue
;

144  
£lf
;

145 
	}
}

147 
memˇched_°
* 
	$memˇched_poﬁ_de°roy
(
memˇched_poﬁ_°
* 
poﬁ
)

149 i‡(! 
poﬁ
)

150  
NULL
;

152 
memˇched_°
 *
ªt

poﬁ
->
ma°î
;

154 
xx
0; xx <
poﬁ
->
fú°‰ì
; ++xx)

156 
	`memˇched_‰ì
(
poﬁ
->
mmc
[
xx
]);

157 
	`‰ì
(
poﬁ
->
mmc
[
xx
]);

158 
poﬁ
->
mmc
[
xx
] = 
NULL
;

161 
	`±hªad_muãx_de°roy
(&
poﬁ
->
muãx
);

162 
	`±hªad_c⁄d_de°roy
(&
poﬁ
->
c⁄d
);

163 
	`‰ì
(
poﬁ
->
mmc
);

164 i‡(
poﬁ
->
_owns_ma°î
)

166 
	`memˇched_‰ì
(
poﬁ
->
ma°î
);

167 
ªt

NULL
;

169 
	`‰ì
(
poﬁ
);

171  
ªt
;

172 
	}
}

174 
memˇched_°
* 
	$memˇched_poﬁ_p›
(
memˇched_poﬁ_°
* 
poﬁ
,

175 
boﬁ
 
block
,

176 
memˇched_ªtu∫_t
 *
rc
)

178 i‡(! 
poﬁ
 || ! 
rc
)

180 
î∫o

EINVAL
;

181  
NULL
;

184 
memˇched_°
 *
ªt

NULL
;

185 i‡((*
rc

	`muãx_íãr
(&
poﬁ
->
muãx
)Ë!
MEMCACHED_SUCCESS
)

187  
NULL
;

192 i‡(
poﬁ
->
fú°‰ì
 > -1)

194 
ªt

poﬁ
->
mmc
[poﬁ->
fú°‰ì
--];

196 i‡(
poﬁ
->
cuºít_size
 =poﬁ->
size
)

198 i‡(!
block
)

200 *
rc

	`muãx_exô
(&
poﬁ
->
muãx
);

201  
NULL
;

204 i‡(
	`±hªad_c⁄d_waô
(&
poﬁ
->
c⁄d
, &poﬁ->
muãx
) == -1)

206 
îr

î∫o
;

207 
	`muãx_exô
(&
poﬁ
->
muãx
);

208 
î∫o

îr
;

209 *
rc

MEMCACHED_ERRNO
;

210  
NULL
;

213 i‡(
	`grow_poﬁ
(
poﬁ
) == -1)

215 *
rc

	`muãx_exô
(&
poﬁ
->
muãx
);

216  
NULL
;

219 
ªt
 =
NULL
);

221 *
rc

	`muãx_exô
(&
poﬁ
->
muãx
);

223  
ªt
;

224 
	}
}

226 
memˇched_ªtu∫_t
 
	$memˇched_poﬁ_push
(
memˇched_poﬁ_°
* 
poﬁ
,

227 
memˇched_°
 *
mmc
)

229 i‡(! 
poﬁ
)

230  
MEMCACHED_INVALID_ARGUMENTS
;

232 
memˇched_ªtu∫_t
 
rc

	`muãx_íãr
(&
poﬁ
->
muãx
);

234 i‡(
rc
 !
MEMCACHED_SUCCESS
)

235  
rc
;

237 * 
vîsi⁄

	`memˇched_gë_u£r_d©a
(
mmc
);

239 i‡(
vîsi⁄
 !
poﬁ
->version)

241 
	`memˇched_‰ì
(
mmc
);

242 
	`mem£t
(
mmc
, 0, (*mmc));

243 i‡(
	`memˇched_˛⁄e
(
mmc
, 
poﬁ
->
ma°î
Ë=
NULL
)

245 
rc

MEMCACHED_SOME_ERRORS
;

249 
poﬁ
->
mmc
[++poﬁ->
fú°‰ì
]= mmc;

251 i‡(
poﬁ
->
fú°‰ì
 =0 &&Öoﬁ->
cuºít_size
 =poﬁ->
size
)

254 
	`±hªad_c⁄d_brﬂdˇ°
(&
poﬁ
->
c⁄d
);

257 
memˇched_ªtu∫_t
 
rvÆ

	`muãx_exô
(&
poﬁ
->
muãx
);

258 i‡(
rc
 =
MEMCACHED_SOME_ERRORS
)

259  
rc
;

261  
rvÆ
;

262 
	}
}

265 
memˇched_ªtu∫_t
 
	$memˇched_poﬁ_behavi‹_£t
(
memˇched_poﬁ_°
 *
poﬁ
,

266 
memˇched_behavi‹_t
 
Êag
,

267 
uöt64_t
 
d©a
)

269 i‡(! 
poﬁ
)

270  
MEMCACHED_INVALID_ARGUMENTS
;

272 
memˇched_ªtu∫_t
 
rc

	`muãx_íãr
(&
poﬁ
->
muãx
);

273 i‡(
rc
 !
MEMCACHED_SUCCESS
)

274  
rc
;

277 
rc

	`memˇched_behavi‹_£t
(
poﬁ
->
ma°î
, 
Êag
, 
d©a
);

278 i‡(
rc
 !
MEMCACHED_SUCCESS
)

280 
	`muãx_exô
(&
poﬁ
->
muãx
);

281  
rc
;

284 ++
poﬁ
->
vîsi⁄
;

285 
	`memˇched_£t_u£r_d©a
(
poﬁ
->
ma°î
,Öoﬁ->
vîsi⁄
);

287 
xx
0; xx <
poﬁ
->
fú°‰ì
; ++xx)

289 
rc

	`memˇched_behavi‹_£t
(
poﬁ
->
mmc
[
xx
], 
Êag
, 
d©a
);

290 i‡(
rc
 =
MEMCACHED_SUCCESS
)

292 
	`memˇched_£t_u£r_d©a
(
poﬁ
->
mmc
[
xx
],Öoﬁ->
vîsi⁄
);

296 
	`memˇched_‰ì
(
poﬁ
->
mmc
[
xx
]);

297 
	`mem£t
(
poﬁ
->
mmc
[
xx
], 0, (*pool->mmc[xx]));

299 i‡(
	`memˇched_˛⁄e
(
poﬁ
->
mmc
[
xx
],Öoﬁ->
ma°î
Ë=
NULL
)

307 
	`‰ì
(
poﬁ
->
mmc
[
xx
]);

308 
poﬁ
->
mmc
[
xx
]
NULL
;

313  
	`muãx_exô
(&
poﬁ
->
muãx
);

314 
	}
}

316 
memˇched_ªtu∫_t
 
	$memˇched_poﬁ_behavi‹_gë
(
memˇched_poﬁ_°
 *
poﬁ
,

317 
memˇched_behavi‹_t
 
Êag
,

318 
uöt64_t
 *
vÆue
)

320 i‡(! 
poﬁ
)

321  
MEMCACHED_INVALID_ARGUMENTS
;

323 
memˇched_ªtu∫_t
 
rc

	`muãx_íãr
(&
poﬁ
->
muãx
);

324 i‡(
rc
 !
MEMCACHED_SUCCESS
)

326  
rc
;

329 *
vÆue

	`memˇched_behavi‹_gë
(
poﬁ
->
ma°î
, 
Êag
);

331  
	`muãx_exô
(&
poﬁ
->
muãx
);

332 
	}
}

	@libmemcached/util/pool.h

13 #i‚de‡
__LIMEMCACHED_UTIL_POOL_H__


14 
	#__LIMEMCACHED_UTIL_POOL_H__


	)

16 
	~<libmemˇched/memˇched.h
>

18 #ifde‡
__˝lu•lus


22 
memˇched_poﬁ_°
;

23 
memˇched_poﬁ_°
 
	tmemˇched_poﬁ_°
;

25 
LIBMEMCACHED_API


26 
memˇched_poﬁ_°
 *
memˇched_poﬁ_¸óã
(
memˇched_°
* 
mmc
, 
uöt32_t
 
öôül
, uöt32_à
max
);

28 
LIBMEMCACHED_API


29 
memˇched_poﬁ_°
 *
memˇched_poﬁ
(c⁄° *
›ti⁄_°rög
, 
size_t
 
›ti⁄_°rög_Àngth
);

31 
LIBMEMCACHED_API


32 
memˇched_°
* 
memˇched_poﬁ_de°roy
(
memˇched_poﬁ_°
* 
poﬁ
);

34 
LIBMEMCACHED_API


35 
memˇched_°
* 
memˇched_poﬁ_p›
(
memˇched_poﬁ_°
* 
poﬁ
,

36 
boﬁ
 
block
,

37 
memˇched_ªtu∫_t
* 
rc
);

38 
LIBMEMCACHED_API


39 
memˇched_ªtu∫_t
 
memˇched_poﬁ_push
(
memˇched_poﬁ_°
* 
poﬁ
,

40 
memˇched_°
* 
mmc
);

42 
LIBMEMCACHED_API


43 
memˇched_ªtu∫_t
 
memˇched_poﬁ_behavi‹_£t
(
memˇched_poﬁ_°
 *
±r
,

44 
memˇched_behavi‹_t
 
Êag
,

45 
uöt64_t
 
d©a
);

46 
LIBMEMCACHED_API


47 
memˇched_ªtu∫_t
 
memˇched_poﬁ_behavi‹_gë
(
memˇched_poﬁ_°
 *
±r
,

48 
memˇched_behavi‹_t
 
Êag
,

49 
uöt64_t
 *
vÆue
);

51 #ifde‡
__˝lu•lus


	@libmemcached/util/version.c

13 
	~"libmemˇched/comm⁄.h
"

14 
	~"libmemˇched/memˇched_utû.h
"

16 
	sloˇl_c⁄ãxt


18 
uöt8_t
 
	mmaj‹_vîsi⁄
;

19 
uöt8_t
 
	mmö‹_vîsi⁄
;

20 
uöt8_t
 
	mmi¸o_vîsi⁄
;

22 
boﬁ
 
	måuth
;

25 
memˇched_ªtu∫_t
 
	$check_£rvî_vîsi⁄
(c⁄° 
memˇched_°
 *
±r
,

26 c⁄° 
memˇched_£rvî_°
 *
ö°™˚
,

27 *
c⁄ãxt
)

30 
loˇl_c⁄ãxt
 *
check
(loˇl_c⁄ãxà*)
c⁄ãxt
;

31 ()
±r
;

33 i‡(
ö°™˚
->
maj‹_vîsi⁄
 !
UINT8_MAX
 &&

34 
ö°™˚
->
maj‹_vîsi⁄
 >
check
->major_version &&

35 
ö°™˚
->
mö‹_vîsi⁄
 >
check
->minor_version &&

36 
ö°™˚
->
mi¸o_vîsi⁄
 >
check
->micro_version )

38  
MEMCACHED_SUCCESS
;

41 
check
->
åuth

Ál£
;

43  
MEMCACHED_FAILURE
;

44 
	}
}

46 
boﬁ
 
	$libmemˇched_utû_vîsi⁄_check
(
memˇched_°
 *
memc
,

47 
uöt8_t
 
maj‹_vîsi⁄
,

48 
uöt8_t
 
mö‹_vîsi⁄
,

49 
uöt8_t
 
mi¸o_vîsi⁄
)

51 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

52 
memˇched_ªtu∫_t
 
rc

	`memˇched_vîsi⁄
(
memc
);

54 i‡(
rc
 !
MEMCACHED_SUCCESS
)

55  
Ál£
;

57 
loˇl_c⁄ãxt
 
check
{ .
maj‹_vîsi⁄
maj‹_vîsi⁄, .
mö‹_vîsi⁄
mö‹_vîsi⁄, .
mi¸o_vîsi⁄
mi¸o_vîsi⁄, .
åuth

åue
 };

59 
ˇŒbacks
[0]
check_£rvî_vîsi⁄
;

60 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, (*)&
check
, 1);

62  
check
.
åuth
;

63 
	}
}

	@libmemcached/util/version.h

12 #i‚de‡
__LIBMEMCACHED_UTIL_VERSION_H__


13 
	#__LIBMEMCACHED_UTIL_VERSION_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
boﬁ
 
libmemˇched_utû_vîsi⁄_check
(
memˇched_°
 *
memc
,

21 
uöt8_t
 
maj‹_vîsi⁄
,

22 
uöt8_t
 
mö‹_vîsi⁄
,

23 
uöt8_t
 
mi¸o_vîsi⁄
);

25 #ifde‡
__˝lu•lus


	@libmemcached/verbosity.c

1 
	~"comm⁄.h
"

3 
	sc⁄ãxt_°


5 
size_t
 
	mÀngth
;

6 c⁄° *
	mbuf„r
;

9 
memˇched_ªtu∫_t
 
	$_£t_vîbosôy
(c⁄° 
memˇched_°
 *
±r
,

10 c⁄° 
memˇched_£rvî_°
 *
£rvî
,

11 *
c⁄ãxt
)

13 
memˇched_ªtu∫_t
 
rc
;

14 
memˇched_°
 
loˇl_memc
;

15 
memˇched_°
 *
memc_±r
;

16 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

18 
c⁄ãxt_°
 *
execuã
(c⁄ãxt_° *)
c⁄ãxt
;

19 ()
±r
;

21 
memc_±r

	`memˇched_¸óã
(&
loˇl_memc
);

23 
rc

	`memˇched_£rvî_add
(
memc_±r
, 
	`memˇched_£rvî_«me
(
£rvî
), 
	`memˇched_£rvî_p‹t
(server));

25 i‡(
rc
 =
MEMCACHED_SUCCESS
)

27 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

28 
	`memˇched_£rvî_ö°™˚_„tch
(
memc_±r
, 0);

30 
rc

	`memˇched_do
(
ö°™˚
, 
execuã
->
buf„r
,Éxecuã->
Àngth
, 
åue
);

32 i‡(
rc
 =
MEMCACHED_SUCCESS
)

34 
rc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, 
NULL
);

38 
	`memˇched_‰ì
(
memc_±r
);

40  
rc
;

41 
	}
}

43 
memˇched_ªtu∫_t
 
	$memˇched_vîbosôy
(
memˇched_°
 *
±r
, 
uöt32_t
 
vîbosôy
)

45 
£nd_Àngth
;

46 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

48 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

50 
£nd_Àngth

	`¢¥ötf
(
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
,

51 "vîbosôy %u\r\n", 
vîbosôy
);

52 i‡(
£nd_Àngth
 >
MEMCACHED_DEFAULT_COMMAND_SIZE
 || send_length < 0)

53  
MEMCACHED_WRITE_FAILURE
;

55 
c⁄ãxt_°
 
c⁄ãxt
 = { .
Àngth
(
size_t
)
£nd_Àngth
, .
buf„r
= buffer };

57 
ˇŒbacks
[0]
_£t_vîbosôy
;

59  
	`memˇched_£rvî_curs‹
(
±r
, 
ˇŒbacks
, &
c⁄ãxt
, 1);

60 
	}
}

	@libmemcached/verbosity.h

12 #i‚de‡
__LIBMEMCACHED_VERBOSITY_H__


13 
	#__LIBMEMCACHED_VERBOSITY_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
memˇched_ªtu∫_t
 
memˇched_vîbosôy
(
memˇched_°
 *
±r
, 
uöt32_t
 
vîbosôy
);

23 #ifde‡
__˝lu•lus


	@libmemcached/version.c

1 
	~"comm⁄.h
"

3 c⁄° * 
	$memˇched_lib_vîsi⁄
()

5  
LIBMEMCACHED_VERSION_STRING
;

6 
	}
}

8 
ölöe
 
memˇched_ªtu∫_t
 
memˇched_vîsi⁄_bö¨y
(
memˇched_°
 *
±r
);

9 
ölöe
 
memˇched_ªtu∫_t
 
memˇched_vîsi⁄_ãxtuÆ
(
memˇched_°
 *
±r
);

11 
memˇched_ªtu∫_t
 
	$memˇched_vîsi⁄
(
memˇched_°
 *
±r
)

13 i‡(
±r
->
Êags
.
u£_udp
)

14  
MEMCACHED_NOT_SUPPORTED
;

16 
memˇched_ªtu∫_t
 
rc
;

18 i‡(
±r
->
Êags
.
bö¨y_¥Ÿocﬁ
)

19 
rc

	`memˇched_vîsi⁄_bö¨y
(
±r
);

21 
rc

	`memˇched_vîsi⁄_ãxtuÆ
(
±r
);

23  
rc
;

24 
	}
}

26 
ölöe
 
memˇched_ªtu∫_t
 
	$memˇched_vîsi⁄_ãxtuÆ
(
memˇched_°
 *
±r
)

28 
size_t
 
£nd_Àngth
;

29 
memˇched_ªtu∫_t
 
rc
;

30 
buf„r
[
MEMCACHED_DEFAULT_COMMAND_SIZE
];

31 *
ª•⁄£_±r
;

32 c⁄° *
comm™d
= "version\r\n";

34 
£nd_Àngth
= ("version\r\n") -1;

36 
rc

MEMCACHED_SUCCESS
;

37 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

39 
memˇched_ªtu∫_t
 
ºc
;

40 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

41 
	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
x
);

44 i‡(
ö°™˚
->
maj‹_vîsi⁄
 !
UINT8_MAX
)

47 
ºc

	`memˇched_do
(
ö°™˚
, 
comm™d
, 
£nd_Àngth
, 
åue
);

48 i‡(
ºc
 !
MEMCACHED_SUCCESS
)

50 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

51 
rc

MEMCACHED_SOME_ERRORS
;

55 
ºc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, 
MEMCACHED_DEFAULT_COMMAND_SIZE
, 
NULL
);

56 i‡(
ºc
 !
MEMCACHED_SUCCESS
)

58 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

59 
rc

MEMCACHED_SOME_ERRORS
;

64 
ª•⁄£_±r

	`ödex
(
buf„r
, ' ');

65 
ª•⁄£_±r
++;

67 
ö°™˚
->
maj‹_vîsi⁄
(
uöt8_t
)
	`°πﬁ
(
ª•⁄£_±r
, (**)
NULL
, 10);

68 i‡(
î∫o
 =
ERANGE
)

70 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

71 
rc

MEMCACHED_SOME_ERRORS
;

75 
ª•⁄£_±r

	`ödex
(response_ptr, '.');

76 
ª•⁄£_±r
++;

78 
ö°™˚
->
mö‹_vîsi⁄
(
uöt8_t
)
	`°πﬁ
(
ª•⁄£_±r
, (**)
NULL
, 10);

79 i‡(
î∫o
 =
ERANGE
)

81 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

82 
rc

MEMCACHED_SOME_ERRORS
;

86 
ª•⁄£_±r

	`ödex
(response_ptr, '.');

87 
ª•⁄£_±r
++;

88 
ö°™˚
->
mi¸o_vîsi⁄
(
uöt8_t
)
	`°πﬁ
(
ª•⁄£_±r
, (**)
NULL
, 10);

89 i‡(
î∫o
 =
ERANGE
)

91 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

92 
rc

MEMCACHED_SOME_ERRORS
;

97  
rc
;

98 
	}
}

100 
ölöe
 
memˇched_ªtu∫_t
 
	$memˇched_vîsi⁄_bö¨y
(
memˇched_°
 *
±r
)

102 
memˇched_ªtu∫_t
 
rc
;

103 
¥Ÿocﬁ_bö¨y_ªque°_vîsi⁄
 
ªque°
{ .
byãs
= {0}};

104 
ªque°
.
mesßge
.
hódî
.ªque°.
magic

PROTOCOL_BINARY_REQ
;

105 
ªque°
.
mesßge
.
hódî
.ªque°.
›code

PROTOCOL_BINARY_CMD_VERSION
;

106 
ªque°
.
mesßge
.
hódî
.ªque°.
d©©y≥

PROTOCOL_BINARY_RAW_BYTES
;

108 
rc

MEMCACHED_SUCCESS
;

109 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

111 
memˇched_ªtu∫_t
 
ºc
;

113 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

114 
	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
x
);

116 i‡(
ö°™˚
->
maj‹_vîsi⁄
 !
UINT8_MAX
)

119 
ºc

	`memˇched_do
(
ö°™˚
, 
ªque°
.
byãs
, ‘eque°.byãs), 
åue
);

120 i‡(
ºc
 !
MEMCACHED_SUCCESS
)

122 
	`memˇched_io_ª£t
(
ö°™˚
);

123 
rc

MEMCACHED_SOME_ERRORS
;

128 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
±r
); x++)

130 
memˇched_£rvî_wrôe_ö°™˚_°
 
ö°™˚
=

131 
	`memˇched_£rvî_ö°™˚_„tch
(
±r
, 
x
);

133 i‡(
ö°™˚
->
maj‹_vîsi⁄
 !
UINT8_MAX
)

136 i‡(
	`memˇched_£rvî_ª•⁄£_cou¡
(
ö°™˚
) > 0)

138 
memˇched_ªtu∫_t
 
ºc
;

139 
buf„r
[32];

140 *
p
;

142 
ºc

	`memˇched_ª•⁄£
(
ö°™˚
, 
buf„r
, (buf„r), 
NULL
);

143 i‡(
ºc
 !
MEMCACHED_SUCCESS
)

145 
	`memˇched_io_ª£t
(
ö°™˚
);

146 
rc

MEMCACHED_SOME_ERRORS
;

150 
ö°™˚
->
maj‹_vîsi⁄
(
uöt8_t
)
	`°πﬁ
(
buf„r
, &
p
, 10);

151 i‡(
î∫o
 =
ERANGE
)

153 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

154 
rc

MEMCACHED_SOME_ERRORS
;

158 
ö°™˚
->
mö‹_vîsi⁄
(
uöt8_t
)
	`°πﬁ
(
p
 + 1, &p, 10);

159 i‡(
î∫o
 =
ERANGE
)

161 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

162 
rc

MEMCACHED_SOME_ERRORS
;

166 
ö°™˚
->
mi¸o_vîsi⁄
(
uöt8_t
)
	`°πﬁ
(
p
 + 1, 
NULL
, 10);

167 i‡(
î∫o
 =
ERANGE
)

169 
ö°™˚
->
maj‹_vîsi⁄
ö°™˚->
mö‹_vîsi⁄
ö°™˚->
mi¸o_vîsi⁄

UINT8_MAX
;

170 
rc

MEMCACHED_SOME_ERRORS
;

177  
rc
;

178 
	}
}

	@libmemcached/version.h

12 #i‚de‡
__LIBMEMCACHED_VERSION_H__


13 
	#__LIBMEMCACHED_VERSION_H__


	)

15 #ifde‡
__˝lu•lus


19 
LIBMEMCACHED_API


20 
memˇched_ªtu∫_t
 
memˇched_vîsi⁄
(
memˇched_°
 *
±r
);

22 
LIBMEMCACHED_API


23 c⁄° * 
memˇched_lib_vîsi⁄
();

25 #ifde‡
__˝lu•lus


	@libmemcached/virtual_bucket.c

38 
	~<libmemˇched/comm⁄.h
>

39 
	~<libmemˇched/vútuÆ_buckë.h
>

41 
	sbuckë_t
 {

42 
uöt32_t
 
	mma°î
;

43 
uöt32_t
 
	mf‹w¨d
;

46 
	smemˇched_vútuÆ_buckë_t
 {

47 
boﬁ
 
	mhas_f‹w¨d
;

48 
uöt32_t
 
	msize
;

49 
uöt32_t
 
	mª∂iˇs
;

50 
buckë_t
 
	mbuckës
[];

53 
memˇched_ªtu∫_t
 
	$memˇched_vútuÆ_buckë_¸óã
(
memˇched_°
 *
£lf
,

54 c⁄° 
uöt32_t
 *
ho°_m≠
,

55 c⁄° 
uöt32_t
 *
f‹w¨d_m≠
,

56 c⁄° 
uöt32_t
 
buckës
,

57 c⁄° 
uöt32_t
 
ª∂iˇs
)

59 i‡(! 
£lf
 || ! 
ho°_m≠
 || ! 
buckës
)

60  
MEMCACHED_INVALID_ARGUMENTS
;

62 
	`memˇched_vútuÆ_buckë_‰ì
(
£lf
);

64 
memˇched_vútuÆ_buckë_t
 *
vútuÆ_buckë
(memˇched_vútuÆ_buckë_à*)
	`mÆloc
((memˇched_vútuÆ_buckë_tË+ (
buckë_t
Ë*
buckës
);

66 i‡(! 
vútuÆ_buckë
)

67  
MEMCACHED_MEMORY_ALLOCATION_FAILURE
;

69 
vútuÆ_buckë
->
size

buckës
;

70 
vútuÆ_buckë
->
ª∂iˇs
=Ñeplicas;

71 
£lf
->
vútuÆ_buckë
= virtual_bucket;

73 
uöt32_t
 
x
=0; x < 
buckës
; x++)

75 
vútuÆ_buckë
->
buckës
[
x
].
ma°î

ho°_m≠
[x];

76 i‡(
f‹w¨d_m≠
)

78 
vútuÆ_buckë
->
buckës
[
x
].
f‹w¨d

f‹w¨d_m≠
[x];

82 
vútuÆ_buckë
->
buckës
[
x
].
f‹w¨d
= 0;

87  
MEMCACHED_SUCCESS
;

88 
	}
}

90 
	$memˇched_vútuÆ_buckë_‰ì
(
memˇched_°
 *
£lf
)

92 i‡(! 
£lf
)

95 i‡(! 
£lf
->
vútuÆ_buckë
)

98 
	`‰ì
(
£lf
->
vútuÆ_buckë
);

99 
£lf
->
vútuÆ_buckë

NULL
;

100 
	}
}

102 
uöt32_t
 
	$memˇched_vútuÆ_buckë_gë
(c⁄° 
memˇched_°
 *
£lf
, 
uöt32_t
 
dige°
)

104 i‡(! 
£lf
)

107 i‡(! 
£lf
->
vútuÆ_buckë
)

110 i‡(
£lf
->
vútuÆ_buckë
)

112 
uöt32_t
 
ªsu…
(uöt32_tË(
dige°
 & (
£lf
->
vútuÆ_buckë
->
size
 -1));

113  
£lf
->
vútuÆ_buckë
->
buckës
[
ªsu…
].
ma°î
;

116  (
uöt32_t
Ë(
dige°
 & (
£lf
->
numbî_of_ho°s
 -1));

117 
	}
}

	@libmemcached/virtual_bucket.h

38 #¥agm®
⁄˚


40 #ifde‡
__˝lu•lus


44 
LIBMEMCACHED_LOCAL


45 
memˇched_ªtu∫_t
 
memˇched_vútuÆ_buckë_¸óã
(
memˇched_°
 *
£lf
,

46 c⁄° 
uöt32_t
 *
ho°_m≠
,

47 c⁄° 
uöt32_t
 *
f‹w¨d_m≠
,

48 c⁄° 
uöt32_t
 
buckës
,

49 c⁄° 
uöt32_t
 
ª∂iˇs
);

51 
LIBMEMCACHED_LOCAL


52 
uöt32_t
 
memˇched_vútuÆ_buckë_gë
(c⁄° 
memˇched_°
 *
£lf
, uöt32_à
dige°
);

54 
LIBMEMCACHED_LOCAL


55 
memˇched_vútuÆ_buckë_‰ì
(
memˇched_°
 *
£lf
);

57 #ifde‡
__˝lu•lus


	@libmemcached/visibility.h

19 #i‚de‡
__LIBMEMCACHED_VISIBILITY_H__


20 
	#__LIBMEMCACHED_VISIBILITY_H__


	)

30 #i‡
deföed
(
BUILDING_LIBMEMCACHED
)

31 #i‡
deföed
(
HAVE_VISIBILITY
) && HAVE_VISIBILITY

32 
	#LIBMEMCACHED_API
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

33 
	#LIBMEMCACHED_LOCAL
 
	`__©åibuã__
 ((
	`visibûôy
("hiddí")))

	)

34 #ñi‡
deföed
 (
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

35 
	#LIBMEMCACHED_API
 
__globÆ


	)

36 
	#LIBMEMCACHED_LOCAL
 
__hiddí


	)

37 #ñi‡
deföed
(
_MSC_VER
)

38 
	#LIBMEMCACHED_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

39 
	#LIBMEMCACHED_LOCAL


	)

41 
	#LIBMEMCACHED_API


	)

42 
	#LIBMEMCACHED_LOCAL


	)

45 #i‡
deföed
(
_MSC_VER
)

46 
	#LIBMEMCACHED_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

47 
	#LIBMEMCACHED_LOCAL


	)

49 
	#LIBMEMCACHED_API


	)

50 
	#LIBMEMCACHED_LOCAL


	)

	@libmemcached/watchpoint.h

12 #i‚de‡
__LIBMEMCACHED_WATCHPOINT_H__


13 
	#__LIBMEMCACHED_WATCHPOINT_H__


	)

16 #i‡
deföed
(
DEBUG
)

18 #ifde‡
TARGET_OS_LINUX


19 
ölöe
 
	$libmemˇched_°ack_dump
()

21 *
¨øy
[10];

22 
size
;

23 **
°rögs
;

25 
size

	`backåa˚
(
¨øy
, 10);

26 
°rögs

	`backåa˚_symbﬁs
(
¨øy
, 
size
);

28 
	`Ârötf
(
°dîr
, "Found %d sèck fømes.\n", 
size
);

30 
x
0; x < 
size
; x++)

31 
	`Ârötf
(
°dîr
, "%s\n", 
°rögs
[
x
]);

33 
	`‰ì
 (
°rögs
);

35 
	`fÊush
(
°dîr
);

36 
	}
}

38 #ñi‡
deföed
(
__sun
)

39 
	~<uc⁄ãxt.h
>

41 
ölöe
 
	$libmemˇched_°ack_dump
()

43 
	`fÊush
(
°dîr
);

44 
	`¥öt°ack
(
	`fûío
(
°dîr
));

45 
	}
}

49 
ölöe
 
	$libmemˇched_°ack_dump
()

50 { 
	}
}

54 
	~<as£π.h
>

56 
	#WATCHPOINT
 dÿ{ 
	`Ârötf
(
°dîr
, "\nWATCHPOINT %s:%d (%s)\n", 
__FILE__
, 
__LINE__
,
__func__
);
	`fÊush
(
°dout
); } 0)

	)

57 
	#WATCHPOINT_ERROR
(
A
Ëdÿ{
	`Ârötf
(
°dîr
, "\nWATCHPOINT %s:%d %s\n", 
__FILE__
, 
__LINE__
, 
	`memˇched_°ªº‹
(
NULL
, A));
	`fÊush
(
°dout
); } 0)

	)

58 
	#WATCHPOINT_IFERROR
(
A
Ëdÿ{ if(A !
MEMCACHED_SUCCESS
)
	`Ârötf
(
°dîr
, "\nWATCHPOINT %s:%d %s\n", 
__FILE__
, 
__LINE__
, 
	`memˇched_°ªº‹
(
NULL
, A));
	`fÊush
(
°dout
); } 0)

	)

59 
	#WATCHPOINT_STRING
(
A
Ëdÿ{ 
	`Ârötf
(
°dîr
, "\nWATCHPOINT %s:%d (%sË%s\n", 
__FILE__
, 
__LINE__
,
__func__
,A);
	`fÊush
(
°dout
); } 0)

	)

60 
	#WATCHPOINT_STRING_LENGTH
(
A
,
B
Ëdÿ{ 
	`Ârötf
(
°dîr
, "\nWATCHPOINT %s:%d (%sË%.*s\n", 
__FILE__
, 
__LINE__
,
__func__
,()B,A);
	`fÊush
(
°dout
); } 0)

	)

61 
	#WATCHPOINT_NUMBER
(
A
Ëdÿ{ 
	`Ârötf
(
°dîr
, "\nWATCHPOINT %s:%d (%sË%lu\n", 
__FILE__
, 
__LINE__
,
__func__
,()(A));
	`fÊush
(
°dout
); } 0)

	)

62 
	#WATCHPOINT_LABELED_NUMBER
(
A
,
B
Ëdÿ{ 
	`Ârötf
(
°dîr
, "\nWATCHPOINT %s:%d (%sË%s:%lu\n", 
__FILE__
, 
__LINE__
,
__func__
,(A),()(B));
	`fÊush
(
°dout
); } 0)

	)

63 
	#WATCHPOINT_IF_LABELED_NUMBER
(
A
,
B
,
C
Ëdÿ{ if(AË{
	`Ârötf
(
°dîr
, "\nWATCHPOINT %s:%d (%sË%s:%lu\n", 
__FILE__
, 
__LINE__
,
__func__
,(B),()(C));
	`fÊush
(
°dout
);} } 0)

	)

64 
	#WATCHPOINT_ERRNO
(
A
Ëdÿ{ 
	`Ârötf
(
°dîr
, "\nWATCHPOINT %s:%d (%sË%s\n", 
__FILE__
, 
__LINE__
,
__func__
, 
	`°ªº‹
(A));
	`fÊush
(
°dout
); } 0)

	)

65 
	#WATCHPOINT_ASSERT_PRINT
(
A
,
B
,
C
Ëdÿ{ if(!(A)){
	`Ârötf
(
°dîr
, "\nWATCHPOINT ASSERT %s:%d (%sË", 
__FILE__
, 
__LINE__
,
__func__
);Ârötf(°dîr, (B),(C));Ârötf(°dîr,"\n");
	`fÊush
(
°dout
); 
	`libmemˇched_°ack_dump
(); } 
	`as£π
((A)); } 0)

	)

66 
	#WATCHPOINT_ASSERT
(
A
Ëdÿ{ i‡(! (A)Ë{
	`libmemˇched_°ack_dump
();} 
	`as£π
((A)); } 0)

	)

67 
	#WATCHPOINT_ASSERT_INITIALIZED
(
A
Ëdÿ{ i‡(! (A)Ë{ 
	`libmemˇched_°ack_dump
(); } 
	`as£π
(
	`memˇched_is_öôülized
((A))); } 0);

	)

68 
	#WATCHPOINT_SET
(
A
Ëdÿ{ A; } 0);

	)

72 
	#WATCHPOINT


	)

73 
	#WATCHPOINT_ERROR
(
A
)

	)

74 
	#WATCHPOINT_IFERROR
(
A
)

	)

75 
	#WATCHPOINT_STRING
(
A
)

	)

76 
	#WATCHPOINT_NUMBER
(
A
)

	)

77 
	#WATCHPOINT_LABELED_NUMBER
(
A
,
B
)

	)

78 
	#WATCHPOINT_IF_LABELED_NUMBER
(
A
,
B
,
C
)

	)

79 
	#WATCHPOINT_ERRNO
(
A
)

	)

80 
	#WATCHPOINT_ASSERT_PRINT
(
A
,
B
,
C
)

	)

81 
	#WATCHPOINT_ASSERT
(
A
)

	)

82 
	#WATCHPOINT_ASSERT_INITIALIZED
(
A
)

	)

83 
	#WATCHPOINT_SET
(
A
)

	)

	@libtest/failed.h

38 #¥agm®
⁄˚


39 
	~<libã°/visibûôy.h
>

41 #ifde‡
__˝lu•lus


45 
LIBTEST_INTERNAL_API


46 
push_Áûed_ã°
(c⁄° *
cﬁÀ˘i⁄
, c⁄° *
ã°
);

48 
LIBTEST_INTERNAL_API


49 
¥öt_Áûed_ã°
();

51 #ifde‡
__˝lu•lus


	@libtest/server.c

16 
	#TEST_PORT_BASE
 
MEMCACHED_DEFAULT_PORT
+10

	)

18 
	~<c⁄fig.h
>

20 
	~<as£π.h
>

21 
	~<limôs.h
>

22 
	~<sig«l.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<sys/time.h
>

27 
	~<time.h
>

28 
	~<uni°d.h
>

29 
	~<î∫o.h
>

31 
	~<libmemˇched/memˇched.h
>

32 
	~<libmemˇched/utû.h
>

34 
	~<libã°/£rvî.h
>

36 
time•ec
 
	gglobÆ_¶ìp_vÆue
{ .
tv_£c
0, .
	gtv_n£c
= 50000 };

38 
	$globÆ_¶ìp
()

40 #ifde‡
WIN32


41 
	`¶ìp
(1);

43 
	`«no¶ìp
(&
globÆ_¶ìp_vÆue
, 
NULL
);

45 
	}
}

47 
boﬁ
 
	$waô_f‹_fûe
(c⁄° *
fûíame
)

49 
uöt32_t
 
timeout
= 6;

50 
uöt32_t
 
waôed
;

51 
uöt32_t
 
this_waô
;

52 
uöt32_t
 
ªåy
;

54 
waôed
0, 
ªåy
1; ;Ñëry++, waôed+
this_waô
)

56 i‡((! 
	`ac˚ss
(
fûíame
, 
R_OK
)Ë|| (
waôed
 >
timeout
))

58  
åue
;

61 
this_waô

ªåy
 *Ñetry / 3 + 1;

62 
	`¶ìp
(
this_waô
);

65  
Ál£
;

66 
	}
}

68 
	$kûl_fûe
(c⁄° *
fûe_buf„r
)

70 
FILE
 *
Â
;

72 (
Â

	`f›í
(
fûe_buf„r
, "r")))

74 
pid_buf„r
[1024];

76 i‡(
	`fgës
(
pid_buf„r
, ’id_buf„r), 
Â
Ë!
NULL
)

78 
pid_t
 
pid
’id_t)
	`©oi
(
pid_buf„r
);

79 i‡(
pid
 != 0)

81 i‡(
	`kûl
(
pid
, 
SIGTERM
) == -1)

83 
	`ªmove
(
fûe_buf„r
);

87 
uöt32_t
 
cou¡î
= 3;

88 (
	`kûl
(
pid
, 0Ë=0Ë&& --
cou¡î
)

90 
	`globÆ_¶ìp
();

96 
	`globÆ_¶ìp
();

98 
	`f˛o£
(
Â
);

100 
	}
}

102 
	$£rvî_°¨tup
(
£rvî_°¨tup_°
 *
c⁄°ru˘
)

104 i‡((
c⁄°ru˘
->
£rvî_li°

	`gëív
("MEMCACHED_SERVERS")))

106 
	`¥ötf
("£rvî†%s\n", 
c⁄°ru˘
->
£rvî_li°
);

107 
c⁄°ru˘
->
£rvîs

	`memˇched_£rvîs_∑r£
(c⁄°ru˘->
£rvî_li°
);

108 
c⁄°ru˘
->
£rvî_li°

NULL
;

109 
c⁄°ru˘
->
cou¡
= 0;

114 
£rvî_°rög_buf„r
[8096];

115 *
íd_±r
;

116 
íd_±r

£rvî_°rög_buf„r
;

118 
uöt32_t
 
p‹t_ba£
= 0;

119 
uöt32_t
 
x
0; x < 
c⁄°ru˘
->
cou¡
; x++)

121 
°©us
;

123 
	`¢¥ötf
(
c⁄°ru˘
->
pid_fûe
[
x
], 
FILENAME_MAX
, "/tmp/memcached.pidXXXXXX");

124 
fd
;

125 i‡((
fd

	`mk°emp
(
c⁄°ru˘
->
pid_fûe
[
x
])) == -1)

127 
	`≥º‹
("mkstemp");

130 
	`˛o£
(
fd
);

133 *
v¨
;

134 
v¨übÀ_buf„r
[1024];

136 
	`¢¥ötf
(
v¨übÀ_buf„r
, (v¨übÀ_buf„r), "LIBMEMCACHED_PORT_%u", 
x
);

138 i‡((
v¨

	`gëív
(
v¨übÀ_buf„r
)))

140 
c⁄°ru˘
->
p‹t
[
x
](
ö_p‹t_t
)
	`©oi
(
v¨
);

145 
c⁄°ru˘
->
p‹t
[
x
](
ö_p‹t_t
)(x + 
TEST_PORT_BASE
 + 
p‹t_ba£
);

147 i‡(
	`libmemˇched_utû_pög
("loˇlho°", 
c⁄°ru˘
->
p‹t
[
x
], 
NULL
))

149 
p‹t_ba£
++;

150 
c⁄°ru˘
->
p‹t
[
x
]= 0;

152 } 
c⁄°ru˘
->
p‹t
[
x
] == 0);

156 
buf„r
[
FILENAME_MAX
];

157 i‡(
x
 == 0)

159 
	`¢¥ötf
(
buf„r
, (buffer), "%s -d -P %s -t 1 -p %u -U %u -m 128",

160 
MEMCACHED_BINARY
, 
c⁄°ru˘
->
pid_fûe
[
x
], c⁄°ru˘->
p‹t
[x], construct->port[x]);

164 
	`¢¥ötf
(
buf„r
, (buffer), "%s -d -P %s -t 1 -p %u -U %u",

165 
MEMCACHED_BINARY
, 
c⁄°ru˘
->
pid_fûe
[
x
], c⁄°ru˘->
p‹t
[x], construct->port[x]);

168 i‡(
	`libmemˇched_utû_pög
("loˇlho°", 
c⁄°ru˘
->
p‹t
[
x
], 
NULL
))

170 
	`Ârötf
(
°dîr
, "Sîvî o¿p‹à%uáÃódyÉxi°s\n", 
c⁄°ru˘
->
p‹t
[
x
]);

174 
°©us

	`sy°em
(
buf„r
);

175 
	`Ârötf
(
°dîr
, "STARTING SERVER: %† sètus:%d\n", 
buf„r
, 
°©us
);

178 
cou¡
;

179 
size_t
 
ªmaöög_Àngth
(
£rvî_°rög_buf„r
Ë- (size_t)(
íd_±r
 -server_string_buffer);

180 
cou¡

	`¢¥ötf
(
íd_±r
, 
ªmaöög_Àngth
, "loˇlho°:%u,", 
c⁄°ru˘
->
p‹t
[
x
]);

182 i‡((
size_t
)
cou¡
 >
ªmaöög_Àngth
 || count < 0)

184 
	`Ârötf
(
°dîr
, "serverÇames grewÅo beÜargerÅhen bufferállowed\n");

185 
	`ab‹t
();

187 
íd_±r
+
cou¡
;

189 *
íd_±r
= 0;

192 
uöt32_t
 
x
0; x < 
c⁄°ru˘
->
cou¡
; x++)

194 i‡(! 
	`waô_f‹_fûe
(
c⁄°ru˘
->
pid_fûe
[
x
]))

196 
	`ab‹t
();

200 
uöt32_t
 
x
0; x < 
c⁄°ru˘
->
cou¡
; x++)

202 
uöt32_t
 
cou¡î
= 3000;

203 
c⁄°ru˘
->
pids
[
x
] <0 && --
cou¡î
)

205 
FILE
 *
fûe

	`f›í
(
c⁄°ru˘
->
pid_fûe
[
x
], "r");

206 i‡(
fûe
)

208 
pid_buf„r
[1024];

209 *
found

	`fgës
(
pid_buf„r
, ’id_buf„r), 
fûe
);

211 i‡(
found
)

213 
c⁄°ru˘
->
pids
[
x
]
	`©oi
(
pid_buf„r
);

214 
	`f˛o£
(
fûe
);

216 i‡(
c⁄°ru˘
->
pids
[
x
] > 0)

219 
	`f˛o£
(
fûe
);

221 
î∫o
)

224 
	`Ârötf
(
°dîr
, "%†-> f›í(%s)\n", 
c⁄°ru˘
->
pid_fûe
[
x
], 
	`°ªº‹
(
î∫o
));

225 
	`ab‹t
();

226 
ENOENT
:

227 
EINTR
:

228 
EACCES
:

230 
ENOTCONN
:

235 i‡(! 
	`waô_f‹_fûe
(
c⁄°ru˘
->
pid_fûe
[
x
]))

237 
	`ab‹t
();

241 
boﬁ
 
was_°¨ãd

Ál£
;

242 i‡(
c⁄°ru˘
->
pids
[
x
] > 0)

244 
cou¡î
= 30;

245 --
cou¡î
)

247 i‡(
	`kûl
(
c⁄°ru˘
->
pids
[
x
], 0) == 0)

249 
was_°¨ãd

åue
;

252 
	`globÆ_¶ìp
();

256 i‡(
was_°¨ãd
 =
Ál£
)

258 
	`Ârötf
(
°dîr
, "FaûedÅÿ›í buf„∏%s(%d)\n", 
c⁄°ru˘
->
pid_fûe
[
x
], c⁄°ru˘->
pids
[x]);

259 
uöt32_t
 
y
0; y < 
c⁄°ru˘
->
cou¡
; y++)

261 i‡(
c⁄°ru˘
->
pids
[
y
] > 0)

262 
	`kûl
(
c⁄°ru˘
->
pids
[
y
], 
SIGTERM
);

264 
	`ab‹t
();

268 
c⁄°ru˘
->
£rvî_li°

	`°rdup
(
£rvî_°rög_buf„r
);

270 
	`¥ötf
("£rvî†%s\n", 
c⁄°ru˘
->
£rvî_li°
);

271 
c⁄°ru˘
->
£rvîs

	`memˇched_£rvîs_∑r£
(c⁄°ru˘->
£rvî_li°
);

274 
	`as£π
(
c⁄°ru˘
->
£rvîs
);

276 
	`§™dom
(()
	`time
(
NULL
));

278 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_li°_cou¡
(
c⁄°ru˘
->
£rvîs
); x++)

280 
	`¥ötf
("\t%†: %d\n", 
	`memˇched_£rvî_«me
(&
c⁄°ru˘
->
£rvîs
[
x
]), 
	`memˇched_£rvî_p‹t
(&construct->servers[x]));

281 
	`as£π
(
c⁄°ru˘
->
£rvîs
[
x
].
fd
 == -1);

282 
	`as£π
(
c⁄°ru˘
->
£rvîs
[
x
].
curs‹_a˘ive
 == 0);

285 
	`¥ötf
("\n");

286 
	}
}

288 
	$£rvî_shutdown
(
£rvî_°¨tup_°
 *
c⁄°ru˘
)

290 i‡(
c⁄°ru˘
->
£rvî_li°
)

292 
uöt32_t
 
x
0; x < 
c⁄°ru˘
->
cou¡
; x++)

294 
	`kûl_fûe
(
c⁄°ru˘
->
pid_fûe
[
x
]);

297 
	`‰ì
(
c⁄°ru˘
->
£rvî_li°
);

299 
	}
}

	@libtest/server.h

10 #¥agm®
⁄˚


12 
	~<uni°d.h
>

17 #ifdef 
__˝lu•lus


21 
	~<libmemˇched/memˇched.h
>

23 
£rvî_°¨tup_°
 
	t£rvî_°¨tup_°
;

24 
	#SERVERS_TO_CREATE
 5

	)

26 
	s£rvî_°¨tup_°


28 
uöt8_t
 
cou¡
;

29 
uöt8_t
 
udp
;

30 
memˇched_£rvî_°
 *
£rvîs
;

31 *
£rvî_li°
;

32 
pid_fûe
[
SERVERS_TO_CREATE
][
FILENAME_MAX
];

33 
ö_p‹t_t
 
p‹t
[
SERVERS_TO_CREATE
];

34 
pids
[
SERVERS_TO_CREATE
];

37 
£rvî_°¨tup
(
£rvî_°¨tup_°
 *
c⁄°ru˘
);

38 
£rvî_shutdown
(
£rvî_°¨tup_°
 *
c⁄°ru˘
);

40 #ifdef 
__˝lu•lus


	@libtest/test.c

13 
	~<c⁄fig.h
>

15 
	~<uni°d.h
>

17 
	~<as£π.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<sys/time.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/°©.h
>

23 
	~<uni°d.h
>

24 
	~<time.h
>

25 
	~<°döt.h
>

27 
	~<libmemˇched/memˇched.h
>

29 
	~<libã°/ã°.h
>

30 
	~<libã°/Áûed.h
>

32 
	$w‹ld_°©s_¥öt
(
w‹ld_°©s_°
 *
°©s
)

34 
	`Âutc
('\n', 
°dîr
);

35 
	`Ârötf
(
°dîr
, "TŸÆ CﬁÀ˘i⁄s\t\t\t\t%u\n", 
°©s
->
cﬁÀ˘i⁄_tŸÆ
);

36 
	`Ârötf
(
°dîr
, "\tFaûed CﬁÀ˘i⁄s\t\t\t%u\n", 
°©s
->
cﬁÀ˘i⁄_Áûed
);

37 
	`Ârötf
(
°dîr
, "\tSkù≥d CﬁÀ˘i⁄s\t\t\t%u\n", 
°©s
->
cﬁÀ˘i⁄_skù≥d
);

38 
	`Ârötf
(
°dîr
, "\tSuc˚eded CﬁÀ˘i⁄s\t\t%u\n", 
°©s
->
cﬁÀ˘i⁄_suc˚ss
);

39 
	`Âutc
('\n', 
°dîr
);

40 
	`Ârötf
(
°dîr
, "TŸÆ\t\t\t\t%u\n", 
°©s
->
tŸÆ
);

41 
	`Ârötf
(
°dîr
, "\tFaûed\t\t\t%u\n", 
°©s
->
Áûed
);

42 
	`Ârötf
(
°dîr
, "\tSkù≥d\t\t\t%u\n", 
°©s
->
skù≥d
);

43 
	`Ârötf
(
°dîr
, "\tSuc˚eded\t\t%u\n", 
°©s
->
suc˚ss
);

44 
	}
}

46 
	$timedif
(
timevÆ
 
a
, timevÆ 
b
)

48 
us
, 
s
;

50 
us
 = ()(
a
.
tv_u£c
 - 
b
.tv_usec);

51 
us
 /= 1000;

52 
s
 = ()(
a
.
tv_£c
 - 
b
.tv_sec);

53 
s
 *= 1000;

54  
s
 + 
us
;

55 
	}
}

57 c⁄° *
	$ã°_°ªº‹
(
ã°_ªtu∫_t
 
code
)

59 
code
) {

60 
TEST_SUCCESS
:

62 
TEST_FAILURE
:

64 
TEST_MEMORY_ALLOCATION_FAILURE
:

66 
TEST_SKIPPED
:

68 
TEST_MAXIMUM_RETURN
:

70 
	`Ârötf
(
°dîr
, "UnknownÑeturn value\n");

71 
	`ab‹t
();

73 
	}
}

75 
	$¸óã_c‹e
()

77 i‡(
	`gëív
("LIBMEMCACHED_NO_COREDUMP"Ë=
NULL
)

79 
pid_t
 
pid

	`f‹k
();

81 i‡(
pid
 == 0)

83 
	`ab‹t
();

87 
	`waôpid
(
pid
, 
NULL
, 0) !=Öid)

93 
	}
}

96 
ã°_ªtu∫_t
 
	$_ru¬î_deÁu…
(
ã°_ˇŒback_‚
 
func
, *
p
)

98 i‡(
func
)

100  
	`func
(
p
);

104  
TEST_SUCCESS
;

106 
	}
}

108 
w‹ld_ru¬î_°
 
	gdefuÆt_ru¬îs
= {

109 
_ru¬î_deÁu…
,

110 
_ru¬î_deÁu…
,

111 
_ru¬î_deÁu…


114 
ã°_ªtu∫_t
 
	$_deÁu…_ˇŒback
(*
p
)

116 ()
p
;

118  
TEST_SUCCESS
;

119 
	}
}

121 
ölöe
 
	$£t_deÁu…_‚
(
ã°_ˇŒback_‚
 *
‚
)

123 i‡(*
‚
 =
NULL
)

125 *
‚

_deÁu…_ˇŒback
;

127 
	}
}

129 
cﬁÀ˘i⁄_°
 *
	$öô_w‹ld
(
w‹ld_°
 *
w‹ld
)

131 i‡(! 
w‹ld
->
ru¬î
)

133 
w‹ld
->
ru¬î
&
defuÆt_ru¬îs
;

136 
	`£t_deÁu…_‚
(&
w‹ld
->
cﬁÀ˘i⁄
.
°¨tup
);

137 
	`£t_deÁu…_‚
(&
w‹ld
->
cﬁÀ˘i⁄
.
shutdown
);

139  
w‹ld
->
cﬁÀ˘i⁄s
;

140 
	}
}

143 
	$maö
(
¨gc
, *
¨gv
[])

145 
ã°_ªtu∫_t
 
ªtu∫_code
;

146 
x
;

147 *
cﬁÀ˘i⁄_to_run

NULL
;

148 *
wûdˇrd

NULL
;

149 
w‹ld_°
 
w‹ld
;

150 
cﬁÀ˘i⁄_°
 *
cﬁÀ˘i⁄
;

151 
cﬁÀ˘i⁄_°
 *
√xt
;

152 *
w‹ld_±r
;

154 
w‹ld_°©s_°
 
°©s
;

156 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


157 i‡(
	`ß¶_˛õ¡_öô
(
NULL
Ë!
SASL_OK
)

159 
	`Ârötf
(
°dîr
, "FailedÅo initialize saslÜibrary!\n");

160  
EXIT_FAILURE
;

164 
	`mem£t
(&
°©s
, 0, (stats));

165 
	`mem£t
(&
w‹ld
, 0, (world));

166 
	`gë_w‹ld
(&
w‹ld
);

168 
cﬁÀ˘i⁄

	`öô_w‹ld
(&
w‹ld
);

170 i‡(
w‹ld
.
¸óã
)

172 
ã°_ªtu∫_t
 
îr‹
;

173 
w‹ld_±r

w‹ld
.
	`¸óã
(&
îr‹
);

174 i‡(
îr‹
 !
TEST_SUCCESS
)

175 
	`exô
(1);

179 
w‹ld_±r

NULL
;

182 i‡(
¨gc
 > 1)

183 
cﬁÀ˘i⁄_to_run

¨gv
[1];

185 i‡(
¨gc
 == 3)

186 
wûdˇrd

¨gv
[2];

188 
√xt

cﬁÀ˘i⁄
;Çext->
«me
;Çext++)

190 
ã°_ªtu∫_t
 
cﬁÀ˘i⁄_rc

TEST_SUCCESS
;

191 
ã°_°
 *
run
;

192 
boﬁ
 
Áûed

Ál£
;

193 
boﬁ
 
skù≥d

Ál£
;

195 
run

√xt
->
ã°s
;

196 i‡(
cﬁÀ˘i⁄_to_run
 && 
	`‚m©ch
(cﬁÀ˘i⁄_to_run, 
√xt
->
«me
, 0))

199 
°©s
.
cﬁÀ˘i⁄_tŸÆ
++;

201 
cﬁÀ˘i⁄_rc

w‹ld
.
cﬁÀ˘i⁄
.
	`°¨tup
(
w‹ld_±r
);

203 i‡(
cﬁÀ˘i⁄_rc
 !
TEST_SUCCESS
)

204 
skù_¥e
;

206 i‡(
√xt
->
¥e
)

208 
cﬁÀ˘i⁄_rc

w‹ld
.
ru¬î
->
	`¥e
(
√xt
->
¥e
, 
w‹ld_±r
);

211 
skù_¥e
:

212 
cﬁÀ˘i⁄_rc
)

214 
TEST_SUCCESS
:

215 
	`Ârötf
(
°dîr
, "\n%s\n\n", 
√xt
->
«me
);

217 
TEST_FAILURE
:

218 
	`Ârötf
(
°dîr
, "\n%†[ faûed ]\n\n", 
√xt
->
«me
);

219 
°©s
.
cﬁÀ˘i⁄_Áûed
++;

220 
˛ónup
;

221 
TEST_SKIPPED
:

222 
	`Ârötf
(
°dîr
, "\n%†[ skùpög ]\n\n", 
√xt
->
«me
);

223 
°©s
.
cﬁÀ˘i⁄_skù≥d
++;

224 
˛ónup
;

225 
TEST_MEMORY_ALLOCATION_FAILURE
:

226 
TEST_MAXIMUM_RETURN
:

228 
	`as£π
(0);

233 
x
0; 
run
->
«me
;Ñun++)

235 
timevÆ
 
°¨t_time
, 
íd_time
;

236 
lﬂd_time
= 0;

238 i‡(
wûdˇrd
 && 
	`‚m©ch
(wûdˇrd, 
run
->
«me
, 0))

241 
	`Ârötf
(
°dîr
, "Te°ög %s", 
run
->
«me
);

243 i‡(
w‹ld
.
ã°
.
°¨tup
)

245 
w‹ld
.
ã°
.
	`°¨tup
(
w‹ld_±r
);

248 i‡(
run
->
ªquúes_Êush
 && 
w‹ld
.
ã°
.
Êush
)

250 
w‹ld
.
ã°
.
	`Êush
(
w‹ld_±r
);

253 i‡(
w‹ld
.
ã°
.
¥e_run
)

255 
w‹ld
.
ã°
.
	`¥e_run
(
w‹ld_±r
);

262 i‡(
√xt
->
¥e
 && 
w‹ld
.
ru¬î
->pre)

264 
ªtu∫_code

w‹ld
.
ru¬î
->
	`¥e
(
√xt
->
¥e
, 
w‹ld_±r
);

266 i‡(
ªtu∫_code
 !
TEST_SUCCESS
)

268 
îr‹
;

273 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

274 
ªtu∫_code

w‹ld
.
ru¬î
->
	`run
(
run
->
ã°_‚
, 
w‹ld_±r
);

275 
	`gëtimeofday
(&
íd_time
, 
NULL
);

276 
lﬂd_time

	`timedif
(
íd_time
, 
°¨t_time
);

279 i‡(
√xt
->
po°
 && 
w‹ld
.
ru¬î
->post)

281 (Ë
w‹ld
.
ru¬î
->
	`po°
(
√xt
->
po°
, 
w‹ld_±r
);

286 i‡(
w‹ld
.
ã°
.
po°_run
)

288 
w‹ld
.
ã°
.
	`po°_run
(
w‹ld_±r
);

291 
°©s
.
tŸÆ
++;

293 
	`Ârötf
(
°dîr
, "\t\t\t\t\t");

295 
ªtu∫_code
)

297 
TEST_SUCCESS
:

298 
	`Ârötf
(
°dîr
, "%ld.%03ld ", 
lﬂd_time
 / 1000,Üoad_time % 1000);

299 
°©s
.
suc˚ss
++;

301 
TEST_FAILURE
:

303 
	`push_Áûed_ã°
(
√xt
->
«me
, 
run
->name);

305 
°©s
.
Áûed
++;

306 
Áûed

åue
;

308 
TEST_SKIPPED
:

309 
°©s
.
skù≥d
++;

310 
skù≥d

åue
;

312 
TEST_MEMORY_ALLOCATION_FAILURE
:

313 
	`Ârötf
(
°dîr
, "Exhausted memory, quitting\n");

314 
	`ab‹t
();

315 
TEST_MAXIMUM_RETURN
:

317 
	`as£π
(0);

321 
	`Ârötf
(
°dîr
, "[ %†]\n", 
	`ã°_°ªº‹
(
ªtu∫_code
));

323 i‡(
w‹ld
.
ã°
.
⁄_îr‹
)

325 
ã°_ªtu∫_t
 
rc
;

326 
rc

w‹ld
.
ã°
.
	`⁄_îr‹
(
ªtu∫_code
, 
w‹ld_±r
);

328 i‡(
rc
 !
TEST_SUCCESS
)

333 i‡(
√xt
->
po°
 && 
w‹ld
.
ru¬î
->post)

335 (Ë
w‹ld
.
ru¬î
->
	`po°
(
√xt
->
po°
, 
w‹ld_±r
);

338 i‡(! 
Áûed
 && ! 
skù≥d
)

340 
°©s
.
cﬁÀ˘i⁄_suc˚ss
++;

342 
˛ónup
:

344 
w‹ld
.
cﬁÀ˘i⁄
.
	`shutdown
(
w‹ld_±r
);

347 i‡(
°©s
.
cﬁÀ˘i⁄_Áûed
 || sèts.
cﬁÀ˘i⁄_skù≥d
)

349 
	`Ârötf
(
°dîr
, "SomeÅest failuresánd/or skippedÅest occurred.\n\n");

351 
	`¥öt_Áûed_ã°
();

356 
	`Ârötf
(
°dîr
, "AllÅests completed successfully\n\n");

359 i‡(
w‹ld
.
de°roy
)

361 
ã°_ªtu∫_t
 
îr‹
;

362 
îr‹

w‹ld
.
	`de°roy
(
w‹ld_±r
);

364 i‡(
îr‹
 !
TEST_SUCCESS
)

366 
	`Ârötf
(
°dîr
, "Failure during shutdown.\n");

367 
°©s
.
Áûed
++;

371 
	`w‹ld_°©s_¥öt
(&
°©s
);

373 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


374 
	`ß¶_d⁄e
();

377  
°©s
.
Áûed
 == 0 ? 0 : 1;

378 
	}
}

	@libtest/test.h

39 #¥agm®
⁄˚


41 
	~<libã°/visibûôy.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°döt.h
>

51 #i‡!
deföed
(
__˝lu•lus
)

52 
	~<°dboﬁ.h
>

55 
w‹ld_°
 
	tw‹ld_°
;

56 
cﬁÀ˘i⁄_°
 
	tcﬁÀ˘i⁄_°
;

57 
ã°_°
 
	tã°_°
;

60 
	mTEST_SUCCESS
= 0,

61 
	mTEST_FAILURE
,

62 
	mTEST_MEMORY_ALLOCATION_FAILURE
,

63 
	mTEST_SKIPPED
,

64 
	mTEST_MAXIMUM_RETURN


65 } 
	tã°_ªtu∫_t
;

67 *(*
	tã°_ˇŒback_¸óã_‚
)(
	tã°_ªtu∫_t
 *
	tîr‹
);

68 
	$ã°_ªtu∫_t
 (*
	tã°_ˇŒback_‚
)(*);

69 
	$ã°_ªtu∫_t
 (*
	tã°_ˇŒback_ru¬î_‚
)(
	tã°_ˇŒback_‚
, *);

70 
	$ã°_ªtu∫_t
 (*
	tã°_ˇŒback_îr‹_‚
)(
	tã°_ªtu∫_t
, *);

75 
	sã°_°
 {

76 c⁄° *
«me
;

77 
boﬁ
 
ªquúes_Êush
;

78 
ã°_ˇŒback_‚
 
ã°_‚
;

85 
	scﬁÀ˘i⁄_°
 {

86 c⁄° *
«me
;

87 
ã°_ˇŒback_‚
 
¥e
;

88 
ã°_ˇŒback_‚
 
po°
;

89 
ã°_°
 *
ã°s
;

98 
ã°_ˇŒback_ru¬î_‚
 
¥e
;

99 
ã°_ˇŒback_ru¬î_‚
 
run
;

100 
ã°_ˇŒback_ru¬î_‚
 
po°
;

101 } 
	tw‹ld_ru¬î_°
;

110 
	sw‹ld_°
 {

111 
cﬁÀ˘i⁄_°
 *
cﬁÀ˘i⁄s
;

114 
ã°_ˇŒback_¸óã_‚
 
¸óã
;

115 
ã°_ˇŒback_‚
 
de°roy
;

119 
ã°_ˇŒback_‚
 
°¨tup
;

122 
ã°_ˇŒback_‚
 
Êush
;

128 
ã°_ˇŒback_‚
 
¥e_run
;

129 
ã°_ˇŒback_‚
 
po°_run
;

134 
ã°_ˇŒback_îr‹_‚
 
⁄_îr‹
;

135 } 
ã°
;

139 
ã°_ˇŒback_‚
 
°¨tup
;

142 
ã°_ˇŒback_‚
 
shutdown
;

143 } 
cﬁÀ˘i⁄
;

150 
w‹ld_ru¬î_°
 *
ru¬î
;

159 
uöt32_t
 
cﬁÀ˘i⁄_suc˚ss
;

160 
uöt32_t
 
cﬁÀ˘i⁄_skù≥d
;

161 
uöt32_t
 
cﬁÀ˘i⁄_Áûed
;

162 
uöt32_t
 
cﬁÀ˘i⁄_tŸÆ
;

163 
uöt32_t
 
suc˚ss
;

164 
uöt32_t
 
skù≥d
;

165 
uöt32_t
 
Áûed
;

166 
uöt32_t
 
tŸÆ
;

167 } 
	tw‹ld_°©s_°
;

169 #ifdef 
__˝lu•lus


174 
LIBTEST_API


175 
	`timedif
(
timevÆ
 
a
, timevÆ 
b
);

178 
LIBTEST_API


179 
	`gë_w‹ld
(
w‹ld_°
 *
w‹ld
);

181 
LIBTEST_INTERNAL_API


182 
	`¸óã_c‹e
();

187 
LIBTEST_API


188 c⁄° *
	`ã°_°ªº‹
(
ã°_ªtu∫_t
 
code
);

190 
	#ã°_Áû
(
A
) \

194 
	`Ârötf
(
°dîr
, "\nFaûedáà%s:%d: %s\n", 
__FILE__
, 
__LINE__
, #A);\

195 
	`¸óã_c‹e
(); \

196  
TEST_FAILURE
; \

198 } 0)

	)

200 
	#ã°_åue
(
A
) \

203 i‡(! (
A
)) { \

204 
	`Ârötf
(
°dîr
, "\nAs£πi⁄ faûedáà%s:%d: %s\n", 
__FILE__
, 
__LINE__
, #A);\

205 
	`¸óã_c‹e
(); \

206  
TEST_FAILURE
; \

208 } 0)

	)

210 
	#ã°_åue_gŸ
(
A
,
B
) \

213 i‡(! (
A
)) { \

214 
	`Ârötf
(
°dîr
, "\nAs£πi⁄ faûedáà%s:%d: \"%s\"Ñe˚ived \"%s\"\n", 
__FILE__
, 
__LINE__
, #A, (
B
));\

215 
	`¸óã_c‹e
(); \

216  
TEST_FAILURE
; \

218 } 0)

	)

220 
	#ã°_Ál£
(
A
) \

223 i‡((
A
)) { \

224 
	`Ârötf
(
°dîr
, "\nAs£πi⁄ faûedáà%s:%d: %s\n", 
__FILE__
, 
__LINE__
, #A);\

225 
	`¸óã_c‹e
(); \

226  
TEST_FAILURE
; \

228 } 0)

	)

230 
	#ã°_Ál£_wôh
(
A
,
B
) \

233 i‡((
A
)) { \

234 
	`Ârötf
(
°dîr
, "\nAs£πi⁄ faûedáà%s:%d: %†wôh %s\n", 
__FILE__
, 
__LINE__
, #A, (
B
));\

235 
	`¸óã_c‹e
(); \

236  
TEST_FAILURE
; \

238 } 0)

	)

240 
	#ã°_°rcmp
(
A
,
B
) \

243 i‡(
	`°rcmp
((
A
), (
B
))) \

245 
	`Ârötf
(
°dîr
, "\n%s:%d: `%s` -> `%s`\n", 
__FILE__
, 
__LINE__
, (
A
), (
B
)); \

246 
	`¸óã_c‹e
(); \

247  
TEST_FAILURE
; \

249 } 0)

	)

252 
	#STRINGIFY
(
x
Ë#x

	)

253 
	#TOSTRING
(
x
Ë
	`STRINGIFY
(x)

	)

254 
	#AT
 
__FILE__
 ":" 
	`TOSTRING
(
__LINE__
)

	)

256 #ifde‡
__˝lu•lus


257 
	#STRING_WITH_LEN
(
X
Ë(X), (
°©ic_ˇ°
<
size_t
>(((XË- 1)))

	)

259 
	#STRING_WITH_LEN
(
X
Ë(X), ((
size_t
)(((XË- 1)))

	)

262 #ifde‡
__˝lu•lus


263 
	#STRING_PARAM_WITH_LEN
(
X
ËX, 
°©ic_ˇ°
<
size_t
>((XË- 1)

	)

265 
	#STRING_PARAM_WITH_LEN
(
X
ËX, (
size_t
)(((XË- 1))

	)

268 #ifdef 
__˝lu•lus


269 
	}
}

	@libtest/visibility.h

38 #¥agm®
⁄˚


40 #i‡
deföed
(
BUILDING_LIBTEST
)

41 #i‡
deföed
(
HAVE_VISIBILITY
)

42 
	#LIBTEST_API
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

43 
	#LIBTEST_INTERNAL_API
 
	`__©åibuã__
 ((
	`visibûôy
("hiddí")))

	)

44 
	#LIBTEST_API_DEPRECATED
 
	`__©åibuã__
 ((
dïªˇãd
,
	`visibûôy
("deÁu…")))

	)

45 
	#LIBTEST_LOCAL
 
	`__©åibuã__
 ((
	`visibûôy
("hiddí")))

	)

46 #ñi‡
deföed
 (
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

47 
	#LIBTEST_API
 
__globÆ


	)

48 
	#LIBTEST_INTERNAL_API
 
__hiddí


	)

49 
	#LIBTEST_API_DEPRECATED
 
__globÆ


	)

50 
	#LIBTEST_LOCAL
 
__hiddí


	)

51 #ñi‡
deföed
(
_MSC_VER
)

52 
	#LIBTEST_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

53 
	#LIBTEST_INTERNAL_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

54 
	#LIBTEST_DEPRECATED_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

55 
	#LIBTEST_LOCAL


	)

58 #i‡
deföed
(
_MSC_VER
)

59 
	#LIBTEST_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

60 
	#LIBTEST_INTERNAL_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

61 
	#LIBTEST_API_DEPRECATED
 
	`__de˛•ec
(
dŒimp‹t
)

	)

62 
	#LIBTEST_LOCAL


	)

64 
	#LIBTEST_API


	)

65 
	#LIBTEST_INTERNAL_API


	)

66 
	#LIBTEST_API_DEPRECATED


	)

67 
	#LIBTEST_LOCAL


	)

	@poll/poll.c

11 
	~"c⁄fig.h
"

12 
	~<sys/time.h
>

13 
	~<°rögs.h
>

15 
	$pﬁl
(
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
tmo
)

17 
fd_£t
 
ªadfds
, 
wrôefds
, 
îr‹fds
;

18 
	`FD_ZERO
(&
ªadfds
);

19 
	`FD_ZERO
(&
wrôefds
);

20 
	`FD_ZERO
(&
îr‹fds
);

22 
maxfd
= 0;

24 
nfds_t
 
x
0; x < 
nfds
; ++x)

26 i‡(
fds
[
x
].
evíts
 & (
POLLIN
 | 
POLLOUT
))

28 #i‚de‡
WIN32


29 i‡(
fds
[
x
].
fd
 > 
maxfd
)

31 
maxfd

fds
[
x
].
fd
;

34 i‡(
fds
[
x
].
evíts
 & 
POLLIN
)

36 
	`FD_SET
(
fds
[
x
].
fd
, &
ªadfds
);

38 i‡(
fds
[
x
].
evíts
 & 
POLLOUT
)

40 
	`FD_SET
(
fds
[
x
].
fd
, &
wrôefds
);

45 
timevÆ
 
timeout
{ .
tv_£c
 = 
tmo
 / 1000,

46 .
tv_u£c
(
tmo
 % 1000) * 1000 };

47 
timevÆ
 *
ç
&
timeout
;

48 i‡(
tmo
 == -1)

50 
ç

NULL
;

52 
ªt

	`£À˘
(
maxfd
 + 1, &
ªadfds
, &
wrôefds
, &
îr‹fds
, 
ç
);

53 i‡(
ªt
 <= 0)

55  
ªt
;

59 
nfds_t
 
x
0; x < 
nfds
; ++x)

61 
fds
[
x
].
ªvíts
= 0;

62 i‡(
	`FD_ISSET
(
fds
[
x
].
fd
, &
ªadfds
))

64 
fds
[
x
].
ªvíts
 |
POLLIN
;

66 i‡(
	`FD_ISSET
(
fds
[
x
].
fd
, &
wrôefds
))

68 
fds
[
x
].
ªvíts
 |
POLLOUT
;

70 i‡(
	`FD_ISSET
(
fds
[
x
].
fd
, &
îr‹fds
))

72 
fds
[
x
].
ªvíts
 |
POLLERR
;

76  
ªt
;

77 
	}
}

	@poll/poll.h

11 #i‚de‡
POLL_POLL_H


12 
	#POLL_POLL_H
 1

	)

14 #ifde‡
WIN32


15 
	~<wösock2.h
>

18 #ifde‡
__˝lu•lus


22 
	spﬁlfd


24 #ifde‡
WIN32


25 
SOCKET
 
fd
;

27 
fd
;

29 
evíts
;

30 
ªvíts
;

31 } 
	tpﬁlfd_t
;

33 
	tnfds_t
;

35 
	#POLLIN
 0x0001

	)

36 
	#POLLOUT
 0x0004

	)

37 
	#POLLERR
 0x0008

	)

39 
pﬁl
(
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
tmo
);

41 #ifde‡
__˝lu•lus


	@tests/atomsmasher.c

15 
	~"c⁄fig.h
"

17 
	~"libmemˇched/memˇched.h
"

18 
	~"libmemˇched/w©chpoöt.h
"

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°döt.h
>

23 
	~<°rög.h
>

24 
	~<sys/time.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<uni°d.h
>

28 
	~<time.h
>

29 
	~"../˛õ¡s/gíî©‹.h
"

30 
	~"../˛õ¡s/execuã.h
"

32 
	~<libã°/£rvî.h
>

33 
	~<libã°/ã°.h
>

36 
	#GLOBAL_COUNT
 100000

	)

39 
	#TEST_COUNTER
 500000

	)

40 
uöt32_t
 
	gglobÆ_cou¡
;

42 
∑ús_°
 *
	gglobÆ_∑ús
;

43 *
	gglobÆ_keys
[
GLOBAL_COUNT
];

44 
size_t
 
	gglobÆ_keys_Àngth
[
GLOBAL_COUNT
];

46 
ã°_ªtu∫_t
 
	$˛ónup_∑ús
(
memˇched_°
 *
memc
)

48 ()
memc
;

49 
	`∑ús_‰ì
(
globÆ_∑ús
);

51  
EXIT_SUCCESS
;

52 
	}
}

54 
ã°_ªtu∫_t
 
	$gíî©e_∑ús
(
memˇched_°
 *
memc
)

56 ()
memc
;

57 
globÆ_∑ús

	`∑ús_gíî©e
(
GLOBAL_COUNT
, 400);

58 
globÆ_cou¡

GLOBAL_COUNT
;

60 
size_t
 
x
0; x < 
globÆ_cou¡
; x++)

62 
globÆ_keys
[
x
]
globÆ_∑ús
[x].
key
;

63 
globÆ_keys_Àngth
[
x
]
globÆ_∑ús
[x].
key_Àngth
;

66  
EXIT_SUCCESS
;

67 
	}
}

69 
ã°_ªtu∫_t
 
	$drizzÀ
(
memˇched_°
 *
memc
)

71 
memˇched_ªtu∫_t
 
rc
;

72 *
ªtu∫_vÆue
;

73 
size_t
 
ªtu∫_vÆue_Àngth
;

74 
uöt32_t
 
Êags
;

76 
öföôe
:

77 
size_t
 
x
0; x < 
TEST_COUNTER
; x++)

79 
uöt32_t
 
ã°_bô
;

80 
uöt8_t
 
which
;

82 
ã°_bô
(
uöt32_t
)(
	`øndom
(Ë% 
GLOBAL_COUNT
);

83 
which
(
uöt8_t
)(
	`øndom
() % 2);

85 i‡(
which
 == 0)

87 
ªtu∫_vÆue

	`memˇched_gë
(
memc
, 
globÆ_keys
[
ã°_bô
], 
globÆ_keys_Àngth
[test_bit],

88 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
);

89 i‡(
rc
 =
MEMCACHED_SUCCESS
 && 
ªtu∫_vÆue
)

91 
	`‰ì
(
ªtu∫_vÆue
);

93 i‡(
rc
 =
MEMCACHED_NOTFOUND
)

99 
	`WATCHPOINT_ERROR
(
rc
);

100 
	`WATCHPOINT_ASSERT
(
rc
);

105 
rc

	`memˇched_£t
(
memc
, 
globÆ_∑ús
[
ã°_bô
].
key
,

106 
globÆ_∑ús
[
ã°_bô
].
key_Àngth
,

107 
globÆ_∑ús
[
ã°_bô
].
vÆue
,

108 
globÆ_∑ús
[
ã°_bô
].
vÆue_Àngth
,

110 i‡(
rc
 !
MEMCACHED_SUCCESS
 &&Ñ¯!
MEMCACHED_BUFFERED
)

112 
	`WATCHPOINT_ERROR
(
rc
);

113 
	`WATCHPOINT_ASSERT
(0);

118 i‡(
	`gëív
("MEMCACHED_ATOM_BURIN_IN"))

119 
öföôe
;

121  
TEST_SUCCESS
;

122 
	}
}

124 
ã°_ªtu∫_t
 
	$¥e_n⁄block
(
memˇched_°
 *
memc
)

126 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 0);

128  
TEST_SUCCESS
;

129 
	}
}

135 
ã°_ªtu∫_t
 
	$add_ã°
(
memˇched_°
 *
memc
)

137 
memˇched_ªtu∫_t
 
rc
;

138 c⁄° *
key
= "foo";

139 c⁄° *
vÆue
= "when we sanitize";

140 
£âög_vÆue
;

142 
£âög_vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
);

144 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

145 
vÆue
, 
	`°æí
(value),

146 (
time_t
)0, (
uöt32_t
)0);

147 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

148 
	`memˇched_quô
(
memc
);

149 
rc

	`memˇched_add
(
memc
, 
key
, 
	`°æí
(key),

150 
vÆue
, 
	`°æí
(value),

151 (
time_t
)0, (
uöt32_t
)0);

154 i‡(
£âög_vÆue
)

156 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTSTORED
 ||Ñ¯=
MEMCACHED_STORED
);

160 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTSTORED
);

163  
EXIT_SUCCESS
;

164 
	}
}

170 
ã°_ªtu∫_t
 
	$m™y_adds
(
memˇched_°
 *
memc
)

172 
size_t
 
x
0; x < 
TEST_COUNTER
; x++)

174 
	`add_ã°
(
memc
);

176  
EXIT_SUCCESS
;

177 
	}
}

179 
ã°_°
 
	gsmash_ã°s
[] ={

180 {"gíî©e_∑ús", 1, (
ã°_ˇŒback_‚
)
gíî©e_∑ús
 },

181 {"drizzÀ", 1, (
ã°_ˇŒback_‚
)
drizzÀ
 },

182 {"˛ónup", 1, (
ã°_ˇŒback_‚
)
˛ónup_∑ús
 },

183 {"m™y_adds", 1, (
ã°_ˇŒback_‚
)
m™y_adds
 },

187 
	#BENCHMARK_TEST_LOOP
 20000

	)

189 
	sbíchm¨k_°©e_°


191 
boﬁ
 
	m¸óã_öô
;

192 
boﬁ
 
	m˛⁄e_öô
;

193 
memˇched_°
 *
	m¸óã
;

194 
memˇched_°
 *
	m˛⁄e
;

195 } 
	gbíchm¨k_°©e
;

197 
ã°_ªtu∫_t
 
	$memˇched_¸óã_bíchm¨k
(
memˇched_°
 *
memc
)

199 ()
memc
;

200 
bíchm¨k_°©e
.
¸óã_öô

åue
;

202 
size_t
 
x
0; x < 
BENCHMARK_TEST_LOOP
; x++)

204 
memˇched_°
 *
±r
;

205 
±r

	`memˇched_¸óã
(&
bíchm¨k_°©e
.
¸óã
[
x
]);

207 
	`ã°_åue
(
±r
);

210  
TEST_SUCCESS
;

211 
	}
}

213 
ã°_ªtu∫_t
 
	$memˇched_˛⁄e_bíchm¨k
(
memˇched_°
 *
memc
)

215 
bíchm¨k_°©e
.
˛⁄e_öô

åue
;

217 
size_t
 
x
0; x < 
BENCHMARK_TEST_LOOP
; x++)

219 
memˇched_°
 *
±r
;

220 
±r

	`memˇched_˛⁄e
(&
bíchm¨k_°©e
.
˛⁄e
[
x
], 
memc
);

222 
	`ã°_åue
(
±r
);

225  
TEST_SUCCESS
;

226 
	}
}

228 
ã°_ªtu∫_t
 
	$¥e_Æloˇã
(
memˇched_°
 *
memc
)

230 ()
memc
;

231 
	`mem£t
(&
bíchm¨k_°©e
, 0, (benchmark_state));

233 
bíchm¨k_°©e
.
¸óã
(
memˇched_°
 *)
	`ˇŒoc
(
BENCHMARK_TEST_LOOP
, (memcached_st));

234 
	`ã°_åue
(
bíchm¨k_°©e
.
¸óã
);

235 
bíchm¨k_°©e
.
˛⁄e
(
memˇched_°
 *)
	`ˇŒoc
(
BENCHMARK_TEST_LOOP
, (memcached_st));

236 
	`ã°_åue
(
bíchm¨k_°©e
.
˛⁄e
);

238  
TEST_SUCCESS
;

239 
	}
}

241 
ã°_ªtu∫_t
 
	$po°_Æloˇã
(
memˇched_°
 *
memc
)

243 ()
memc
;

244 
size_t
 
x
0; x < 
BENCHMARK_TEST_LOOP
; x++)

246 i‡(
bíchm¨k_°©e
.
¸óã_öô
)

247 
	`memˇched_‰ì
(&
bíchm¨k_°©e
.
¸óã
[
x
]);

249 i‡(
bíchm¨k_°©e
.
˛⁄e_öô
)

250 
	`memˇched_‰ì
(&
bíchm¨k_°©e
.
˛⁄e
[
x
]);

253 
	`‰ì
(
bíchm¨k_°©e
.
¸óã
);

254 
	`‰ì
(
bíchm¨k_°©e
.
˛⁄e
);

256  
TEST_SUCCESS
;

257 
	}
}

260 
ã°_°
 
	gmi¸o_ã°s
[] ={

261 {"memˇched_¸óã", 1, (
ã°_ˇŒback_‚
)
memˇched_¸óã_bíchm¨k
 },

262 {"memˇched_˛⁄e", 1, (
ã°_ˇŒback_‚
)
memˇched_˛⁄e_bíchm¨k
 },

267 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

268 {"smash", 0, 0, 
smash_ã°s
},

269 {"smash_n⁄block", (
ã°_ˇŒback_‚
)
¥e_n⁄block
, 0, 
smash_ã°s
},

270 {"mi¸o-bíchm¨k", (
ã°_ˇŒback_‚
)
¥e_Æloˇã
, (ã°_ˇŒback_‚)
po°_Æloˇã
, 
mi¸o_ã°s
},

275 
	#SERVERS_TO_CREATE
 5

	)

277 
	~"libmemˇched_w‹ld.h
"

279 
	$gë_w‹ld
(
w‹ld_°
 *
w‹ld
)

281 
w‹ld
->
cﬁÀ˘i⁄s

cﬁÀ˘i⁄
;

283 
w‹ld
->
¸óã
(
ã°_ˇŒback_¸óã_‚
)
w‹ld_¸óã
;

284 
w‹ld
->
de°roy
(
ã°_ˇŒback_‚
)
w‹ld_de°roy
;

286 
w‹ld
->
ã°
.
°¨tup
(
ã°_ˇŒback_‚
)
w‹ld_ã°_°¨tup
;

287 
w‹ld
->
ã°
.
Êush
(
ã°_ˇŒback_‚
)
w‹ld_Êush
;

288 
w‹ld
->
ã°
.
¥e_run
(
ã°_ˇŒback_‚
)
w‹ld_¥e_run
;

289 
w‹ld
->
ã°
.
po°_run
(
ã°_ˇŒback_‚
)
w‹ld_po°_run
;

290 
w‹ld
->
ã°
.
⁄_îr‹
(
ã°_ˇŒback_îr‹_‚
)
w‹ld_⁄_îr‹
;

292 
w‹ld
->
cﬁÀ˘i⁄
.
°¨tup
(
ã°_ˇŒback_‚
)
w‹ld_c⁄èöî_°¨tup
;

293 
w‹ld
->
cﬁÀ˘i⁄
.
shutdown
(
ã°_ˇŒback_‚
)
w‹ld_c⁄èöî_shutdown
;

295 
w‹ld
->
ru¬î
&
defuÆt_libmemˇched_ru¬î
;

296 
	}
}

	@tests/basic.cc

38 
	~<libmemˇched/memˇched.h
>

39 
	~<libmemˇched/is.h
>

40 
	~<libã°/ã°.h
>

41 
	~"ã°s/basic.h
"

43 
ã°_ªtu∫_t
 
	$basic_öô_ã°
(
memˇched_°
 *
junk
)

45 ()
junk
;

47 
memˇched_°
 
memc
;

48 
memˇched_°
 *
memc_±r
;

50 
memc_±r

	`memˇched_¸óã
(&
memc
);

51 
	`ã°_åue
(
memc_±r
);

52 
	`ã°_Ál£
(
	`memˇched_is_Æloˇãd
(&
memc
));

53 
	`memˇched_‰ì
(
memc_±r
);

55  
TEST_SUCCESS
;

56 
	}
}

58 
ã°_ªtu∫_t
 
	$basic_˛⁄e_ã°
(
memˇched_°
 *
memc
)

60 
memˇched_°
 *
memc_±r
;

62 
memc_±r

	`memˇched_˛⁄e
(
NULL
, 
memc
);

63 
	`ã°_åue
(
memc_±r
);

64 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
memc_±r
));

65 
	`memˇched_‰ì
(
memc_±r
);

67  
TEST_SUCCESS
;

68 
	}
}

70 
ã°_ªtu∫_t
 
	$basic_ª£t_°ack_ã°
(
memˇched_°
 *
junk
)

72 ()
junk
;

73 
memˇched_°
 
memc
;

75 
	`memˇched_¸óã
(&
memc
);

77 
	`memˇched_ª£t
(&
memc
);

78 
	`ã°_Ál£
(
	`memˇched_is_Æloˇãd
(&
memc
));

80 
	`memˇched_‰ì
(&
memc
);

81 
	`ã°_Ál£
(
	`memˇched_is_Æloˇãd
(&
memc
));

83  
TEST_SUCCESS
;

84 
	}
}

86 
ã°_ªtu∫_t
 
	$basic_ª£t_hóp_ã°
(
memˇched_°
 *
junk
)

88 ()
junk
;

89 
memˇched_°
 *
memc_±r
;

91 
memc_±r

	`memˇched_¸óã
(
NULL
);

92 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
memc_±r
));

94 
	`memˇched_ª£t
(
memc_±r
);

95 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
memc_±r
));

97 
	`memˇched_‰ì
(
memc_±r
);

99  
TEST_SUCCESS
;

100 
	}
}

102 
ã°_ªtu∫_t
 
	$basic_ª£t_°ack_˛⁄e_ã°
(
memˇched_°
 *
memc
)

104 
memˇched_°
 
˛⁄e
;

105 
memˇched_°
 *
memc_±r
;

107 
	`mem£t
(&
˛⁄e
, 0, (clone));

108 
memc_±r

	`memˇched_˛⁄e
(&
˛⁄e
, 
memc
);

109 
	`ã°_åue
(
memc_±r
);

111 
	`memˇched_ª£t
(
memc_±r
);

113 
	`memˇched_‰ì
(
memc_±r
);

115  
TEST_SUCCESS
;

116 
	}
}

118 
ã°_ªtu∫_t
 
	$basic_ª£t_hóp_˛⁄e_ã°
(
memˇched_°
 *
memc
)

120 
memˇched_°
 *
memc_±r
;

122 
memc_±r

	`memˇched_˛⁄e
(
NULL
, 
memc
);

123 
	`ã°_åue
(
memc_±r
);

125 
	`memˇched_ª£t
(
memc_±r
);

127 
	`memˇched_‰ì
(
memc_±r
);

129  
TEST_SUCCESS
;

130 
	}
}

	@tests/basic.h

38 #¥agm®
⁄˚


40 
	~<libã°/visibûôy.h
>

42 #ifdef 
__˝lu•lus


46 
LIBTEST_INTERNAL_API


47 
ã°_ªtu∫_t
 
basic_öô_ã°
(
memˇched_°
 *
junk
);

49 
LIBTEST_INTERNAL_API


50 
ã°_ªtu∫_t
 
basic_˛⁄e_ã°
(
memˇched_°
 *
memc
);

52 
LIBTEST_INTERNAL_API


53 
ã°_ªtu∫_t
 
basic_ª£t_°ack_ã°
(
memˇched_°
 *
junk
);

55 
LIBTEST_INTERNAL_API


56 
ã°_ªtu∫_t
 
basic_ª£t_hóp_ã°
(
memˇched_°
 *
junk
);

58 
LIBTEST_INTERNAL_API


59 
ã°_ªtu∫_t
 
basic_ª£t_°ack_˛⁄e_ã°
(
memˇched_°
 *
memc
);

61 
LIBTEST_INTERNAL_API


62 
ã°_ªtu∫_t
 
basic_ª£t_hóp_˛⁄e_ã°
(
memˇched_°
 *
memc
);

64 #ifdef 
__˝lu•lus


	@tests/cpp_example.cc

5 
	~<ve˘‹
>

6 
	~<°rög
>

7 
	~<io°ªam
>

8 
	~<Æg‹ôhm
>

9 
	~<m≠
>

11 
	~<°rög.h
>

13 
	~<libmemˇched/memˇched.hµ
>

15 
usög
 
«me•a˚
 
	g°d
;

16 
usög
 
«me•a˚
 
	gmemˇche
;

18 ˛as†
	cDñëePås


20 
	mpublic
:

21 
ãm∂©e
<
ty≥«me
 
T
>

22 
ölöe
 
	$›î©‹
()(c⁄° 
T
 *
±r
) const

24 
dñëe
 
±r
;

26 
	}
};

28 ˛as†
	cMyCache


30 
	mpublic
:

32 c⁄° 
uöt32_t
 
num_of_˛õ¡s
= 10;

34 
	mMyCache
 &
	$sögÀt⁄
()

36 
MyCache
 
ö°™˚
;

37  
ö°™˚
;

40 
	`£t
(c⁄° 
°rög
 &
key
,

41 c⁄° 
ve˘‹
<> &
vÆue
)

43 
time_t
 
expúy
= 0;

44 
uöt32_t
 
Êags
= 0;

45 
	`gëCache
()->
	`£t
(
key
, 
vÆue
, 
expúy
, 
Êags
);

46 
	}
}

48 
	gve˘‹
<> 
	$gë
(c⁄° 
°rög
 &
key
)

50 
ve˘‹
<> 
ªt_vÆue
;

51 
	`gëCache
()->
	`gë
(
key
, 
ªt_vÆue
);

52  
ªt_vÆue
;

53 
	}
}

55 
	$ªmove
(c⁄° 
°rög
 &
key
)

57 
	`gëCache
()->
	`ªmove
(
key
);

58 
	}
}

60 
Memˇche
 *
	$gëCache
()

66 
uöt32_t
 
ödex

	`ønd
(Ë% 
num_of_˛õ¡s
;

67  
˛õ¡s
[
ödex
];

68 
	}
}

70 
	g¥iv©e
:

75 
°d
::
ve˘‹
<
Memˇche
 *> 
˛õ¡s
;

77 
	$MyCache
()

79 
	$˛õ¡s
()

82 
uöt32_t
 
i
0; i < 
num_of_˛õ¡s
; i++)

84 
Memˇche
 *
˛õ¡

√w
 
	`Memˇche
("127.0.0.1:11211");

85 
˛õ¡s
.
	`push_back
(
˛õ¡
);

87 
	}
}

89 ~
	$MyCache
()

91 
	`f‹_óch
(
˛õ¡s
.
	`begö
(), clõ¡s.
	`íd
(), 
	`DñëePås
());

92 
˛õ¡s
.
	`˛ór
();

93 
	}
}

95 
MyCache
(const MyCache&);

99 ˛as†
	cProdu˘


101 
	mpublic
:

103 
	$Produ˘
(
ö_id
, 
ö_¥i˚
)

105 
	`id
(
ö_id
),

106 
	$¥i˚
(
ö_¥i˚
)

109 
	$Produ˘
()

111 
	`id
(0),

112 
	$¥i˚
(0.0)

113 {
	}
}

115 
	$gëId
() const

117  
id
;

118 
	}
}

120 
	$gëPri˚
() const

122  
¥i˚
;

123 
	}
}

125 
	g¥iv©e
:

127 
id
;

128 
	g¥i˚
;

132 
£tAŒProdu˘s
(
ve˘‹
<
Produ˘
> &
¥odu˘s
)

134 
	gve˘‹
<> 
øw_¥odu˘s
(
¥odu˘s
.
size
(Ë* (
Produ˘
));

135 
mem˝y
(&
øw_¥odu˘s
[0], &
¥odu˘s
[0],Örodu˘s.
size
(Ë* (
Produ˘
));

136 
	gMyCache
::
sögÀt⁄
().
£t
("AŒProdu˘s", 
øw_¥odu˘s
);

139 
	gve˘‹
<
	gProdu˘
> 
	$gëAŒProdu˘s
()

141 
ve˘‹
<> 
øw_¥odu˘s
 = 
MyCache
::
	`sögÀt⁄
().
	`gë
("AllProducts");

142 
ve˘‹
<
Produ˘
> 
	`¥odu˘s
(
øw_¥odu˘s
.
	`size
() / (Product));

143 
	`mem˝y
(&
¥odu˘s
[0], &
øw_¥odu˘s
[0],Ñaw_¥odu˘s.
	`size
());

144  
¥odu˘s
;

145 
	}
}

147 
Produ˘
 
	$gëProdu˘
(c⁄° 
°rög
 &
key
)

149 
ve˘‹
<> 
øw_¥odu˘

MyCache
::
	`sögÀt⁄
().
	`gë
(
key
);

150 
Produ˘
 
ªt
;

151 i‡(! 
øw_¥odu˘
.
	`em±y
())

153 
	`mem˝y
(&
ªt
, &
øw_¥odu˘
[0], (
Produ˘
));

159  
ªt
;

160 
	}
}

162 
	$£tProdu˘
(c⁄° 
°rög
 &
key
, c⁄° 
Produ˘
 &
¥odu˘
)

164 
ve˘‹
<> 
	`øw_¥odu˘
((
Produ˘
));

165 
	`mem˝y
(&
øw_¥odu˘
[0], &
¥odu˘
, (
Produ˘
));

166 
MyCache
::
	`sögÀt⁄
().
	`£t
(
key
, 
øw_¥odu˘
);

167 
	}
}

169 
	$maö
()

171 
Memˇche
 
	`fú°_˛õ¡
("127.0.0.1:19191");

172 
m≠
< 
°rög
, m≠<°rög, såög> > 
my_°©s
;

173 
fú°_˛õ¡
.
	`gëSèts
(
my_°©s
);

178 
m≠
< 
°rög
, m≠<°rög, såög> >::
ôî©‹
 
ô
=

179 
my_°©s
.
	`begö
();

180 
ô
 !
my_°©s
.
	`íd
())

182 
cout
 << "w‹kög wôh sîvî: " << (*
ô
).
fú°
 << 
ídl
;

183 
m≠
<
°rög
, såög> 
£rv_°©s
(*
ô
).
£c⁄d
;

184 
m≠
<
°rög
, såög>::
ôî©‹
 
ôî

£rv_°©s
.
	`begö
();

185 
ôî
 !
£rv_°©s
.
	`íd
())

187 
cout
 << (*
ôî
).
fú°
 << ":" << (*ôî).
£c⁄d
 << 
ídl
;

188 ++
ôî
;

190 ++
ô
;

193  
EXIT_SUCCESS
;

194 
	}
}

	@tests/deprecated.cc

38 
	~<c⁄fig.h
>

40 
	~<ˇs£π
>

42 
	~<libã°/ã°.h
>

43 
	~<libmemˇched/memˇched.h
>

44 
	~<ã°s/dïªˇãd.h
>

46 
ã°_ªtu∫_t
 
	$£rvî_li°_nuŒ_ã°
(
memˇched_°
 *
±r
)

48 
memˇched_£rvî_°
 *
£rvî_li°
;

49 
memˇched_ªtu∫_t
 
rc
;

50 ()
±r
;

52 
£rvî_li°

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
NULL
, NULL, 0, 0, NULL);

53 
	`ã°_åue
(
£rvî_li°
 =
NULL
);

55 
£rvî_li°

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
NULL
, "localhost", 0, 0, NULL);

56 
	`ã°_åue
(
£rvî_li°
 =
NULL
);

58 
£rvî_li°

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
NULL
, NULL, 0, 0, &
rc
);

59 
	`ã°_åue
(
£rvî_li°
 =
NULL
);

61  
TEST_SUCCESS
;

62 
	}
}

65 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_728286
(
memˇched_°
 *)

67 
memˇched_£rvî_°
 *
£rvîs
 = 
	`memˇched_£rvîs_∑r£
("1.2.3.4:99");

68 
	`as£π
(
£rvîs
);

69 
	`memˇched_£rvî_‰ì
(
£rvîs
);

71  
TEST_SUCCESS
;

72 
	}
}

	@tests/deprecated.h

38 #¥agm®
⁄˚


40 #ifdef 
__˝lu•lus


44 
ã°_ªtu∫_t
 
£rvî_li°_nuŒ_ã°
(
memˇched_°
 *
±r
);

45 
ã°_ªtu∫_t
 
ªgªssi⁄_bug_728286
(
memˇched_°
 *);

47 #ifdef 
__˝lu•lus


	@tests/error_conditions.cc

38 
	~<c⁄fig.h
>

40 
	#BUILDING_LIBMEMCACHED


	)

42 
	~<libmemˇched/memˇched.h
>

43 
	~<libmemˇched/is.h
>

44 
	~<libã°/ã°.h
>

45 
	~<ã°s/îr‹_c⁄dôi⁄s.h
>

47 #ifdef 
__˝lu•lus


51 
ã°_ªtu∫_t
 
memˇched_ö¸emít_MEMCACHED_NO_SERVERS
(
memˇched_°
 *
junk
)

53 ()
junk
;

54 
memˇched_°
 *
memc_±r
;

56 
memc_±r

memˇched_¸óã
(
NULL
);

57 
ã°_åue
(
memc_±r
);

59 
memˇched_ö¸emít
(
memc_±r
, 
memˇched_°rög_wôh_size
("dód key"), 1, 
NULL
);

60 
ã°_åue
(
memˇched_œ°_îr‹
(
memc_±r
Ë=
MEMCACHED_NO_SERVERS
);

62 
memˇched_ö¸emít
(
memc_±r
, 
memˇched_°rög_wôh_size
("dód key"), 1, 
NULL
);

63 
ã°_åue
(
memˇched_œ°_îr‹
(
memc_±r
Ë=
MEMCACHED_NO_SERVERS
);

65 
memˇched_‰ì
(
memc_±r
);

67  
TEST_SUCCESS
;

70 #ifdef 
__˝lu•lus


	@tests/error_conditions.h

38 #¥agm®
⁄˚


40 
	~<libã°/ã°.h
>

42 #ifdef 
__˝lu•lus


46 
ã°_ªtu∫_t
 
memˇched_ö¸emít_MEMCACHED_NO_SERVERS
(
memˇched_°
 *
junk
);

48 #ifdef 
__˝lu•lus


	@tests/hash_plus.cc

4 
	~<libã°/ã°.h
>

6 
	~<c°dio
>

7 
	~<c°dlib
>

8 
	~<c°rög
>

10 
	~<libhashkô/hashkô.h
>

12 
	~"hash_ªsu…s.h
"

14 
ã°_ªtu∫_t
 
	$exi°s_ã°
(*
obj
)

16 
Hashkô
 
hashk
;

17 ()
obj
;

18 ()
hashk
;

20  
TEST_SUCCESS
;

21 
	}
}

23 
ã°_ªtu∫_t
 
	$√w_ã°
(*
obj
)

25 
Hashkô
 *
hashk

√w
 Hashkit;

26 ()
obj
;

28 ()
hashk
;

30 
dñëe
 
hashk
;

32  
TEST_SUCCESS
;

33 
	}
}

35 
ã°_ªtu∫_t
 
	$c›y_ã°
(*
obj
)

37 
Hashkô
 *
hashk

√w
 Hashkit;

38 
Hashkô
 *
	`c›y
(
hashk
);

39 ()
obj
;

41 ()
c›y
;

43 
dñëe
 
hashk
;

45  
TEST_SUCCESS
;

46 
	}
}

48 
ã°_ªtu∫_t
 
	$assign_ã°
(*
obj
)

50 
Hashkô
 
hashk
;

51 
Hashkô
 
c›y
;

52 ()
obj
;

54 
c›y

hashk
;

56 ()
c›y
;

58  
TEST_SUCCESS
;

59 
	}
}

61 
ã°_ªtu∫_t
 
	$dige°_ã°
(*
obj
)

63 
Hashkô
 
hashk
;

64 
uöt32_t
 
vÆue
;

65 ()
obj
;

67 
vÆue

hashk
.
	`dige°
("Foo", ("Foo"));

69  
TEST_SUCCESS
;

70 
	}
}

72 
ã°_ªtu∫_t
 
	$£t_fun˘i⁄_ã°
(*)

74 
Hashkô
 
hashk
;

75 
hashkô_hash_Æg‹ôhm_t
 
Ægo_li°
[]= {

76 
HASHKIT_HASH_DEFAULT
,

77 
HASHKIT_HASH_MD5
,

78 
HASHKIT_HASH_CRC
,

79 
HASHKIT_HASH_FNV1_64
,

80 
HASHKIT_HASH_FNV1A_64
,

81 
HASHKIT_HASH_FNV1_32
,

82 
HASHKIT_HASH_FNV1A_32
,

83 
HASHKIT_HASH_MURMUR
,

84 
HASHKIT_HASH_JENKINS
,

85 
HASHKIT_HASH_MAX


89 
hashkô_hash_Æg‹ôhm_t
 *
Ægo

Ægo_li°
; *Ægÿ!
HASHKIT_HASH_MAX
;álgo++)

91 
hashkô_ªtu∫_t
 
rc

hashk
.
	`£t_fun˘i⁄
(*
Ægo
);

93 
	`ã°_åue
(
rc
 =
HASHKIT_SUCCESS
);

95 
uöt32_t
 *
li°
;

96 *
Ægo
)

98 
HASHKIT_HASH_DEFAULT
:

99 
li°

⁄e_©_a_time_vÆues
;

101 
HASHKIT_HASH_MD5
:

102 
li°

md5_vÆues
;

104 
HASHKIT_HASH_CRC
:

105 
li°

¸c_vÆues
;

107 
HASHKIT_HASH_FNV1_64
:

108 
li°

‚v1_64_vÆues
;

110 
HASHKIT_HASH_FNV1A_64
:

111 
li°

‚v1a_64_vÆues
;

113 
HASHKIT_HASH_FNV1_32
:

114 
li°

‚v1_32_vÆues
;

116 
HASHKIT_HASH_FNV1A_32
:

117 
li°

‚v1a_32_vÆues
;

119 
HASHKIT_HASH_HSIEH
:

120 #i‚de‡
HAVE_HSIEH_HASH


123 
li°

hsõh_vÆues
;

125 
HASHKIT_HASH_MURMUR
:

126 #ifde‡
WORDS_BIGENDIAN


129 #i‚de‡
HAVE_MURMUR_HASH


132 
li°

murmur_vÆues
;

134 
HASHKIT_HASH_JENKINS
:

135 
li°

jíkös_vÆues
;

137 
HASHKIT_HASH_CUSTOM
:

138 
HASHKIT_HASH_MAX
:

140 
li°

NULL
;

141 
	`ã°_Áû
("WeÉnded up onáÇon-existent hash");

145 
uöt32_t
 
x
;

146 c⁄° **
±r
;

147 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

149 
uöt32_t
 
hash_vÆ
;

151 
hash_vÆ

hashk
.
	`dige°
(*
±r
, 
	`°æí
(*ptr));

152 
buf„r
[1024];

153 
	`¢¥ötf
(
buf„r
, (buf„r), "%lu %lu†%s", ()
li°
[
x
], ()
hash_vÆ
, 
	`libhashkô_°rög_hash
(*
Ægo
));

154 
	`ã°_åue_gŸ
(
li°
[
x
] =
hash_vÆ
, 
buf„r
);

158  
TEST_SUCCESS
;

159 
	}
}

161 
ã°_ªtu∫_t
 
	$£t_di°ributi⁄_fun˘i⁄_ã°
(*
obj
)

163 
Hashkô
 
hashk
;

164 
hashkô_ªtu∫_t
 
rc
;

165 ()
obj
;

167 
rc

hashk
.
	`£t_di°ributi⁄_fun˘i⁄
(
HASHKIT_HASH_CUSTOM
);

168 
	`ã°_åue_gŸ
(
rc
 =
HASHKIT_FAILURE
 
‹
Ñ¯=
HASHKIT_INVALID_ARGUMENT
, 
	`hashkô_°ªº‹
(
NULL
,Ñc));

170 
rc

hashk
.
	`£t_di°ributi⁄_fun˘i⁄
(
HASHKIT_HASH_JENKINS
);

171 
	`ã°_åue
(
rc
 =
HASHKIT_SUCCESS
);

173  
TEST_SUCCESS
;

174 
	}
}

176 
ã°_ªtu∫_t
 
	$com∑ª_fun˘i⁄_ã°
(*
obj
)

178 
Hashkô
 
a
, 
b
;

179 ()
obj
;

181 
b

a
;

183 
	`ã°_åue
(
a
 =
b
);

185 
b
.
	`£t_fun˘i⁄
(
HASHKIT_HASH_MURMUR
);

187 
	`ã°_Ál£
(
a
 =
b
);

188 
	`ã°_åue
(
b
 == b);

189 
	`ã°_åue
(
a
 ==á);

191  
TEST_SUCCESS
;

192 
	}
}

194 
ã°_°
 
	gbasic
[] ={

195 { "exi°s", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
exi°s_ã°
) },

196 { "√w", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
√w_ã°
) },

197 { "c›y", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
c›y_ã°
) },

198 { "assign", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
assign_ã°
) },

199 { "dige°", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
dige°_ã°
) },

200 { "£t_fun˘i⁄", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
£t_fun˘i⁄_ã°
) },

201 { "£t_di°ributi⁄_fun˘i⁄", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
£t_di°ributi⁄_fun˘i⁄_ã°
) },

202 { "com∑ª", 0, 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
com∑ª_fun˘i⁄_ã°
) },

206 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

207 {"basic", 0, 0, 
basic
},

211 
	$gë_w‹ld
(
w‹ld_°
 *
w‹ld
)

213 
w‹ld
->
cﬁÀ˘i⁄s

cﬁÀ˘i⁄
;

214 
	}
}

	@tests/hash_results.h

15 c⁄° *
	gli°_to_hash
[]=

42 
NULL


45 
uöt32_t
 
	g⁄e_©_a_time_vÆues
[]= { 2297466611U, 3902465932U, 469785835U, 1937308741U,

53 
uöt32_t
 
	gmd5_vÆues
[]= { 3195025439U, 2556848621U, 3724893440U, 3332385401U,

61 
uöt32_t
 
	g¸c_vÆues
[]= { 10542U, 22009U, 14526U, 19510U, 19432U, 10199U, 20634U,

66 
uöt32_t
 
	g‚v1_64_vÆues
[]= { 473199127U, 4148981457U, 3971873300U, 3257986707U,

74 
uöt32_t
 
	g‚v1a_64_vÆues
[]= { 1488911807U, 2500855813U, 1510099634U, 1390325195U,

82 
uöt32_t
 
	g‚v1_32_vÆues
[]= { 67176023U, 1190179409U, 2043204404U, 3221866419U,

90 
uöt32_t
 
	g‚v1a_32_vÆues
[]= { 280767167U, 2421315013U, 3072375666U, 855001899U,

98 #ifde‡
HAVE_HSIEH_HASH


99 
uöt32_t
 
	ghsõh_vÆues
[]= { 3738850110U, 3636226060U, 3821074029U, 3489929160U, 3485772682U, 80540287U,

105 
uöt32_t
 
	ghsõh_vÆues
[]= { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

108 #ifde‡
HAVE_MURMUR_HASH


109 
uöt32_t
 
	gmurmur_vÆues
[]= { 4142305122U, 734504955U, 3802834688U, 4076891445U,

117 
uöt32_t
 
	gmurmur_vÆues
[]= { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

120 
uöt32_t
 
	gjíkös_vÆues
[]= { 1442444624U, 4253821186U, 1885058256U, 2120131735U,

	@tests/hashkit_functions.c

9 
	~"c⁄fig.h
"

11 
	~<as£π.h
>

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

16 
	~<libhashkô/hashkô.h
>

18 
	~<libã°/ã°.h
>

20 
	~"hash_ªsu…s.h
"

22 
hashkô_°
 
	gglobÆ_hashk
;

27 
hash_ã°_°
 
	thash_ã°_°
;

29 
	shash_ã°_°


31 
boﬁ
 
	m_unu£d
;

34 
ã°_ªtu∫_t
 
	$öô_ã°
(*
nŸ_u£d
)

36 
hashkô_°
 
hashk
;

37 
hashkô_°
 *
hashk_±r
;

38 ()
nŸ_u£d
;

40 
hashk_±r

	`hashkô_¸óã
(&
hashk
);

41 
	`ã°_åue
(
hashk_±r
);

42 
	`ã°_åue
(
hashk_±r
 =&
hashk
);

43 
	`ã°_åue
(
	`hashkô_is_Æloˇãd
(
hashk_±r
Ë=
Ál£
);

45 
	`hashkô_‰ì
(
hashk_±r
);

47  
TEST_SUCCESS
;

48 
	}
}

50 
ã°_ªtu∫_t
 
	$Æloˇti⁄_ã°
(*
nŸ_u£d
)

52 
hashkô_°
 *
hashk_±r
;

53 ()
nŸ_u£d
;

55 
hashk_±r

	`hashkô_¸óã
(
NULL
);

56 
	`ã°_åue
(
hashk_±r
);

57 
	`ã°_åue
(
	`hashkô_is_Æloˇãd
(
hashk_±r
Ë=
åue
);

58 
	`hashkô_‰ì
(
hashk_±r
);

60  
TEST_SUCCESS
;

61 
	}
}

63 
ã°_ªtu∫_t
 
	$˛⁄e_ã°
(
hashkô_°
 *
hashk
)

66 
	`as£π
(&
globÆ_hashk
 =
hashk
);

72 
hashkô_°
 *
hashk_±r
;

73 
hashk_±r

	`hashkô_˛⁄e
(
NULL
, NULL);

74 
	`ã°_åue
(
hashk_±r
);

75 
	`ã°_åue
(
	`hashkô_is_Æloˇãd
(
hashk_±r
));

76 
	`hashkô_‰ì
(
hashk_±r
);

81 
hashkô_°
 *
hashk_±r
;

83 
hashk_±r

	`hashkô_˛⁄e
(
NULL
, 
hashk
);

85 
	`ã°_åue
(
hashk_±r
);

86 
	`ã°_åue
(
	`hashkô_is_Æloˇãd
(
hashk_±r
));

88 
	`hashkô_‰ì
(
hashk_±r
);

93 
hashkô_°
 
de˛¨ed_˛⁄e
;

94 
hashkô_°
 *
hash_˛⁄e
;

96 
hash_˛⁄e

	`hashkô_˛⁄e
(&
de˛¨ed_˛⁄e
, 
NULL
);

97 
	`ã°_åue
(
hash_˛⁄e
);

98 
	`ã°_åue
(
hash_˛⁄e
 =&
de˛¨ed_˛⁄e
);

99 
	`ã°_Ál£
(
	`hashkô_is_Æloˇãd
(
hash_˛⁄e
));

101 
	`hashkô_‰ì
(
hash_˛⁄e
);

106 
hashkô_°
 
de˛¨ed_˛⁄e
;

107 
hashkô_°
 *
hash_˛⁄e
;

109 
hash_˛⁄e

	`hashkô_˛⁄e
(&
de˛¨ed_˛⁄e
, 
hashk
);

110 
	`ã°_åue
(
hash_˛⁄e
);

111 
	`ã°_åue
(
hash_˛⁄e
 =&
de˛¨ed_˛⁄e
);

112 
	`ã°_Ál£
(
	`hashkô_is_Æloˇãd
(
hash_˛⁄e
));

114 
	`hashkô_‰ì
(
hash_˛⁄e
);

117  
TEST_SUCCESS
;

118 
	}
}

120 
ã°_ªtu∫_t
 
	$⁄e_©_a_time_run
 (
hashkô_°
 *
hashk
)

122 
uöt32_t
 
x
;

123 c⁄° **
±r
;

124 ()
hashk
;

126 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

128 
uöt32_t
 
hash_vÆ
;

130 
hash_vÆ

	`libhashkô_⁄e_©_a_time
(*
±r
, 
	`°æí
(*ptr));

131 
	`ã°_åue
(
⁄e_©_a_time_vÆues
[
x
] =
hash_vÆ
);

134  
TEST_SUCCESS
;

135 
	}
}

137 
ã°_ªtu∫_t
 
	$md5_run
 (
hashkô_°
 *
hashk
)

139 
uöt32_t
 
x
;

140 c⁄° **
±r
;

141 ()
hashk
;

143 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

145 
uöt32_t
 
hash_vÆ
;

147 
hash_vÆ

	`libhashkô_md5
(*
±r
, 
	`°æí
(*ptr));

148 
	`ã°_åue
(
md5_vÆues
[
x
] =
hash_vÆ
);

151  
TEST_SUCCESS
;

152 
	}
}

154 
ã°_ªtu∫_t
 
	$¸c_run
 (
hashkô_°
 *
hashk
)

156 
uöt32_t
 
x
;

157 c⁄° **
±r
;

158 ()
hashk
;

160 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

162 
uöt32_t
 
hash_vÆ
;

164 
hash_vÆ

	`libhashkô_¸c32
(*
±r
, 
	`°æí
(*ptr));

165 
	`as£π
(
¸c_vÆues
[
x
] =
hash_vÆ
);

168  
TEST_SUCCESS
;

169 
	}
}

171 
ã°_ªtu∫_t
 
	$‚v1_64_run
 (
hashkô_°
 *
hashk
)

173 
uöt32_t
 
x
;

174 c⁄° **
±r
;

175 ()
hashk
;

177 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

179 
uöt32_t
 
hash_vÆ
;

181 
hash_vÆ

	`libhashkô_‚v1_64
(*
±r
, 
	`°æí
(*ptr));

182 
	`as£π
(
‚v1_64_vÆues
[
x
] =
hash_vÆ
);

185  
TEST_SUCCESS
;

186 
	}
}

188 
ã°_ªtu∫_t
 
	$‚v1a_64_run
 (
hashkô_°
 *
hashk
)

190 
uöt32_t
 
x
;

191 c⁄° **
±r
;

192 ()
hashk
;

194 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

196 
uöt32_t
 
hash_vÆ
;

198 
hash_vÆ

	`libhashkô_‚v1a_64
(*
±r
, 
	`°æí
(*ptr));

199 
	`as£π
(
‚v1a_64_vÆues
[
x
] =
hash_vÆ
);

202  
TEST_SUCCESS
;

203 
	}
}

205 
ã°_ªtu∫_t
 
	$‚v1_32_run
 (
hashkô_°
 *
hashk
)

207 
uöt32_t
 
x
;

208 c⁄° **
±r
;

209 ()
hashk
;

211 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

213 
uöt32_t
 
hash_vÆ
;

215 
hash_vÆ

	`libhashkô_‚v1_32
(*
±r
, 
	`°æí
(*ptr));

216 
	`as£π
(
‚v1_32_vÆues
[
x
] =
hash_vÆ
);

219  
TEST_SUCCESS
;

220 
	}
}

222 
ã°_ªtu∫_t
 
	$‚v1a_32_run
 (
hashkô_°
 *
hashk
)

224 
uöt32_t
 
x
;

225 c⁄° **
±r
;

226 ()
hashk
;

228 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

230 
uöt32_t
 
hash_vÆ
;

232 
hash_vÆ

	`libhashkô_‚v1a_32
(*
±r
, 
	`°æí
(*ptr));

233 
	`as£π
(
‚v1a_32_vÆues
[
x
] =
hash_vÆ
);

236  
TEST_SUCCESS
;

237 
	}
}

239 
ã°_ªtu∫_t
 
	$hsõh_run
 (
hashkô_°
 *
hashk
)

241 
uöt32_t
 
x
;

242 c⁄° **
±r
;

243 ()
hashk
;

245 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

247 
uöt32_t
 
hash_vÆ
;

249 #ifde‡
HAVE_HSIEH_HASH


250 
hash_vÆ

	`libhashkô_hsõh
(*
±r
, 
	`°æí
(*ptr));

252 
hash_vÆ
= 1;

254 
	`as£π
(
hsõh_vÆues
[
x
] =
hash_vÆ
);

257  
TEST_SUCCESS
;

258 
	}
}

260 
ã°_ªtu∫_t
 
	$murmur_run
 (
hashkô_°
 *
hashk
)

262 ()
hashk
;

264 #ifde‡
WORDS_BIGENDIAN


265 ()
murmur_vÆues
;

266  
TEST_SKIPPED
;

268 
uöt32_t
 
x
;

269 c⁄° **
±r
;

271 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

273 
uöt32_t
 
hash_vÆ
;

275 #ifde‡
HAVE_MURMUR_HASH


276 
hash_vÆ

	`libhashkô_murmur
(*
±r
, 
	`°æí
(*ptr));

278 
hash_vÆ
= 1;

280 
	`as£π
(
murmur_vÆues
[
x
] =
hash_vÆ
);

283  
TEST_SUCCESS
;

285 
	}
}

287 
ã°_ªtu∫_t
 
	$jíkös_run
 (
hashkô_°
 *
hashk
)

289 
uöt32_t
 
x
;

290 c⁄° **
±r
;

291 ()
hashk
;

293 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

295 
uöt32_t
 
hash_vÆ
;

297 
hash_vÆ

	`libhashkô_jíkös
(*
±r
, 
	`°æí
(*ptr));

298 
	`as£π
(
jíkös_vÆues
[
x
] =
hash_vÆ
);

301  
TEST_SUCCESS
;

302 
	}
}

311 
ã°_°
 
	gÆloˇti⁄
[]= {

312 {"öô", 0, (
ã°_ˇŒback_‚
)
öô_ã°
},

313 {"¸óãánd fªe", 0, (
ã°_ˇŒback_‚
)
Æloˇti⁄_ã°
},

314 {"˛⁄e", 0, (
ã°_ˇŒback_‚
)
˛⁄e_ã°
},

318 
ã°_ªtu∫_t
 
	$hashkô_dige°_ã°
(
hashkô_°
 *
hashk
)

320 
uöt32_t
 
vÆue
;

321 
vÆue

	`hashkô_dige°
(
hashk
, "a", ("a"));

323  
TEST_SUCCESS
;

324 
	}
}

326 
ã°_ªtu∫_t
 
	$hashkô_£t_fun˘i⁄_ã°
(
hashkô_°
 *
hashk
)

328 
hashkô_hash_Æg‹ôhm_t
 
Ægo
 = 
HASHKIT_HASH_DEFAULT
;álgÿ< 
HASHKIT_HASH_MAX
;álgo++)

330 
hashkô_ªtu∫_t
 
rc
;

331 
uöt32_t
 
x
;

332 c⁄° **
±r
;

333 
uöt32_t
 *
li°
;

335 
rc

	`hashkô_£t_fun˘i⁄
(
hashk
, 
Ægo
);

338 #i‚de‡
HAVE_HSIEH_HASH


339 i‡(
rc
 =
HASHKIT_FAILURE
 && 
Ægo
 =
HASHKIT_HASH_HSIEH
)

343 #i‚de‡
HAVE_MURMUR_HASH


344 i‡(
rc
 =
HASHKIT_FAILURE
 && 
Ægo
 =
HASHKIT_HASH_MURMUR
)

348 i‡(
rc
 =
HASHKIT_INVALID_ARGUMENT
 && 
Ægo
 =
HASHKIT_HASH_CUSTOM
)

351 
	`ã°_åue_gŸ
(
rc
 =
HASHKIT_SUCCESS
, 
	`hashkô_°ªº‹
(
NULL
,Ñc));

353 
Ægo
)

355 
HASHKIT_HASH_DEFAULT
:

356 
li°

⁄e_©_a_time_vÆues
;

358 
HASHKIT_HASH_MD5
:

359 
li°

md5_vÆues
;

361 
HASHKIT_HASH_CRC
:

362 
li°

¸c_vÆues
;

364 
HASHKIT_HASH_FNV1_64
:

365 
li°

‚v1_64_vÆues
;

367 
HASHKIT_HASH_FNV1A_64
:

368 
li°

‚v1a_64_vÆues
;

370 
HASHKIT_HASH_FNV1_32
:

371 
li°

‚v1_32_vÆues
;

373 
HASHKIT_HASH_FNV1A_32
:

374 
li°

‚v1a_32_vÆues
;

376 
HASHKIT_HASH_HSIEH
:

377 
li°

hsõh_vÆues
;

379 
HASHKIT_HASH_MURMUR
:

380 
li°

murmur_vÆues
;

382 
HASHKIT_HASH_JENKINS
:

383 
li°

jíkös_vÆues
;

385 
HASHKIT_HASH_CUSTOM
:

386 
HASHKIT_HASH_MAX
:

388 
li°

NULL
;

393 i‡(
li°
)

395 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

397 
uöt32_t
 
hash_vÆ
;

399 
hash_vÆ

	`hashkô_dige°
(
hashk
, *
±r
, 
	`°æí
(*ptr));

400 
	`ã°_åue
(
li°
[
x
] =
hash_vÆ
);

405  
TEST_FAILURE
;

409  
TEST_SUCCESS
;

410 
	}
}

412 
uöt32_t
 
	$hash_ã°_fun˘i⁄
(c⁄° *
°rög
, 
size_t
 
°rög_Àngth
, *
c⁄ãxt
)

414 ()
c⁄ãxt
;

415  
	`libhashkô_md5
(
°rög
, 
°rög_Àngth
);

416 
	}
}

418 
ã°_ªtu∫_t
 
	$hashkô_£t_cu°om_fun˘i⁄_ã°
(
hashkô_°
 *
hashk
)

420 
hashkô_ªtu∫_t
 
rc
;

421 
uöt32_t
 
x
;

422 c⁄° **
±r
;

425 
rc

	`hashkô_£t_cu°om_fun˘i⁄
(
hashk
, 
hash_ã°_fun˘i⁄
, 
NULL
);

426 
	`ã°_åue
(
rc
 =
HASHKIT_SUCCESS
);

428 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

430 
uöt32_t
 
hash_vÆ
;

432 
hash_vÆ

	`hashkô_dige°
(
hashk
, *
±r
, 
	`°æí
(*ptr));

433 
	`ã°_åue
(
md5_vÆues
[
x
] =
hash_vÆ
);

436  
TEST_SUCCESS
;

437 
	}
}

439 
ã°_ªtu∫_t
 
	$hashkô_£t_di°ributi⁄_fun˘i⁄_ã°
(
hashkô_°
 *
hashk
)

441 
hashkô_hash_Æg‹ôhm_t
 
Ægo
 = 
HASHKIT_HASH_DEFAULT
;álgÿ< 
HASHKIT_HASH_MAX
;álgo++)

443 
hashkô_ªtu∫_t
 
rc
;

445 
rc

	`hashkô_£t_di°ributi⁄_fun˘i⁄
(
hashk
, 
Ægo
);

448 i‡(
rc
 =
HASHKIT_FAILURE
 && 
Ægo
 =
HASHKIT_HASH_HSIEH
)

451 i‡(
rc
 =
HASHKIT_INVALID_ARGUMENT
 && 
Ægo
 =
HASHKIT_HASH_CUSTOM
)

454 
	`ã°_åue
(
rc
 =
HASHKIT_SUCCESS
);

457  
TEST_SUCCESS
;

458 
	}
}

460 
ã°_ªtu∫_t
 
	$hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄_ã°
(
hashkô_°
 *
hashk
)

462 
hashkô_ªtu∫_t
 
rc
;

464 
rc

	`hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄
(
hashk
, 
hash_ã°_fun˘i⁄
, 
NULL
);

465 
	`ã°_åue
(
rc
 =
HASHKIT_SUCCESS
);

467  
TEST_SUCCESS
;

468 
	}
}

471 
ã°_ªtu∫_t
 
	$hashkô_gë_fun˘i⁄_ã°
(
hashkô_°
 *
hashk
)

473 
hashkô_hash_Æg‹ôhm_t
 
Ægo
 = 
HASHKIT_HASH_DEFAULT
;álgÿ< 
HASHKIT_HASH_MAX
;álgo++)

475 
hashkô_ªtu∫_t
 
rc
;

477 i‡(
HASHKIT_HASH_CUSTOM
 || 
HASHKIT_HASH_HSIEH
)

480 
rc

	`hashkô_£t_fun˘i⁄
(
hashk
, 
Ægo
);

481 
	`ã°_åue
(
rc
 =
HASHKIT_SUCCESS
);

483 
	`ã°_åue
(
	`hashkô_gë_fun˘i⁄
(
hashk
Ë=
Ægo
);

485  
TEST_SUCCESS
;

486 
	}
}

488 
ã°_ªtu∫_t
 
	$hashkô_com∑ª_ã°
(
hashkô_°
 *
hashk
)

490 
hashkô_°
 *
˛⁄e
;

492 
˛⁄e

	`hashkô_˛⁄e
(
NULL
, 
hashk
);

494 
	`ã°_åue
(
	`hashkô_com∑ª
(
˛⁄e
, 
hashk
));

495 
	`hashkô_‰ì
(
˛⁄e
);

497  
TEST_SUCCESS
;

498 
	}
}

500 
ã°_°
 
	ghashkô_°_fun˘i⁄s
[] ={

501 {"hashkô_dige°", 0, (
ã°_ˇŒback_‚
)
hashkô_dige°_ã°
},

502 {"hashkô_£t_fun˘i⁄", 0, (
ã°_ˇŒback_‚
)
hashkô_£t_fun˘i⁄_ã°
},

503 {"hashkô_£t_cu°om_fun˘i⁄", 0, (
ã°_ˇŒback_‚
)
hashkô_£t_cu°om_fun˘i⁄_ã°
},

504 {"hashkô_gë_fun˘i⁄", 0, (
ã°_ˇŒback_‚
)
hashkô_gë_fun˘i⁄_ã°
},

505 {"hashkô_£t_di°ributi⁄_fun˘i⁄", 0, (
ã°_ˇŒback_‚
)
hashkô_£t_di°ributi⁄_fun˘i⁄_ã°
},

506 {"hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄", 0, (
ã°_ˇŒback_‚
)
hashkô_£t_cu°om_di°ributi⁄_fun˘i⁄_ã°
},

507 {"hashkô_com∑ª", 0, (
ã°_ˇŒback_‚
)
hashkô_com∑ª_ã°
},

511 
ã°_ªtu∫_t
 
	$libhashkô_dige°_ã°
(
hashkô_°
 *
hashk
)

513 
uöt32_t
 
vÆue
;

515 ()
hashk
;

517 
vÆue

	`libhashkô_dige°
("a", ("a"), 
HASHKIT_HASH_DEFAULT
);

519  
TEST_SUCCESS
;

520 
	}
}

522 
ã°_°
 
	glibøry_fun˘i⁄s
[] ={

523 {"libhashkô_dige°", 0, (
ã°_ˇŒback_‚
)
libhashkô_dige°_ã°
},

527 
ã°_°
 
	ghash_ã°s
[] ={

528 {"⁄e_©_a_time", 0, (
ã°_ˇŒback_‚
)
⁄e_©_a_time_run
 },

529 {"md5", 0, (
ã°_ˇŒback_‚
)
md5_run
 },

530 {"¸c", 0, (
ã°_ˇŒback_‚
)
¸c_run
 },

531 {"‚v1_64", 0, (
ã°_ˇŒback_‚
)
‚v1_64_run
 },

532 {"‚v1a_64", 0, (
ã°_ˇŒback_‚
)
‚v1a_64_run
 },

533 {"‚v1_32", 0, (
ã°_ˇŒback_‚
)
‚v1_32_run
 },

534 {"‚v1a_32", 0, (
ã°_ˇŒback_‚
)
‚v1a_32_run
 },

535 {"hsõh", 0, (
ã°_ˇŒback_‚
)
hsõh_run
 },

536 {"murmur", 0, (
ã°_ˇŒback_‚
)
murmur_run
 },

537 {"jíkis", 0, (
ã°_ˇŒback_‚
)
jíkös_run
 },

538 {0, 0, (
ã°_ˇŒback_‚
)0}

547 
ã°_°
 
	gªgªssi⁄
[]= {

551 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

552 {"Æloˇti⁄", 0, 0, 
Æloˇti⁄
},

553 {"hashkô_°_fun˘i⁄s", 0, 0, 
hashkô_°_fun˘i⁄s
},

554 {"libøry_fun˘i⁄s", 0, 0, 
libøry_fun˘i⁄s
},

555 {"hashög", 0, 0, 
hash_ã°s
},

556 {"ªgªssi⁄", 0, 0, 
ªgªssi⁄
},

561 *
w‹ld_¸óã
(
ã°_ªtu∫_t
 *
îr‹
);

562 
ã°_ªtu∫_t
 
w‹ld_de°roy
(
hashkô_°
 *
hashk
);

564 *
	$w‹ld_¸óã
(
ã°_ªtu∫_t
 *
îr‹
)

566 
hashkô_°
 *
hashk_±r
;

568 
hashk_±r

	`hashkô_¸óã
(&
globÆ_hashk
);

570 i‡(
hashk_±r
 !&
globÆ_hashk
)

572 *
îr‹

TEST_FAILURE
;

573  
NULL
;

576 i‡(
	`hashkô_is_Æloˇãd
(
hashk_±r
Ë=
åue
)

578 *
îr‹

TEST_FAILURE
;

579  
NULL
;

582 *
îr‹

TEST_SUCCESS
;

584  
hashk_±r
;

585 
	}
}

588 
ã°_ªtu∫_t
 
	$w‹ld_de°roy
(
hashkô_°
 *
hashk
)

591 
	`as£π
(
	`hashkô_is_Æloˇãd
(
hashk
Ë=
Ál£
);

592 
	`hashkô_‰ì
(&
globÆ_hashk
);

594  
TEST_SUCCESS
;

595 
	}
}

597 
	$gë_w‹ld
(
w‹ld_°
 *
w‹ld
)

599 
w‹ld
->
cﬁÀ˘i⁄s

cﬁÀ˘i⁄
;

600 
w‹ld
->
¸óã
(
ã°_ˇŒback_¸óã_‚
)
w‹ld_¸óã
;

601 
w‹ld
->
de°roy
(
ã°_ˇŒback_‚
)
w‹ld_de°roy
;

602 
	}
}

	@tests/ketama_test_cases.h

9 #i‚de‡
TESTS_KETAMA_TEST_CASES_H


10 
	#TESTS_KETAMA_TEST_CASES_H


	)

13 c⁄° *
	mkey
;

14 
	mhash1
;

15 
	mhash2
;

16 c⁄° *
	m£rvî
;

17 } 
	gkëama_ã°_ˇ£s
[99]= {

119 
	~"këama_ã°_ˇ£s_•y.h
"

	@tests/ketama_test_cases_spy.h

9 #i‚de‡
TESTS_KETAMA_TEST_CASES_SPY_H


10 
	#TESTS_KETAMA_TEST_CASES_SPY_H


	)

13 c⁄° *
	mkey
;

14 
	mhash1
;

15 
	mhash2
;

16 c⁄° *
	m£rvî
;

17 } 
	gkëama_ã°_ˇ£s_•y
[99]= {

	@tests/libmemcached_world.h

12 #ifdef 
__˝lu•lus


19 
£rvî_°¨tup_°
 
c⁄°ru˘
;

20 
memˇched_°
 *
∑ª¡
;

21 
memˇched_°
 *
memc
;

22 } 
	tlibmemˇched_ã°_c⁄èöî_°
;

25 
libmemˇched_ã°_c⁄èöî_°
 *
w‹ld_¸óã
(
ã°_ªtu∫_t
 *
îr‹
);

26 
ã°_ªtu∫_t
 
w‹ld_ã°_°¨tup
(
libmemˇched_ã°_c⁄èöî_°
 *);

27 
ã°_ªtu∫_t
 
w‹ld_Êush
(
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
);

28 
ã°_ªtu∫_t
 
w‹ld_¥e_run
(
libmemˇched_ã°_c⁄èöî_°
 *);

30 
ã°_ªtu∫_t
 
w‹ld_po°_run
(
libmemˇched_ã°_c⁄èöî_°
 *);

31 
ã°_ªtu∫_t
 
w‹ld_⁄_îr‹
—e°_ªtu∫_t, 
libmemˇched_ã°_c⁄èöî_°
 *);

32 
ã°_ªtu∫_t
 
w‹ld_de°roy
(
libmemˇched_ã°_c⁄èöî_°
 *);

34 
libmemˇched_ã°_c⁄èöî_°
 
globÆ_c⁄èöî
;

39 
ã°_ªtu∫_t
 
w‹ld_c⁄èöî_°¨tup
(
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
);

40 
ã°_ªtu∫_t
 
w‹ld_c⁄èöî_shutdown
(
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
);

42 
libmemˇched_ã°_c⁄èöî_°
 *
w‹ld_¸óã
(
ã°_ªtu∫_t
 *
îr‹
)

44 
mem£t
(&
globÆ_c⁄èöî
, 0, (global_container));

45 
globÆ_c⁄èöî
.
c⁄°ru˘
.
cou¡

SERVERS_TO_CREATE
;

46 
globÆ_c⁄èöî
.
c⁄°ru˘
.
udp
= 0;

47 
£rvî_°¨tup
(&
globÆ_c⁄èöî
.
c⁄°ru˘
);

49 i‡(! 
globÆ_c⁄èöî
.
c⁄°ru˘
.
£rvîs
)

51 *
îr‹

TEST_FAILURE
;

52 
£rvî_shutdown
(&
globÆ_c⁄èöî
.
c⁄°ru˘
);

53  
NULL
;

56 *
îr‹

TEST_SUCCESS
;

58  &
globÆ_c⁄èöî
;

61 
ã°_ªtu∫_t
 
w‹ld_c⁄èöî_°¨tup
(
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

63 
memˇched_ªtu∫_t
 
rc
;

64 
c⁄èöî
->
∑ª¡

memˇched_¸óã
(
NULL
);

65 
ã°_åue
((
c⁄èöî
->
∑ª¡
 !
NULL
));

67 
rc

memˇched_£rvî_push
(
c⁄èöî
->
∑ª¡
, c⁄èöî->
c⁄°ru˘
.
£rvîs
);

68 
ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

70  
TEST_SUCCESS
;

73 
ã°_ªtu∫_t
 
w‹ld_c⁄èöî_shutdown
(
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

75 
memˇched_‰ì
(
c⁄èöî
->
∑ª¡
);

76 
c⁄èöî
->
∑ª¡

NULL
;

78  
TEST_SUCCESS
;

81 
ã°_ªtu∫_t
 
w‹ld_ã°_°¨tup
(
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

83 
c⁄èöî
->
memc

memˇched_˛⁄e
(
NULL
, c⁄èöî->
∑ª¡
);

84 
ã°_åue
((
c⁄èöî
->
memc
 !
NULL
));

86  
TEST_SUCCESS
;

89 
ã°_ªtu∫_t
 
w‹ld_Êush
(
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

91 
memˇched_Êush
(
c⁄èöî
->
memc
, 0);

92 
memˇched_quô
(
c⁄èöî
->
memc
);

94  
TEST_SUCCESS
;

97 
ã°_ªtu∫_t
 
w‹ld_¥e_run
(
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

99 
uöt32_t
 
lo›
0;Üo› < 
memˇched_£rvî_li°_cou¡
(
c⁄èöî
->
memc
->
£rvîs
);Üoop++)

101 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

102 
memˇched_£rvî_ö°™˚_by_posôi⁄
(
c⁄èöî
->
memc
, 
lo›
);

104 
ã°_åue
(
ö°™˚
->
fd
 == -1);

105 
ã°_åue
(
ö°™˚
->
curs‹_a˘ive
 == 0);

108  
TEST_SUCCESS
;

112 
ã°_ªtu∫_t
 
w‹ld_po°_run
(
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

114 
ã°_åue
(
c⁄èöî
->
memc
);

116  
TEST_SUCCESS
;

119 
ã°_ªtu∫_t
 
w‹ld_⁄_îr‹
—e°_ªtu∫_à
ã°_°©e
, 
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

121 ()
ã°_°©e
;

122 
memˇched_‰ì
(
c⁄èöî
->
memc
);

123 
c⁄èöî
->
memc

NULL
;

125  
TEST_SUCCESS
;

128 
ã°_ªtu∫_t
 
w‹ld_de°roy
(
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

130 
£rvî_°¨tup_°
 *
c⁄°ru˘
&
c⁄èöî
->construct;

131 
memˇched_£rvî_°
 *
£rvîs

c⁄èöî
->
c⁄°ru˘
.servers;

132 
memˇched_£rvî_li°_‰ì
(
£rvîs
);

134 
£rvî_shutdown
(
c⁄°ru˘
);

136  
TEST_SUCCESS
;

139 
ã°_ªtu∫_t
 (*
	tlibmemˇched_ã°_ˇŒback_‚
)(
	tmemˇched_°
 *);

140 
ã°_ªtu∫_t
 
_ru¬î_deÁu…
(
libmemˇched_ã°_ˇŒback_‚
 
func
, 
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

142 i‡(
func
)

144  
func
(
c⁄èöî
->
memc
);

148  
TEST_SUCCESS
;

152 
ã°_ªtu∫_t
 
_¥e_ru¬î_deÁu…
(
libmemˇched_ã°_ˇŒback_‚
 
func
, 
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

154 i‡(
func
)

156  
func
(
c⁄èöî
->
∑ª¡
);

160  
TEST_SUCCESS
;

164 
ã°_ªtu∫_t
 
_po°_ru¬î_deÁu…
(
libmemˇched_ã°_ˇŒback_‚
 
func
, 
libmemˇched_ã°_c⁄èöî_°
 *
c⁄èöî
)

166 i‡(
func
)

168  
func
(
c⁄èöî
->
∑ª¡
);

172  
TEST_SUCCESS
;

176 #ifdef 
__˝lu•lus


180 #ifdef 
__˝lu•lus


182 
w‹ld_ru¬î_°
 
defuÆt_libmemˇched_ru¬î
= {

183 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_ru¬î_‚
>(
_¥e_ru¬î_deÁu…
),

184 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_ru¬î_‚
>(
_ru¬î_deÁu…
),

185 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_ru¬î_‚
>(
_po°_ru¬î_deÁu…
)

190 
w‹ld_ru¬î_°
 
defuÆt_libmemˇched_ru¬î
= {

191 (
ã°_ˇŒback_ru¬î_‚
)
_¥e_ru¬î_deÁu…
,

192 (
ã°_ˇŒback_ru¬î_‚
)
_ru¬î_deÁu…
,

193 (
ã°_ˇŒback_ru¬î_‚
)
_po°_ru¬î_deÁu…


	@tests/mem_functions.c

43 
	~"c⁄fig.h
"

45 
	~<as£π.h
>

46 
	~<°dio.h
>

47 
	~<°döt.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<sys/time.h
>

51 
	~<sys/ty≥s.h
>

52 
	~<sys/°©.h
>

53 
	~<sig«l.h
>

54 
	~<uni°d.h
>

55 
	~<time.h
>

57 
	~"libmemˇched/comm⁄.h
"

59 
	~<libã°/£rvî.h
>

61 
	~"˛õ¡s/gíî©‹.h
"

62 
	~"˛õ¡s/execuã.h
"

64 
	#SMALL_STRING_LEN
 1024

	)

66 
	~<libã°/ã°.h
>

67 
	~"ã°s/dïªˇãd.h
"

68 
	~"ã°s/∑r£r.h
"

69 
	~"ã°s/poﬁ.h
"

70 
	~"ã°s/°rög.h
"

71 
	~"ã°s/ª∂iˇti⁄.h
"

72 
	~"ã°s/basic.h
"

73 
	~"ã°s/îr‹_c⁄dôi⁄s.h
"

74 
	~"ã°s/¥öt.h
"

75 
	~"ã°s/vútuÆ_buckës.h
"

78 #ifde‡
HAVE_LIBMEMCACHEDUTIL


79 
	~<±hªad.h
>

80 
	~"libmemˇched/memˇched_utû.h
"

83 
	~"hash_ªsu…s.h
"

85 
	#GLOBAL_COUNT
 10000

	)

86 
	#GLOBAL2_COUNT
 100

	)

87 
	#SERVERS_TO_CREATE
 5

	)

88 
uöt32_t
 
	gglobÆ_cou¡
;

90 
∑ús_°
 *
	gglobÆ_∑ús
;

91 c⁄° *
	gglobÆ_keys
[
GLOBAL_COUNT
];

92 
size_t
 
	gglobÆ_keys_Àngth
[
GLOBAL_COUNT
];

95 
ã°_ªtu∫_t
 
¥e_bö¨y
(
memˇched_°
 *
memc
);

98 
ã°_ªtu∫_t
 
	$öô_ã°
(
memˇched_°
 *
nŸ_u£d
)

100 
memˇched_°
 
memc
;

101 ()
nŸ_u£d
;

103 ()
	`memˇched_¸óã
(&
memc
);

104 
	`memˇched_‰ì
(&
memc
);

106  
TEST_SUCCESS
;

107 
	}
}

109 
	#TEST_PORT_COUNT
 7

	)

110 
ö_p‹t_t
 
	gã°_p‹ts
[
TEST_PORT_COUNT
];

112 
memˇched_ªtu∫_t
 
	$£rvî_di•œy_fun˘i⁄
(c⁄° 
memˇched_°
 *
±r
,

113 c⁄° 
memˇched_£rvî_°
 *
£rvî
,

114 *
c⁄ãxt
)

117 
size_t
 
biggî
*((size_à*)(
c⁄ãxt
));

118 ()
±r
;

119 
	`as£π
(
biggî
 <
	`memˇched_£rvî_p‹t
(
£rvî
));

120 *((
size_t
 *)(
c⁄ãxt
))
	`memˇched_£rvî_p‹t
(
£rvî
);

122  
MEMCACHED_SUCCESS
;

123 
	}
}

125 
memˇched_ªtu∫_t
 
	$dump_£rvî_öf‹m©i⁄
(c⁄° 
memˇched_°
 *
±r
,

126 c⁄° 
memˇched_£rvî_°
 *
ö°™˚
,

127 *
c⁄ãxt
)

130 
FILE
 *
°ªam
(FILE *)
c⁄ãxt
;

131 ()
±r
;

133 
	`Ârötf
(
°ªam
, "Memcached Server: %s %u Version %u.%u.%u\n",

134 
	`memˇched_£rvî_«me
(
ö°™˚
),

135 
	`memˇched_£rvî_p‹t
(
ö°™˚
),

136 
ö°™˚
->
maj‹_vîsi⁄
,

137 
ö°™˚
->
mö‹_vîsi⁄
,

138 
ö°™˚
->
mi¸o_vîsi⁄
);

140  
MEMCACHED_SUCCESS
;

141 
	}
}

143 
ã°_ªtu∫_t
 
	$£rvî_s‹t_ã°
(
memˇched_°
 *
±r
)

145 
size_t
 
biggî
= 0;

147 
memˇched_ªtu∫_t
 
rc
;

148 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

149 
memˇched_°
 *
loˇl_memc
;

150 ()
±r
;

152 
loˇl_memc

	`memˇched_¸óã
(
NULL
);

153 
	`ã°_åue
(
loˇl_memc
);

154 
	`memˇched_behavi‹_£t
(
loˇl_memc
, 
MEMCACHED_BEHAVIOR_SORT_HOSTS
, 1);

156 
size_t
 
x
0; x < 
TEST_PORT_COUNT
; x++)

158 
ã°_p‹ts
[
x
](
ö_p‹t_t
)
	`øndom
() % 64000;

159 
rc

	`memˇched_£rvî_add_wôh_weight
(
loˇl_memc
, "loˇlho°", 
ã°_p‹ts
[
x
], 0);

160 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
loˇl_memc
Ë=
x
 + 1);

162 
	`ã°_åue
(
	`memˇched_£rvî_li°_cou¡
(
	`memˇched_£rvî_li°
(
loˇl_memc
)Ë=
x
+1);

164 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

167 
ˇŒbacks
[0]
£rvî_di•œy_fun˘i⁄
;

168 
	`memˇched_£rvî_curs‹
(
loˇl_memc
, 
ˇŒbacks
, (*)&
biggî
, 1);

171 
	`memˇched_‰ì
(
loˇl_memc
);

173  
TEST_SUCCESS
;

174 
	}
}

176 
ã°_ªtu∫_t
 
	$£rvî_s‹t2_ã°
(
memˇched_°
 *
±r
)

178 
size_t
 
biggî
= 0;

179 
memˇched_ªtu∫_t
 
rc
;

180 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

181 
memˇched_°
 *
loˇl_memc
;

182 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
;

183 ()
±r
;

185 
loˇl_memc

	`memˇched_¸óã
(
NULL
);

186 
	`ã°_åue
(
loˇl_memc
);

187 
rc

	`memˇched_behavi‹_£t
(
loˇl_memc
, 
MEMCACHED_BEHAVIOR_SORT_HOSTS
, 1);

188 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

190 
rc

	`memˇched_£rvî_add_wôh_weight
(
loˇl_memc
, "MEMCACHED_BEHAVIOR_SORT_HOSTS", 43043, 0);

191 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

192 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
loˇl_memc
, 0);

193 
	`ã°_åue
(
	`memˇched_£rvî_p‹t
(
ö°™˚
) == 43043);

195 
rc

	`memˇched_£rvî_add_wôh_weight
(
loˇl_memc
, "MEMCACHED_BEHAVIOR_SORT_HOSTS", 43042, 0);

196 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

198 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
loˇl_memc
, 0);

199 
	`ã°_åue
(
	`memˇched_£rvî_p‹t
(
ö°™˚
) == 43042);

201 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
loˇl_memc
, 1);

202 
	`ã°_åue
(
	`memˇched_£rvî_p‹t
(
ö°™˚
) == 43043);

204 
ˇŒbacks
[0]
£rvî_di•œy_fun˘i⁄
;

205 
	`memˇched_£rvî_curs‹
(
loˇl_memc
, 
ˇŒbacks
, (*)&
biggî
, 1);

208 
	`memˇched_‰ì
(
loˇl_memc
);

210  
TEST_SUCCESS
;

211 
	}
}

213 
ã°_ªtu∫_t
 
	$memˇched_£rvî_ªmove_ã°
(
memˇched_°
 *
±r
)

215 c⁄° *
£rvî_°rög
= "--server=localhost:4444 --server=localhost:4445 --server=localhost:4446 --server=localhost:4447 --server=localhost --server=memcache1.memcache.bk.sapo.pt:11211 --server=memcache1.memcache.bk.sapo.pt:11212 --server=memcache1.memcache.bk.sapo.pt:11213 --server=memcache1.memcache.bk.sapo.pt:11214 --server=memcache2.memcache.bk.sapo.pt:11211 --server=memcache2.memcache.bk.sapo.pt:11212 --server=memcache2.memcache.bk.sapo.pt:11213 --server=memcache2.memcache.bk.sapo.pt:11214";

216 ()
±r
;

218 
memˇched_°
 *
memc

	`memˇched
(
£rvî_°rög
, 
	`°æí
(server_string));

219 
	`ã°_åue
(
memc
);

221 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

222 
ˇŒbacks
[0]
£rvî_¥öt_ˇŒback
;

223 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, 
NULL
, 1);

225 
	`memˇched_‰ì
(
memc
);

227  
TEST_SUCCESS
;

228 
	}
}

230 
memˇched_ªtu∫_t
 
	$£rvî_di•œy_uns‹t_fun˘i⁄
(c⁄° 
memˇched_°
 *
±r
,

231 c⁄° 
memˇched_£rvî_°
 *
£rvî
,

232 *
c⁄ãxt
)

235 
uöt32_t
 
x
*((uöt32_à*)(
c⁄ãxt
));

236 ()
±r
;

238 i‡(! (
ã°_p‹ts
[
x
] =
£rvî
->
p‹t
))

240 
	`Ârötf
(
°dîr
, "%lu -> %lu\n", ()
ã°_p‹ts
[
x
], ()
£rvî
->
p‹t
);

241  
MEMCACHED_FAILURE
;

244 *((
uöt32_t
 *)(
c⁄ãxt
))++
x
;

246  
MEMCACHED_SUCCESS
;

247 
	}
}

249 
ã°_ªtu∫_t
 
	$£rvî_uns‹t_ã°
(
memˇched_°
 *
±r
)

251 
size_t
 
cou¡î
= 0;

252 
size_t
 
biggî
= 0;

253 
memˇched_ªtu∫_t
 
rc
;

254 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

255 
memˇched_°
 *
loˇl_memc
;

256 ()
±r
;

258 
loˇl_memc

	`memˇched_¸óã
(
NULL
);

259 
	`ã°_åue
(
loˇl_memc
);

261 
size_t
 
x
0; x < 
TEST_PORT_COUNT
; x++)

263 
ã°_p‹ts
[
x
](
ö_p‹t_t
)(
	`øndom
() % 64000);

264 
rc

	`memˇched_£rvî_add_wôh_weight
(
loˇl_memc
, "loˇlho°", 
ã°_p‹ts
[
x
], 0);

265 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
loˇl_memc
Ë=
x
+1);

267 
	`ã°_åue
(
	`memˇched_£rvî_li°_cou¡
(
	`memˇched_£rvî_li°
(
loˇl_memc
)Ë=
x
+1);

269 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

272 
ˇŒbacks
[0]
£rvî_di•œy_uns‹t_fun˘i⁄
;

273 
	`memˇched_£rvî_curs‹
(
loˇl_memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1);

276 
	`memˇched_behavi‹_£t
(
loˇl_memc
, 
MEMCACHED_BEHAVIOR_SORT_HOSTS
, 1);

277 
ˇŒbacks
[0]
£rvî_di•œy_fun˘i⁄
;

278 
	`memˇched_£rvî_curs‹
(
loˇl_memc
, 
ˇŒbacks
, (*)&
biggî
, 1);

281 
	`memˇched_‰ì
(
loˇl_memc
);

283  
TEST_SUCCESS
;

284 
	}
}

286 
ã°_ªtu∫_t
 
	$Æloˇti⁄_ã°
(
memˇched_°
 *
nŸ_u£d
)

288 ()
nŸ_u£d
;

289 
memˇched_°
 *
memc
;

290 
memc

	`memˇched_¸óã
(
NULL
);

291 
	`ã°_åue
(
memc
);

292 
	`memˇched_‰ì
(
memc
);

294  
TEST_SUCCESS
;

295 
	}
}

297 
ã°_ªtu∫_t
 
	$˛⁄e_ã°
(
memˇched_°
 *
memc
)

301 
memˇched_°
 *
memc_˛⁄e
;

302 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, NULL);

303 
	`ã°_åue
(
memc_˛⁄e
);

304 
	`memˇched_‰ì
(
memc_˛⁄e
);

309 
memˇched_°
 *
memc_˛⁄e
;

310 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

311 
	`ã°_åue
(
memc_˛⁄e
);

314 
	`ã°_åue
(
memc_˛⁄e
->
Æloˇt‹s
.
‰ì
 =
memc
->allocators.free);

315 
	`ã°_åue
(
memc_˛⁄e
->
Æloˇt‹s
.
mÆloc
 =
memc
->allocators.malloc);

316 
	`ã°_åue
(
memc_˛⁄e
->
Æloˇt‹s
.
ªÆloc
 =
memc
->allocators.realloc);

317 
	`ã°_åue
(
memc_˛⁄e
->
Æloˇt‹s
.
ˇŒoc
 =
memc
->allocators.calloc);

320 
	`ã°_åue
(
memc_˛⁄e
->
c⁄√˘_timeout
 =
memc
->connect_timeout);

321 
	`ã°_åue
(
memc_˛⁄e
->
dñëe_åiggî
 =
memc
->delete_trigger);

322 
	`ã°_åue
(
memc_˛⁄e
->
di°ributi⁄
 =
memc
->distribution);

324 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
no_block
 =
memc
->flags.no_block);

325 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
t˝_nodñay
 =
memc
->flags.tcp_nodelay);

326 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
suµ‹t_ˇs
 =
memc
->flags.support_cas);

327 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
buf„r_ªque°s
 =
memc
->flags.buffer_requests);

328 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
u£_s‹t_ho°s
 =
memc
->flags.use_sort_hosts);

329 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
vîify_key
 =
memc
->flags.verify_key);

330 
	`ã°_åue
(
memc_˛⁄e
->
këama
.
weighãd
 =
memc
->ketama.weighted);

331 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
bö¨y_¥Ÿocﬁ
 =
memc
->flags.binary_protocol);

332 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
hash_wôh_¥efix_key
 =
memc
->flags.hash_with_prefix_key);

333 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
no_ª∂y
 =
memc
->flags.no_reply);

334 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
u£_udp
 =
memc
->flags.use_udp);

335 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
auto_eje˘_ho°s
 =
memc
->flags.auto_eject_hosts);

336 
	`ã°_åue
(
memc_˛⁄e
->
Êags
.
øndomize_ª∂iˇ_ªad
 =
memc
->flags.randomize_replica_read);

338 
	`ã°_åue
(
memc_˛⁄e
->
gë_key_Áûuª
 =
memc
->get_key_failure);

339 
	`ã°_åue
(
	`hashkô_com∑ª
(&
memc_˛⁄e
->
hashkô
, &
memc
->hashkit));

340 
	`ã°_åue
(
	`hashkô_com∑ª
(&
memc_˛⁄e
->
di°ributi⁄_hashkô
, &
memc
->distribution_hashkit));

341 
	`ã°_åue
(
memc_˛⁄e
->
io_byãs_w©îm¨k
 =
memc
->io_bytes_watermark);

342 
	`ã°_åue
(
memc_˛⁄e
->
io_msg_w©îm¨k
 =
memc
->io_msg_watermark);

343 
	`ã°_åue
(
memc_˛⁄e
->
io_key_¥e„tch
 =
memc
->io_key_prefetch);

344 
	`ã°_åue
(
memc_˛⁄e
->
⁄_˛ónup
 =
memc
->on_cleanup);

345 
	`ã°_åue
(
memc_˛⁄e
->
⁄_˛⁄e
 =
memc
->on_clone);

346 
	`ã°_åue
(
memc_˛⁄e
->
pﬁl_timeout
 =
memc
->poll_timeout);

347 
	`ã°_åue
(
memc_˛⁄e
->
rcv_timeout
 =
memc
->rcv_timeout);

348 
	`ã°_åue
(
memc_˛⁄e
->
ªcv_size
 =
memc
->recv_size);

349 
	`ã°_åue
(
memc_˛⁄e
->
ªåy_timeout
 =
memc
->retry_timeout);

350 
	`ã°_åue
(
memc_˛⁄e
->
£nd_size
 =
memc
->send_size);

351 
	`ã°_åue
(
memc_˛⁄e
->
£rvî_Áûuª_limô
 =
memc
->server_failure_limit);

352 
	`ã°_åue
(
memc_˛⁄e
->
¢d_timeout
 =
memc
->snd_timeout);

353 
	`ã°_åue
(
memc_˛⁄e
->
u£r_d©a
 =
memc
->user_data);

355 
	`memˇched_‰ì
(
memc_˛⁄e
);

360 
memˇched_°
 
de˛¨ed_˛⁄e
;

361 
memˇched_°
 *
memc_˛⁄e
;

362 
	`mem£t
(&
de˛¨ed_˛⁄e
, 0 , (
memˇched_°
));

363 
memc_˛⁄e

	`memˇched_˛⁄e
(&
de˛¨ed_˛⁄e
, 
NULL
);

364 
	`ã°_åue
(
memc_˛⁄e
);

365 
	`memˇched_‰ì
(
memc_˛⁄e
);

370 
memˇched_°
 
de˛¨ed_˛⁄e
;

371 
memˇched_°
 *
memc_˛⁄e
;

372 
	`mem£t
(&
de˛¨ed_˛⁄e
, 0 , (
memˇched_°
));

373 
memc_˛⁄e

	`memˇched_˛⁄e
(&
de˛¨ed_˛⁄e
, 
memc
);

374 
	`ã°_åue
(
memc_˛⁄e
);

375 
	`memˇched_‰ì
(
memc_˛⁄e
);

378  
TEST_SUCCESS
;

379 
	}
}

381 
ã°_ªtu∫_t
 
	$u£rd©a_ã°
(
memˇched_°
 *
memc
)

383 * 
foo

NULL
;

384 
	`ã°_åue
(
	`memˇched_£t_u£r_d©a
(
memc
, 
foo
Ë=
NULL
);

385 
	`ã°_åue
(
	`memˇched_gë_u£r_d©a
(
memc
Ë=
foo
);

386 
	`ã°_åue
(
	`memˇched_£t_u£r_d©a
(
memc
, 
NULL
Ë=
foo
);

388  
TEST_SUCCESS
;

389 
	}
}

391 
ã°_ªtu∫_t
 
	$c⁄√˘i⁄_ã°
(
memˇched_°
 *
memc
)

393 
memˇched_ªtu∫_t
 
rc
;

395 
rc

	`memˇched_£rvî_add_wôh_weight
(
memc
, "localhost", 0, 0);

396 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

398  
TEST_SUCCESS
;

399 
	}
}

401 
ã°_ªtu∫_t
 
	$îr‹_ã°
(
memˇched_°
 *
memc
)

403 
memˇched_ªtu∫_t
 
rc
;

404 
uöt32_t
 
vÆues
[] = { 851992627U, 2337886783U, 3196981036U, 4001849190U,

418 
rc

MEMCACHED_SUCCESS
;Ñ¯< 
MEMCACHED_MAXIMUM_RETURN
;Ñc++)

420 
uöt32_t
 
hash_vÆ
;

421 c⁄° *
msg

	`memˇched_°ªº‹
(
memc
, 
rc
);

422 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(
msg
, 
	`°æí
(msg),

423 
MEMCACHED_HASH_JENKINS
);

424 i‡(
vÆues
[
rc
] !
hash_vÆ
)

426 
	`Ârötf
(
°dîr
, "\n\nYou have updated memcached_return_t without updatingÅheÉrror_test\n");

427 
	`Ârötf
(
°dîr
, "%u, %s, (%u)\n\n", (
uöt32_t
)
rc
, 
	`memˇched_°ªº‹
(
memc
,Ñc), 
hash_vÆ
);

429 
	`ã°_åue
(
vÆues
[
rc
] =
hash_vÆ
);

431 
	`ã°_åue
(
MEMCACHED_MAXIMUM_RETURN
 == 46);

433  
TEST_SUCCESS
;

434 
	}
}

436 
ã°_ªtu∫_t
 
	$£t_ã°
(
memˇched_°
 *
memc
)

438 
memˇched_ªtu∫_t
 
rc
;

439 c⁄° *
key
= "foo";

440 c⁄° *
vÆue
= "when we sanitize";

442 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

443 
vÆue
, 
	`°æí
(value),

444 (
time_t
)0, (
uöt32_t
)0);

445 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

447  
TEST_SUCCESS
;

448 
	}
}

450 
ã°_ªtu∫_t
 
	$≠≥nd_ã°
(
memˇched_°
 *
memc
)

452 
memˇched_ªtu∫_t
 
rc
;

453 c⁄° *
key
= "fig";

454 c⁄° *
ö_vÆue
= "we";

455 *
out_vÆue

NULL
;

456 
size_t
 
vÆue_Àngth
;

457 
uöt32_t
 
Êags
;

459 
rc

	`memˇched_Êush
(
memc
, 0);

460 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

462 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

463 
ö_vÆue
, 
	`°æí
(in_value),

464 (
time_t
)0, (
uöt32_t
)0);

465 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

467 
rc

	`memˇched_≠≥nd
(
memc
, 
key
, 
	`°æí
(key),

468 "Åhe", 
	`°æí
("Åhe"),

469 (
time_t
)0, (
uöt32_t
)0);

470 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

472 
rc

	`memˇched_≠≥nd
(
memc
, 
key
, 
	`°æí
(key),

473 "Öe›À", 
	`°æí
("Öeople"),

474 (
time_t
)0, (
uöt32_t
)0);

475 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

477 
out_vÆue

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

478 &
vÆue_Àngth
, &
Êags
, &
rc
);

479 
	`ã°_åue
(!
	`memcmp
(
out_vÆue
, "wêthê≥›À", 
	`°æí
("weÅheÖeople")));

480 
	`ã°_åue
(
	`°æí
("wêthê≥›À"Ë=
vÆue_Àngth
);

481 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

482 
	`‰ì
(
out_vÆue
);

484  
TEST_SUCCESS
;

485 
	}
}

487 
ã°_ªtu∫_t
 
	$≠≥nd_bö¨y_ã°
(
memˇched_°
 *
memc
)

489 
memˇched_ªtu∫_t
 
rc
;

490 c⁄° *
key
= "numbers";

491 
uöt32_t
 
°‹e_li°
[] = { 23, 56, 499, 98, 32847, 0 };

492 
uöt32_t
 *
vÆue
;

493 
size_t
 
vÆue_Àngth
;

494 
uöt32_t
 
Êags
;

495 
uöt32_t
 
x
;

497 
rc

	`memˇched_Êush
(
memc
, 0);

498 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

500 
rc

	`memˇched_£t
(
memc
,

501 
key
, 
	`°æí
(key),

502 
NULL
, 0,

503 (
time_t
)0, (
uöt32_t
)0);

504 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

506 
x
0; 
°‹e_li°
[x] ; x++)

508 
rc

	`memˇched_≠≥nd
(
memc
,

509 
key
, 
	`°æí
(key),

510 (*)&
°‹e_li°
[
x
], (
uöt32_t
),

511 (
time_t
)0, (
uöt32_t
)0);

512 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

515 
vÆue
(
uöt32_t
 *)
	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

516 &
vÆue_Àngth
, &
Êags
, &
rc
);

517 
	`ã°_åue
((
vÆue_Àngth
 =((
uöt32_t
Ë* 
x
)));

518 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

520 
uöt32_t
 
cou¡î

x
, *
±r

vÆue
; counter; counter--)

522 
	`ã°_åue
(*
±r
 =
°‹e_li°
[
x
 - 
cou¡î
]);

523 
±r
++;

525 
	`‰ì
(
vÆue
);

527  
TEST_SUCCESS
;

528 
	}
}

530 
ã°_ªtu∫_t
 
	$ˇs2_ã°
(
memˇched_°
 *
memc
)

532 
memˇched_ªtu∫_t
 
rc
;

533 c⁄° *
keys
[]= {"fudge", "son", "food"};

534 
size_t
 
key_Àngth
[]= {5, 3, 4};

535 c⁄° *
vÆue
= "weÅheÖeople";

536 
size_t
 
vÆue_Àngth

	`°æí
("weÅheÖeople");

537 
x
;

538 
memˇched_ªsu…_°
 
ªsu…s_obj
;

539 
memˇched_ªsu…_°
 *
ªsu…s
;

540 
£t
= 1;

542 
rc

	`memˇched_Êush
(
memc
, 0);

543 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

545 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
, 
£t
);

547 
x
= 0; x < 3; x++)

549 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

550 
keys
[
x
], 
key_Àngth
[x],

551 (
time_t
)50, (
uöt32_t
)9);

552 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

555 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

557 
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

559 
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
);

560 
	`ã°_åue
(
ªsu…s
);

561 
	`ã°_åue
(
ªsu…s
->
ôem_ˇs
);

562 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

563 
	`ã°_åue
(
	`memˇched_ªsu…_ˇs
(
ªsu…s
));

565 
	`ã°_åue
(!
	`memcmp
(
vÆue
, "wêthê≥›À", 
	`°æí
("weÅheÖeople")));

566 
	`ã°_åue
(
	`°æí
("wêthê≥›À"Ë=
vÆue_Àngth
);

567 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

569 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

571  
TEST_SUCCESS
;

572 
	}
}

574 
ã°_ªtu∫_t
 
	$ˇs_ã°
(
memˇched_°
 *
memc
)

576 
memˇched_ªtu∫_t
 
rc
;

577 c⁄° *
key
= "fun";

578 
size_t
 
key_Àngth

	`°æí
(
key
);

579 c⁄° *
vÆue
= "weÅheÖeople";

580 c⁄° * 
keys
[2] = { 
key
, 
NULL
 };

581 
size_t
 
keyÀngths
[2] = { 
	`°æí
(
key
), 0 };

582 
size_t
 
vÆue_Àngth

	`°æí
(
vÆue
);

583 c⁄° *
vÆue2
= "changeÅhe value";

584 
size_t
 
vÆue2_Àngth

	`°æí
(
vÆue2
);

586 
memˇched_ªsu…_°
 
ªsu…s_obj
;

587 
memˇched_ªsu…_°
 *
ªsu…s
;

588 
£t
= 1;

590 
rc

	`memˇched_Êush
(
memc
, 0);

591 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

593 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
, 
£t
);

595 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

596 
vÆue
, 
	`°æí
(value),

597 (
time_t
)0, (
uöt32_t
)0);

598 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

600 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
keyÀngths
, 1);

602 
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

604 
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
);

605 
	`ã°_åue
(
ªsu…s
);

606 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

607 
	`ã°_åue
(
	`memˇched_ªsu…_ˇs
(
ªsu…s
));

608 
	`ã°_åue
(!
	`memcmp
(
vÆue
, 
	`memˇched_ªsu…_vÆue
(
ªsu…s
), 
vÆue_Àngth
));

609 
	`ã°_åue
(
	`°æí
(
	`memˇched_ªsu…_vÆue
(
ªsu…s
)Ë=
vÆue_Àngth
);

610 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

611 
uöt64_t
 
ˇs
 = 
	`memˇched_ªsu…_ˇs
(
ªsu…s
);

614 
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
);

615 
	`ã°_åue
(
rc
 =
MEMCACHED_END
);

616 
	`ã°_åue
(
ªsu…s
 =
NULL
);

619 
rc

	`memˇched_ˇs
(
memc
, 
key
, 
key_Àngth
, 
vÆue2
, 
vÆue2_Àngth
, 0, 0, 
ˇs
);

620 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

626 
rc

	`memˇched_ˇs
(
memc
, 
key
, 
key_Àngth
, 
vÆue2
, 
vÆue2_Àngth
, 0, 0, 
ˇs
);

627 
	`ã°_åue
(
rc
 =
MEMCACHED_DATA_EXISTS
);

629 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

631  
TEST_SUCCESS
;

632 
	}
}

634 
ã°_ªtu∫_t
 
	$¥ïíd_ã°
(
memˇched_°
 *
memc
)

636 
memˇched_ªtu∫_t
 
rc
;

637 c⁄° *
key
= "fig";

638 c⁄° *
vÆue
= "people";

639 *
out_vÆue

NULL
;

640 
size_t
 
vÆue_Àngth
;

641 
uöt32_t
 
Êags
;

643 
rc

	`memˇched_Êush
(
memc
, 0);

644 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

646 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

647 
vÆue
, 
	`°æí
(value),

648 (
time_t
)0, (
uöt32_t
)0);

649 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

651 
rc

	`memˇched_¥ïíd
(
memc
, 
key
, 
	`°æí
(key),

652 "thê", 
	`°æí
("the "),

653 (
time_t
)0, (
uöt32_t
)0);

654 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

656 
rc

	`memˇched_¥ïíd
(
memc
, 
key
, 
	`°æí
(key),

657 "wê", 
	`°æí
("we "),

658 (
time_t
)0, (
uöt32_t
)0);

659 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

661 
out_vÆue

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

662 &
vÆue_Àngth
, &
Êags
, &
rc
);

663 
	`ã°_åue
(!
	`memcmp
(
out_vÆue
, "wêthê≥›À", 
	`°æí
("weÅheÖeople")));

664 
	`ã°_åue
(
	`°æí
("wêthê≥›À"Ë=
vÆue_Àngth
);

665 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

666 
	`‰ì
(
out_vÆue
);

668  
TEST_SUCCESS
;

669 
	}
}

675 
ã°_ªtu∫_t
 
	$add_ã°
(
memˇched_°
 *
memc
)

677 
memˇched_ªtu∫_t
 
rc
;

678 c⁄° *
key
= "foo";

679 c⁄° *
vÆue
= "when we sanitize";

680 
£âög_vÆue
;

682 
£âög_vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
);

684 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

685 
vÆue
, 
	`°æí
(value),

686 (
time_t
)0, (
uöt32_t
)0);

687 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

688 
	`memˇched_quô
(
memc
);

689 
rc

	`memˇched_add
(
memc
, 
key
, 
	`°æí
(key),

690 
vÆue
, 
	`°æí
(value),

691 (
time_t
)0, (
uöt32_t
)0);

694 i‡(
£âög_vÆue
)

696 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTSTORED
 ||Ñ¯=
MEMCACHED_STORED
);

700 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTSTORED
 ||Ñ¯=
MEMCACHED_DATA_EXISTS
);

703  
TEST_SUCCESS
;

704 
	}
}

713 
ã°_ªtu∫_t
 
	$add_wøµî
(
memˇched_°
 *
memc
)

715 
max
= 10000;

716 #ifde‡
__sun


717 
max
= 10;

719 #ifde‡
__APPLE__


720 
max
= 10;

723 
uöt32_t
 
x
0; x < 
max
; x++)

724 
	`add_ã°
(
memc
);

726  
TEST_SUCCESS
;

727 
	}
}

729 
ã°_ªtu∫_t
 
	$ª∂a˚_ã°
(
memˇched_°
 *
memc
)

731 
memˇched_ªtu∫_t
 
rc
;

732 c⁄° *
key
= "foo";

733 c⁄° *
vÆue
= "when we sanitize";

734 c⁄° *
‹igöÆ
= "first we insert some data";

736 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

737 
‹igöÆ
, 
	`°æí
(original),

738 (
time_t
)0, (
uöt32_t
)0);

739 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

741 
rc

	`memˇched_ª∂a˚
(
memc
, 
key
, 
	`°æí
(key),

742 
vÆue
, 
	`°æí
(value),

743 (
time_t
)0, (
uöt32_t
)0);

744 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

746  
TEST_SUCCESS
;

747 
	}
}

749 
ã°_ªtu∫_t
 
	$dñëe_ã°
(
memˇched_°
 *
memc
)

751 
memˇched_ªtu∫_t
 
rc
;

752 c⁄° *
key
= "foo";

753 c⁄° *
vÆue
= "when we sanitize";

755 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

756 
vÆue
, 
	`°æí
(value),

757 (
time_t
)0, (
uöt32_t
)0);

758 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

760 
rc

	`memˇched_dñëe
(
memc
, 
key
, 
	`°æí
(key), (
time_t
)0);

761 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

763  
TEST_SUCCESS
;

764 
	}
}

766 
ã°_ªtu∫_t
 
	$Êush_ã°
(
memˇched_°
 *
memc
)

768 
memˇched_ªtu∫_t
 
rc
;

770 
rc

	`memˇched_Êush
(
memc
, 0);

771 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

773  
TEST_SUCCESS
;

774 
	}
}

776 
memˇched_ªtu∫_t
 
	$£rvî_fun˘i⁄
(c⁄° 
memˇched_°
 *
±r
,

777 c⁄° 
memˇched_£rvî_°
 *
£rvî
,

778 *
c⁄ãxt
)

780 ()
±r
; ()
£rvî
; ()
c⁄ãxt
;

783  
MEMCACHED_SUCCESS
;

784 
	}
}

786 
ã°_ªtu∫_t
 
	$memˇched_£rvî_curs‹_ã°
(
memˇched_°
 *
memc
)

788 
c⁄ãxt
[10];

789 
	`°∫˝y
(
c⁄ãxt
, "foo bad", (context));

790 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

792 
ˇŒbacks
[0]
£rvî_fun˘i⁄
;

793 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, 
c⁄ãxt
, 1);

794  
TEST_SUCCESS
;

795 
	}
}

797 
ã°_ªtu∫_t
 
	$bad_key_ã°
(
memˇched_°
 *
memc
)

799 
memˇched_ªtu∫_t
 
rc
;

800 c⁄° *
key
= "foo bad";

801 *
°rög
;

802 
size_t
 
°rög_Àngth
;

803 
uöt32_t
 
Êags
;

804 
memˇched_°
 *
memc_˛⁄e
;

805 
£t
= 1;

806 
size_t
 
max_keyÀn
= 0xffff;

809 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
))

810  
TEST_SKIPPED
;

812 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

813 
	`ã°_åue
(
memc_˛⁄e
);

815 
rc

	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 
£t
);

816 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

819 i‡(
	`memˇched_behavi‹_gë
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
) == 0)

821 
°rög

	`memˇched_gë
(
memc_˛⁄e
, 
key
, 
	`°æí
(key),

822 &
°rög_Àngth
, &
Êags
, &
rc
);

823 
	`ã°_åue
(
rc
 =
MEMCACHED_BAD_KEY_PROVIDED
);

824 
	`ã°_åue
(
°rög_Àngth
 == 0);

825 
	`ã°_åue
(!
°rög
);

827 
£t
= 0;

828 
rc

	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 
£t
);

829 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

830 
°rög

	`memˇched_gë
(
memc_˛⁄e
, 
key
, 
	`°æí
(key),

831 &
°rög_Àngth
, &
Êags
, &
rc
);

832 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTFOUND
);

833 
	`ã°_åue
(
°rög_Àngth
 == 0);

834 
	`ã°_åue
(!
°rög
);

837 c⁄° *
keys
[] = { "GoodKey", "Bad Key", "NotMine" };

838 
size_t
 
key_Àngths
[] = { 7, 7, 7 };

839 
£t
= 1;

840 
rc

	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 
£t
);

841 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

843 
rc

	`memˇched_mgë
(
memc_˛⁄e
, 
keys
, 
key_Àngths
, 3);

844 
	`ã°_åue
(
rc
 =
MEMCACHED_BAD_KEY_PROVIDED
);

846 
rc

	`memˇched_mgë_by_key
(
memc_˛⁄e
, "foÿdaddy", 9, 
keys
, 
key_Àngths
, 1);

847 
	`ã°_åue
(
rc
 =
MEMCACHED_BAD_KEY_PROVIDED
);

849 
max_keyÀn
= 250;

855 
rc

	`memˇched_ˇŒback_£t
(
memc_˛⁄e
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, 
NULL
);

856 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

858 *
l⁄gkey
(*)
	`mÆloc
(
max_keyÀn
 + 1);

859 i‡(
l⁄gkey
 !
NULL
)

861 
	`mem£t
(
l⁄gkey
, 'a', 
max_keyÀn
 + 1);

862 
°rög

	`memˇched_gë
(
memc_˛⁄e
, 
l⁄gkey
, 
max_keyÀn
,

863 &
°rög_Àngth
, &
Êags
, &
rc
);

864 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTFOUND
);

865 
	`ã°_åue
(
°rög_Àngth
 == 0);

866 
	`ã°_åue
(!
°rög
);

868 
°rög

	`memˇched_gë
(
memc_˛⁄e
, 
l⁄gkey
, 
max_keyÀn
 + 1,

869 &
°rög_Àngth
, &
Êags
, &
rc
);

870 
	`ã°_åue
(
rc
 =
MEMCACHED_BAD_KEY_PROVIDED
);

871 
	`ã°_åue
(
°rög_Àngth
 == 0);

872 
	`ã°_åue
(!
°rög
);

874 
	`‰ì
(
l⁄gkey
);

879 
£t
= 1;

880 
rc

	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 
£t
);

881 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

882 
°rög

	`memˇched_gë
(
memc_˛⁄e
, 
key
, 0,

883 &
°rög_Àngth
, &
Êags
, &
rc
);

884 
	`ã°_åue
(
rc
 =
MEMCACHED_BAD_KEY_PROVIDED
);

885 
	`ã°_åue
(
°rög_Àngth
 == 0);

886 
	`ã°_åue
(!
°rög
);

888 
	`memˇched_‰ì
(
memc_˛⁄e
);

890  
TEST_SUCCESS
;

891 
	}
}

893 
	#READ_THROUGH_VALUE
 "£àf‹ me"

	)

894 
memˇched_ªtu∫_t
 
	$ªad_through_åiggî
(
memˇched_°
 *
memc
,

895 *
key
,

896 
size_t
 
key_Àngth
,

897 
memˇched_ªsu…_°
 *
ªsu…
)

899 ()
memc
;()
key
;()
key_Àngth
;

900  
	`memˇched_ªsu…_£t_vÆue
(
ªsu…
, 
READ_THROUGH_VALUE
, 
	`°æí
(READ_THROUGH_VALUE));

901 
	}
}

903 
ã°_ªtu∫_t
 
	$ªad_through
(
memˇched_°
 *
memc
)

905 
memˇched_ªtu∫_t
 
rc
;

906 c⁄° *
key
= "foo";

907 *
°rög
;

908 
size_t
 
°rög_Àngth
;

909 
uöt32_t
 
Êags
;

910 
memˇched_åiggî_key_‚
 
cb
(memˇched_åiggî_key_‚)
ªad_through_åiggî
;

912 
°rög

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

913 &
°rög_Àngth
, &
Êags
, &
rc
);

915 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTFOUND
);

916 
	`ã°_Ál£
(
°rög_Àngth
);

917 
	`ã°_Ál£
(
°rög
);

919 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_GET_FAILURE
,

920 *(**)&
cb
);

921 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

923 
°rög

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

924 &
°rög_Àngth
, &
Êags
, &
rc
);

926 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

927 
	`ã°_åue
(
°rög_Àngth
 =
	`°æí
(
READ_THROUGH_VALUE
));

928 
	`ã°_°rcmp
(
READ_THROUGH_VALUE
, 
°rög
);

929 
	`‰ì
(
°rög
);

931 
°rög

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

932 &
°rög_Àngth
, &
Êags
, &
rc
);

934 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

935 
	`ã°_åue
(
°rög_Àngth
 =
	`°æí
(
READ_THROUGH_VALUE
));

936 
	`ã°_åue
(!
	`°rcmp
(
READ_THROUGH_VALUE
, 
°rög
));

937 
	`‰ì
(
°rög
);

939  
TEST_SUCCESS
;

940 
	}
}

942 
memˇched_ªtu∫_t
 
	$dñëe_åiggî
(
memˇched_°
 *
±r
,

943 c⁄° *
key
,

944 
size_t
 
key_Àngth
)

946 ()
±r
;()
key_Àngth
;

947 
	`as£π
(
key
);

949  
MEMCACHED_SUCCESS
;

950 
	}
}

952 
ã°_ªtu∫_t
 
	$dñëe_through
(
memˇched_°
 *
memc
)

954 
memˇched_åiggî_dñëe_key_‚
 
ˇŒback
;

955 
memˇched_ªtu∫_t
 
rc
;

957 
ˇŒback
(
memˇched_åiggî_dñëe_key_‚
)
dñëe_åiggî
;

959 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_DELETE_TRIGGER
, *(**)&
ˇŒback
);

960 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

962  
TEST_SUCCESS
;

963 
	}
}

965 
ã°_ªtu∫_t
 
	$gë_ã°
(
memˇched_°
 *
memc
)

967 
memˇched_ªtu∫_t
 
rc
;

968 c⁄° *
key
= "foo";

969 *
°rög
;

970 
size_t
 
°rög_Àngth
;

971 
uöt32_t
 
Êags
;

973 
rc

	`memˇched_dñëe
(
memc
, 
key
, 
	`°æí
(key), (
time_t
)0);

974 
	`ã°_åue
(
rc
 =
MEMCACHED_BUFFERED
 ||Ñ¯=
MEMCACHED_NOTFOUND
);

976 
°rög

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

977 &
°rög_Àngth
, &
Êags
, &
rc
);

979 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTFOUND
);

980 
	`ã°_Ál£
(
°rög_Àngth
);

981 
	`ã°_Ál£
(
°rög
);

983  
TEST_SUCCESS
;

984 
	}
}

986 
ã°_ªtu∫_t
 
	$gë_ã°2
(
memˇched_°
 *
memc
)

988 
memˇched_ªtu∫_t
 
rc
;

989 c⁄° *
key
= "foo";

990 c⁄° *
vÆue
= "when we sanitize";

991 *
°rög
;

992 
size_t
 
°rög_Àngth
;

993 
uöt32_t
 
Êags
;

995 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

996 
vÆue
, 
	`°æí
(value),

997 (
time_t
)0, (
uöt32_t
)0);

998 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1000 
°rög

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

1001 &
°rög_Àngth
, &
Êags
, &
rc
);

1003 
	`ã°_åue
(
°rög
);

1004 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1005 
	`ã°_åue
(
°rög_Àngth
 =
	`°æí
(
vÆue
));

1006 
	`ã°_åue
(!
	`memcmp
(
°rög
, 
vÆue
, 
°rög_Àngth
));

1008 
	`‰ì
(
°rög
);

1010  
TEST_SUCCESS
;

1011 
	}
}

1013 
ã°_ªtu∫_t
 
	$£t_ã°2
(
memˇched_°
 *
memc
)

1015 
memˇched_ªtu∫_t
 
rc
;

1016 c⁄° *
key
= "foo";

1017 c⁄° *
vÆue
= "train inÅhe brain";

1018 
size_t
 
vÆue_Àngth

	`°æí
(
vÆue
);

1019 
x
;

1021 
x
= 0; x < 10; x++)

1023 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

1024 
vÆue
, 
vÆue_Àngth
,

1025 (
time_t
)0, (
uöt32_t
)0);

1026 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1029  
TEST_SUCCESS
;

1030 
	}
}

1032 
ã°_ªtu∫_t
 
	$£t_ã°3
(
memˇched_°
 *
memc
)

1034 
memˇched_ªtu∫_t
 
rc
;

1035 *
vÆue
;

1036 
size_t
 
vÆue_Àngth
= 8191;

1037 
x
;

1039 
vÆue
 = (*)
	`mÆloc
(
vÆue_Àngth
);

1040 
	`ã°_åue
(
vÆue
);

1042 
x
0; x < 
vÆue_Àngth
; x++)

1043 
vÆue
[
x
] = () (x % 127);

1046 
x
= 0; x < 32; x++)

1048 
key
[16];

1050 
	`¢¥ötf
(
key
, (key), "foo%u", 
x
);

1052 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

1053 
vÆue
, 
vÆue_Àngth
,

1054 (
time_t
)0, (
uöt32_t
)0);

1055 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1058 
	`‰ì
(
vÆue
);

1060  
TEST_SUCCESS
;

1061 
	}
}

1063 
ã°_ªtu∫_t
 
	$gë_ã°3
(
memˇched_°
 *
memc
)

1065 
memˇched_ªtu∫_t
 
rc
;

1066 c⁄° *
key
= "foo";

1067 *
vÆue
;

1068 
size_t
 
vÆue_Àngth
= 8191;

1069 *
°rög
;

1070 
size_t
 
°rög_Àngth
;

1071 
uöt32_t
 
Êags
;

1072 
uöt32_t
 
x
;

1074 
vÆue
 = (*)
	`mÆloc
(
vÆue_Àngth
);

1075 
	`ã°_åue
(
vÆue
);

1077 
x
0; x < 
vÆue_Àngth
; x++)

1078 
vÆue
[
x
] = () (x % 127);

1080 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

1081 
vÆue
, 
vÆue_Àngth
,

1082 (
time_t
)0, (
uöt32_t
)0);

1083 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1085 
°rög

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

1086 &
°rög_Àngth
, &
Êags
, &
rc
);

1088 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1089 
	`ã°_åue
(
°rög
);

1090 
	`ã°_åue
(
°rög_Àngth
 =
vÆue_Àngth
);

1091 
	`ã°_åue
(!
	`memcmp
(
°rög
, 
vÆue
, 
°rög_Àngth
));

1093 
	`‰ì
(
°rög
);

1094 
	`‰ì
(
vÆue
);

1096  
TEST_SUCCESS
;

1097 
	}
}

1099 
ã°_ªtu∫_t
 
	$gë_ã°4
(
memˇched_°
 *
memc
)

1101 
memˇched_ªtu∫_t
 
rc
;

1102 c⁄° *
key
= "foo";

1103 *
vÆue
;

1104 
size_t
 
vÆue_Àngth
= 8191;

1105 *
°rög
;

1106 
size_t
 
°rög_Àngth
;

1107 
uöt32_t
 
Êags
;

1108 
uöt32_t
 
x
;

1110 
vÆue
 = (*)
	`mÆloc
(
vÆue_Àngth
);

1111 
	`ã°_åue
(
vÆue
);

1113 
x
0; x < 
vÆue_Àngth
; x++)

1114 
vÆue
[
x
] = () (x % 127);

1116 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

1117 
vÆue
, 
vÆue_Àngth
,

1118 (
time_t
)0, (
uöt32_t
)0);

1119 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1121 
x
= 0; x < 10; x++)

1123 
°rög

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

1124 &
°rög_Àngth
, &
Êags
, &
rc
);

1126 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1127 
	`ã°_åue
(
°rög
);

1128 
	`ã°_åue
(
°rög_Àngth
 =
vÆue_Àngth
);

1129 
	`ã°_åue
(!
	`memcmp
(
°rög
, 
vÆue
, 
°rög_Àngth
));

1130 
	`‰ì
(
°rög
);

1133 
	`‰ì
(
vÆue
);

1135  
TEST_SUCCESS
;

1136 
	}
}

1143 
ã°_ªtu∫_t
 
	$gë_ã°5
(
memˇched_°
 *
memc
)

1149 c⁄° *
keys
[]= { "key", "key" };

1150 
size_t
 
Àngths
[]= { 3, 3 };

1151 
uöt32_t
 
Êags
;

1152 
size_t
 
æí
;

1154 
memˇched_ªtu∫_t
 
rc

	`memˇched_£t
(
memc
, 
keys
[0], 
Àngths
[0],

1155 
keys
[0], 
Àngths
[0], 0, 0);

1156 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1157 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
Àngths
, 2);

1159 
memˇched_ªsu…_°
 
ªsu…s_obj
;

1160 
memˇched_ªsu…_°
 *
ªsu…s
;

1161 
ªsu…s
=
	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

1162 
	`ã°_åue
(
ªsu…s
);

1163 
ªsu…s
=
	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
);

1164 
	`ã°_åue
(
ªsu…s
);

1165 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

1168 
rc

	`memˇched_£t
(
memc
, 
keys
[0], 
Àngths
[0], keys[0],Üengths[0], 0, 0);

1169 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1171 *
vÆ

	`memˇched_gë_by_key
(
memc
, 
keys
[0], 
Àngths
[0], "yek", 3,

1172 &
æí
, &
Êags
, &
rc
);

1173 
	`ã°_åue
(
vÆ
 =
NULL
);

1174 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTFOUND
);

1175 
vÆ

	`memˇched_gë
(
memc
, 
keys
[0], 
Àngths
[0], &
æí
, &
Êags
, &
rc
);

1176 
	`ã°_åue
(
vÆ
 !
NULL
);

1177 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1178 
	`‰ì
(
vÆ
);

1180  
TEST_SUCCESS
;

1181 
	}
}

1183 
ã°_ªtu∫_t
 
	$mgë_íd
(
memˇched_°
 *
memc
)

1185 c⁄° *
keys
[]= { "foo", "foo2" };

1186 
size_t
 
Àngths
[]= { 3, 4 };

1187 c⁄° *
vÆues
[]= { "fjord", "41" };

1189 
memˇched_ªtu∫_t
 
rc
;

1192 
i
= 0; i < 2; i++)

1194 
rc

	`memˇched_£t
(
memc
, 
keys
[
i
], 
Àngths
[i], 
vÆues
[i], 
	`°æí
(values[i]),

1195 (
time_t
)0, (
uöt32_t
)0);

1196 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1199 *
°rög
;

1200 
size_t
 
°rög_Àngth
;

1201 
uöt32_t
 
Êags
;

1204 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
Àngths
, 2);

1205 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1207 
key
[
MEMCACHED_MAX_KEY
];

1208 
size_t
 
key_Àngth
;

1211 
i
 = 0; i < 2; i++)

1213 
°rög

	`memˇched_„tch
(
memc
, 
key
, &
key_Àngth
, &
°rög_Àngth
,

1214 &
Êags
, &
rc
);

1215 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1216 
vÆ
 = 0;

1217 i‡(
key_Àngth
 == 4)

1218 
vÆ
= 1;

1219 
	`ã°_åue
(
°rög_Àngth
 =
	`°æí
(
vÆues
[
vÆ
]));

1220 
	`ã°_åue
(
	`°∫cmp
(
vÆues
[
vÆ
], 
°rög
, 
°rög_Àngth
) == 0);

1221 
	`‰ì
(
°rög
);

1225 
°rög

	`memˇched_„tch
(
memc
, 
key
, &
key_Àngth
, &
°rög_Àngth
, &
Êags
, &
rc
);

1226 
	`ã°_åue
(
rc
 =
MEMCACHED_END
);

1229 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
Àngths
, 1);

1230 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1232 
°rög

	`memˇched_„tch
(
memc
, 
key
, &
key_Àngth
, &
°rög_Àngth
, &
Êags
, &
rc
);

1233 
	`ã°_åue
(
key_Àngth
 =
Àngths
[0]);

1234 
	`ã°_åue
(
	`°∫cmp
(
keys
[0], 
key
, 
key_Àngth
) == 0);

1235 
	`ã°_åue
(
°rög_Àngth
 =
	`°æí
(
vÆues
[0]));

1236 
	`ã°_åue
(
	`°∫cmp
(
vÆues
[0], 
°rög
, 
°rög_Àngth
) == 0);

1237 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1238 
	`‰ì
(
°rög
);

1241 
°rög

	`memˇched_„tch
(
memc
, 
key
, &
key_Àngth
, &
°rög_Àngth
, &
Êags
, &
rc
);

1242 
	`ã°_åue
(
rc
 =
MEMCACHED_END
);

1244  
TEST_SUCCESS
;

1245 
	}
}

1248 
ã°_ªtu∫_t
 
	$°©s_£rvî«me_ã°
(
memˇched_°
 *
memc
)

1250 
memˇched_ªtu∫_t
 
rc
;

1251 
memˇched_°©_°
 
memc_°©
;

1252 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

1253 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

1255 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


1256 i‡(
	`memˇched_gë_ß¶_ˇŒbacks
(
memc
Ë!
NULL
)

1257  
TEST_SKIPPED
;

1259 
rc

	`memˇched_°©_£rvî«me
(&
memc_°©
, 
NULL
,

1260 
	`memˇched_£rvî_«me
(
ö°™˚
),

1261 
	`memˇched_£rvî_p‹t
(
ö°™˚
));

1263  
TEST_SUCCESS
;

1264 
	}
}

1266 
ã°_ªtu∫_t
 
	$ö¸emít_ã°
(
memˇched_°
 *
memc
)

1268 
uöt64_t
 
√w_numbî
;

1269 
memˇched_ªtu∫_t
 
rc
;

1270 c⁄° *
key
= "number";

1271 c⁄° *
vÆue
= "0";

1273 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

1274 
vÆue
, 
	`°æí
(value),

1275 (
time_t
)0, (
uöt32_t
)0);

1276 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1278 
rc

	`memˇched_ö¸emít
(
memc
, 
key
, 
	`°æí
(key),

1279 1, &
√w_numbî
);

1280 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1281 
	`ã°_åue
(
√w_numbî
 == 1);

1283 
rc

	`memˇched_ö¸emít
(
memc
, 
key
, 
	`°æí
(key),

1284 1, &
√w_numbî
);

1285 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1286 
	`ã°_åue
(
√w_numbî
 == 2);

1288  
TEST_SUCCESS
;

1289 
	}
}

1291 
ã°_ªtu∫_t
 
	$ö¸emít_wôh_öôül_ã°
(
memˇched_°
 *
memc
)

1293 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
) != 0)

1295 
uöt64_t
 
√w_numbî
;

1296 
memˇched_ªtu∫_t
 
rc
;

1297 c⁄° *
key
= "number";

1298 
uöt64_t
 
öôül
= 0;

1300 
rc

	`memˇched_ö¸emít_wôh_öôül
(
memc
, 
key
, 
	`°æí
(key),

1301 1, 
öôül
, 0, &
√w_numbî
);

1302 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1303 
	`ã°_åue
(
√w_numbî
 =
öôül
);

1305 
rc

	`memˇched_ö¸emít_wôh_öôül
(
memc
, 
key
, 
	`°æí
(key),

1306 1, 
öôül
, 0, &
√w_numbî
);

1307 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1308 
	`ã°_åue
(
√w_numbî
 =(
öôül
 + 1));

1310  
TEST_SUCCESS
;

1311 
	}
}

1313 
ã°_ªtu∫_t
 
	$de¸emít_ã°
(
memˇched_°
 *
memc
)

1315 
uöt64_t
 
√w_numbî
;

1316 
memˇched_ªtu∫_t
 
rc
;

1317 c⁄° *
key
= "number";

1318 c⁄° *
vÆue
= "3";

1320 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

1321 
vÆue
, 
	`°æí
(value),

1322 (
time_t
)0, (
uöt32_t
)0);

1323 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1325 
rc

	`memˇched_de¸emít
(
memc
, 
key
, 
	`°æí
(key),

1326 1, &
√w_numbî
);

1327 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1328 
	`ã°_åue
(
√w_numbî
 == 2);

1330 
rc

	`memˇched_de¸emít
(
memc
, 
key
, 
	`°æí
(key),

1331 1, &
√w_numbî
);

1332 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1333 
	`ã°_åue
(
√w_numbî
 == 1);

1335  
TEST_SUCCESS
;

1336 
	}
}

1338 
ã°_ªtu∫_t
 
	$de¸emít_wôh_öôül_ã°
(
memˇched_°
 *
memc
)

1340 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
) != 0)

1342 
uöt64_t
 
√w_numbî
;

1343 
memˇched_ªtu∫_t
 
rc
;

1344 c⁄° *
key
= "number";

1345 
uöt64_t
 
öôül
= 3;

1347 
rc

	`memˇched_de¸emít_wôh_öôül
(
memc
, 
key
, 
	`°æí
(key),

1348 1, 
öôül
, 0, &
√w_numbî
);

1349 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1350 
	`ã°_åue
(
√w_numbî
 =
öôül
);

1352 
rc

	`memˇched_de¸emít_wôh_öôül
(
memc
, 
key
, 
	`°æí
(key),

1353 1, 
öôül
, 0, &
√w_numbî
);

1354 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1355 
	`ã°_åue
(
√w_numbî
 =(
öôül
 - 1));

1357  
TEST_SUCCESS
;

1358 
	}
}

1360 
ã°_ªtu∫_t
 
	$ö¸emít_by_key_ã°
(
memˇched_°
 *
memc
)

1362 
uöt64_t
 
√w_numbî
;

1363 
memˇched_ªtu∫_t
 
rc
;

1364 c⁄° *
ma°î_key
= "foo";

1365 c⁄° *
key
= "number";

1366 c⁄° *
vÆue
= "0";

1368 
rc

	`memˇched_£t_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1369 
key
, 
	`°æí
(key),

1370 
vÆue
, 
	`°æí
(value),

1371 (
time_t
)0, (
uöt32_t
)0);

1372 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1374 
rc

	`memˇched_ö¸emít_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(ma°î_key), 
key
, strlen(key),

1375 1, &
√w_numbî
);

1376 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1377 
	`ã°_åue
(
√w_numbî
 == 1);

1379 
rc

	`memˇched_ö¸emít_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(ma°î_key), 
key
, strlen(key),

1380 1, &
√w_numbî
);

1381 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1382 
	`ã°_åue
(
√w_numbî
 == 2);

1384  
TEST_SUCCESS
;

1385 
	}
}

1387 
ã°_ªtu∫_t
 
	$ö¸emít_wôh_öôül_by_key_ã°
(
memˇched_°
 *
memc
)

1389 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
) != 0)

1391 
uöt64_t
 
√w_numbî
;

1392 
memˇched_ªtu∫_t
 
rc
;

1393 c⁄° *
ma°î_key
= "foo";

1394 c⁄° *
key
= "number";

1395 
uöt64_t
 
öôül
= 0;

1397 
rc

	`memˇched_ö¸emít_wôh_öôül_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1398 
key
, 
	`°æí
(key),

1399 1, 
öôül
, 0, &
√w_numbî
);

1400 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1401 
	`ã°_åue
(
√w_numbî
 =
öôül
);

1403 
rc

	`memˇched_ö¸emít_wôh_öôül_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1404 
key
, 
	`°æí
(key),

1405 1, 
öôül
, 0, &
√w_numbî
);

1406 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1407 
	`ã°_åue
(
√w_numbî
 =(
öôül
 + 1));

1409  
TEST_SUCCESS
;

1410 
	}
}

1412 
ã°_ªtu∫_t
 
	$de¸emít_by_key_ã°
(
memˇched_°
 *
memc
)

1414 
uöt64_t
 
√w_numbî
;

1415 
memˇched_ªtu∫_t
 
rc
;

1416 c⁄° *
ma°î_key
= "foo";

1417 c⁄° *
key
= "number";

1418 c⁄° *
vÆue
= "3";

1420 
rc

	`memˇched_£t_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1421 
key
, 
	`°æí
(key),

1422 
vÆue
, 
	`°æí
(value),

1423 (
time_t
)0, (
uöt32_t
)0);

1424 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1426 
rc

	`memˇched_de¸emít_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1427 
key
, 
	`°æí
(key),

1428 1, &
√w_numbî
);

1429 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1430 
	`ã°_åue
(
√w_numbî
 == 2);

1432 
rc

	`memˇched_de¸emít_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1433 
key
, 
	`°æí
(key),

1434 1, &
√w_numbî
);

1435 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1436 
	`ã°_åue
(
√w_numbî
 == 1);

1438  
TEST_SUCCESS
;

1439 
	}
}

1441 
ã°_ªtu∫_t
 
	$de¸emít_wôh_öôül_by_key_ã°
(
memˇched_°
 *
memc
)

1443 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
) != 0)

1445 
uöt64_t
 
√w_numbî
;

1446 
memˇched_ªtu∫_t
 
rc
;

1447 c⁄° *
ma°î_key
= "foo";

1448 c⁄° *
key
= "number";

1449 
uöt64_t
 
öôül
= 3;

1451 
rc

	`memˇched_de¸emít_wôh_öôül_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1452 
key
, 
	`°æí
(key),

1453 1, 
öôül
, 0, &
√w_numbî
);

1454 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1455 
	`ã°_åue
(
√w_numbî
 =
öôül
);

1457 
rc

	`memˇched_de¸emít_wôh_öôül_by_key
(
memc
, 
ma°î_key
, 
	`°æí
(master_key),

1458 
key
, 
	`°æí
(key),

1459 1, 
öôül
, 0, &
√w_numbî
);

1460 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1461 
	`ã°_åue
(
√w_numbî
 =(
öôül
 - 1));

1463  
TEST_SUCCESS
;

1464 
	}
}

1466 
ã°_ªtu∫_t
 
	$quô_ã°
(
memˇched_°
 *
memc
)

1468 
memˇched_ªtu∫_t
 
rc
;

1469 c⁄° *
key
= "fudge";

1470 c⁄° *
vÆue
= "sanfordánd sun";

1472 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

1473 
vÆue
, 
	`°æí
(value),

1474 (
time_t
)10, (
uöt32_t
)3);

1475 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1476 
	`memˇched_quô
(
memc
);

1478 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

1479 
vÆue
, 
	`°æí
(value),

1480 (
time_t
)50, (
uöt32_t
)9);

1481 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1483  
TEST_SUCCESS
;

1484 
	}
}

1486 
ã°_ªtu∫_t
 
	$mgë_ªsu…_ã°
(
memˇched_°
 *
memc
)

1488 
memˇched_ªtu∫_t
 
rc
;

1489 c⁄° *
keys
[]= {"fudge", "son", "food"};

1490 
size_t
 
key_Àngth
[]= {5, 3, 4};

1491 
x
;

1493 
memˇched_ªsu…_°
 
ªsu…s_obj
;

1494 
memˇched_ªsu…_°
 *
ªsu…s
;

1496 
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

1497 
	`ã°_åue
(
ªsu…s
);

1498 
	`ã°_åue
(&
ªsu…s_obj
 =
ªsu…s
);

1501 
rc

	`memˇched_Êush
(
memc
, 0);

1502 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1504 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

1505 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1507 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
)Ë!
NULL
)

1509 
	`ã°_åue
(
ªsu…s
);

1512 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
)Ë!
NULL
)

1513 
	`ã°_åue
(!
ªsu…s
);

1514 
	`ã°_åue
(
rc
 =
MEMCACHED_END
);

1516 
x
= 0; x < 3; x++)

1518 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

1519 
keys
[
x
], 
key_Àngth
[x],

1520 (
time_t
)50, (
uöt32_t
)9);

1521 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1524 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

1525 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1527 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
)))

1529 
	`ã°_åue
(
ªsu…s
);

1530 
	`ã°_åue
(&
ªsu…s_obj
 =
ªsu…s
);

1531 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1532 
	`ã°_åue
(
	`memˇched_ªsu…_key_Àngth
(
ªsu…s
Ë=
	`memˇched_ªsu…_Àngth
(results));

1533 
	`ã°_åue
(!
	`memcmp
(
	`memˇched_ªsu…_key_vÆue
(
ªsu…s
),

1534 
	`memˇched_ªsu…_vÆue
(
ªsu…s
),

1535 
	`memˇched_ªsu…_Àngth
(
ªsu…s
)));

1538 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

1540  
TEST_SUCCESS
;

1541 
	}
}

1543 
ã°_ªtu∫_t
 
	$mgë_ªsu…_Æloc_ã°
(
memˇched_°
 *
memc
)

1545 
memˇched_ªtu∫_t
 
rc
;

1546 c⁄° *
keys
[]= {"fudge", "son", "food"};

1547 
size_t
 
key_Àngth
[]= {5, 3, 4};

1548 
x
;

1550 
memˇched_ªsu…_°
 *
ªsu…s
;

1553 
rc

	`memˇched_Êush
(
memc
, 0);

1554 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1556 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

1557 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1559 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, 
NULL
, &
rc
)) != NULL)

1561 
	`ã°_åue
(
ªsu…s
);

1563 
	`ã°_åue
(!
ªsu…s
);

1564 
	`ã°_åue
(
rc
 =
MEMCACHED_END
);

1566 
x
= 0; x < 3; x++)

1568 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

1569 
keys
[
x
], 
key_Àngth
[x],

1570 (
time_t
)50, (
uöt32_t
)9);

1571 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1574 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

1575 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1577 
x
= 0;

1578 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, 
NULL
, &
rc
)))

1580 
	`ã°_åue
(
ªsu…s
);

1581 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1582 
	`ã°_åue
(
	`memˇched_ªsu…_key_Àngth
(
ªsu…s
Ë=
	`memˇched_ªsu…_Àngth
(results));

1583 
	`ã°_åue
(!
	`memcmp
(
	`memˇched_ªsu…_key_vÆue
(
ªsu…s
),

1584 
	`memˇched_ªsu…_vÆue
(
ªsu…s
),

1585 
	`memˇched_ªsu…_Àngth
(
ªsu…s
)));

1586 
	`memˇched_ªsu…_‰ì
(
ªsu…s
);

1587 
x
++;

1590  
TEST_SUCCESS
;

1591 
	}
}

1594 
memˇched_ªtu∫_t
 
	$ˇŒback_cou¡î
(c⁄° 
memˇched_°
 *
±r
,

1595 
memˇched_ªsu…_°
 *
ªsu…
,

1596 *
c⁄ãxt
)

1598 ()
±r
; ()
ªsu…
;

1599 
size_t
 *
cou¡î
(size_à*)
c⁄ãxt
;

1601 *
cou¡î
= *counter + 1;

1603  
MEMCACHED_SUCCESS
;

1604 
	}
}

1606 
ã°_ªtu∫_t
 
	$mgë_ªsu…_fun˘i⁄
(
memˇched_°
 *
memc
)

1608 
memˇched_ªtu∫_t
 
rc
;

1609 c⁄° *
keys
[]= {"fudge", "son", "food"};

1610 
size_t
 
key_Àngth
[]= {5, 3, 4};

1611 
x
;

1612 
size_t
 
cou¡î
;

1613 
memˇched_execuã_‚
 
ˇŒbacks
[1];

1616 
rc

	`memˇched_Êush
(
memc
, 0);

1617 
x
= 0; x < 3; x++)

1619 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

1620 
keys
[
x
], 
key_Àngth
[x],

1621 (
time_t
)50, (
uöt32_t
)9);

1622 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1625 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

1626 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1628 
ˇŒbacks
[0]&
ˇŒback_cou¡î
;

1629 
cou¡î
= 0;

1630 
rc

	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1);

1632 
	`ã°_åue
(
cou¡î
 == 3);

1634  
TEST_SUCCESS
;

1635 
	}
}

1637 
ã°_ªtu∫_t
 
	$mgë_ã°
(
memˇched_°
 *
memc
)

1639 
memˇched_ªtu∫_t
 
rc
;

1640 c⁄° *
keys
[]= {"fudge", "son", "food"};

1641 
size_t
 
key_Àngth
[]= {5, 3, 4};

1642 
x
;

1643 
uöt32_t
 
Êags
;

1645 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

1646 
size_t
 
ªtu∫_key_Àngth
;

1647 *
ªtu∫_vÆue
;

1648 
size_t
 
ªtu∫_vÆue_Àngth
;

1651 
rc

	`memˇched_Êush
(
memc
, 0);

1652 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1654 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

1655 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1657 (
ªtu∫_vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

1658 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
)Ë!
NULL
)

1660 
	`ã°_åue
(
ªtu∫_vÆue
);

1662 
	`ã°_åue
(!
ªtu∫_vÆue
);

1663 
	`ã°_åue
(
ªtu∫_vÆue_Àngth
 == 0);

1664 
	`ã°_åue
(
rc
 =
MEMCACHED_END
);

1666 
x
= 0; x < 3; x++)

1668 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

1669 
keys
[
x
], 
key_Àngth
[x],

1670 (
time_t
)50, (
uöt32_t
)9);

1671 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1674 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

1675 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1677 
x
= 0;

1678 (
ªtu∫_vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

1679 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
)))

1681 
	`ã°_åue
(
ªtu∫_vÆue
);

1682 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1683 
	`ã°_åue
(
ªtu∫_key_Àngth
 =
ªtu∫_vÆue_Àngth
);

1684 
	`ã°_åue
(!
	`memcmp
(
ªtu∫_vÆue
, 
ªtu∫_key
, 
ªtu∫_vÆue_Àngth
));

1685 
	`‰ì
(
ªtu∫_vÆue
);

1686 
x
++;

1689  
TEST_SUCCESS
;

1690 
	}
}

1692 
ã°_ªtu∫_t
 
	$mgë_execuã
(
memˇched_°
 *
memc
)

1694 
boﬁ
 
bö¨y

Ál£
;

1696 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
) != 0)

1697 
bö¨y

åue
;

1703 
uöt32_t
 
numbî_of_ho°s

memc
->number_of_hosts;

1704 
memc
->
numbî_of_ho°s
= 1;

1706 
size_t
 
max_keys
= 20480;

1709 **
keys

	`ˇŒoc
(
max_keys
, (*));

1710 
size_t
 *
key_Àngth
=
	`ˇŒoc
(
max_keys
, (size_t));

1713 
blob
[1024] = {0};

1714 
memˇched_ªtu∫_t
 
rc
;

1716 
size_t
 
x
0; x < 
max_keys
; ++x)

1718 
k
[251];

1720 
key_Àngth
[
x
](
size_t
)
	`¢¥ötf
(
k
, (k), "0200%lu", ()x);

1721 
keys
[
x
]
	`°rdup
(
k
);

1722 
	`ã°_åue
(
keys
[
x
] !
NULL
);

1723 
rc

	`memˇched_add
(
memc
, 
keys
[
x
], 
key_Àngth
[x], 
blob
, (blob), 0, 0);

1724 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1728 
size_t
 
cou¡î
= 0;

1729 
memˇched_execuã_‚
 
ˇŒbacks
[1]{ [0]&
ˇŒback_cou¡î
 };

1730 
rc

	`memˇched_mgë_execuã
(
memc
, (c⁄° **)
keys
, 
key_Àngth
,

1731 
max_keys
, 
ˇŒbacks
, &
cou¡î
, 1);

1733 i‡(
rc
 =
MEMCACHED_SUCCESS
)

1735 
	`ã°_åue
(
bö¨y
);

1736 
rc

	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1);

1737 
	`ã°_åue
(
rc
 =
MEMCACHED_END
);

1740 
	`ã°_åue
(
cou¡î
 =
max_keys
);

1742 i‡(
rc
 =
MEMCACHED_NOT_SUPPORTED
)

1744 
	`ã°_åue
(
cou¡î
 == 0);

1748 
	`ã°_Áû
("note:ÅhisÅest functions differently when in binary mode");

1752 
size_t
 
x
0; x < 
max_keys
; ++x)

1754 
	`‰ì
(
keys
[
x
]);

1756 
	`‰ì
(
keys
);

1757 
	`‰ì
(
key_Àngth
);

1759 
memc
->
numbî_of_ho°s
=Çumber_of_hosts;

1760  
TEST_SUCCESS
;

1761 
	}
}

1763 
	#REGRESSION_BINARY_VS_BLOCK_COUNT
 20480

	)

1765 
ã°_ªtu∫_t
 
	$key_£tup
(
memˇched_°
 *
memc
)

1767 ()
memc
;

1769 i‡(
	`¥e_bö¨y
(
memc
Ë!
TEST_SUCCESS
)

1770  
TEST_SKIPPED
;

1772 
globÆ_∑ús

	`∑ús_gíî©e
(
REGRESSION_BINARY_VS_BLOCK_COUNT
, 0);

1774  
TEST_SUCCESS
;

1775 
	}
}

1777 
ã°_ªtu∫_t
 
	$key_ã¨down
(
memˇched_°
 *
memc
)

1779 ()
memc
;

1780 
	`∑ús_‰ì
(
globÆ_∑ús
);

1782  
TEST_SUCCESS
;

1783 
	}
}

1785 
ã°_ªtu∫_t
 
	$block_add_ªgªssi⁄
(
memˇched_°
 *
memc
)

1788 
size_t
 
x
0; x < 
REGRESSION_BINARY_VS_BLOCK_COUNT
; ++x)

1790 
memˇched_ªtu∫_t
 
rc
;

1791 
blob
[1024] = {0};

1793 
rc

	`memˇched_add_by_key
(
memc
, "bob", 3, 
globÆ_∑ús
[
x
].
key
, globÆ_∑ús[x].
key_Àngth
, 
blob
, (blob), 0, 0);

1794 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

1797  
TEST_SUCCESS
;

1798 
	}
}

1800 
ã°_ªtu∫_t
 
	$bö¨y_add_ªgªssi⁄
(
memˇched_°
 *
memc
)

1802 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1);

1803 
ã°_ªtu∫_t
 
rc

	`block_add_ªgªssi⁄
(
memc
);

1804 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 0);

1805  
rc
;

1806 
	}
}

1808 
ã°_ªtu∫_t
 
	$gë_°©s_keys
(
memˇched_°
 *
memc
)

1810 **
°©_li°
;

1811 **
±r
;

1812 
memˇched_°©_°
 
memc_°©
;

1813 
memˇched_ªtu∫_t
 
rc
;

1815 
°©_li°

	`memˇched_°©_gë_keys
(
memc
, &
memc_°©
, &
rc
);

1816 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1817 
±r

°©_li°
; *ptr;Ötr++)

1818 
	`ã°_åue
(*
±r
);

1820 
	`‰ì
(
°©_li°
);

1822  
TEST_SUCCESS
;

1823 
	}
}

1825 
ã°_ªtu∫_t
 
	$vîsi⁄_°rög_ã°
(
memˇched_°
 *
memc
)

1827 c⁄° *
vîsi⁄_°rög
;

1828 ()
memc
;

1830 
vîsi⁄_°rög

	`memˇched_lib_vîsi⁄
();

1832 
	`ã°_åue
(!
	`°rcmp
(
vîsi⁄_°rög
, 
LIBMEMCACHED_VERSION_STRING
));

1834  
TEST_SUCCESS
;

1835 
	}
}

1837 
ã°_ªtu∫_t
 
	$gë_°©s
(
memˇched_°
 *
memc
)

1839 **
°©_li°
;

1840 **
±r
;

1841 
memˇched_ªtu∫_t
 
rc
;

1842 
memˇched_°©_°
 *
memc_°©
;

1844 
memc_°©

	`memˇched_°©
(
memc
, 
NULL
, &
rc
);

1845 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1847 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1848 
	`ã°_åue
(
memc_°©
);

1850 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

1852 
°©_li°

	`memˇched_°©_gë_keys
(
memc
, 
memc_°©
+
x
, &
rc
);

1853 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1854 
±r

°©_li°
; *ptr;Ötr++);

1856 
	`‰ì
(
°©_li°
);

1859 
	`memˇched_°©_‰ì
(
NULL
, 
memc_°©
);

1861  
TEST_SUCCESS
;

1862 
	}
}

1864 
ã°_ªtu∫_t
 
	$add_ho°_ã°
(
memˇched_°
 *
memc
)

1866 
x
;

1867 
memˇched_£rvî_°
 *
£rvîs
;

1868 
memˇched_ªtu∫_t
 
rc
;

1869 
£rvî«me
[]= "0.example.com";

1871 
£rvîs

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
NULL
, 
£rvî«me
, 400, 0, &
rc
);

1872 
	`ã°_åue
(
£rvîs
);

1873 
	`ã°_åue
(1 =
	`memˇched_£rvî_li°_cou¡
(
£rvîs
));

1875 
x
= 2; x < 20; x++)

1877 
buf„r
[
SMALL_STRING_LEN
];

1879 
	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
, "%u.exam∂e.com", 400+
x
);

1880 
£rvîs

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(£rvîs, 
buf„r
, 401, 0,

1881 &
rc
);

1882 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1883 
	`ã°_åue
(
x
 =
	`memˇched_£rvî_li°_cou¡
(
£rvîs
));

1886 
rc

	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

1887 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1888 
rc

	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

1889 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1891 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

1893  
TEST_SUCCESS
;

1894 
	}
}

1896 
memˇched_ªtu∫_t
 
	$˛⁄e_ã°_ˇŒback
(
memˇched_°
 *
∑ª¡
, memˇched_° *
memc_˛⁄e
)

1898 ()
∑ª¡
;()
memc_˛⁄e
;

1899  
MEMCACHED_SUCCESS
;

1900 
	}
}

1902 
memˇched_ªtu∫_t
 
	$˛ónup_ã°_ˇŒback
(
memˇched_°
 *
±r
)

1904 ()
±r
;

1905  
MEMCACHED_SUCCESS
;

1906 
	}
}

1908 
ã°_ªtu∫_t
 
	$ˇŒback_ã°
(
memˇched_°
 *
memc
)

1912 
x
= 5;

1913 *
ã°_±r
;

1914 
memˇched_ªtu∫_t
 
rc
;

1916 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_USER_DATA
, &
x
);

1917 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1918 
ã°_±r
(*)
	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_USER_DATA
, &
rc
);

1919 
	`ã°_åue
(*
ã°_±r
 =
x
);

1924 
memˇched_˛⁄e_‚
 
˛⁄e_cb
(memˇched_˛⁄e_‚)
˛⁄e_ã°_ˇŒback
;

1925 *
˛⁄e_cb_±r
*(**)&
˛⁄e_cb
;

1926 *
ãmp_fun˘i⁄

NULL
;

1927 
memˇched_ªtu∫_t
 
rc
;

1929 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_CLONE_FUNCTION
,

1930 
˛⁄e_cb_±r
);

1931 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1932 
ãmp_fun˘i⁄

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_CLONE_FUNCTION
, &
rc
);

1933 
	`ã°_åue
(
ãmp_fun˘i⁄
 =
˛⁄e_cb_±r
);

1938 
memˇched_˛ónup_‚
 
˛ónup_cb
=

1939 (
memˇched_˛ónup_‚
)
˛ónup_ã°_ˇŒback
;

1940 *
˛ónup_cb_±r
*(**)&
˛ónup_cb
;

1941 *
ãmp_fun˘i⁄

NULL
;

1942 
memˇched_ªtu∫_t
 
rc
;

1944 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_CLONE_FUNCTION
,

1945 
˛ónup_cb_±r
);

1946 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

1947 
ãmp_fun˘i⁄

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_CLONE_FUNCTION
, &
rc
);

1948 
	`ã°_åue
(
ãmp_fun˘i⁄
 =
˛ónup_cb_±r
);

1951  
TEST_SUCCESS
;

1952 
	}
}

1955 
ã°_ªtu∫_t
 
	$behavi‹_ã°
(
memˇched_°
 *
memc
)

1957 
uöt64_t
 
vÆue
;

1958 
uöt32_t
 
£t
= 1;

1960 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
£t
);

1961 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
);

1962 
	`ã°_åue
(
vÆue
 == 1);

1964 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
£t
);

1965 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
);

1966 
	`ã°_åue
(
vÆue
 == 1);

1968 
£t

MEMCACHED_HASH_MD5
;

1969 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, 
£t
);

1970 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
);

1971 
	`ã°_åue
(
vÆue
 =
MEMCACHED_HASH_MD5
);

1973 
£t
= 0;

1975 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
£t
);

1976 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
);

1977 
	`ã°_åue
(
vÆue
 == 0);

1979 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
£t
);

1980 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
);

1981 
	`ã°_åue
(
vÆue
 == 0);

1983 
£t

MEMCACHED_HASH_DEFAULT
;

1984 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, 
£t
);

1985 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
);

1986 
	`ã°_åue
(
vÆue
 =
MEMCACHED_HASH_DEFAULT
);

1988 
£t

MEMCACHED_HASH_CRC
;

1989 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, 
£t
);

1990 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
);

1991 
	`ã°_åue
(
vÆue
 =
MEMCACHED_HASH_CRC
);

1993 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
);

1994 
	`ã°_åue
(
vÆue
 > 0);

1996 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
);

1997 
	`ã°_åue
(
vÆue
 > 0);

1999 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
);

2000 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 
vÆue
 + 1);

2001 
	`ã°_åue
((
vÆue
 + 1Ë=
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
));

2003  
TEST_SUCCESS
;

2004 
	}
}

2006 
ã°_ªtu∫_t
 
	$MEMCACHED_BEHAVIOR_CORK_ã°
(
memˇched_°
 *
memc
)

2008 
memˇched_ªtu∫_t
 
rc
;

2009 
boﬁ
 
£t

åue
;

2011 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_CORK
, 
£t
);

2012 
	`ã°_åue
(
rc
 =
MEMCACHED_DEPRECATED
);

2016 
boﬁ
 
vÆue
(boﬁ)
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_CORK
);

2017 
	`ã°_Ál£
(
vÆue
);

2020  
TEST_SUCCESS
;

2021 
	}
}

2024 
ã°_ªtu∫_t
 
	$MEMCACHED_BEHAVIOR_TCP_KEEPALIVE_ã°
(
memˇched_°
 *
memc
)

2026 
memˇched_ªtu∫_t
 
rc
;

2027 
boﬁ
 
£t

åue
;

2028 
boﬁ
 
vÆue
;

2030 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
, 
£t
);

2031 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_NOT_SUPPORTED
);

2033 
vÆue
(
boﬁ
)
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE
);

2035 i‡(
rc
 =
MEMCACHED_SUCCESS
)

2037 
	`ã°_åue
((
boﬁ
)
vÆue
 =
£t
);

2041 
	`ã°_Ál£
((
boﬁ
)
vÆue
 =
£t
);

2044  
TEST_SUCCESS
;

2045 
	}
}

2048 
ã°_ªtu∫_t
 
	$MEMCACHED_BEHAVIOR_TCP_KEEPIDLE_ã°
(
memˇched_°
 *
memc
)

2050 
memˇched_ªtu∫_t
 
rc
;

2051 
boﬁ
 
£t

åue
;

2052 
boﬁ
 
vÆue
;

2054 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
, 
£t
);

2055 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_NOT_SUPPORTED
);

2057 
vÆue
(
boﬁ
)
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE
);

2059 i‡(
rc
 =
MEMCACHED_SUCCESS
)

2061 
	`ã°_åue
((
boﬁ
)
vÆue
 =
£t
);

2065 
	`ã°_Ál£
((
boﬁ
)
vÆue
 =
£t
);

2068  
TEST_SUCCESS
;

2069 
	}
}

2071 
ã°_ªtu∫_t
 
	$„tch_Æl_ªsu…s
(
memˇched_°
 *
memc
, 
size_t
 *
keys_ªtu∫ed
)

2073 
memˇched_ªtu∫_t
 
rc

MEMCACHED_SUCCESS
;

2074 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

2075 
size_t
 
ªtu∫_key_Àngth
;

2076 *
ªtu∫_vÆue
;

2077 
size_t
 
ªtu∫_vÆue_Àngth
;

2078 
uöt32_t
 
Êags
;

2080 *
keys_ªtu∫ed
= 0;

2082 (
ªtu∫_vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2083 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
)))

2085 
	`ã°_åue
(
ªtu∫_vÆue
);

2086 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2087 
	`‰ì
(
ªtu∫_vÆue
);

2088 *
keys_ªtu∫ed
= *keys_returned +1;

2091 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_END
 ||Ñ¯=
MEMCACHED_SUCCESS
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

2093  
TEST_SUCCESS
;

2094 
	}
}

2097 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug1
(
memˇched_°
 *
memc
)

2099 
£âî
= 1;

2101 
tŸÆ
= 0;

2102 
uöt32_t
 
size
= 0;

2103 
key
[10];

2104 
øndom°uff
[6 * 1024];

2105 
memˇched_ªtu∫_t
 
rc
;

2107 
	`mem£t
(
øndom°uff
, 0, 6 * 1024);

2110 
	`§™dom
(10);

2112 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
£âî
);

2113 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
£âî
);

2117 
uöt32_t
 
x
0 ; 
tŸÆ
 < 20 * 1024576 ; x++ )

2119 
j
= 0;

2121 
size
(
uöt32_t
)(
	`ønd
() % ( 5 * 1024 ) ) + 400;

2122 
	`mem£t
(
øndom°uff
, 0, 6 * 1024);

2123 
	`ã°_åue
(
size
 < 6 * 1024);

2125 
j
0 ; j < 
size
 ;j++)

2126 
øndom°uff
[
j
] = (sig√d Ë((
	`ønd
() % 26) + 97);

2128 
tŸÆ
 +
size
;

2129 
	`¢¥ötf
(
key
, (key), "%u", 
x
);

2130 
rc
 = 
	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

2131 
øndom°uff
, 
	`°æí
(randomstuff), 10, 0);

2132 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

2134 i‡(
rc
 !
MEMCACHED_SUCCESS
 &&Ñ¯!
MEMCACHED_BUFFERED
)

2135 
rc
 = 
	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

2136 
øndom°uff
, 
	`°æí
(randomstuff), 10, 0);

2137 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

2140  
TEST_SUCCESS
;

2141 
	}
}

2144 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug2
(
memˇched_°
 *
memc
)

2146 
£âî
;

2147 
size_t
 
tŸÆ
= 0;

2149 
£âî
= 1;

2150 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
£âî
);

2151 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
£âî
);

2152 #ifde‡
NOT_YET


2153 
£âî
 = 20 * 1024576;

2154 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
, 
£âî
);

2155 
£âî
 = 20 * 1024576;

2156 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
, 
£âî
);

2157 
gëãr
 = 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
);

2158 
gëãr
 = 
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
);

2160 
x
0, 
îr‹s
0; 
tŸÆ
 < 20 * 1024576 ; x++)

2163 
uöt32_t
 
x
0, 
îr‹s
0; 
tŸÆ
 < 24576 ; x++)

2165 
memˇched_ªtu∫_t
 
rc

MEMCACHED_SUCCESS
;

2166 
buf„r
[
SMALL_STRING_LEN
];

2167 
uöt32_t
 
Êags
= 0;

2168 
size_t
 
vÆ_Àn
= 0;

2169 *
gëvÆ
;

2171 
	`mem£t
(
buf„r
, 0, 
SMALL_STRING_LEN
);

2173 
	`¢¥ötf
(
buf„r
, (buf„r), "%u", 
x
);

2174 
gëvÆ

	`memˇched_gë
(
memc
, 
buf„r
, 
	`°æí
(buffer),

2175 &
vÆ_Àn
, &
Êags
, &
rc
);

2176 i‡(
rc
 !
MEMCACHED_SUCCESS
)

2178 i‡(
rc
 =
MEMCACHED_NOTFOUND
)

2179 
îr‹s
++;

2182 
	`ã°_åue
(
rc
);

2187 
tŸÆ
+
vÆ_Àn
;

2188 
îr‹s
= 0;

2189 
	`‰ì
(
gëvÆ
);

2192  
TEST_SUCCESS
;

2193 
	}
}

2196 
	#KEY_COUNT
 3000

2197 
ã°_ªtu∫_t
 
	`u£r_suµlõd_bug3
(
memˇched_°
 *
memc
)

	)

2199 
memˇched_ªtu∫_t
 
	grc
;

2200 
	g£âî
;

2201 
	gx
;

2202 **
	gkeys
;

2203 
size_t
 
	gkey_Àngths
[
KEY_COUNT
];

2205 
	g£âî
= 1;

2206 
memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
£âî
);

2207 
memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
£âî
);

2208 #ifde‡
NOT_YET


2209 
	g£âî
 = 20 * 1024576;

2210 
memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
, 
£âî
);

2211 
	g£âî
 = 20 * 1024576;

2212 
memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
, 
£âî
);

2213 
	ggëãr
 = 
memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE
);

2214 
	ggëãr
 = 
memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE
);

2217 
	gkeys

ˇŒoc
(
KEY_COUNT
, (*));

2218 
ã°_åue
(
keys
);

2219 
	gx
0; x < 
	gKEY_COUNT
; x++)

2221 
	gbuf„r
[30];

2223 
¢¥ötf
(
buf„r
, 30, "%u", 
x
);

2224 
	gkeys
[
x
]
°rdup
(
buf„r
);

2225 
	gkey_Àngths
[
x
]
°æí
(
keys
[x]);

2228 
	grc

memˇched_mgë
(
memc
, (c⁄° **)
keys
, 
key_Àngths
, 
KEY_COUNT
);

2229 
ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2231 
size_t
 
	gkeys_ªtu∫ed
;

2232 
ã°_åue
(
„tch_Æl_ªsu…s
(
memc
, &
keys_ªtu∫ed
Ë=
TEST_SUCCESS
);

2234 
	gx
0; x < 
	gKEY_COUNT
; x++)

2235 
‰ì
(
keys
[
x
]);

2236 
‰ì
(
keys
);

2238  
	gTEST_SUCCESS
;

2242 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug4
(
memˇched_°
 *
memc
)

2244 
memˇched_ªtu∫_t
 
rc
;

2245 c⁄° *
keys
[]= {"fudge", "son", "food"};

2246 
size_t
 
key_Àngth
[]= {5, 3, 4};

2247 
x
;

2248 
uöt32_t
 
Êags
;

2249 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

2250 
size_t
 
ªtu∫_key_Àngth
;

2251 *
ªtu∫_vÆue
;

2252 
size_t
 
ªtu∫_vÆue_Àngth
;

2255 
	`memˇched_£rvîs_ª£t
(
memc
);

2259 
rc

	`memˇched_Êush
(
memc
, 0);

2260 
	`ã°_åue
(
rc
 =
MEMCACHED_NO_SERVERS
);

2262 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

2263 
	`ã°_åue
(
rc
 =
MEMCACHED_NO_SERVERS
);

2265 (
ªtu∫_vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2266 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
)Ë!
NULL
)

2268 
	`ã°_åue
(
ªtu∫_vÆue
);

2270 
	`ã°_åue
(!
ªtu∫_vÆue
);

2271 
	`ã°_åue
(
ªtu∫_vÆue_Àngth
 == 0);

2272 
	`ã°_åue
(
rc
 =
MEMCACHED_NO_SERVERS
);

2274 
x
= 0; x < 3; x++)

2276 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

2277 
keys
[
x
], 
key_Àngth
[x],

2278 (
time_t
)50, (
uöt32_t
)9);

2279 
	`ã°_åue
(
rc
 =
MEMCACHED_NO_SERVERS
);

2282 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

2283 
	`ã°_åue
(
rc
 =
MEMCACHED_NO_SERVERS
);

2285 
x
= 0;

2286 (
ªtu∫_vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2287 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
)))

2289 
	`ã°_åue
(
ªtu∫_vÆue
);

2290 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2291 
	`ã°_åue
(
ªtu∫_key_Àngth
 =
ªtu∫_vÆue_Àngth
);

2292 
	`ã°_åue
(!
	`memcmp
(
ªtu∫_vÆue
, 
ªtu∫_key
, 
ªtu∫_vÆue_Àngth
));

2293 
	`‰ì
(
ªtu∫_vÆue
);

2294 
x
++;

2297  
TEST_SUCCESS
;

2298 
	}
}

2300 
	#VALUE_SIZE_BUG5
 1048064

	)

2301 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug5
(
memˇched_°
 *
memc
)

2303 
memˇched_ªtu∫_t
 
rc
;

2304 c⁄° *
keys
[]= {"036790384900", "036790384902", "036790384904", "036790384906"};

2305 
size_t
 
key_Àngth
[]{
	`°æí
("036790384900"), strlen("036790384902"), strlen("036790384904"), strlen("036790384906")};

2306 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

2307 
size_t
 
ªtu∫_key_Àngth
;

2308 *
vÆue
;

2309 
size_t
 
vÆue_Àngth
;

2310 
uöt32_t
 
Êags
;

2311 
cou¡
;

2312 
x
;

2313 
ö£π_d©a
[
VALUE_SIZE_BUG5
];

2315 
x
0; x < 
VALUE_SIZE_BUG5
; x++)

2316 
ö£π_d©a
[
x
](sig√d )
	`ønd
();

2318 
	`memˇched_Êush
(
memc
, 0);

2319 
vÆue

	`memˇched_gë
(
memc
, 
keys
[0], 
key_Àngth
[0],

2320 &
vÆue_Àngth
, &
Êags
, &
rc
);

2321 
	`ã°_åue
(
vÆue
 =
NULL
);

2322 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 4);

2324 
cou¡
= 0;

2325 (
vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2326 &
vÆue_Àngth
, &
Êags
, &
rc
)))

2327 
cou¡
++;

2328 
	`ã°_åue
(
cou¡
 == 0);

2330 
x
= 0; x < 4; x++)

2332 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

2333 
ö£π_d©a
, 
VALUE_SIZE_BUG5
,

2334 (
time_t
)0, (
uöt32_t
)0);

2335 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2338 
x
= 0; x < 10; x++)

2340 
vÆue

	`memˇched_gë
(
memc
, 
keys
[0], 
key_Àngth
[0],

2341 &
vÆue_Àngth
, &
Êags
, &
rc
);

2342 
	`ã°_åue
(
vÆue
);

2343 
	`‰ì
(
vÆue
);

2345 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 4);

2346 
cou¡
= 0;

2347 (
vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2348 &
vÆue_Àngth
, &
Êags
, &
rc
)))

2350 
cou¡
++;

2351 
	`‰ì
(
vÆue
);

2353 
	`ã°_åue
(
cou¡
 == 4);

2356  
TEST_SUCCESS
;

2357 
	}
}

2359 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug6
(
memˇched_°
 *
memc
)

2361 
memˇched_ªtu∫_t
 
rc
;

2362 c⁄° *
keys
[]= {"036790384900", "036790384902", "036790384904", "036790384906"};

2363 
size_t
 
key_Àngth
[]{
	`°æí
("036790384900"), strlen("036790384902"), strlen("036790384904"), strlen("036790384906")};

2364 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

2365 
size_t
 
ªtu∫_key_Àngth
;

2366 *
vÆue
;

2367 
size_t
 
vÆue_Àngth
;

2368 
uöt32_t
 
Êags
;

2369 
cou¡
;

2370 
x
;

2371 
ö£π_d©a
[
VALUE_SIZE_BUG5
];

2373 
x
0; x < 
VALUE_SIZE_BUG5
; x++)

2374 
ö£π_d©a
[
x
](sig√d )
	`ønd
();

2376 
	`memˇched_Êush
(
memc
, 0);

2377 
vÆue

	`memˇched_gë
(
memc
, 
keys
[0], 
key_Àngth
[0],

2378 &
vÆue_Àngth
, &
Êags
, &
rc
);

2379 
	`ã°_åue
(
vÆue
 =
NULL
);

2380 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTFOUND
);

2381 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 4);

2382 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2384 
cou¡
= 0;

2385 (
vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2386 &
vÆue_Àngth
, &
Êags
, &
rc
)))

2387 
cou¡
++;

2388 
	`ã°_åue
(
cou¡
 == 0);

2389 
	`ã°_åue
(
rc
 =
MEMCACHED_END
);

2391 
x
= 0; x < 4; x++)

2393 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

2394 
ö£π_d©a
, 
VALUE_SIZE_BUG5
,

2395 (
time_t
)0, (
uöt32_t
)0);

2396 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2399 
x
= 0; x < 2; x++)

2401 
vÆue

	`memˇched_gë
(
memc
, 
keys
[0], 
key_Àngth
[0],

2402 &
vÆue_Àngth
, &
Êags
, &
rc
);

2403 
	`ã°_åue
(
vÆue
);

2404 
	`‰ì
(
vÆue
);

2406 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 4);

2407 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2408 
cou¡
= 3;

2410 
cou¡
= 3; count; count--)

2412 
vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2413 &
vÆue_Àngth
, &
Êags
, &
rc
);

2414 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2415 
	`ã°_åue
(!(
	`memcmp
(
vÆue
, 
ö£π_d©a
, 
vÆue_Àngth
)));

2416 
	`ã°_åue
(
vÆue_Àngth
);

2417 
	`‰ì
(
vÆue
);

2421  
TEST_SUCCESS
;

2422 
	}
}

2424 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug8
(
memˇched_°
 *
memc
)

2426 
memˇched_ªtu∫_t
 
rc
;

2427 
memˇched_°
 *
möe
;

2428 
memˇched_°
 *
memc_˛⁄e
;

2430 
memˇched_£rvî_°
 *
£rvîs
;

2431 c⁄° *
£rvî_li°
= "memcache1.memcache.bk.sapo.pt:11211, memcache1.memcache.bk.sapo.pt:11212, memcache1.memcache.bk.sapo.pt:11213, memcache1.memcache.bk.sapo.pt:11214, memcache2.memcache.bk.sapo.pt:11211, memcache2.memcache.bk.sapo.pt:11212, memcache2.memcache.bk.sapo.pt:11213, memcache2.memcache.bk.sapo.pt:11214";

2433 ()
memc
;

2434 
£rvîs

	`memˇched_£rvîs_∑r£
(
£rvî_li°
);

2435 
	`ã°_åue
(
£rvîs
);

2437 
möe

	`memˇched_¸óã
(
NULL
);

2438 
rc

	`memˇched_£rvî_push
(
möe
, 
£rvîs
);

2439 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2440 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

2442 
	`ã°_åue
(
möe
);

2443 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
möe
);

2445 
	`memˇched_quô
(
möe
);

2446 
	`memˇched_quô
(
memc_˛⁄e
);

2449 
	`memˇched_‰ì
(
möe
);

2450 
	`memˇched_‰ì
(
memc_˛⁄e
);

2452  
TEST_SUCCESS
;

2453 
	}
}

2456 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug7
(
memˇched_°
 *
memc
)

2458 
memˇched_ªtu∫_t
 
rc
;

2459 c⁄° *
keys
= "036790384900";

2460 
size_t
 
key_Àngth

	`°æí
(
keys
);

2461 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

2462 
size_t
 
ªtu∫_key_Àngth
;

2463 *
vÆue
;

2464 
size_t
 
vÆue_Àngth
;

2465 
uöt32_t
 
Êags
;

2466 
x
;

2467 
ö£π_d©a
[
VALUE_SIZE_BUG5
];

2469 
x
0; x < 
VALUE_SIZE_BUG5
; x++)

2470 
ö£π_d©a
[
x
](sig√d )
	`ønd
();

2472 
	`memˇched_Êush
(
memc
, 0);

2474 
Êags
= 245;

2475 
rc

	`memˇched_£t
(
memc
, 
keys
, 
key_Àngth
,

2476 
ö£π_d©a
, 
VALUE_SIZE_BUG5
,

2477 (
time_t
)0, 
Êags
);

2478 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2480 
Êags
= 0;

2481 
vÆue

	`memˇched_gë
(
memc
, 
keys
, 
key_Àngth
,

2482 &
vÆue_Àngth
, &
Êags
, &
rc
);

2483 
	`ã°_åue
(
Êags
 == 245);

2484 
	`ã°_åue
(
vÆue
);

2485 
	`‰ì
(
vÆue
);

2487 
rc

	`memˇched_mgë
(
memc
, &
keys
, &
key_Àngth
, 1);

2489 
Êags
= 0;

2490 
vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2491 &
vÆue_Àngth
, &
Êags
, &
rc
);

2492 
	`ã°_åue
(
Êags
 == 245);

2493 
	`ã°_åue
(
vÆue
);

2494 
	`‰ì
(
vÆue
);

2497  
TEST_SUCCESS
;

2498 
	}
}

2500 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug9
(
memˇched_°
 *
memc
)

2502 
memˇched_ªtu∫_t
 
rc
;

2503 c⁄° *
keys
[]= {"UDATA:edevil@sapo.pt", "fudge&*@#", "for^#@&$not"};

2504 
size_t
 
key_Àngth
[3];

2505 
x
;

2506 
uöt32_t
 
Êags
;

2507 
cou¡
= 0;

2509 
ªtu∫_key
[
MEMCACHED_MAX_KEY
];

2510 
size_t
 
ªtu∫_key_Àngth
;

2511 *
ªtu∫_vÆue
;

2512 
size_t
 
ªtu∫_vÆue_Àngth
;

2515 
key_Àngth
[0]
	`°æí
("UDATA:edevil@sapo.pt");

2516 
key_Àngth
[1]
	`°æí
("fudge&*@#");

2517 
key_Àngth
[2]
	`°æí
("for^#@&$not");

2520 
x
= 0; x < 3; x++)

2522 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

2523 
keys
[
x
], 
key_Àngth
[x],

2524 (
time_t
)50, (
uöt32_t
)9);

2525 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2528 
rc

	`memˇched_mgë
(
memc
, 
keys
, 
key_Àngth
, 3);

2529 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2532 (
ªtu∫_vÆue

	`memˇched_„tch
(
memc
, 
ªtu∫_key
, &
ªtu∫_key_Àngth
,

2533 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
)Ë!
NULL
)

2535 
	`ã°_åue
(
ªtu∫_vÆue
);

2536 
	`‰ì
(
ªtu∫_vÆue
);

2537 
cou¡
++;

2539 
	`ã°_åue
(
cou¡
 == 3);

2541  
TEST_SUCCESS
;

2542 
	}
}

2545 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug10
(
memˇched_°
 *
memc
)

2547 c⁄° *
key
= "foo";

2548 *
vÆue
;

2549 
size_t
 
vÆue_Àngth
= 512;

2550 
x
;

2551 
size_t
 
key_Àn
= 3;

2552 
memˇched_ªtu∫_t
 
rc
;

2553 
£t
= 1;

2554 
memˇched_°
 *
m˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

2555 
öt32_t
 
timeout
;

2557 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
£t
);

2558 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
£t
);

2559 
timeout
= 2;

2560 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
,

2561 (
uöt64_t
)
timeout
);

2563 
vÆue
 = (*)
	`mÆloc
(
vÆue_Àngth
 * ());

2565 
x
0; x < 
vÆue_Àngth
; x++)

2566 
vÆue
[
x
]= () (x % 127);

2568 
x
= 1; x <= 100000; ++x)

2570 
rc

	`memˇched_£t
(
m˛⁄e
, 
key
, 
key_Àn
,
vÆue
, 
vÆue_Àngth
, 0, 0);

2572 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_WRITE_FAILURE
 ||

2573 
rc
 =
MEMCACHED_BUFFERED
 ||Ñ¯=
MEMCACHED_TIMEOUT
);

2575 i‡(
rc
 =
MEMCACHED_WRITE_FAILURE
 ||Ñ¯=
MEMCACHED_TIMEOUT
)

2576 
x
--;

2579 
	`‰ì
(
vÆue
);

2580 
	`memˇched_‰ì
(
m˛⁄e
);

2582  
TEST_SUCCESS
;

2583 
	}
}

2588 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug11
(
memˇched_°
 *
memc
)

2590 c⁄° *
key
= "foo";

2591 *
vÆue
;

2592 
size_t
 
vÆue_Àngth
= 512;

2593 
x
;

2594 
size_t
 
key_Àn
= 3;

2595 
memˇched_ªtu∫_t
 
rc
;

2596 
£t
= 1;

2597 
öt32_t
 
timeout
;

2598 
memˇched_°
 *
m˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

2600 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 
£t
);

2601 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
£t
);

2602 
timeout
= -1;

2603 
	`memˇched_behavi‹_£t
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
,

2604 (
size_t
)
timeout
);

2606 
timeout
(
öt32_t
)
	`memˇched_behavi‹_gë
(
m˛⁄e
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
);

2608 
	`ã°_åue
(
timeout
 == -1);

2610 
vÆue
 = (*)
	`mÆloc
(
vÆue_Àngth
 * ());

2612 
x
0; x < 
vÆue_Àngth
; x++)

2613 
vÆue
[
x
]= () (x % 127);

2615 
x
= 1; x <= 100000; ++x)

2617 
rc

	`memˇched_£t
(
m˛⁄e
, 
key
, 
key_Àn
,
vÆue
, 
vÆue_Àngth
, 0, 0);

2620 
	`‰ì
(
vÆue
);

2621 
	`memˇched_‰ì
(
m˛⁄e
);

2623  
TEST_SUCCESS
;

2624 
	}
}

2629 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug12
(
memˇched_°
 *
memc
)

2631 
memˇched_ªtu∫_t
 
rc
;

2632 
uöt32_t
 
Êags
;

2633 
size_t
 
vÆue_Àngth
;

2634 *
vÆue
;

2635 
uöt64_t
 
numbî_vÆue
;

2637 
vÆue

	`memˇched_gë
(
memc
, "autoö¸emít", 
	`°æí
("autoincrement"),

2638 &
vÆue_Àngth
, &
Êags
, &
rc
);

2639 
	`ã°_åue
(
vÆue
 =
NULL
);

2640 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTFOUND
);

2642 
rc

	`memˇched_ö¸emít
(
memc
, "autoö¸emít", 
	`°æí
("autoincrement"),

2643 1, &
numbî_vÆue
);

2645 
	`ã°_åue
(
vÆue
 =
NULL
);

2647 i‡(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
) == 1)

2649 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2653 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTFOUND
);

2656 
rc

	`memˇched_£t
(
memc
, "autoö¸emít", 
	`°æí
("autoincrement"), "1", 1, 0, 0);

2658 
vÆue

	`memˇched_gë
(
memc
, "autoö¸emít", 
	`°æí
("autoincrement"),

2659 &
vÆue_Àngth
, &
Êags
, &
rc
);

2660 
	`ã°_åue
(
vÆue
);

2661 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2662 
	`‰ì
(
vÆue
);

2664 
rc

	`memˇched_ö¸emít
(
memc
, "autoö¸emít", 
	`°æí
("autoincrement"),

2665 1, &
numbî_vÆue
);

2666 
	`ã°_åue
(
numbî_vÆue
 == 2);

2667 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2669  
TEST_SUCCESS
;

2670 
	}
}

2676 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug13
(
memˇched_°
 *
memc
)

2678 
key
[] = "key34567890";

2679 *
ovîÊow
;

2680 
memˇched_ªtu∫_t
 
rc
;

2681 
size_t
 
ovîÊowSize
;

2683 
comm™dFú°
[]= "set key34567890 0 0 ";

2684 
comm™dLa°
[] = " \r\n";

2685 
size_t
 
comm™dLígth
;

2686 
size_t
 
ã°Size
;

2688 
comm™dLígth
 = 
	`°æí
(
comm™dFú°
Ë+ såÀn(
comm™dLa°
) + 4;

2690 
ovîÊowSize
 = 
MEMCACHED_MAX_BUFFER
 - 
comm™dLígth
;

2692 
ã°Size

ovîÊowSize
 - 1;ÅestSize < overflowSize + 1;ÅestSize++)

2694 
ovîÊow

	`mÆloc
(
ã°Size
);

2695 
	`ã°_åue
(
ovîÊow
 !
NULL
);

2697 
	`mem£t
(
ovîÊow
, 'x', 
ã°Size
);

2698 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

2699 
ovîÊow
, 
ã°Size
, 0, 0);

2700 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2701 
	`‰ì
(
ovîÊow
);

2704  
TEST_SUCCESS
;

2705 
	}
}

2714 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug14
(
memˇched_°
 *
memc
)

2716 
size_t
 
£âî
= 1;

2717 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 
£âî
);

2718 
memˇched_ªtu∫_t
 
rc
;

2719 c⁄° *
key
= "foo";

2720 *
vÆue
;

2721 
size_t
 
vÆue_Àngth
= 18000;

2722 *
°rög
;

2723 
size_t
 
°rög_Àngth
;

2724 
uöt32_t
 
Êags
;

2725 
x
;

2726 
size_t
 
cuºít_Àngth
;

2728 
vÆue
 = (*)
	`mÆloc
(
vÆue_Àngth
);

2729 
	`ã°_åue
(
vÆue
);

2731 
x
0; x < 
vÆue_Àngth
; x++)

2732 
vÆue
[
x
] = () (x % 127);

2734 
cuºít_Àngth
0; cuºít_Àngth < 
vÆue_Àngth
; current_length++)

2736 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

2737 
vÆue
, 
cuºít_Àngth
,

2738 (
time_t
)0, (
uöt32_t
)0);

2739 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

2741 
°rög

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

2742 &
°rög_Àngth
, &
Êags
, &
rc
);

2744 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2745 
	`ã°_åue
(
°rög_Àngth
 =
cuºít_Àngth
);

2746 
	`ã°_åue
(!
	`memcmp
(
°rög
, 
vÆue
, 
°rög_Àngth
));

2748 
	`‰ì
(
°rög
);

2751 
	`‰ì
(
vÆue
);

2753  
TEST_SUCCESS
;

2754 
	}
}

2759 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug15
(
memˇched_°
 *
memc
)

2761 
uöt32_t
 
x
;

2762 
memˇched_ªtu∫_t
 
rc
;

2763 c⁄° *
key
= "mykey";

2764 *
vÆue
;

2765 
size_t
 
Àngth
;

2766 
uöt32_t
 
Êags
;

2768 
x
= 0; x < 2; x++)

2770 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

2771 
NULL
, 0,

2772 (
time_t
)0, (
uöt32_t
)0);

2774 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2776 
vÆue

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

2777 &
Àngth
, &
Êags
, &
rc
);

2779 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2780 
	`ã°_åue
(
vÆue
 =
NULL
);

2781 
	`ã°_åue
(
Àngth
 == 0);

2782 
	`ã°_åue
(
Êags
 == 0);

2784 
vÆue

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

2785 &
Àngth
, &
Êags
, &
rc
);

2787 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2788 
	`ã°_åue
(
vÆue
 =
NULL
);

2789 
	`ã°_åue
(
Àngth
 == 0);

2790 
	`ã°_åue
(
Êags
 == 0);

2793  
TEST_SUCCESS
;

2794 
	}
}

2797 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug16
(
memˇched_°
 *
memc
)

2799 
memˇched_ªtu∫_t
 
rc
;

2800 c⁄° *
key
= "mykey";

2801 *
vÆue
;

2802 
size_t
 
Àngth
;

2803 
uöt32_t
 
Êags
;

2805 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

2806 
NULL
, 0,

2807 (
time_t
)0, 
UINT32_MAX
);

2809 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2811 
vÆue

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

2812 &
Àngth
, &
Êags
, &
rc
);

2814 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2815 
	`ã°_åue
(
vÆue
 =
NULL
);

2816 
	`ã°_åue
(
Àngth
 == 0);

2817 
	`ã°_åue
(
Êags
 =
UINT32_MAX
);

2819  
TEST_SUCCESS
;

2820 
	}
}

2822 #i‡!
deföed
(
__sun
Ë&& !deföed(
__O≥nBSD__
)

2824 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug17
(
memˇched_°
 *
memc
)

2826 
memˇched_ªtu∫_t
 
rc
;

2827 c⁄° *
key
= "Ë±ÜÁì£";

2828 c⁄° *
vÆue
="Êàë‰ª¨Âú®ÁÇéÁÉ≠ÊäëÈÉÅÁöÑÂ§èÂ§©Êó†Ê≥ïÂÅúÊ≠¢Ë±ÜÁì£";

2829 *
vÆue2
;

2830 
size_t
 
Àngth
;

2831 
uöt32_t
 
Êags
;

2833 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

2834 
vÆue
, 
	`°æí
(value),

2835 (
time_t
)0, 0);

2837 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2839 
vÆue2

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

2840 &
Àngth
, &
Êags
, &
rc
);

2842 
	`ã°_åue
(
Àngth
==
	`°æí
(
vÆue
));

2843 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2844 
	`ã°_åue
(
	`memcmp
(
vÆue
, 
vÆue2
, 
Àngth
)==0);

2845 
	`‰ì
(
vÆue2
);

2847  
TEST_SUCCESS
;

2848 
	}
}

2855 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug19
(
memˇched_°
 *
nŸ_u£d
)

2857 
memˇched_°
 *
memc
;

2858 c⁄° 
memˇched_£rvî_°
 *
£rvî
;

2859 
memˇched_ªtu∫_t
 
ªs
;

2861 ()
nŸ_u£d
;

2863 
memc

	`memˇched_¸óã
(
NULL
);

2864 
	`memˇched_£rvî_add_wôh_weight
(
memc
, "localhost", 11311, 100);

2865 
	`memˇched_£rvî_add_wôh_weight
(
memc
, "localhost", 11312, 100);

2867 
£rvî

	`memˇched_£rvî_by_key
(
memc
, "a", 1, &
ªs
);

2869 
	`memˇched_‰ì
(
memc
);

2871  
TEST_SUCCESS
;

2872 
	}
}

2875 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug20
(
memˇched_°
 *
memc
)

2877 
memˇched_ªtu∫_t
 
°©us
;

2878 
memˇched_ªsu…_°
 *
ªsu…
, 
ªsu…_obj
;

2879 c⁄° *
key
 = "abc";

2880 
size_t
 
key_Àn
 = 
	`°æí
("abc");

2881 c⁄° *
vÆue
 = "foobar";

2882 
size_t
 
vÆue_Àn
 = 
	`°æí
(
vÆue
);

2884 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
, 1);

2886 
°©us
 = 
	`memˇched_£t
(
memc
, 
key
, 
key_Àn
, 
vÆue
, 
vÆue_Àn
, (
time_t
)0, (
uöt32_t
)0);

2887 
	`ã°_åue
(
°©us
 =
MEMCACHED_SUCCESS
);

2889 
°©us
 = 
	`memˇched_mgë
(
memc
, &
key
, &
key_Àn
, 1);

2890 
	`ã°_åue
(
°©us
 =
MEMCACHED_SUCCESS
);

2892 
ªsu…

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…_obj
);

2893 
	`ã°_åue
(
ªsu…
);

2895 
	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…_obj
);

2896 
ªsu…

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…_obj
, &
°©us
);

2898 
	`ã°_åue
(
ªsu…
);

2899 
	`ã°_åue
(
°©us
 =
MEMCACHED_SUCCESS
);

2901 
	`memˇched_ªsu…_‰ì
(
ªsu…
);

2903  
TEST_SUCCESS
;

2904 
	}
}

2906 
	~"këama_ã°_ˇ£s.h
"

2907 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug18
(
memˇched_°
 *
åash
)

2909 
memˇched_ªtu∫_t
 
rc
;

2910 
uöt64_t
 
vÆue
;

2911 
x
;

2912 
memˇched_£rvî_°
 *
£rvî_poﬁ
;

2913 
memˇched_°
 *
memc
;

2915 ()
åash
;

2917 
memc

	`memˇched_¸óã
(
NULL
);

2918 
	`ã°_åue
(
memc
);

2920 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 1);

2921 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2923 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
);

2924 
	`ã°_åue
(
vÆue
 == 1);

2926 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
, 
MEMCACHED_HASH_MD5
);

2927 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

2929 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
);

2930 
	`ã°_åue
(
vÆue
 =
MEMCACHED_HASH_MD5
);

2932 
£rvî_poﬁ
 = 
	`memˇched_£rvîs_∑r£
("10.0.1.1:11211 600,10.0.1.2:11211 300,10.0.1.3:11211 200,10.0.1.4:11211 350,10.0.1.5:11211 1000,10.0.1.6:11211 800,10.0.1.7:11211 950,10.0.1.8:11211 100");

2933 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

2936 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
memc
) == 8);

2937 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[0].
ho°«me
, "10.0.1.1") == 0);

2938 
	`ã°_åue
(
£rvî_poﬁ
[0].
p‹t
 == 11211);

2939 
	`ã°_åue
(
£rvî_poﬁ
[0].
weight
 == 600);

2940 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[2].
ho°«me
, "10.0.1.3") == 0);

2941 
	`ã°_åue
(
£rvî_poﬁ
[2].
p‹t
 == 11211);

2942 
	`ã°_åue
(
£rvî_poﬁ
[2].
weight
 == 200);

2943 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[7].
ho°«me
, "10.0.1.8") == 0);

2944 
	`ã°_åue
(
£rvî_poﬁ
[7].
p‹t
 == 11211);

2945 
	`ã°_åue
(
£rvî_poﬁ
[7].
weight
 == 100);

2950 
	`ã°_åue
(
	`memˇched_gíî©e_hash
(
memc
, (*)"VDEAAAAA", 8Ë=memc->
këama
.
c⁄töuum
[0].
ödex
);

2953 
x
= 0; x < 99; x++)

2955 
uöt32_t
 
£rvî_idx
 = 
	`memˇched_gíî©e_hash
(
memc
, 
këama_ã°_ˇ£s
[
x
].
key
, 
	`°æí
(ketama_test_cases[x].key));

2957 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

2958 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_idx
);

2960 c⁄° *
ho°«me
 = 
	`memˇched_£rvî_«me
(
ö°™˚
);

2961 
	`ã°_°rcmp
(
ho°«me
, 
këama_ã°_ˇ£s
[
x
].
£rvî
);

2964 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

2965 
	`memˇched_‰ì
(
memc
);

2967  
TEST_SUCCESS
;

2968 
	}
}

2978 
	$Áû
(
unu£d
)

2980 ()
unu£d
;

2981 
	`as£π
(0);

2982 
	}
}

2985 
ã°_ªtu∫_t
 
	$_u£r_suµlõd_bug21
(
memˇched_°
* 
memc
, 
size_t
 
key_cou¡
)

2987 #ifde‡
WIN32


2988 ()
memc
;

2989 ()
key_cou¡
;

2990  
TEST_SKIPPED
;

2992 
memˇched_ªtu∫_t
 
rc
;

2993 
x
;

2994 **
keys
;

2995 
size_t
* 
key_Àngths
;

2996 (*
ﬁdÆ¨m
)();

2997 
memˇched_°
 *
memc_˛⁄e
;

2999 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

3000 
	`ã°_åue
(
memc_˛⁄e
);

3003 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1);

3006 
rc

	`memˇched_Êush
(
memc_˛⁄e
, 0);

3007 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3009 
key_Àngths

	`ˇŒoc
(
key_cou¡
, (
size_t
));

3010 
keys

	`ˇŒoc
(
key_cou¡
, (*));

3011 
	`ã°_åue
(
keys
);

3012 
x
0; x < 
key_cou¡
; x++)

3014 
buf„r
[30];

3016 
	`¢¥ötf
(
buf„r
, 30, "%u", 
x
);

3017 
keys
[
x
]
	`°rdup
(
buf„r
);

3018 
key_Àngths
[
x
]
	`°æí
(
keys
[x]);

3021 
ﬁdÆ¨m

	`sig«l
(
SIGALRM
, 
Áû
);

3022 
	`Æ¨m
(5);

3024 
rc

	`memˇched_mgë
(
memc_˛⁄e
, (c⁄° **)
keys
, 
key_Àngths
, 
key_cou¡
);

3025 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3027 
	`Æ¨m
(0);

3028 
	`sig«l
(
SIGALRM
, 
ﬁdÆ¨m
);

3030 
size_t
 
keys_ªtu∫ed
;

3031 
	`ã°_åue
(
	`„tch_Æl_ªsu…s
(
memc
, &
keys_ªtu∫ed
Ë=
TEST_SUCCESS
);

3033 
x
0; x < 
key_cou¡
; x++)

3034 
	`‰ì
(
keys
[
x
]);

3035 
	`‰ì
(
keys
);

3036 
	`‰ì
(
key_Àngths
);

3038 
	`memˇched_‰ì
(
memc_˛⁄e
);

3040  
TEST_SUCCESS
;

3042 
	}
}

3044 
ã°_ªtu∫_t
 
	$u£r_suµlõd_bug21
(
memˇched_°
 *
memc
)

3046 
ã°_ªtu∫_t
 
ã°_rc
;

3047 
ã°_rc

	`¥e_bö¨y
(
memc
);

3049 i‡(
ã°_rc
 !
TEST_SUCCESS
)

3050  
ã°_rc
;

3052 
ã°_ªtu∫_t
 
rc
;

3055 
rc

	`_u£r_suµlõd_bug21
(
memc
, 10);

3056 
	`ã°_åue
(
rc
 =
TEST_SUCCESS
);

3059 
rc

	`_u£r_suµlõd_bug21
(
memc
, 1000);

3060 
	`ã°_åue
(
rc
 =
TEST_SUCCESS
);

3062  
TEST_SUCCESS
;

3063 
	}
}

3065 
ã°_ªtu∫_t
 
	$auto_eje˘_ho°s
(
memˇched_°
 *
åash
)

3067 (Ë
åash
;

3068 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
;

3070 
memˇched_ªtu∫_t
 
rc
;

3071 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

3072 
	`ã°_åue
(
memc
);

3074 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 1);

3075 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3077 
uöt64_t
 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
);

3078 
	`ã°_åue
(
vÆue
 == 1);

3080 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
, 
MEMCACHED_HASH_MD5
);

3081 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3083 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
);

3084 
	`ã°_åue
(
vÆue
 =
MEMCACHED_HASH_MD5
);

3087 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
, 1);

3088 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3090 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS
);

3091 
	`ã°_åue
(
vÆue
 == 1);

3093 
memˇched_£rvî_°
 *
£rvî_poﬁ
;

3094 
£rvî_poﬁ
 = 
	`memˇched_£rvîs_∑r£
("10.0.1.1:11211 600,10.0.1.2:11211 300,10.0.1.3:11211 200,10.0.1.4:11211 350,10.0.1.5:11211 1000,10.0.1.6:11211 800,10.0.1.7:11211 950,10.0.1.8:11211 100");

3095 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

3098 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
memc
) == 8);

3099 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[0].
ho°«me
, "10.0.1.1") == 0);

3100 
	`ã°_åue
(
£rvî_poﬁ
[0].
p‹t
 == 11211);

3101 
	`ã°_åue
(
£rvî_poﬁ
[0].
weight
 == 600);

3102 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[2].
ho°«me
, "10.0.1.3") == 0);

3103 
	`ã°_åue
(
£rvî_poﬁ
[2].
p‹t
 == 11211);

3104 
	`ã°_åue
(
£rvî_poﬁ
[2].
weight
 == 200);

3105 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[7].
ho°«me
, "10.0.1.8") == 0);

3106 
	`ã°_åue
(
£rvî_poﬁ
[7].
p‹t
 == 11211);

3107 
	`ã°_åue
(
£rvî_poﬁ
[7].
weight
 == 100);

3109 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 2);

3110 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚
)->
√xt_ªåy
 = 
	`time
(
NULL
) + 15;

3111 
memc
->
këama
.
√xt_di°ributi⁄_ªbuûd

	`time
(
NULL
) - 1;

3116 
size_t
 
x
= 0; x < 99; x++)

3118 
	`memˇched_aut€je˘
(
memc
);

3119 
uöt32_t
 
£rvî_idx

	`memˇched_gíî©e_hash
(
memc
, 
këama_ã°_ˇ£s
[
x
].
key
, 
	`°æí
(ketama_test_cases[x].key));

3120 
	`ã°_åue
(
£rvî_idx
 != 2);

3124 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚
)->
√xt_ªåy
 = 
	`time
(
NULL
) - 1;

3125 
memc
->
këama
.
√xt_di°ributi⁄_ªbuûd

	`time
(
NULL
) - 1;

3126 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
,

3127 
memc
->
di°ributi⁄
);

3128 
size_t
 
x
= 0; x < 99; x++)

3130 
uöt32_t
 
£rvî_idx
 = 
	`memˇched_gíî©e_hash
(
memc
, 
këama_ã°_ˇ£s
[
x
].
key
, 
	`°æí
(ketama_test_cases[x].key));

3132 
ö°™˚
=

3133 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_idx
);

3134 c⁄° *
ho°«me
 = 
	`memˇched_£rvî_«me
(
ö°™˚
);

3135 
	`ã°_åue
(
	`°rcmp
(
ho°«me
, 
këama_ã°_ˇ£s
[
x
].
£rvî
) == 0);

3138 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

3139 
	`memˇched_‰ì
(
memc
);

3141  
TEST_SUCCESS
;

3142 
	}
}

3144 
ã°_ªtu∫_t
 
	$ouçut_këama_weighãd_keys
(
memˇched_°
 *
åash
)

3146 (Ë
åash
;

3148 
memˇched_ªtu∫_t
 
rc
;

3149 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

3150 
	`ã°_åue
(
memc
);

3153 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 1);

3154 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3156 
uöt64_t
 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
);

3157 
	`ã°_åue
(
vÆue
 == 1);

3159 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
, 
MEMCACHED_HASH_MD5
);

3160 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3162 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
);

3163 
	`ã°_åue
(
vÆue
 =
MEMCACHED_HASH_MD5
);

3166 
	`ã°_åue
(
	`memˇched_behavi‹_£t_di°ributi⁄
(
memc
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
Ë=
MEMCACHED_SUCCESS
);

3168 
memˇched_£rvî_°
 *
£rvî_poﬁ
;

3169 
£rvî_poﬁ
 = 
	`memˇched_£rvîs_∑r£
("10.0.1.1:11211,10.0.1.2:11211,10.0.1.3:11211,10.0.1.4:11211,10.0.1.5:11211,10.0.1.6:11211,10.0.1.7:11211,10.0.1.8:11211,192.168.1.1:11211,192.168.100.1:11211");

3170 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

3174 
FILE
 *
Â
;

3175 i‡((
Â
 = 
	`f›í
("ketama_keys.txt", "w")))

3179 
	`¥ötf
("cannot writeÅo file ketama_keys.txt");

3180  
TEST_FAILURE
;

3183 
x
= 0; x < 10000; x++)

3185 
key
[10];

3186 
	`¢¥ötf
(
key
, (key), "%d", 
x
);

3188 
uöt32_t
 
£rvî_idx
 = 
	`memˇched_gíî©e_hash
(
memc
, 
key
, 
	`°æí
(key));

3189 *
ho°«me
 = 
memc
->
ho°s
[
£rvî_idx
].hostname;

3190 
ö_p‹t_t
 
p‹t
 = 
memc
->
ho°s
[
£rvî_idx
].port;

3191 
	`Ârötf
(
Â
, "key %†i†⁄ ho° /%s:%u\n", 
key
, 
ho°«me
, 
p‹t
);

3192 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

3193 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
ho°_ödex
);

3195 
	`f˛o£
(
Â
);

3197 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

3198 
	`memˇched_‰ì
(
memc
);

3200  
TEST_SUCCESS
;

3201 
	}
}

3204 
ã°_ªtu∫_t
 
	$ªsu…_°©ic
(
memˇched_°
 *
memc
)

3206 
memˇched_ªsu…_°
 
ªsu…
;

3207 
memˇched_ªsu…_°
 *
ªsu…_±r
;

3209 
ªsu…_±r

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…
);

3210 
	`ã°_åue
(
ªsu…
.
›ti⁄s
.
is_Æloˇãd
 =
Ál£
);

3211 
	`ã°_åue
(
	`memˇched_is_öôülized
(&
ªsu…
Ë=
åue
);

3212 
	`ã°_åue
(
ªsu…_±r
);

3213 
	`ã°_åue
(
ªsu…_±r
 =&
ªsu…
);

3215 
	`memˇched_ªsu…_‰ì
(&
ªsu…
);

3217 
	`ã°_åue
(
ªsu…
.
›ti⁄s
.
is_Æloˇãd
 =
Ál£
);

3218 
	`ã°_åue
(
	`memˇched_is_öôülized
(&
ªsu…
Ë=
Ál£
);

3220  
TEST_SUCCESS
;

3221 
	}
}

3223 
ã°_ªtu∫_t
 
	$ªsu…_Æloc
(
memˇched_°
 *
memc
)

3225 
memˇched_ªsu…_°
 *
ªsu…_±r
;

3227 
ªsu…_±r

	`memˇched_ªsu…_¸óã
(
memc
, 
NULL
);

3228 
	`ã°_åue
(
ªsu…_±r
);

3229 
	`ã°_åue
(
ªsu…_±r
->
›ti⁄s
.
is_Æloˇãd
 =
åue
);

3230 
	`ã°_åue
(
	`memˇched_is_öôülized
(
ªsu…_±r
Ë=
åue
);

3231 
	`memˇched_ªsu…_‰ì
(
ªsu…_±r
);

3233  
TEST_SUCCESS
;

3234 
	}
}

3236 
ã°_ªtu∫_t
 
	$˛ónup_∑ús
(
memˇched_°
 *
memc
)

3238 ()
memc
;

3239 
	`∑ús_‰ì
(
globÆ_∑ús
);

3241  
TEST_SUCCESS
;

3242 
	}
}

3244 
ã°_ªtu∫_t
 
	$gíî©e_∑ús
(
memˇched_°
 *
memc
)

3246 ()
memc
;

3247 
globÆ_∑ús

	`∑ús_gíî©e
(
GLOBAL_COUNT
, 400);

3248 
globÆ_cou¡

GLOBAL_COUNT
;

3250 
size_t
 
x
0; x < 
globÆ_cou¡
; x++)

3252 
globÆ_keys
[
x
]
globÆ_∑ús
[x].
key
;

3253 
globÆ_keys_Àngth
[
x
]
globÆ_∑ús
[x].
key_Àngth
;

3256  
TEST_SUCCESS
;

3257 
	}
}

3259 
ã°_ªtu∫_t
 
	$gíî©e_œrge_∑ús
(
memˇched_°
 *
memc
)

3261 ()
memc
;

3262 
globÆ_∑ús

	`∑ús_gíî©e
(
GLOBAL2_COUNT
, 
MEMCACHED_MAX_BUFFER
+10);

3263 
globÆ_cou¡

GLOBAL2_COUNT
;

3265 
size_t
 
x
0; x < 
globÆ_cou¡
; x++)

3267 
globÆ_keys
[
x
]
globÆ_∑ús
[x].
key
;

3268 
globÆ_keys_Àngth
[
x
]
globÆ_∑ús
[x].
key_Àngth
;

3271  
TEST_SUCCESS
;

3272 
	}
}

3274 
ã°_ªtu∫_t
 
	$gíî©e_d©a
(
memˇched_°
 *
memc
)

3276 
check_execuã

	`execuã_£t
(
memc
, 
globÆ_∑ús
, 
globÆ_cou¡
);

3278 
	`ã°_åue
(
check_execuã
 =
globÆ_cou¡
);

3280  
TEST_SUCCESS
;

3281 
	}
}

3283 
ã°_ªtu∫_t
 
	$gíî©e_d©a_wôh_°©s
(
memˇched_°
 *
memc
)

3285 
memˇched_°©_°
 *
°©_p
;

3286 
memˇched_ªtu∫_t
 
rc
;

3287 
uöt32_t
 
ho°_ödex
= 0;

3288 
check_execuã

	`execuã_£t
(
memc
, 
globÆ_∑ús
, 
globÆ_cou¡
);

3290 
	`ã°_åue
(
check_execuã
 =
globÆ_cou¡
);

3293 
°©_p

	`memˇched_°©
(
memc
, 
NULL
, &
rc
);

3294 
	`ã°_åue
(
°©_p
);

3296 
ho°_ödex
0; ho°_ödex < 
SERVERS_TO_CREATE
; host_index++)

3299 #ifde‡
DEBUG


3300 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

3301 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
ho°_ödex
);

3303 
	`¥ötf
("\n£rvî %u|%s|%u byãs: %Œu\n", 
ho°_ödex
, 
ö°™˚
->
ho°«me
, in°™˚->
p‹t
, ()(
°©_p
 + ho°_ödex)->
byãs
);

3305 
	`ã°_åue
(()(
°©_p
 + 
ho°_ödex
)->
byãs
);

3308 
	`memˇched_°©_‰ì
(
NULL
, 
°©_p
);

3310  
TEST_SUCCESS
;

3311 
	}
}

3312 
ã°_ªtu∫_t
 
	$gíî©e_buf„r_d©a
(
memˇched_°
 *
memc
)

3314 
size_t
 
œtch
= 0;

3316 
œtch
= 1;

3317 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 
œtch
);

3318 
	`gíî©e_d©a
(
memc
);

3320  
TEST_SUCCESS
;

3321 
	}
}

3323 
ã°_ªtu∫_t
 
	$gë_ªad_cou¡
(
memˇched_°
 *
memc
)

3325 
memˇched_ªtu∫_t
 
rc
;

3326 
memˇched_°
 *
memc_˛⁄e
;

3328 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

3329 
	`ã°_åue
(
memc_˛⁄e
);

3331 
	`memˇched_£rvî_add_wôh_weight
(
memc_˛⁄e
, "localhost", 6666, 0);

3334 *
ªtu∫_vÆue
;

3335 
size_t
 
ªtu∫_vÆue_Àngth
;

3336 
uöt32_t
 
Êags
;

3337 
uöt32_t
 
cou¡
;

3339 
size_t
 
x

cou¡
0; x < 
globÆ_cou¡
; x++)

3341 
ªtu∫_vÆue

	`memˇched_gë
(
memc_˛⁄e
, 
globÆ_keys
[
x
], 
globÆ_keys_Àngth
[x],

3342 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
);

3343 i‡(
rc
 =
MEMCACHED_SUCCESS
)

3345 
cou¡
++;

3346 i‡(
ªtu∫_vÆue
)

3347 
	`‰ì
(
ªtu∫_vÆue
);

3352 
	`memˇched_‰ì
(
memc_˛⁄e
);

3354  
TEST_SUCCESS
;

3355 
	}
}

3357 
ã°_ªtu∫_t
 
	$gë_ªad
(
memˇched_°
 *
memc
)

3359 
memˇched_ªtu∫_t
 
rc
;

3362 *
ªtu∫_vÆue
;

3363 
size_t
 
ªtu∫_vÆue_Àngth
;

3364 
uöt32_t
 
Êags
;

3366 
size_t
 
x
0; x < 
globÆ_cou¡
; x++)

3368 
ªtu∫_vÆue

	`memˇched_gë
(
memc
, 
globÆ_keys
[
x
], 
globÆ_keys_Àngth
[x],

3369 &
ªtu∫_vÆue_Àngth
, &
Êags
, &
rc
);

3374 i‡(
rc
 =
MEMCACHED_SUCCESS
 && 
ªtu∫_vÆue
)

3375 
	`‰ì
(
ªtu∫_vÆue
);

3379  
TEST_SUCCESS
;

3380 
	}
}

3382 
ã°_ªtu∫_t
 
	$mgë_ªad
(
memˇched_°
 *
memc
)

3384 
memˇched_ªtu∫_t
 
rc
;

3386 i‡(! 
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 4))

3387  
TEST_SKIPPED
;

3389 
rc

	`memˇched_mgë
(
memc
, 
globÆ_keys
, 
globÆ_keys_Àngth
, 
globÆ_cou¡
);

3391 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

3395 
size_t
 
keys_ªtu∫ed
;

3396 
	`ã°_åue
(
	`„tch_Æl_ªsu…s
(
memc
, &
keys_ªtu∫ed
Ë=
TEST_SUCCESS
);

3397 
buf„r
[30];

3398 
	`¢¥ötf
(
buf„r
, (buf„r), "%lu", ()
keys_ªtu∫ed
);

3399 
	`ã°_åue_gŸ
(
globÆ_cou¡
 =
keys_ªtu∫ed
, 
buf„r
);

3403  
TEST_SUCCESS
;

3404 
	}
}

3406 
ã°_ªtu∫_t
 
	$mgë_ªad_ªsu…
(
memˇched_°
 *
memc
)

3408 
memˇched_ªtu∫_t
 
rc
;

3410 i‡(! 
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 4))

3411  
TEST_SKIPPED
;

3413 
rc

	`memˇched_mgë
(
memc
, 
globÆ_keys
, 
globÆ_keys_Àngth
, 
globÆ_cou¡
);

3415 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

3419 
memˇched_ªsu…_°
 
ªsu…s_obj
;

3420 
memˇched_ªsu…_°
 *
ªsu…s
;

3422 
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

3424 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
rc
)))

3426 
	`ã°_åue
(
ªsu…s
);

3427 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3430 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

3433  
TEST_SUCCESS
;

3434 
	}
}

3436 
ã°_ªtu∫_t
 
	$mgë_ªad_fun˘i⁄
(
memˇched_°
 *
memc
)

3438 
memˇched_ªtu∫_t
 
rc
;

3439 
size_t
 
cou¡î
;

3440 
memˇched_execuã_‚
 
ˇŒbacks
[1];

3442 i‡(! 
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 4))

3443  
TEST_SKIPPED
;

3445 
rc

	`memˇched_mgë
(
memc
, 
globÆ_keys
, 
globÆ_keys_Àngth
, 
globÆ_cou¡
);

3447 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

3449 
ˇŒbacks
[0]&
ˇŒback_cou¡î
;

3450 
cou¡î
= 0;

3451 
rc

	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1);

3453  
TEST_SUCCESS
;

3454 
	}
}

3456 
ã°_ªtu∫_t
 
	$dñëe_gíî©e
(
memˇched_°
 *
memc
)

3458 
size_t
 
x
0; x < 
globÆ_cou¡
; x++)

3460 ()
	`memˇched_dñëe
(
memc
, 
globÆ_keys
[
x
], 
globÆ_keys_Àngth
[x], (
time_t
)0);

3463  
TEST_SUCCESS
;

3464 
	}
}

3466 
ã°_ªtu∫_t
 
	$dñëe_buf„r_gíî©e
(
memˇched_°
 *
memc
)

3468 
uöt64_t
 
œtch
= 0;

3470 
œtch
= 1;

3471 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 
œtch
);

3473 
size_t
 
x
0; x < 
globÆ_cou¡
; x++)

3475 ()
	`memˇched_dñëe
(
memc
, 
globÆ_keys
[
x
], 
globÆ_keys_Àngth
[x], (
time_t
)0);

3478  
TEST_SUCCESS
;

3479 
	}
}

3481 
ã°_ªtu∫_t
 
	$add_ho°_ã°1
(
memˇched_°
 *
memc
)

3483 
memˇched_ªtu∫_t
 
rc
;

3484 
£rvî«me
[]= "0.example.com";

3485 
memˇched_£rvî_°
 *
£rvîs
;

3487 
£rvîs

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(
NULL
, 
£rvî«me
, 400, 0, &
rc
);

3488 
	`ã°_åue
(
£rvîs
);

3489 
	`ã°_åue
(1 =
	`memˇched_£rvî_li°_cou¡
(
£rvîs
));

3491 
size_t
 
x
= 2; x < 20; x++)

3493 
buf„r
[
SMALL_STRING_LEN
];

3495 
	`¢¥ötf
(
buf„r
, 
SMALL_STRING_LEN
, "%lu.exam∂e.com", ()(400 +
x
));

3496 
£rvîs

	`memˇched_£rvî_li°_≠≥nd_wôh_weight
(£rvîs, 
buf„r
, 401, 0,

3497 &
rc
);

3498 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3499 
	`ã°_åue
(
x
 =
	`memˇched_£rvî_li°_cou¡
(
£rvîs
));

3502 
rc

	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

3503 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3504 
rc

	`memˇched_£rvî_push
(
memc
, 
£rvîs
);

3505 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3507 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

3509  
TEST_SUCCESS
;

3510 
	}
}

3512 
ã°_ªtu∫_t
 
	$¥e_n⁄block
(
memˇched_°
 *
memc
)

3514 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 0);

3516  
TEST_SUCCESS
;

3517 
	}
}

3519 
ã°_ªtu∫_t
 
	$¥e_c‹k
(
memˇched_°
 *
memc
)

3521 
memˇched_ªtu∫_t
 
rc
;

3522 
boﬁ
 
£t

åue
;

3524 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_CORK
, 
£t
);

3526 #ifde‡
__APPLE__


3527  
TEST_SKIPPED
;

3530 i‡(
rc
 =
MEMCACHED_SUCCESS
)

3531  
TEST_SUCCESS
;

3533  
TEST_SKIPPED
;

3534 
	}
}

3536 
ã°_ªtu∫_t
 
	$¥e_c‹k_™d_n⁄block
(
memˇched_°
 *
memc
)

3538 
ã°_ªtu∫_t
 
rc
;

3540 
rc

	`¥e_c‹k
(
memc
);

3542 #ifde‡
__APPLE__


3543  
TEST_SKIPPED
;

3546 i‡(
rc
 !
TEST_SUCCESS
)

3547  
rc
;

3549  
	`¥e_n⁄block
(
memc
);

3550 
	}
}

3552 
ã°_ªtu∫_t
 
	$¥e_n⁄block_bö¨y
(
memˇched_°
 *
memc
)

3554 
memˇched_ªtu∫_t
 
rc

MEMCACHED_FAILURE
;

3555 
memˇched_°
 *
memc_˛⁄e
;

3557 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

3558 
	`ã°_åue
(
memc_˛⁄e
);

3561 
	`memˇched_vîsi⁄
(
memc_˛⁄e
);

3563 i‡(
	`libmemˇched_utû_vîsi⁄_check
(
memc_˛⁄e
, 1, 4, 4))

3565 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 0);

3566 
rc
 = 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1);

3567 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3568 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
) == 1);

3572  
TEST_SKIPPED
;

3575 
	`memˇched_‰ì
(
memc_˛⁄e
);

3577  
rc
 =
MEMCACHED_SUCCESS
 ? 
TEST_SUCCESS
 : 
TEST_SKIPPED
;

3578 
	}
}

3580 
ã°_ªtu∫_t
 
	$¥e_murmur
(
memˇched_°
 *
memc
)

3582 #ifde‡
HAVE_MURMUR_HASH


3583 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_MURMUR
);

3584  
TEST_SUCCESS
;

3586 (Ë
memc
;

3587  
TEST_SKIPPED
;

3589 
	}
}

3591 
ã°_ªtu∫_t
 
	$¥e_jíkös
(
memˇched_°
 *
memc
)

3593 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_JENKINS
);

3595  
TEST_SUCCESS
;

3596 
	}
}

3599 
ã°_ªtu∫_t
 
	$¥e_md5
(
memˇched_°
 *
memc
)

3601 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_MD5
);

3603  
TEST_SUCCESS
;

3604 
	}
}

3606 
ã°_ªtu∫_t
 
	$¥e_¸c
(
memˇched_°
 *
memc
)

3608 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_CRC
);

3610  
TEST_SUCCESS
;

3611 
	}
}

3613 
ã°_ªtu∫_t
 
	$¥e_hsõh
(
memˇched_°
 *
memc
)

3615 #ifde‡
HAVE_HSIEH_HASH


3616 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_HSIEH
);

3617  
TEST_SUCCESS
;

3619 (Ë
memc
;

3620  
TEST_SKIPPED
;

3622 
	}
}

3624 
ã°_ªtu∫_t
 
	$¥e_hash_‚v1_64
(
memˇched_°
 *
memc
)

3626 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_MURMUR
);

3628  
TEST_SUCCESS
;

3629 
	}
}

3631 
ã°_ªtu∫_t
 
	$¥e_hash_‚v1a_64
(
memˇched_°
 *
memc
)

3633 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_FNV1A_64
);

3635  
TEST_SUCCESS
;

3636 
	}
}

3638 
ã°_ªtu∫_t
 
	$¥e_hash_‚v1_32
(
memˇched_°
 *
memc
)

3640 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_FNV1_32
);

3642  
TEST_SUCCESS
;

3643 
	}
}

3645 
ã°_ªtu∫_t
 
	$¥e_hash_‚v1a_32
(
memˇched_°
 *
memc
)

3647 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
, (
uöt64_t
)
MEMCACHED_HASH_FNV1A_32
);

3649  
TEST_SUCCESS
;

3650 
	}
}

3652 
ã°_ªtu∫_t
 
	$¥e_behavi‹_këama
(
memˇched_°
 *
memc
)

3654 
memˇched_ªtu∫_t
 
rc
;

3655 
uöt64_t
 
vÆue
;

3657 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA
, 1);

3658 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3660 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA
);

3661 
	`ã°_åue
(
vÆue
 == 1);

3663  
TEST_SUCCESS
;

3664 
	}
}

3666 
ã°_ªtu∫_t
 
	$¥e_behavi‹_këama_weighãd
(
memˇched_°
 *
memc
)

3668 
memˇched_ªtu∫_t
 
rc
;

3669 
uöt64_t
 
vÆue
;

3671 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 1);

3672 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3674 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
);

3675 
	`ã°_åue
(
vÆue
 == 1);

3677 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
, 
MEMCACHED_HASH_MD5
);

3678 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3680 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_HASH
);

3681 
	`ã°_åue
(
vÆue
 =
MEMCACHED_HASH_MD5
);

3683  
TEST_SUCCESS
;

3684 
	}
}

3689 
ã°_ªtu∫_t
 
	$¥e_bö¨y
(
memˇched_°
 *
memc
)

3691 
memˇched_ªtu∫_t
 
rc

MEMCACHED_FAILURE
;

3693 i‡(
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 4, 4))

3695 
rc
 = 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1);

3696 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3697 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
) == 1);

3700  
rc
 =
MEMCACHED_SUCCESS
 ? 
TEST_SUCCESS
 : 
TEST_SKIPPED
;

3701 
	}
}

3703 
ã°_ªtu∫_t
 
	$¥e_ß¶
(
memˇched_°
 *
memc
)

3705 
memˇched_ªtu∫_t
 
rc

MEMCACHED_FAILURE
;

3707 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


3708 c⁄° *
£rvî

	`gëív
("LIBMEMCACHED_TEST_SASL_SERVER");

3709 c⁄° *
u£r

	`gëív
("LIBMEMCACHED_TEST_SASL_USERNAME");

3710 c⁄° *
∑ss

	`gëív
("LIBMEMCACHED_TEST_SASL_PASSWORD");

3712 i‡(
£rvî
 !
NULL
 && 
u£r
 !NULL && 
∑ss
 != NULL)

3714 
memˇched_£rvî_°
 *
£rvîs

	`memˇched_£rvîs_∑r£
(
£rvî
);

3715 
	`ã°_åue
(
£rvîs
 !
NULL
);

3716 
	`memˇched_£rvîs_ª£t
(
memc
);

3717 
	`ã°_åue
(
	`memˇched_£rvî_push
(
memc
, 
£rvîs
Ë=
MEMCACHED_SUCCESS
);

3718 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1);

3719 
rc

	`memˇched_£t_ß¶_auth_d©a
(
memc
, 
u£r
, 
∑ss
);

3720 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3723 ()
memc
;

3726  
rc
 =
MEMCACHED_SUCCESS
 ? 
TEST_SUCCESS
 : 
TEST_SKIPPED
;

3727 
	}
}

3729 
ã°_ªtu∫_t
 
	$¥e_ª∂iˇti⁄
(
memˇched_°
 *
memc
)

3731 
ã°_ªtu∫_t
 
ã°_rc
;

3732 
ã°_rc

	`¥e_bö¨y
(
memc
);

3734 i‡(
ã°_rc
 !
TEST_SUCCESS
)

3735  
ã°_rc
;

3741 
memˇched_ªtu∫_t
 
rc
;

3742 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
,

3743 
	`memˇched_£rvî_cou¡
(
memc
) - 1);

3744 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3745 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
Ë=
	`memˇched_£rvî_cou¡
(memc) - 1);

3747  
rc
 =
MEMCACHED_SUCCESS
 ? 
TEST_SUCCESS
 : 
TEST_SKIPPED
;

3748 
	}
}

3751 
ã°_ªtu∫_t
 
	$¥e_ª∂iˇti⁄_noblock
(
memˇched_°
 *
memc
)

3753 
ã°_ªtu∫_t
 
rc
;

3755 
rc

	`¥e_ª∂iˇti⁄
(
memc
);

3756 i‡(
rc
 !
TEST_SUCCESS
)

3757  
rc
;

3759 
rc

	`¥e_n⁄block
(
memc
);

3761  
rc
;

3762 
	}
}

3765 
	$my_‰ì
(c⁄° 
memˇched_°
 *
±r
, *
mem
, *
c⁄ãxt
)

3767 ()
c⁄ãxt
;

3768 ()
±r
;

3769 #ifde‡
HARD_MALLOC_TESTS


3770 *
ªÆ_±r
(
mem
 =
NULL
Ë? mem : (*)((
ˇddr_t
)mem - 8);

3771 
	`‰ì
(
ªÆ_±r
);

3773 
	`‰ì
(
mem
);

3775 
	}
}

3778 *
	$my_mÆloc
(c⁄° 
memˇched_°
 *
±r
, c⁄° 
size_t
 
size
, *
c⁄ãxt
)

3780 ()
c⁄ãxt
;

3781 ()
±r
;

3782 #ifde‡
HARD_MALLOC_TESTS


3783 *
ªt

	`mÆloc
(
size
 + 8);

3784 i‡(
ªt
 !
NULL
)

3786 
ªt
(*)((
ˇddr_t
)ret + 8);

3789 *
ªt

	`mÆloc
(
size
);

3792 i‡(
ªt
 !
NULL
)

3794 
	`mem£t
(
ªt
, 0xff, 
size
);

3797  
ªt
;

3798 
	}
}

3801 *
	$my_ªÆloc
(c⁄° 
memˇched_°
 *
±r
, *
mem
, c⁄° 
size_t
 
size
, *
c⁄ãxt
)

3803 ()
c⁄ãxt
;

3804 #ifde‡
HARD_MALLOC_TESTS


3805 *
ªÆ_±r
(
mem
 =
NULL
Ë? NULL : (*)((
ˇddr_t
)mem - 8);

3806 *
nmem

	`ªÆloc
(
ªÆ_±r
, 
size
 + 8);

3808 *
ªt

NULL
;

3809 i‡(
nmem
 !
NULL
)

3811 
ªt
(*)((
ˇddr_t
)
nmem
 + 8);

3814  
ªt
;

3816 ()
±r
;

3817  
	`ªÆloc
(
mem
, 
size
);

3819 
	}
}

3822 *
	$my_ˇŒoc
(c⁄° 
memˇched_°
 *
±r
, 
size_t
 
√Àm
, c⁄° size_à
size
, *
c⁄ãxt
)

3824 ()
c⁄ãxt
;

3825 #ifde‡
HARD_MALLOC_TESTS


3826 *
mem

	`my_mÆloc
(
±r
, 
√Àm
 * 
size
);

3827 i‡(
mem
)

3829 
	`mem£t
(
mem
, 0, 
√Àm
 * 
size
);

3832  
mem
;

3834 ()
±r
;

3835  
	`ˇŒoc
(
√Àm
, 
size
);

3837 
	}
}

3840 
ã°_ªtu∫_t
 
	$£t_¥efix
(
memˇched_°
 *
memc
)

3842 
memˇched_ªtu∫_t
 
rc
;

3843 c⁄° *
key
= "mine";

3844 *
vÆue
;

3847 
vÆue

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, &
rc
);

3848 
	`ã°_åue
(
rc
 =
MEMCACHED_FAILURE
);

3851 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, (*)
key
);

3852 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
, 
	`memˇched_œ°_îr‹_mesßge
(
memc
));

3854 
vÆue

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, &
rc
);

3855 
	`ã°_åue
(
vÆue
);

3856 
	`ã°_åue
(
	`memcmp
(
vÆue
, 
key
, 4) == 0);

3857 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3860 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, 
NULL
);

3861 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3863 
vÆue

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, &
rc
);

3864 
	`ã°_Ál£
(
vÆue
);

3865 
	`ã°_åue
(
rc
 =
MEMCACHED_FAILURE
);

3868 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, (*)
key
);

3869 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3871 
vÆue

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, &
rc
);

3872 
	`ã°_åue
(
vÆue
);

3873 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3874 
	`ã°_åue
(
	`memcmp
(
vÆue
, 
key
, 4) == 0);

3878 
l⁄g_key
[255];

3879 
	`mem£t
(
l⁄g_key
, 0, 255);

3881 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, 
NULL
);

3882 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3884 
vÆue

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, &
rc
);

3885 
	`ã°_Ál£
(
vÆue
);

3886 
	`ã°_åue
(
rc
 =
MEMCACHED_FAILURE
);

3887 
	`ã°_åue
(
vÆue
 =
NULL
);

3891 
	`°∫˝y
(
l⁄g_key
, "Thisismorethentheallottednumberofcharacters", (long_key));

3892 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, 
l⁄g_key
);

3894 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3897 
	`°∫˝y
(
l⁄g_key
, "This is moreÅhenÅheállottedÇumber of characters", (long_key));

3898 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, 
l⁄g_key
);

3899 
	`ã°_åue
(
rc
 =
MEMCACHED_BAD_KEY_PROVIDED
);

3902 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 1);

3903 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3905 
	`°∫˝y
(
l⁄g_key
, "dog cat", (long_key));

3906 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_PREFIX_KEY
, 
l⁄g_key
);

3907 
	`ã°_åue
(
rc
 =
MEMCACHED_BAD_KEY_PROVIDED
);

3910  
TEST_SUCCESS
;

3911 
	}
}

3914 #ifde‡
MEMCACHED_ENABLE_DEPRECATED


3915 
ã°_ªtu∫_t
 
	$dïªˇãd_£t_mem‹y_Æloc
(
memˇched_°
 *
memc
)

3917 *
ã°_±r

NULL
;

3918 *
cb_±r

NULL
;

3920 
memˇched_mÆloc_‚
 
mÆloc_cb
=

3921 (
memˇched_mÆloc_‚
)
my_mÆloc
;

3922 
cb_±r
*(**)&
mÆloc_cb
;

3923 
memˇched_ªtu∫_t
 
rc
;

3925 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_MALLOC_FUNCTION
, 
cb_±r
);

3926 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3927 
ã°_±r

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_MALLOC_FUNCTION
, &
rc
);

3928 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3929 
	`ã°_åue
(
ã°_±r
 =
cb_±r
);

3933 
memˇched_ªÆloc_‚
 
ªÆloc_cb
=

3934 (
memˇched_ªÆloc_‚
)
my_ªÆloc
;

3935 
cb_±r
*(**)&
ªÆloc_cb
;

3936 
memˇched_ªtu∫_t
 
rc
;

3938 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_REALLOC_FUNCTION
, 
cb_±r
);

3939 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3940 
ã°_±r

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_REALLOC_FUNCTION
, &
rc
);

3941 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3942 
	`ã°_åue
(
ã°_±r
 =
cb_±r
);

3946 
memˇched_‰ì_‚
 
‰ì_cb
=

3947 (
memˇched_‰ì_‚
)
my_‰ì
;

3948 
cb_±r
*(**)&
‰ì_cb
;

3949 
memˇched_ªtu∫_t
 
rc
;

3951 
rc

	`memˇched_ˇŒback_£t
(
memc
, 
MEMCACHED_CALLBACK_FREE_FUNCTION
, 
cb_±r
);

3952 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3953 
ã°_±r

	`memˇched_ˇŒback_gë
(
memc
, 
MEMCACHED_CALLBACK_FREE_FUNCTION
, &
rc
);

3954 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

3955 
	`ã°_åue
(
ã°_±r
 =
cb_±r
);

3958  
TEST_SUCCESS
;

3959 
	}
}

3963 
ã°_ªtu∫_t
 
	$£t_mem‹y_Æloc
(
memˇched_°
 *
memc
)

3965 
memˇched_ªtu∫_t
 
rc
;

3966 
rc

	`memˇched_£t_mem‹y_Æloˇt‹s
(
memc
, 
NULL
, 
my_‰ì
,

3967 
my_ªÆloc
, 
my_ˇŒoc
, 
NULL
);

3968 
	`ã°_åue
(
rc
 =
MEMCACHED_FAILURE
);

3970 
rc

	`memˇched_£t_mem‹y_Æloˇt‹s
(
memc
, 
my_mÆloc
, 
my_‰ì
,

3971 
my_ªÆloc
, 
my_ˇŒoc
, 
NULL
);

3973 
memˇched_mÆloc_‚
 
mem_mÆloc
;

3974 
memˇched_‰ì_‚
 
mem_‰ì
;

3975 
memˇched_ªÆloc_‚
 
mem_ªÆloc
;

3976 
memˇched_ˇŒoc_‚
 
mem_ˇŒoc
;

3977 
	`memˇched_gë_mem‹y_Æloˇt‹s
(
memc
, &
mem_mÆloc
, &
mem_‰ì
,

3978 &
mem_ªÆloc
, &
mem_ˇŒoc
);

3980 
	`ã°_åue
(
mem_mÆloc
 =
my_mÆloc
);

3981 
	`ã°_åue
(
mem_ªÆloc
 =
my_ªÆloc
);

3982 
	`ã°_åue
(
mem_ˇŒoc
 =
my_ˇŒoc
);

3983 
	`ã°_åue
(
mem_‰ì
 =
my_‰ì
);

3985  
TEST_SUCCESS
;

3986 
	}
}

3988 
ã°_ªtu∫_t
 
	$íabÀ_c⁄si°ít_¸c
(
memˇched_°
 *
memc
)

3990 
ã°_ªtu∫_t
 
rc
;

3991 
memˇched_£rvî_di°ributi⁄_t
 
vÆue

MEMCACHED_DISTRIBUTION_CONSISTENT
;

3992 
memˇched_hash_t
 
hash
;

3993 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, 
vÆue
);

3994 i‡((
rc

	`¥e_¸c
(
memc
)Ë!
TEST_SUCCESS
)

3995  
rc
;

3997 
vÆue
(
memˇched_£rvî_di°ributi⁄_t
)
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
);

3998 
	`ã°_åue
(
vÆue
 =
MEMCACHED_DISTRIBUTION_CONSISTENT
);

4000 
hash
(
memˇched_hash_t
)
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
);

4002 i‡(
hash
 !
MEMCACHED_HASH_CRC
)

4003  
TEST_SKIPPED
;

4005  
TEST_SUCCESS
;

4006 
	}
}

4008 
ã°_ªtu∫_t
 
	$íabÀ_c⁄si°ít_hsõh
(
memˇched_°
 *
memc
)

4010 
ã°_ªtu∫_t
 
rc
;

4011 
memˇched_£rvî_di°ributi⁄_t
 
vÆue

MEMCACHED_DISTRIBUTION_CONSISTENT
;

4012 
memˇched_hash_t
 
hash
;

4013 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, 
vÆue
);

4014 i‡((
rc

	`¥e_hsõh
(
memc
)Ë!
TEST_SUCCESS
)

4015  
rc
;

4017 
vÆue
(
memˇched_£rvî_di°ributi⁄_t
)
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
);

4018 
	`ã°_åue
(
vÆue
 =
MEMCACHED_DISTRIBUTION_CONSISTENT
);

4020 
hash
(
memˇched_hash_t
)
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
);

4022 i‡(
hash
 !
MEMCACHED_HASH_HSIEH
)

4023  
TEST_SKIPPED
;

4026  
TEST_SUCCESS
;

4027 
	}
}

4029 
ã°_ªtu∫_t
 
	$íabÀ_ˇs
(
memˇched_°
 *
memc
)

4031 
£t
= 1;

4033 i‡(
	`libmemˇched_utû_vîsi⁄_check
(
memc
, 1, 2, 4))

4035 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
, 
£t
);

4037  
TEST_SUCCESS
;

4040  
TEST_SKIPPED
;

4041 
	}
}

4043 
ã°_ªtu∫_t
 
	$check_f‹_1_2_3
(
memˇched_°
 *
memc
)

4045 
	`memˇched_vîsi⁄
(
memc
);

4047 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

4048 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

4050 i‡((
ö°™˚
->
maj‹_vîsi⁄
 >1 && (ö°™˚->
mö‹_vîsi⁄
 =2 && in°™˚->
mi¸o_vîsi⁄
 >= 4))

4051 || 
ö°™˚
->
mö‹_vîsi⁄
 > 2)

4053  
TEST_SUCCESS
;

4056  
TEST_SKIPPED
;

4057 
	}
}

4059 
ã°_ªtu∫_t
 
	$¥e_unix_sockë
(
memˇched_°
 *
memc
)

4061 
memˇched_ªtu∫_t
 
rc
;

4062 
°©
 
buf
;

4064 
	`memˇched_£rvîs_ª£t
(
memc
);

4066 i‡(
	`°©
("/tmp/memˇched.sockë", &
buf
))

4067  
TEST_SKIPPED
;

4069 
rc

	`memˇched_£rvî_add_unix_sockë_wôh_weight
(
memc
, "/tmp/memcached.socket", 0);

4071  ( 
rc
 =
MEMCACHED_SUCCESS
 ? 
TEST_SUCCESS
 : 
TEST_FAILURE
 );

4072 
	}
}

4074 
ã°_ªtu∫_t
 
	$¥e_nodñay
(
memˇched_°
 *
memc
)

4076 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 0);

4077 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 0);

4079  
TEST_SUCCESS
;

4080 
	}
}

4082 
ã°_ªtu∫_t
 
	$¥e_£âimî
(
memˇched_°
 *
memc
)

4084 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SND_TIMEOUT
, 1000);

4085 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
, 1000);

4087  
TEST_SUCCESS
;

4088 
	}
}

4090 
ã°_ªtu∫_t
 
	$pﬁl_timeout
(
memˇched_°
 *
memc
)

4092 
size_t
 
timeout
;

4094 
timeout
= 100;

4096 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
, 
timeout
);

4098 
timeout
(
size_t
)
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
);

4100 
	`ã°_åue
(
timeout
 == 100);

4102  
TEST_SUCCESS
;

4103 
	}
}

4105 
ã°_ªtu∫_t
 
	$n‹ïly_ã°
(
memˇched_°
 *
memc
)

4107 
memˇched_ªtu∫_t
 
ªt
;

4108 
ªt

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
, 1);

4109 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
);

4110 
ªt

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 1);

4111 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
);

4112 
ªt

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
, 1);

4113 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
);

4114 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
) == 1);

4115 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
) == 1);

4116 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_SUPPORT_CAS
) == 1);

4118 
cou¡
=0; count < 5; ++count)

4120 
size_t
 
x
= 0; x < 100; ++x)

4122 
key
[10];

4123 
check_Àngth
(
size_t
)
	`¢¥ötf
(
key
, (key), "%lu", ()
x
);

4124 
	`ã°_Ál£
((
size_t
)
check_Àngth
 >(
key
) || check_length < 0);

4126 
size_t
 
Àn
(size_t)
check_Àngth
;

4128 
cou¡
)

4131 
ªt

	`memˇched_add
(
memc
, 
key
, 
Àn
, key,Üen, 0, 0);

4134 
ªt

	`memˇched_ª∂a˚
(
memc
, 
key
, 
Àn
, key,Üen, 0, 0);

4137 
ªt

	`memˇched_£t
(
memc
, 
key
, 
Àn
, key,Üen, 0, 0);

4140 
ªt

	`memˇched_≠≥nd
(
memc
, 
key
, 
Àn
, key,Üen, 0, 0);

4143 
ªt

	`memˇched_¥ïíd
(
memc
, 
key
, 
Àn
, key,Üen, 0, 0);

4146 
	`ã°_åue
(
cou¡
);

4149 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
 ||Ñë =
MEMCACHED_BUFFERED
);

4157 
no_msg
=0;

4158 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); ++x)

4160 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

4161 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
x
);

4162 
no_msg
+=()(
ö°™˚
->
curs‹_a˘ive
);

4165 
	`ã°_åue
(
no_msg
 == 0);

4166 
	`ã°_åue
(
	`memˇched_Êush_buf„rs
(
memc
Ë=
MEMCACHED_SUCCESS
);

4171 
size_t
 
x
= 0; x < 100; ++x)

4173 
key
[10];

4175 
check_Àngth
(
size_t
)
	`¢¥ötf
(
key
, (key), "%lu", ()
x
);

4177 
	`ã°_Ál£
((
size_t
)
check_Àngth
 >(
key
) || check_length < 0);

4179 
size_t
 
Àn
(size_t)
check_Àngth
;

4180 
size_t
 
Àngth
;

4181 
uöt32_t
 
Êags
;

4182 * 
vÆue
=
	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key),

4183 &
Àngth
, &
Êags
, &
ªt
);

4184 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
 && 
vÆue
 !
NULL
);

4185 
cou¡
)

4190 
	`ã°_åue
(
	`°∫cmp
(
vÆue
, 
key
, 
Àn
) == 0);

4191 
	`ã°_åue
(
Àn
 =
Àngth
);

4194 
	`ã°_åue
(
Àngth
 =
Àn
 * 2);

4197 
	`ã°_åue
(
Àngth
 =
Àn
 * 3);

4200 
	`ã°_åue
(
cou¡
);

4203 
	`‰ì
(
vÆue
);

4210 c⁄° * 
keys
[]= {"0"};

4211 
size_t
 
Àngths
[]= {1};

4212 
size_t
 
Àngth
;

4213 
uöt32_t
 
Êags
;

4214 
memˇched_ªsu…_°
 
ªsu…s_obj
;

4215 
memˇched_ªsu…_°
 *
ªsu…s
;

4216 
ªt

	`memˇched_mgë
(
memc
, 
keys
, 
Àngths
, 1);

4217 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
);

4219 
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc
, &
ªsu…s_obj
);

4220 
	`ã°_åue
(
ªsu…s
);

4221 
ªsu…s

	`memˇched_„tch_ªsu…
(
memc
, &
ªsu…s_obj
, &
ªt
);

4222 
	`ã°_åue
(
ªsu…s
);

4223 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
);

4224 
uöt64_t
 
ˇs

	`memˇched_ªsu…_ˇs
(
ªsu…s
);

4225 
	`memˇched_ªsu…_‰ì
(&
ªsu…s_obj
);

4227 
ªt

	`memˇched_ˇs
(
memc
, 
keys
[0], 
Àngths
[0], keys[0],Üígths[0], 0, 0, 
ˇs
);

4228 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
);

4234 
ªt

	`memˇched_ˇs
(
memc
, 
keys
[0], 
Àngths
[0], keys[0],Üígths[0], 0, 0, 
ˇs
);

4235 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
);

4236 
	`ã°_åue
(
	`memˇched_Êush_buf„rs
(
memc
Ë=
MEMCACHED_SUCCESS
);

4237 * 
vÆue
=
	`memˇched_gë
(
memc
, 
keys
[0], 
Àngths
[0], &
Àngth
, &
Êags
, &
ªt
);

4238 
	`ã°_åue
(
ªt
 =
MEMCACHED_SUCCESS
 && 
vÆue
 !
NULL
);

4239 
	`‰ì
(
vÆue
);

4241  
TEST_SUCCESS
;

4242 
	}
}

4244 
ã°_ªtu∫_t
 
	$™Æyzî_ã°
(
memˇched_°
 *
memc
)

4246 
memˇched_ªtu∫_t
 
rc
;

4247 
memˇched_°©_°
 *
memc_°©
;

4248 
memˇched_™Æysis_°
 *
ªp‹t
;

4250 
memc_°©

	`memˇched_°©
(
memc
, 
NULL
, &
rc
);

4251 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4252 
	`ã°_åue
(
memc_°©
);

4254 
ªp‹t

	`memˇched_™Æyze
(
memc
, 
memc_°©
, &
rc
);

4255 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4256 
	`ã°_åue
(
ªp‹t
);

4258 
	`‰ì
(
ªp‹t
);

4259 
	`memˇched_°©_‰ì
(
NULL
, 
memc_°©
);

4261  
TEST_SUCCESS
;

4262 
	}
}

4265 
memˇched_ªtu∫_t
 
	$ˇŒback_dump_cou¡î
(c⁄° 
memˇched_°
 *
±r
,

4266 c⁄° *
key
,

4267 
size_t
 
key_Àngth
,

4268 *
c⁄ãxt
)

4270 ()
±r
; ()
key
; ()
key_Àngth
;

4271 
size_t
 *
cou¡î
(size_à*)
c⁄ãxt
;

4273 *
cou¡î
= *counter + 1;

4275  
MEMCACHED_SUCCESS
;

4276 
	}
}

4278 
ã°_ªtu∫_t
 
	$dump_ã°
(
memˇched_°
 *
memc
)

4280 
memˇched_ªtu∫_t
 
rc
;

4281 
size_t
 
cou¡î
= 0;

4282 
memˇched_dump_‚
 
ˇŒbacks
[1];

4283 
ã°_ªtu∫_t
 
maö_rc
;

4285 
ˇŒbacks
[0]&
ˇŒback_dump_cou¡î
;

4288 i‡(
memc
->
Êags
.
bö¨y_¥Ÿocﬁ
)

4289  
TEST_SUCCESS
;

4291 
maö_rc

	`£t_ã°3
(
memc
);

4293 
	`ã°_åue
 (
maö_rc
 =
TEST_SUCCESS
);

4295 
rc

	`memˇched_dump
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1);

4296 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4299 
	`ã°_åue
(
cou¡î
 >= 32);

4301  
TEST_SUCCESS
;

4302 
	}
}

4304 #ifde‡
HAVE_LIBMEMCACHEDUTIL


4305 * 
	$c⁄√˘i⁄_ªÀa£
(*
¨g
)

4308 
memˇched_poﬁ_°
* 
poﬁ
;

4309 
memˇched_°
* 
mmc
;

4310 } *
ªsour˚

¨g
;

4312 
	`u¶ìp
(250);

4313 
	`as£π
(
	`memˇched_poﬁ_push
(
ªsour˚
->
poﬁ
,Ñesour˚->
mmc
Ë=
MEMCACHED_SUCCESS
);

4314  
¨g
;

4315 
	}
}

4317 
	#POOL_SIZE
 10

	)

4318 
ã°_ªtu∫_t
 
	$c⁄√˘i⁄_poﬁ_ã°
(
memˇched_°
 *
memc
)

4320 
memˇched_poﬁ_°
* 
poﬁ

	`memˇched_poﬁ_¸óã
(
memc
, 5, 
POOL_SIZE
);

4321 
	`ã°_åue
(
poﬁ
 !
NULL
);

4322 
memˇched_°
 *
mmc
[
POOL_SIZE
];

4323 
memˇched_ªtu∫_t
 
rc
;

4325 
size_t
 
x
0; x < 
POOL_SIZE
; ++x)

4327 
mmc
[
x
]
	`memˇched_poﬁ_p›
(
poﬁ
, 
Ál£
, &
rc
);

4328 
	`ã°_åue
(
mmc
[
x
] !
NULL
);

4329 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4332 
	`ã°_åue
(
	`memˇched_poﬁ_p›
(
poﬁ
, 
Ál£
, &
rc
Ë=
NULL
);

4333 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4335 
±hªad_t
 
tid
;

4337 
memˇched_poﬁ_°
* 
poﬁ
;

4338 
memˇched_°
* 
mmc
;

4339 } 
ôem
{ .
poﬁ
 =Öoﬁ, .
mmc
 = mmc[9] };

4340 
	`±hªad_¸óã
(&
tid
, 
NULL
, 
c⁄√˘i⁄_ªÀa£
, &
ôem
);

4341 
mmc
[9]
	`memˇched_poﬁ_p›
(
poﬁ
, 
åue
, &
rc
);

4342 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4343 
	`±hªad_joö
(
tid
, 
NULL
);

4344 
	`ã°_åue
(
mmc
[9] =
ôem
.mmc);

4345 c⁄° *
key
= "key";

4346 
size_t
 
keyÀn

	`°æí
(
key
);

4349 
rc

	`memˇched_£t
(
mmc
[0], 
key
, 
keyÀn
, "0", 1, 0, 0);

4350 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4352 
size_t
 
x
0; x < 
POOL_SIZE
; ++x)

4354 
uöt64_t
 
numbî_vÆue
;

4355 
rc

	`memˇched_ö¸emít
(
mmc
[
x
], 
key
, 
keyÀn
, 1, &
numbî_vÆue
);

4356 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4357 
	`ã°_åue
(
numbî_vÆue
 =(
x
+1));

4361 
size_t
 
x
0; x < 
POOL_SIZE
; ++x)

4363 
	`ã°_åue
(
	`memˇched_poﬁ_push
(
poﬁ
, 
mmc
[
x
]Ë=
MEMCACHED_SUCCESS
);

4371 
mmc
[0]
	`memˇched_poﬁ_p›
(
poﬁ
, 
Ál£
, &
rc
);

4372 
	`ã°_åue
(
mmc
[0] !
NULL
);

4374 
rc

	`memˇched_poﬁ_behavi‹_£t
(
poﬁ
, 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
, 9999);

4375 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4377 
mmc
[1]
	`memˇched_poﬁ_p›
(
poﬁ
, 
Ál£
, &
rc
);

4378 
	`ã°_åue
(
mmc
[1] !
NULL
);

4380 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
mmc
[1], 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
) == 9999);

4381 
	`ã°_åue
(
	`memˇched_poﬁ_push
(
poﬁ
, 
mmc
[1]Ë=
MEMCACHED_SUCCESS
);

4382 
	`ã°_åue
(
	`memˇched_poﬁ_push
(
poﬁ
, 
mmc
[0]Ë=
MEMCACHED_SUCCESS
);

4384 
mmc
[0]
	`memˇched_poﬁ_p›
(
poﬁ
, 
Ál£
, &
rc
);

4385 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
mmc
[0], 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
) == 9999);

4386 
	`ã°_åue
(
	`memˇched_poﬁ_push
(
poﬁ
, 
mmc
[0]Ë=
MEMCACHED_SUCCESS
);

4388 
	`ã°_åue
(
	`memˇched_poﬁ_de°roy
(
poﬁ
Ë=
memc
);

4390  
TEST_SUCCESS
;

4391 
	}
}

4393 
ã°_ªtu∫_t
 
	$utû_vîsi⁄_ã°
(
memˇched_°
 *
memc
)

4395 
boﬁ
 
if_suc˚ssful
;

4397 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 0, 0, 0);

4398 
	`ã°_åue
(
if_suc˚ssful
 =
åue
);

4400 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 9, 9, 9);

4403 i‡(
if_suc˚ssful
)

4405 
	`Ârötf
(
°dîr
, "\n----------------------------------------------------------------------\n");

4406 
	`Ârötf
(
°dîr
, "\nDumping Server Information\n\n");

4407 
memˇched_£rvî_‚
 
ˇŒbacks
[1];

4409 
ˇŒbacks
[0]
dump_£rvî_öf‹m©i⁄
;

4410 
	`memˇched_£rvî_curs‹
(
memc
, 
ˇŒbacks
, (*)
°dîr
, 1);

4411 
	`Ârötf
(
°dîr
, "\n----------------------------------------------------------------------\n");

4413 
	`ã°_åue
(
if_suc˚ssful
 =
Ál£
);

4415 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

4416 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

4418 
	`memˇched_vîsi⁄
(
memc
);

4421 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 
ö°™˚
->
maj‹_vîsi⁄
, in°™˚->
mö‹_vîsi⁄
, in°™˚->
mi¸o_vîsi⁄
);

4422 
	`ã°_åue
(
if_suc˚ssful
 =
åue
);

4424 i‡(
ö°™˚
->
mi¸o_vîsi⁄
 > 0)

4425 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 
ö°™˚
->
maj‹_vîsi⁄
, in°™˚->
mö‹_vîsi⁄
, (
uöt8_t
)(ö°™˚->
mi¸o_vîsi⁄
 -1));

4426 i‡(
ö°™˚
->
mö‹_vîsi⁄
 > 0)

4427 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 
ö°™˚
->
maj‹_vîsi⁄
, (
uöt8_t
)(ö°™˚->
mö‹_vîsi⁄
 - 1), in°™˚->
mi¸o_vîsi⁄
);

4428 i‡(
ö°™˚
->
maj‹_vîsi⁄
 > 0)

4429 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, (
uöt8_t
)(
ö°™˚
->
maj‹_vîsi⁄
 -1), in°™˚->
mö‹_vîsi⁄
, in°™˚->
mi¸o_vîsi⁄
);

4431 
	`ã°_åue
(
if_suc˚ssful
 =
åue
);

4433 i‡(
ö°™˚
->
mi¸o_vîsi⁄
 > 0)

4434 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 
ö°™˚
->
maj‹_vîsi⁄
, in°™˚->
mö‹_vîsi⁄
, (
uöt8_t
)(ö°™˚->
mi¸o_vîsi⁄
 +1));

4435 i‡(
ö°™˚
->
mö‹_vîsi⁄
 > 0)

4436 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, 
ö°™˚
->
maj‹_vîsi⁄
, (
uöt8_t
)(ö°™˚->
mö‹_vîsi⁄
 +1), in°™˚->
mi¸o_vîsi⁄
);

4437 i‡(
ö°™˚
->
maj‹_vîsi⁄
 > 0)

4438 
if_suc˚ssful

	`libmemˇched_utû_vîsi⁄_check
(
memc
, (
uöt8_t
)(
ö°™˚
->
maj‹_vîsi⁄
 +1), in°™˚->
mö‹_vîsi⁄
, in°™˚->
mi¸o_vîsi⁄
);

4440 
	`ã°_åue
(
if_suc˚ssful
 =
Ál£
);

4442  
TEST_SUCCESS
;

4443 
	}
}

4445 
ã°_ªtu∫_t
 
	$pög_ã°
(
memˇched_°
 *
memc
)

4447 
memˇched_ªtu∫_t
 
rc
;

4448 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

4449 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

4452 
	`ã°_åue
(
	`libmemˇched_utû_pög
(
	`memˇched_£rvî_«me
(
ö°™˚
),

4453 
	`memˇched_£rvî_p‹t
(
ö°™˚
), 
NULL
));

4455 
	`ã°_åue
(
	`libmemˇched_utû_pög
(
	`memˇched_£rvî_«me
(
ö°™˚
),

4456 
	`memˇched_£rvî_p‹t
(
ö°™˚
), &
rc
));

4458 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4460  
TEST_SUCCESS
;

4461 
	}
}

4466 
ã°_ªtu∫_t
 
	$hash_ßnôy_ã°
 (
memˇched_°
 *
memc
)

4468 ()
memc
;

4470 
	`as£π
(
MEMCACHED_HASH_DEFAULT
 == MEMCACHED_HASH_DEFAULT);

4471 
	`as£π
(
MEMCACHED_HASH_MD5
 == MEMCACHED_HASH_MD5);

4472 
	`as£π
(
MEMCACHED_HASH_CRC
 == MEMCACHED_HASH_CRC);

4473 
	`as£π
(
MEMCACHED_HASH_FNV1_64
 == MEMCACHED_HASH_FNV1_64);

4474 
	`as£π
(
MEMCACHED_HASH_FNV1A_64
 == MEMCACHED_HASH_FNV1A_64);

4475 
	`as£π
(
MEMCACHED_HASH_FNV1_32
 == MEMCACHED_HASH_FNV1_32);

4476 
	`as£π
(
MEMCACHED_HASH_FNV1A_32
 == MEMCACHED_HASH_FNV1A_32);

4477 #ifde‡
HAVE_HSIEH_HASH


4478 
	`as£π
(
MEMCACHED_HASH_HSIEH
 == MEMCACHED_HASH_HSIEH);

4480 
	`as£π
(
MEMCACHED_HASH_MURMUR
 == MEMCACHED_HASH_MURMUR);

4481 
	`as£π
(
MEMCACHED_HASH_JENKINS
 == MEMCACHED_HASH_JENKINS);

4482 
	`as£π
(
MEMCACHED_HASH_MAX
 == MEMCACHED_HASH_MAX);

4484  
TEST_SUCCESS
;

4485 
	}
}

4488 
ã°_ªtu∫_t
 
	$hsõh_avaibûôy_ã°
 (
memˇched_°
 *
memc
)

4490 
memˇched_ªtu∫_t
 
ex≥˘ed_rc

MEMCACHED_INVALID_ARGUMENTS
;

4491 #ifde‡
HAVE_HSIEH_HASH


4492 
ex≥˘ed_rc

MEMCACHED_SUCCESS
;

4494 
memˇched_ªtu∫_t
 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
,

4495 (
uöt64_t
)
MEMCACHED_HASH_HSIEH
);

4496 
	`ã°_åue
(
rc
 =
ex≥˘ed_rc
);

4498  
TEST_SUCCESS
;

4499 
	}
}

4501 
ã°_ªtu∫_t
 
	$murmur_avaibûôy_ã°
 (
memˇched_°
 *
memc
)

4503 
memˇched_ªtu∫_t
 
ex≥˘ed_rc

MEMCACHED_INVALID_ARGUMENTS
;

4504 #ifde‡
HAVE_MURMUR_HASH


4505 
ex≥˘ed_rc

MEMCACHED_SUCCESS
;

4507 
memˇched_ªtu∫_t
 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_HASH
,

4508 (
uöt64_t
)
MEMCACHED_HASH_MURMUR
);

4509 
	`ã°_åue
(
rc
 =
ex≥˘ed_rc
);

4511  
TEST_SUCCESS
;

4512 
	}
}

4514 
ã°_ªtu∫_t
 
	$⁄e_©_a_time_run
 (
memˇched_°
 *
memc
)

4516 
uöt32_t
 
x
;

4517 c⁄° **
±r
;

4518 ()
memc
;

4520 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4522 
uöt32_t
 
hash_vÆ
;

4524 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_DEFAULT
);

4525 
	`ã°_åue
(
⁄e_©_a_time_vÆues
[
x
] =
hash_vÆ
);

4528  
TEST_SUCCESS
;

4529 
	}
}

4531 
ã°_ªtu∫_t
 
	$md5_run
 (
memˇched_°
 *
memc
)

4533 
uöt32_t
 
x
;

4534 c⁄° **
±r
;

4535 ()
memc
;

4537 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4539 
uöt32_t
 
hash_vÆ
;

4541 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_MD5
);

4542 
	`ã°_åue
(
md5_vÆues
[
x
] =
hash_vÆ
);

4545  
TEST_SUCCESS
;

4546 
	}
}

4548 
ã°_ªtu∫_t
 
	$¸c_run
 (
memˇched_°
 *
memc
)

4550 
uöt32_t
 
x
;

4551 c⁄° **
±r
;

4552 ()
memc
;

4554 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4556 
uöt32_t
 
hash_vÆ
;

4558 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_CRC
);

4559 
	`ã°_åue
(
¸c_vÆues
[
x
] =
hash_vÆ
);

4562  
TEST_SUCCESS
;

4563 
	}
}

4565 
ã°_ªtu∫_t
 
	$‚v1_64_run
 (
memˇched_°
 *
memc
)

4567 
uöt32_t
 
x
;

4568 c⁄° **
±r
;

4569 ()
memc
;

4571 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4573 
uöt32_t
 
hash_vÆ
;

4575 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_FNV1_64
);

4576 
	`ã°_åue
(
‚v1_64_vÆues
[
x
] =
hash_vÆ
);

4579  
TEST_SUCCESS
;

4580 
	}
}

4582 
ã°_ªtu∫_t
 
	$‚v1a_64_run
 (
memˇched_°
 *
memc
)

4584 
uöt32_t
 
x
;

4585 c⁄° **
±r
;

4586 ()
memc
;

4588 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4590 
uöt32_t
 
hash_vÆ
;

4592 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_FNV1A_64
);

4593 
	`ã°_åue
(
‚v1a_64_vÆues
[
x
] =
hash_vÆ
);

4596  
TEST_SUCCESS
;

4597 
	}
}

4599 
ã°_ªtu∫_t
 
	$‚v1_32_run
 (
memˇched_°
 *
memc
)

4601 
uöt32_t
 
x
;

4602 c⁄° **
±r
;

4603 ()
memc
;

4605 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4607 
uöt32_t
 
hash_vÆ
;

4609 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_FNV1_32
);

4610 
	`ã°_åue
(
‚v1_32_vÆues
[
x
] =
hash_vÆ
);

4613  
TEST_SUCCESS
;

4614 
	}
}

4616 
ã°_ªtu∫_t
 
	$‚v1a_32_run
 (
memˇched_°
 *
memc
)

4618 
uöt32_t
 
x
;

4619 c⁄° **
±r
;

4620 ()
memc
;

4622 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4624 
uöt32_t
 
hash_vÆ
;

4626 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_FNV1A_32
);

4627 
	`ã°_åue
(
‚v1a_32_vÆues
[
x
] =
hash_vÆ
);

4630  
TEST_SUCCESS
;

4631 
	}
}

4633 
ã°_ªtu∫_t
 
	$hsõh_run
 (
memˇched_°
 *
memc
)

4635 
uöt32_t
 
x
;

4636 c⁄° **
±r
;

4637 ()
memc
;

4639 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4641 
uöt32_t
 
hash_vÆ
;

4643 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_HSIEH
);

4644 
	`ã°_åue
(
hsõh_vÆues
[
x
] =
hash_vÆ
);

4647  
TEST_SUCCESS
;

4648 
	}
}

4650 
ã°_ªtu∫_t
 
	$murmur_run
 (
memˇched_°
 *
memc
)

4652 #ifde‡
WORDS_BIGENDIAN


4653 ()
murmur_vÆues
;

4654  
TEST_SKIPPED
;

4656 
uöt32_t
 
x
;

4657 c⁄° **
±r
;

4658 ()
memc
;

4660 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4662 
uöt32_t
 
hash_vÆ
;

4664 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_MURMUR
);

4665 
	`ã°_åue
(
murmur_vÆues
[
x
] =
hash_vÆ
);

4668  
TEST_SUCCESS
;

4670 
	}
}

4672 
ã°_ªtu∫_t
 
	$jíkös_run
 (
memˇched_°
 *
memc
)

4674 
uöt32_t
 
x
;

4675 c⁄° **
±r
;

4676 ()
memc
;

4678 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4680 
uöt32_t
 
hash_vÆ
;

4682 
hash_vÆ

	`memˇched_gíî©e_hash_vÆue
(*
±r
, 
	`°æí
(*±r), 
MEMCACHED_HASH_JENKINS
);

4683 
	`ã°_åue
(
jíkös_vÆues
[
x
] =
hash_vÆ
);

4686  
TEST_SUCCESS
;

4687 
	}
}

4689 
uöt32_t
 
	$hash_md5_ã°_fun˘i⁄
(c⁄° *
°rög
, 
size_t
 
°rög_Àngth
, *
c⁄ãxt
)

4691 ()
c⁄ãxt
;

4692  
	`libhashkô_md5
(
°rög
, 
°rög_Àngth
);

4693 
	}
}

4695 
uöt32_t
 
	$hash_¸c_ã°_fun˘i⁄
(c⁄° *
°rög
, 
size_t
 
°rög_Àngth
, *
c⁄ãxt
)

4697 ()
c⁄ãxt
;

4698  
	`libhashkô_¸c32
(
°rög
, 
°rög_Àngth
);

4699 
	}
}

4701 
ã°_ªtu∫_t
 
	$memˇched_gë_hashkô_ã°
 (
memˇched_°
 *
memc
)

4703 
uöt32_t
 
x
;

4704 c⁄° **
±r
;

4705 c⁄° 
hashkô_°
 *
kô
;

4706 
hashkô_°
 
√w_kô
;

4707 
hashkô_ªtu∫_t
 
hash_rc
;

4709 
uöt32_t
 
md5_ho°s
[]= {4U, 1U, 0U, 1U, 4U, 2U, 0U, 3U, 0U, 0U, 3U, 1U, 0U, 0U, 1U, 3U, 0U, 0U, 0U, 3U, 1U, 0U, 4U, 4U, 3U};

4710 
uöt32_t
 
¸c_ho°s
[]= {2U, 4U, 1U, 0U, 2U, 4U, 4U, 4U, 1U, 2U, 3U, 4U, 3U, 4U, 1U, 3U, 3U, 2U, 0U, 0U, 0U, 1U, 2U, 4U, 0U};

4712 
kô

	`memˇched_gë_hashkô
(
memc
);

4714 
	`hashkô_˛⁄e
(&
√w_kô
, 
kô
);

4715 
hash_rc

	`hashkô_£t_cu°om_fun˘i⁄
(&
√w_kô
, 
hash_md5_ã°_fun˘i⁄
, 
NULL
);

4716 
	`ã°_åue
(
hash_rc
 =
HASHKIT_SUCCESS
);

4718 
	`memˇched_£t_hashkô
(
memc
, &
√w_kô
);

4723 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4725 
uöt32_t
 
hash_vÆ
;

4727 
hash_vÆ

	`hashkô_dige°
(
kô
, *
±r
, 
	`°æí
(*ptr));

4728 
	`ã°_åue
(
md5_vÆues
[
x
] =
hash_vÆ
);

4735 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4737 
uöt32_t
 
hash_vÆ
;

4739 
hash_vÆ

	`memˇched_gíî©e_hash
(
memc
, *
±r
, 
	`°æí
(*ptr));

4740 
	`ã°_åue
(
md5_ho°s
[
x
] =
hash_vÆ
);

4743 
hash_rc

	`hashkô_£t_cu°om_fun˘i⁄
(&
√w_kô
, 
hash_¸c_ã°_fun˘i⁄
, 
NULL
);

4744 
	`ã°_åue
(
hash_rc
 =
HASHKIT_SUCCESS
);

4746 
	`memˇched_£t_hashkô
(
memc
, &
√w_kô
);

4751 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4753 
uöt32_t
 
hash_vÆ
;

4755 
hash_vÆ

	`hashkô_dige°
(
kô
, *
±r
, 
	`°æí
(*ptr));

4756 
	`ã°_åue
(
¸c_vÆues
[
x
] =
hash_vÆ
);

4759 
±r

li°_to_hash
, 
x
= 0; *ptr;Ötr++, x++)

4761 
uöt32_t
 
hash_vÆ
;

4763 
hash_vÆ

	`memˇched_gíî©e_hash
(
memc
, *
±r
, 
	`°æí
(*ptr));

4764 
	`ã°_åue
(
¸c_ho°s
[
x
] =
hash_vÆ
);

4767  
TEST_SUCCESS
;

4768 
	}
}

4776 
ã°_ªtu∫_t
 
	$memˇched_gë_MEMCACHED_ERRNO
(
memˇched_°
 *
memc
)

4778 ()
memc
;

4779 
memˇched_°
 *
é_memc_h
;

4780 
memˇched_£rvî_°
 *
£rvîs
;

4782 c⁄° *
key
= "MemcachedLives";

4783 
size_t
 
Àn
;

4784 
uöt32_t
 
Êags
;

4785 
memˇched_ªtu∫
 
rc
;

4786 *
vÆue
;

4789 
é_memc_h

	`memˇched_¸óã
(
NULL
);

4790 
£rvîs

	`memˇched_£rvîs_∑r£
("localhost:9898,localhost:9899");

4791 
	`memˇched_£rvî_push
(
é_memc_h
, 
£rvîs
);

4792 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

4795 
vÆue

	`memˇched_gë
(
é_memc_h
, 
key
, 
	`°æí
(key), &
Àn
, &
Êags
, &
rc
);

4797 
	`ã°_Ál£
(
vÆue
);

4798 
	`ã°_åue
(
Àn
 == 0);

4799 
	`ã°_Ál£
(
rc
 =
MEMCACHED_SUCCESS
);

4801 
	`memˇched_‰ì
(
é_memc_h
);

4803  
TEST_SUCCESS
;

4804 
	}
}

4809 
ã°_ªtu∫_t
 
	$memˇched_gë_MEMCACHED_NOTFOUND
(
memˇched_°
 *
memc
)

4811 c⁄° *
key
= "MemcachedKeyNotEXIST";

4812 
size_t
 
Àn
;

4813 
uöt32_t
 
Êags
;

4814 
memˇched_ªtu∫
 
rc
;

4815 *
vÆue
;

4818 
vÆue

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key), &
Àn
, &
Êags
, &
rc
);

4820 
	`ã°_Ál£
(
vÆue
);

4821 
	`ã°_åue
(
Àn
 == 0);

4822 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTFOUND
);

4824  
TEST_SUCCESS
;

4825 
	}
}

4833 
ã°_ªtu∫_t
 
	$memˇched_gë_by_key_MEMCACHED_ERRNO
(
memˇched_°
 *
memc
)

4835 ()
memc
;

4836 
memˇched_°
 *
é_memc_h
;

4837 
memˇched_£rvî_°
 *
£rvîs
;

4839 c⁄° *
key
= "MemcachedLives";

4840 
size_t
 
Àn
;

4841 
uöt32_t
 
Êags
;

4842 
memˇched_ªtu∫
 
rc
;

4843 *
vÆue
;

4846 
é_memc_h

	`memˇched_¸óã
(
NULL
);

4847 
£rvîs

	`memˇched_£rvîs_∑r£
("localhost:9898,localhost:9899");

4848 
	`memˇched_£rvî_push
(
é_memc_h
, 
£rvîs
);

4849 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

4852 
vÆue

	`memˇched_gë_by_key
(
é_memc_h
, 
key
, 
	`°æí
(key), key, såÀn(key), &
Àn
, &
Êags
, &
rc
);

4854 
	`ã°_Ál£
(
vÆue
);

4855 
	`ã°_åue
(
Àn
 == 0);

4856 
	`ã°_Ál£
(
rc
 =
MEMCACHED_SUCCESS
);

4858 
	`memˇched_‰ì
(
é_memc_h
);

4860  
TEST_SUCCESS
;

4861 
	}
}

4866 
ã°_ªtu∫_t
 
	$memˇched_gë_by_key_MEMCACHED_NOTFOUND
(
memˇched_°
 *
memc
)

4868 c⁄° *
key
= "MemcachedKeyNotEXIST";

4869 
size_t
 
Àn
;

4870 
uöt32_t
 
Êags
;

4871 
memˇched_ªtu∫
 
rc
;

4872 *
vÆue
;

4875 
vÆue

	`memˇched_gë_by_key
(
memc
, 
key
, 
	`°æí
(key), key, såÀn(key), &
Àn
, &
Êags
, &
rc
);

4877 
	`ã°_Ál£
(
vÆue
);

4878 
	`ã°_åue
(
Àn
 == 0);

4879 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTFOUND
);

4881  
TEST_SUCCESS
;

4882 
	}
}

4885 
ã°_ªtu∫_t
 
	$këama_com∑tibûôy_libmemˇched
(
memˇched_°
 *
åash
)

4887 
memˇched_ªtu∫_t
 
rc
;

4888 
uöt64_t
 
vÆue
;

4889 
x
;

4890 
memˇched_£rvî_°
 *
£rvî_poﬁ
;

4891 
memˇched_°
 *
memc
;

4893 ()
åash
;

4895 
memc

	`memˇched_¸óã
(
NULL
);

4896 
	`ã°_åue
(
memc
);

4898 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 1);

4899 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4901 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
);

4902 
	`ã°_åue
(
vÆue
 == 1);

4904 
	`ã°_åue
(
	`memˇched_behavi‹_£t_di°ributi⁄
(
memc
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
Ë=
MEMCACHED_SUCCESS
);

4905 
	`ã°_åue
(
	`memˇched_behavi‹_gë_di°ributi⁄
(
memc
Ë=
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA
);

4908 
£rvî_poﬁ
 = 
	`memˇched_£rvîs_∑r£
("10.0.1.1:11211 600,10.0.1.2:11211 300,10.0.1.3:11211 200,10.0.1.4:11211 350,10.0.1.5:11211 1000,10.0.1.6:11211 800,10.0.1.7:11211 950,10.0.1.8:11211 100");

4909 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

4912 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
memc
) == 8);

4913 
	`ã°_°rcmp
(
£rvî_poﬁ
[0].
ho°«me
, "10.0.1.1");

4914 
	`ã°_åue
(
£rvî_poﬁ
[0].
p‹t
 == 11211);

4915 
	`ã°_åue
(
£rvî_poﬁ
[0].
weight
 == 600);

4916 
	`ã°_°rcmp
(
£rvî_poﬁ
[2].
ho°«me
, "10.0.1.3");

4917 
	`ã°_åue
(
£rvî_poﬁ
[2].
p‹t
 == 11211);

4918 
	`ã°_åue
(
£rvî_poﬁ
[2].
weight
 == 200);

4919 
	`ã°_°rcmp
(
£rvî_poﬁ
[7].
ho°«me
, "10.0.1.8");

4920 
	`ã°_åue
(
£rvî_poﬁ
[7].
p‹t
 == 11211);

4921 
	`ã°_åue
(
£rvî_poﬁ
[7].
weight
 == 100);

4926 
	`ã°_åue
(
	`memˇched_gíî©e_hash
(
memc
, (*)"VDEAAAAA", 8Ë=memc->
këama
.
c⁄töuum
[0].
ödex
);

4929 
x
= 0; x < 99; x++)

4931 
uöt32_t
 
£rvî_idx
 = 
	`memˇched_gíî©e_hash
(
memc
, 
këama_ã°_ˇ£s
[
x
].
key
, 
	`°æí
(ketama_test_cases[x].key));

4932 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

4933 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_idx
);

4934 c⁄° *
ho°«me
 = 
	`memˇched_£rvî_«me
(
ö°™˚
);

4936 
	`ã°_°rcmp
(
ho°«me
, 
këama_ã°_ˇ£s
[
x
].
£rvî
);

4939 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

4940 
	`memˇched_‰ì
(
memc
);

4942  
TEST_SUCCESS
;

4943 
	}
}

4945 
ã°_ªtu∫_t
 
	$këama_com∑tibûôy_•ymemˇched
(
memˇched_°
 *
åash
)

4947 
memˇched_ªtu∫_t
 
rc
;

4948 
uöt64_t
 
vÆue
;

4949 
memˇched_£rvî_°
 *
£rvî_poﬁ
;

4950 
memˇched_°
 *
memc
;

4952 ()
åash
;

4954 
memc

	`memˇched_¸óã
(
NULL
);

4955 
	`ã°_åue
(
memc
);

4957 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
, 1);

4958 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

4960 
vÆue

	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED
);

4961 
	`ã°_åue
(
vÆue
 == 1);

4963 
	`ã°_åue
(
	`memˇched_behavi‹_£t_di°ributi⁄
(
memc
, 
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
Ë=
MEMCACHED_SUCCESS
);

4964 
	`ã°_åue
(
	`memˇched_behavi‹_gë_di°ributi⁄
(
memc
Ë=
MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY
);

4966 
£rvî_poﬁ
 = 
	`memˇched_£rvîs_∑r£
("10.0.1.1:11211 600,10.0.1.2:11211 300,10.0.1.3:11211 200,10.0.1.4:11211 350,10.0.1.5:11211 1000,10.0.1.6:11211 800,10.0.1.7:11211 950,10.0.1.8:11211 100");

4967 
	`as£π
(
£rvî_poﬁ
);

4968 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

4971 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
memc
) == 8);

4972 
	`ã°_°rcmp
(
£rvî_poﬁ
[0].
ho°«me
, "10.0.1.1");

4973 
	`ã°_åue
(
£rvî_poﬁ
[0].
p‹t
 == 11211);

4974 
	`ã°_åue
(
£rvî_poﬁ
[0].
weight
 == 600);

4975 
	`ã°_°rcmp
(
£rvî_poﬁ
[2].
ho°«me
, "10.0.1.3");

4976 
	`ã°_åue
(
£rvî_poﬁ
[2].
p‹t
 == 11211);

4977 
	`ã°_åue
(
£rvî_poﬁ
[2].
weight
 == 200);

4978 
	`ã°_°rcmp
(
£rvî_poﬁ
[7].
ho°«me
, "10.0.1.8");

4979 
	`ã°_åue
(
£rvî_poﬁ
[7].
p‹t
 == 11211);

4980 
	`ã°_åue
(
£rvî_poﬁ
[7].
weight
 == 100);

4985 
	`ã°_åue
(
	`memˇched_gíî©e_hash
(
memc
, (*)"VDEAAAAA", 8Ë=memc->
këama
.
c⁄töuum
[0].
ödex
);

4988 
uöt32_t
 
x
= 0; x < 99; x++)

4990 
uöt32_t
 
£rvî_idx

	`memˇched_gíî©e_hash
(
memc
, 
këama_ã°_ˇ£s_•y
[
x
].
key
, 
	`°æí
(ketama_test_cases_spy[x].key));

4992 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

4993 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_idx
);

4995 c⁄° *
ho°«me

	`memˇched_£rvî_«me
(
ö°™˚
);

4997 
	`ã°_°rcmp
(
ho°«me
, 
këama_ã°_ˇ£s_•y
[
x
].
£rvî
);

5000 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

5001 
	`memˇched_‰ì
(
memc
);

5003  
TEST_SUCCESS
;

5004 
	}
}

5006 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_434484
(
memˇched_°
 *
memc
)

5008 
ã°_ªtu∫_t
 
ã°_rc
;

5009 
ã°_rc

	`¥e_bö¨y
(
memc
);

5011 i‡(
ã°_rc
 !
TEST_SUCCESS
)

5012  
ã°_rc
;

5014 
memˇched_ªtu∫_t
 
ªt
;

5015 c⁄° *
key
= "regression_bug_434484";

5016 
size_t
 
keyÀn

	`°æí
(
key
);

5018 
ªt

	`memˇched_≠≥nd
(
memc
, 
key
, 
keyÀn
, key, keylen, 0, 0);

5019 
	`ã°_åue
(
ªt
 =
MEMCACHED_NOTSTORED
);

5021 
size_t
 
size
= 2048 * 1024;

5022 *
d©a

	`ˇŒoc
(1, 
size
);

5023 
	`ã°_åue
(
d©a
 !
NULL
);

5024 
ªt

	`memˇched_£t
(
memc
, 
key
, 
keyÀn
, 
d©a
, 
size
, 0, 0);

5025 
	`ã°_åue
(
ªt
 =
MEMCACHED_E2BIG
);

5026 
	`‰ì
(
d©a
);

5028  
TEST_SUCCESS
;

5029 
	}
}

5031 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_434843
(
memˇched_°
 *
memc
)

5033 
ã°_ªtu∫_t
 
ã°_rc
;

5034 
ã°_rc

	`¥e_bö¨y
(
memc
);

5036 i‡(
ã°_rc
 !
TEST_SUCCESS
)

5037  
ã°_rc
;

5039 
memˇched_ªtu∫_t
 
rc
;

5040 
size_t
 
cou¡î
= 0;

5041 
memˇched_execuã_‚
 
ˇŒbacks
[1]{ [0]&
ˇŒback_cou¡î
 };

5049 
uöt32_t
 
numbî_of_ho°s

	`memˇched_£rvî_cou¡
(
memc
);

5050 
memc
->
numbî_of_ho°s
= 1;

5051 c⁄° 
size_t
 
max_keys
= 1024;

5052 **
keys

	`ˇŒoc
(
max_keys
, (*));

5053 
size_t
 *
key_Àngth
=
	`ˇŒoc
(
max_keys
, (size_t));

5055 
size_t
 
x
0; x < 
max_keys
; ++x)

5057 
k
[251];

5059 
key_Àngth
[
x
](
size_t
)
	`¢¥ötf
(
k
, (k), "0200%lu", ()x);

5060 
keys
[
x
]
	`°rdup
(
k
);

5061 
	`ã°_åue
(
keys
[
x
] !
NULL
);

5068 
size_t
 
y
= 0; y < 2; y++)

5070 
rc

	`memˇched_mgë
(
memc
, (c⁄° **)
keys
, 
key_Àngth
, 
max_keys
);

5071 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5072 
rc

	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1);

5074 i‡(
y
 == 0)

5077 
blob
[1024]= { 0 };

5079 
	`ã°_åue
(
cou¡î
 == 0);

5081 
size_t
 
x
0; x < 
max_keys
; ++x)

5083 
rc

	`memˇched_add
(
memc
, 
keys
[
x
], 
key_Àngth
[x],

5084 
blob
, (blob), 0, 0);

5085 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

5091 
	`ã°_åue
(
cou¡î
 =
max_keys
);

5096 
size_t
 
x
0; x < 
max_keys
; ++x)

5098 
	`‰ì
(
keys
[
x
]);

5100 
	`‰ì
(
keys
);

5101 
	`‰ì
(
key_Àngth
);

5103 
memc
->
numbî_of_ho°s
=Çumber_of_hosts;

5105  
TEST_SUCCESS
;

5106 
	}
}

5108 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_434843_buf„ªd
(
memˇched_°
 *
memc
)

5110 
memˇched_ªtu∫_t
 
rc
;

5111 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 1);

5112 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5114  
	`ªgªssi⁄_bug_434843
(
memc
);

5115 
	}
}

5117 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_421108
(
memˇched_°
 *
memc
)

5119 
memˇched_ªtu∫_t
 
rc
;

5120 
memˇched_°©_°
 *
memc_°©

	`memˇched_°©
(
memc
, 
NULL
, &
rc
);

5121 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5123 *
byãs

	`memˇched_°©_gë_vÆue
(
memc
, 
memc_°©
, "byãs", &
rc
);

5124 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5125 
	`ã°_åue
(
byãs
 !
NULL
);

5126 *
byãs_ªad

	`memˇched_°©_gë_vÆue
(
memc
, 
memc_°©
,

5127 "byãs_ªad", &
rc
);

5128 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5129 
	`ã°_åue
(
byãs_ªad
 !
NULL
);

5131 *
byãs_wrôãn

	`memˇched_°©_gë_vÆue
(
memc
, 
memc_°©
,

5132 "byãs_wrôãn", &
rc
);

5133 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5134 
	`ã°_åue
(
byãs_wrôãn
 !
NULL
);

5136 
	`ã°_åue
(
	`°rcmp
(
byãs
, 
byãs_ªad
) != 0);

5137 
	`ã°_åue
(
	`°rcmp
(
byãs
, 
byãs_wrôãn
) != 0);

5140 
	`‰ì
(
byãs
);

5141 
	`‰ì
(
byãs_ªad
);

5142 
	`‰ì
(
byãs_wrôãn
);

5143 
	`memˇched_°©_‰ì
(
NULL
, 
memc_°©
);

5145  
TEST_SUCCESS
;

5146 
	}
}

5159 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_442914
(
memˇched_°
 *
memc
)

5161 
memˇched_ªtu∫_t
 
rc
;

5162 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
, 1);

5163 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5164 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 1);

5166 
uöt32_t
 
numbî_of_ho°s

	`memˇched_£rvî_cou¡
(
memc
);

5167 
memc
->
numbî_of_ho°s
= 1;

5169 
k
[250];

5170 
size_t
 
Àn
;

5172 
uöt32_t
 
x
= 0; x < 250; ++x)

5174 
Àn
(
size_t
)
	`¢¥ötf
(
k
, (k), "%0250u", 
x
);

5175 
rc

	`memˇched_dñëe
(
memc
, 
k
, 
Àn
, 0);

5176 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

5179 ()
	`¢¥ötf
(
k
, (k), "%037u", 251U);

5180 
Àn

	`°æí
(
k
);

5182 
rc

	`memˇched_dñëe
(
memc
, 
k
, 
Àn
, 0);

5183 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

5185 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
, 0);

5186 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5187 
rc

	`memˇched_dñëe
(
memc
, 
k
, 
Àn
, 0);

5188 
	`ã°_åue
(
rc
 =
MEMCACHED_NOTFOUND
);

5190 
memc
->
numbî_of_ho°s
=Çumber_of_hosts;

5192  
TEST_SUCCESS
;

5193 
	}
}

5195 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_447342
(
memˇched_°
 *
memc
)

5197 
memˇched_£rvî_ö°™˚_°
 
ö°™˚_⁄e
;

5198 
memˇched_£rvî_ö°™˚_°
 
ö°™˚_two
;

5200 i‡(
	`memˇched_£rvî_cou¡
(
memc
Ë< 3 || 
	`¥e_ª∂iˇti⁄
(memcË!
TEST_SUCCESS
)

5201  
TEST_SKIPPED
;

5203 
memˇched_ªtu∫_t
 
rc
;

5205 
rc

	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 2);

5206 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5208 c⁄° 
size_t
 
max_keys
= 100;

5209 **
keys

	`ˇŒoc
(
max_keys
, (*));

5210 
size_t
 *
key_Àngth

	`ˇŒoc
(
max_keys
, (size_t));

5212 
size_t
 
x
0; x < 
max_keys
; ++x)

5214 
k
[251];

5216 
key_Àngth
[
x
](
size_t
)
	`¢¥ötf
(
k
, (k), "0200%lu", ()x);

5217 
keys
[
x
]
	`°rdup
(
k
);

5218 
	`ã°_åue
(
keys
[
x
] !
NULL
);

5219 
rc

	`memˇched_£t
(
memc
, 
k
, 
key_Àngth
[
x
], k, key_length[x], 0, 0);

5220 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5236 
	`memˇched_quô
(
memc
);

5241 
rc

	`memˇched_mgë
(
memc
, (c⁄° * c⁄° *)
keys
, 
key_Àngth
, 
max_keys
);

5242 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5244 
size_t
 
cou¡î
= 0;

5245 
memˇched_execuã_‚
 
ˇŒbacks
[1]{ [0]&
ˇŒback_cou¡î
 };

5246 
rc

	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1);

5248 
	`ã°_åue
(
cou¡î
 =
max_keys
);

5250 
	`memˇched_quô
(
memc
);

5257 
ö°™˚_⁄e

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

5258 
ö°™˚_two

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 2);

5259 
ö_p‹t_t
 
p‹t0

ö°™˚_⁄e
->
p‹t
;

5260 
ö_p‹t_t
 
p‹t2

ö°™˚_two
->
p‹t
;

5262 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_⁄e
)->
p‹t
= 0;

5263 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_two
)->
p‹t
= 0;

5265 
rc

	`memˇched_mgë
(
memc
, (c⁄° * c⁄° *)
keys
, 
key_Àngth
, 
max_keys
);

5266 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5268 
cou¡î
= 0;

5269 
rc

	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1);

5270 
	`ã°_åue
(
cou¡î
 =()
max_keys
);

5273 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_⁄e
)->
p‹t

p‹t0
;

5274 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_two
)->
p‹t

p‹t2
;

5276 
	`memˇched_quô
(
memc
);

5279 
size_t
 
x
0; x < 
max_keys
; ++x)

5281 i‡(
x
 & 1)

5283 
rc

	`memˇched_dñëe
(
memc
, 
keys
[
x
], 
key_Àngth
[x], 0);

5284 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5288 
	`memˇched_quô
(
memc
);

5289 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_⁄e
)->
p‹t
= 0;

5290 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_two
)->
p‹t
= 0;

5293 
rc

	`memˇched_mgë
(
memc
, (c⁄° * c⁄° *)
keys
, 
key_Àngth
, 
max_keys
);

5294 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5296 
cou¡î
= 0;

5297 
rc

	`memˇched_„tch_execuã
(
memc
, 
ˇŒbacks
, (*)&
cou¡î
, 1);

5298 
	`ã°_åue
(
cou¡î
 =()(
max_keys
 >> 1));

5301 
size_t
 
x
0; x < 
max_keys
; ++x)

5303 
	`‰ì
(
keys
[
x
]);

5305 
	`‰ì
(
keys
);

5306 
	`‰ì
(
key_Àngth
);

5309 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_⁄e
)->
p‹t

p‹t0
;

5310 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚_two
)->
p‹t

p‹t2
;

5312  
TEST_SUCCESS
;

5313 
	}
}

5315 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_463297
(
memˇched_°
 *
memc
)

5317 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

5318 
	`ã°_åue
(
memc_˛⁄e
 !
NULL
);

5319 
	`ã°_åue
(
	`memˇched_vîsi⁄
(
memc_˛⁄e
Ë=
MEMCACHED_SUCCESS
);

5321 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

5322 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc_˛⁄e
, 0);

5324 i‡(
ö°™˚
->
maj‹_vîsi⁄
 > 1 ||

5325 (
ö°™˚
->
maj‹_vîsi⁄
 == 1 &&

5326 
ö°™˚
->
mö‹_vîsi⁄
 > 2))

5329 
memˇched_°
 *
bö_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

5330 
	`ã°_åue
(
bö_˛⁄e
 !
NULL
);

5331 
	`ã°_åue
(
	`memˇched_behavi‹_£t
(
bö_˛⁄e
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1Ë=
MEMCACHED_SUCCESS
);

5332 
	`ã°_åue
(
	`memˇched_dñëe
(
bö_˛⁄e
, "foo", 3, 1Ë=
MEMCACHED_INVALID_ARGUMENTS
);

5333 
	`memˇched_‰ì
(
bö_˛⁄e
);

5335 
	`memˇched_quô
(
memc_˛⁄e
);

5339 
	`ã°_åue
(
	`memˇched_dñëe
(
memc_˛⁄e
, "foo", 3, 1Ë=
MEMCACHED_INVALID_ARGUMENTS
);

5342 
memˇched_ªtu∫_t
 
rc

	`memˇched_dñëe
(
memc
, "foo", 3, 1);

5347 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_PROTOCOL_ERROR
 ||Ñ¯=
MEMCACHED_NOTFOUND
 ||Ñ¯=
MEMCACHED_CLIENT_ERROR
 ||Ñ¯=
MEMCACHED_INVALID_ARGUMENTS
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

5350 
	`ã°_åue
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 1Ë=
MEMCACHED_SUCCESS
);

5351 
rc

	`memˇched_dñëe
(
memc
, "foo", 3, 1);

5352 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_PROTOCOL_ERROR
 ||Ñ¯=
MEMCACHED_NOTFOUND
 ||Ñ¯=
MEMCACHED_CLIENT_ERROR
 ||Ñ¯=
MEMCACHED_INVALID_ARGUMENTS
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

5355 
	`ã°_åue
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
, 1Ë=
MEMCACHED_SUCCESS
);

5356 
rc

	`memˇched_dñëe
(
memc
, "foo", 3, 1);

5357 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_PROTOCOL_ERROR
 ||Ñ¯=
MEMCACHED_NOTFOUND
 ||Ñ¯=
MEMCACHED_CLIENT_ERROR
 ||Ñ¯=
MEMCACHED_INVALID_ARGUMENTS
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

5360 
	`ã°_åue
((
rc

	`memˇched_dñëe
(
memc
, "foo", 3, 0)Ë=
MEMCACHED_BUFFERED
);

5361 
	`ã°_åue
(
	`memˇched_Êush_buf„rs
(
memc
Ë=
MEMCACHED_SUCCESS
);

5363 
	`ã°_åue
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 0Ë=
MEMCACHED_SUCCESS
);

5365 
	`ã°_åue
(
	`memˇched_dñëe
(
memc
, "foo", 3, 0Ë=
MEMCACHED_SUCCESS
);

5367 
	`ã°_åue
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
, 0Ë=
MEMCACHED_SUCCESS
);

5368 
	`ã°_åue
(
	`memˇched_dñëe
(
memc
, "foo", 3, 0Ë=
MEMCACHED_NOTFOUND
);

5371 
	`memˇched_‰ì
(
memc_˛⁄e
);

5372  
TEST_SUCCESS
;

5373 
	}
}

5380 
ã°_ªtu∫_t
 
	$ã°_gë_œ°_disc⁄√˘
(
memˇched_°
 *
memc
)

5382 
memˇched_ªtu∫_t
 
rc
;

5383 
memˇched_£rvî_ö°™˚_°
 
disc⁄√˘ed_£rvî
;

5386 c⁄° *
key
= "marmotte";

5387 c⁄° *
vÆue
= "milka";

5389 
	`memˇched_ª£t_œ°_disc⁄√˘ed_£rvî
(
memc
);

5390 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

5391 
vÆue
, 
	`°æí
(value),

5392 (
time_t
)0, (
uöt32_t
)0);

5393 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

5395 
disc⁄√˘ed_£rvî
 = 
	`memˇched_£rvî_gë_œ°_disc⁄√˘
(
memc
);

5396 
	`ã°_åue
(
disc⁄√˘ed_£rvî
 =
NULL
);

5399 
memˇched_°
 *
möe
;

5400 
memˇched_£rvî_°
 *
£rvîs
;

5402 c⁄° *
£rvî_li°
= "localhost:9";

5404 
£rvîs

	`memˇched_£rvîs_∑r£
(
£rvî_li°
);

5405 
	`ã°_åue
(
£rvîs
);

5406 
möe

	`memˇched_¸óã
(
NULL
);

5407 
rc

	`memˇched_£rvî_push
(
möe
, 
£rvîs
);

5408 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5409 
	`memˇched_£rvî_li°_‰ì
(
£rvîs
);

5410 
	`ã°_åue
(
möe
);

5412 
rc

	`memˇched_£t
(
möe
, 
key
, 
	`°æí
(key),

5413 
vÆue
, 
	`°æí
(value),

5414 (
time_t
)0, (
uöt32_t
)0);

5415 
	`ã°_åue
(
rc
 !
MEMCACHED_SUCCESS
);

5417 
disc⁄√˘ed_£rvî

	`memˇched_£rvî_gë_œ°_disc⁄√˘
(
möe
);

5418 i‡(
disc⁄√˘ed_£rvî
 =
NULL
)

5420 
	`Ârötf
(
°dîr
, "RC %s\n", 
	`memˇched_°ªº‹
(
möe
, 
rc
));

5421 
	`ab‹t
();

5423 
	`ã°_åue
(
disc⁄√˘ed_£rvî
 !
NULL
);

5424 
	`ã°_åue
(
	`memˇched_£rvî_p‹t
(
disc⁄√˘ed_£rvî
)== 9);

5425 
	`ã°_åue
(
	`°∫cmp
(
	`memˇched_£rvî_«me
(
disc⁄√˘ed_£rvî
),"localhost",9) == 0);

5427 
	`memˇched_quô
(
möe
);

5428 
	`memˇched_‰ì
(
möe
);

5430  
TEST_SUCCESS
;

5431 
	}
}

5433 
ã°_ªtu∫_t
 
	$ã°_vîbosôy
(
memˇched_°
 *
memc
)

5435 
	`memˇched_vîbosôy
(
memc
, 3);

5437  
TEST_SUCCESS
;

5438 
	}
}

5440 
ã°_ªtu∫_t
 
	$ã°_£rvî_Áûuª
(
memˇched_°
 *
memc
)

5442 
memˇched_°
 *
loˇl_memc
;

5443 
memˇched_£rvî_ö°™˚_°
 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

5445 
loˇl_memc

	`memˇched_¸óã
(
NULL
);

5447 
	`memˇched_£rvî_add
(
loˇl_memc
, 
	`memˇched_£rvî_«me
(
ö°™˚
), 
	`memˇched_£rvî_p‹t
(instance));

5448 
	`memˇched_behavi‹_£t
(
loˇl_memc
, 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
, 2);

5450 
uöt32_t
 
£rvî_cou¡

	`memˇched_£rvî_cou¡
(
loˇl_memc
);

5452 
	`ã°_åue
(
£rvî_cou¡
 == 1);

5455 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
loˇl_memc
, 0);

5456 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚
)->
£rvî_Áûuª_cou¡î
= 2;

5458 
memˇched_ªtu∫_t
 
rc
;

5459 
rc

	`memˇched_£t
(
loˇl_memc
, "foo", 
	`°æí
("foo"),

5460 
NULL
, 0,

5461 (
time_t
)0, (
uöt32_t
)0);

5462 
	`ã°_åue
(
rc
 =
MEMCACHED_SERVER_MARKED_DEAD
);

5464 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚
)->
£rvî_Áûuª_cou¡î
= 0;

5465 
rc

	`memˇched_£t
(
loˇl_memc
, "foo", 
	`°æí
("foo"),

5466 
NULL
, 0,

5467 (
time_t
)0, (
uöt32_t
)0);

5468 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5471 
	`memˇched_‰ì
(
loˇl_memc
);

5473  
TEST_SUCCESS
;

5474 
	}
}

5476 
ã°_ªtu∫_t
 
	$ã°_cuŒ_£rvîs
(
memˇched_°
 *
memc
)

5478 
uöt32_t
 
cou¡
 = 
	`memˇched_£rvî_cou¡
(
memc
);

5481 
memc
->
£rvîs
[1].
›ti⁄s
.
is_dód

åue
;

5482 
memc
->
°©e
.
is_time_f‹_ªbuûd

åue
;

5484 
uöt32_t
 
√w_cou¡

	`memˇched_£rvî_cou¡
(
memc
);

5485 
	`ã°_åue
(
cou¡
 =
√w_cou¡
);

5488 
	`ã°_åue
(
cou¡
 =
√w_cou¡
 + 1 );

5491  
TEST_SUCCESS
;

5492 
	}
}

5495 
memˇched_ªtu∫_t
 
	$°©_¥öãr
(
memˇched_£rvî_ö°™˚_°
 
£rvî
,

5496 c⁄° *
key
, 
size_t
 
key_Àngth
,

5497 c⁄° *
vÆue
, 
size_t
 
vÆue_Àngth
,

5498 *
c⁄ãxt
)

5500 ()
£rvî
;

5501 ()
c⁄ãxt
;

5502 ()
key
;

5503 ()
key_Àngth
;

5504 ()
vÆue
;

5505 ()
vÆue_Àngth
;

5507  
MEMCACHED_SUCCESS
;

5508 
	}
}

5510 
ã°_ªtu∫_t
 
	$memˇched_°©_execuã_ã°
(
memˇched_°
 *
memc
)

5512 
memˇched_ªtu∫_t
 
rc

	`memˇched_°©_execuã
(
memc
, 
NULL
, 
°©_¥öãr
, NULL);

5513 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5515 
rc

	`memˇched_°©_execuã
(
memc
, "¶abs", 
°©_¥öãr
, 
NULL
);

5516 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5518 
rc

	`memˇched_°©_execuã
(
memc
, "ôems", 
°©_¥öãr
, 
NULL
);

5519 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5521 
rc

	`memˇched_°©_execuã
(
memc
, "sizes", 
°©_¥öãr
, 
NULL
);

5522 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5524  
TEST_SUCCESS
;

5525 
	}
}

5531 
ã°_ªtu∫_t
 
	$wr⁄g_Áûuª_cou¡î_ã°
(
memˇched_°
 *
memc
)

5533 
memˇched_ªtu∫_t
 
rc
;

5534 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
;

5537 c⁄° *
key
= "marmotte";

5538 c⁄° *
vÆue
= "milka";

5545 
uöt32_t
 
numbî_of_ho°s

	`memˇched_£rvî_cou¡
(
memc
);

5546 
memc
->
numbî_of_ho°s
= 1;

5549 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

5550 
vÆue
, 
	`°æí
(value),

5551 (
time_t
)0, (
uöt32_t
)0);

5552 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

5555 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

5560 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚
)->
£rvî_Áûuª_cou¡î
= 0;

5562 
	`memˇched_quô
(
memc
);

5568 
	`ã°_åue
(
ö°™˚
->
£rvî_Áûuª_cou¡î
 == 0);

5571 
memc
->
numbî_of_ho°s
=Çumber_of_hosts;

5573  
TEST_SUCCESS
;

5574 
	}
}

5580 
ã°_ªtu∫_t
 
	$wr⁄g_Áûuª_cou¡î_two_ã°
(
memˇched_°
 *
memc
)

5582 
memˇched_ªtu∫
 
rc
;

5584 
memˇched_°
 *
memc_˛⁄e
;

5585 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

5586 
	`ã°_åue
(
memc_˛⁄e
);

5589 c⁄° *
key
= "marmotte";

5590 c⁄° *
vÆue
= "milka";

5591 *
°rög
 = 
NULL
;

5592 
size_t
 
°rög_Àngth
;

5593 
uöt32_t
 
Êags
;

5595 
rc

	`memˇched_£t
(
memc_˛⁄e
, 
key
, 
	`°æí
(key),

5596 
vÆue
, 
	`°æí
(value),

5597 (
time_t
)0, (
uöt32_t
)0);

5598 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

5602 
rc

	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
, 1);

5603 
	`as£π
(
rc
 =
MEMCACHED_SUCCESS
);

5606 
rc

	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
, 1);

5607 
	`as£π
(
rc
 =
MEMCACHED_SUCCESS
);

5610 
rc

	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_TCP_NODELAY
, 1);

5611 
	`as£π
(
rc
 =
MEMCACHED_SUCCESS
);

5615 
°rög

	`memˇched_gë
(
memc_˛⁄e
, 
key
, 
	`°æí
(key),

5616 &
°rög_Àngth
, &
Êags
, &
rc
);

5618 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
, 
	`memˇched_°ªº‹
(
NULL
,Ñc));

5619 
	`ã°_åue
(
°rög
);

5620 
	`‰ì
(
°rög
);

5621 
	`memˇched_‰ì
(
memc_˛⁄e
);

5623  
TEST_SUCCESS
;

5624 
	}
}

5632 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_490486
(
memˇched_°
 *
memc
)

5634 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1);

5635 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NO_BLOCK
, 1);

5636 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
, 1000);

5637 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
, 1);

5638 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
, 3600);

5640 #ifde‡
__APPLE__


5641  
TEST_SKIPPED
;

5648 
uöt32_t
 
numbî_of_ho°s

memc
->number_of_hosts;

5649 
memc
->
numbî_of_ho°s
= 1;

5650 
size_t
 
max_keys
= 20480;

5653 **
keys

	`ˇŒoc
(
max_keys
, (*));

5654 
size_t
 *
key_Àngth
=
	`ˇŒoc
(
max_keys
, (size_t));

5657 
boﬁ
 
¶ït

Ál£
;

5658 
blob
[1024]= { 0 };

5659 
memˇched_ªtu∫
 
rc
;

5660 
size_t
 
x
0; x < 
max_keys
; ++x)

5662 
k
[251];

5663 
key_Àngth
[
x
](
size_t
)
	`¢¥ötf
(
k
, (k), "0200%lu", ()x);

5664 
keys
[
x
]
	`°rdup
(
k
);

5665 
	`as£π
(
keys
[
x
] !
NULL
);

5666 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
key_Àngth
[x], 
blob
, (blob), 0, 0);

5667 #ifde‡
__APPLE__


5668 i‡(
rc
 =
MEMCACHED_SERVER_MARKED_DEAD
)

5673 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
 ||Ñ¯=
MEMCACHED_TIMEOUT
);

5675 i‡(
rc
 =
MEMCACHED_TIMEOUT
 && 
¶ït
 =
Ál£
)

5677 
x
++;

5678 
	`¶ìp
(1);

5679 
¶ït

åue
;

5681 i‡(
rc
 =
MEMCACHED_TIMEOUT
 && 
¶ït
 =
åue
)

5688 i‡(
rc
 !
MEMCACHED_SERVER_MARKED_DEAD
)

5692 
size_t
 
cou¡î
= 0;

5693 
memˇched_execuã_fun˘i⁄
 
ˇŒbacks
[1]{ [0]&
ˇŒback_cou¡î
 };

5694 
rc

	`memˇched_mgë_execuã
(
memc
, (c⁄° **)
keys
, 
key_Àngth
,

5695 (
size_t
)
max_keys
, 
ˇŒbacks
, &
cou¡î
, 1);

5697 
	`as£π
(
rc
 =
MEMCACHED_SUCCESS
);

5698 * 
the_vÆue

NULL
;

5699 
the_key
[
MEMCACHED_MAX_KEY
];

5700 
size_t
 
the_key_Àngth
;

5701 
size_t
 
the_vÆue_Àngth
;

5702 
uöt32_t
 
the_Êags
;

5705 
the_vÆue

	`memˇched_„tch
(
memc
, 
the_key
, &
the_key_Àngth
, &
the_vÆue_Àngth
, &
the_Êags
, &
rc
);

5707 i‡((
the_vÆue
!
NULL
Ë&& (
rc
 =
MEMCACHED_SUCCESS
))

5709 ++
cou¡î
;

5710 
	`‰ì
(
the_vÆue
);

5713 }  (
the_vÆue
!
NULL
Ë&& (
rc
 =
MEMCACHED_SUCCESS
));

5716 
	`as£π
(
rc
 =
MEMCACHED_END
);

5719 
	`as£π
(
cou¡î
 =
max_keys
);

5723 
size_t
 
x
0; x < 
max_keys
; ++x)

5725 
	`‰ì
(
keys
[
x
]);

5727 
	`‰ì
(
keys
);

5728 
	`‰ì
(
key_Àngth
);

5730 
memc
->
numbî_of_ho°s
=Çumber_of_hosts;

5732  
TEST_SUCCESS
;

5733 
	}
}

5735 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_583031
(
memˇched_°
 *
unu£d
)

5737 ()
unu£d
;

5739 
memˇched_°
 *
memc

	`memˇched_¸óã
(
NULL
);

5740 
	`as£π
(
memc
);

5741 
	`memˇched_£rvî_add
(
memc
, "10.2.3.4", 11211);

5743 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT
, 1000);

5744 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RETRY_TIMEOUT
, 1000);

5745 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SND_TIMEOUT
, 1000);

5746 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_RCV_TIMEOUT
, 1000);

5747 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_POLL_TIMEOUT
, 1000);

5748 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT
, 3);

5750 
memˇched_ªtu∫_t
 
rc
;

5751 
size_t
 
Àngth
;

5752 
uöt32_t
 
Êags
;

5754 ()
	`memˇched_gë
(
memc
, "dsf", 3, &
Àngth
, &
Êags
, &
rc
);

5756 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_TIMEOUT
 ||Ñ¯=
MEMCACHED_ERRNO
 ||Ñ¯=
MEMCACHED_FAILURE
, 
	`memˇched_°ªº‹
(
memc
,Ñc));

5758 
	`memˇched_‰ì
(
memc
);

5760  
TEST_SUCCESS
;

5761 
	}
}

5763 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_581030
(
memˇched_°
 *
unu£d
)

5765 ()
unu£d
;

5767 #i‚de‡
DEBUG


5768 
memˇched_°©_°
 *
loˇl_°©

	`memˇched_°©
(
NULL
, NULL, NULL);

5769 
	`ã°_Ál£
(
loˇl_°©
);

5771 
	`memˇched_°©_‰ì
(
NULL
, NULL);

5774  
TEST_SUCCESS
;

5775 
	}
}

5777 
	$memˇched_dõ
(
memˇched_°
* 
mc
, 
memˇched_ªtu∫
 
îr‹
, c⁄° * 
wh©
, 
uöt32_t
 
ô
)

5779 
	`Ârötf
(
°dîr
, "Iãøti⁄ #%u: ", 
ô
);

5781 if(
îr‹
 =
MEMCACHED_ERRNO
)

5783 
	`Ârötf
(
°dîr
, "systemÉrror %d from %s: %s\n",

5784 
î∫o
, 
wh©
, 
	`°ªº‹
(errno));

5788 
	`Ârötf
(
°dîr
, "îr‹ %d from %s: %s\n", 
îr‹
, 
wh©
,

5789 
	`memˇched_°ªº‹
(
mc
, 
îr‹
));

5791 
	}
}

5793 
	#TEST_CONSTANT_CREATION
 200

	)

5795 
ã°_ªtu∫_t
 
	$ªgªssi⁄_bug_
(
memˇched_°
 *
memc
)

5797 c⁄° *
ªmŸe_£rvî
;

5798 ()
memc
;

5800 i‡(! (
ªmŸe_£rvî

	`gëív
("LIBMEMCACHED_REMOTE_SERVER")))

5802  
TEST_SKIPPED
;

5805 
uöt32_t
 
x
0; x < 
TEST_CONSTANT_CREATION
; x++)

5807 
memˇched_°
* 
mc

	`memˇched_¸óã
(
NULL
);

5808 
memˇched_ªtu∫
 
rc
;

5810 
rc

	`memˇched_behavi‹_£t
(
mc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1);

5811 i‡(
rc
 !
MEMCACHED_SUCCESS
)

5813 
	`memˇched_dõ
(
mc
, 
rc
, "memˇched_behavi‹_£t", 
x
);

5816 
rc

	`memˇched_behavi‹_£t
(
mc
, 
MEMCACHED_BEHAVIOR_CACHE_LOOKUPS
, 1);

5817 i‡(
rc
 !
MEMCACHED_SUCCESS
)

5819 
	`memˇched_dõ
(
mc
, 
rc
, "memˇched_behavi‹_£t", 
x
);

5822 
rc

	`memˇched_£rvî_add
(
mc
, 
ªmŸe_£rvî
, 0);

5823 i‡(
rc
 !
MEMCACHED_SUCCESS
)

5825 
	`memˇched_dõ
(
mc
, 
rc
, "memˇched_£rvî_add", 
x
);

5828 c⁄° *
£t_key
= "akey";

5829 c⁄° 
size_t
 
£t_key_Àn

	`°æí
(
£t_key
);

5830 c⁄° *
£t_vÆue
= "a value";

5831 c⁄° 
size_t
 
£t_vÆue_Àn

	`°æí
(
£t_vÆue
);

5833 i‡(
rc
 =
MEMCACHED_SUCCESS
)

5835 i‡(
x
 > 0)

5837 
size_t
 
gë_vÆue_Àn
;

5838 *
gë_vÆue
;

5839 
uöt32_t
 
gë_vÆue_Êags
;

5841 
gë_vÆue

	`memˇched_gë
(
mc
, 
£t_key
, 
£t_key_Àn
, &
gë_vÆue_Àn
,

5842 &
gë_vÆue_Êags
, &
rc
);

5843 i‡(
rc
 !
MEMCACHED_SUCCESS
)

5845 
	`memˇched_dõ
(
mc
, 
rc
, "memˇched_gë", 
x
);

5850 i‡(
x
 != 0 &&

5851 (
gë_vÆue_Àn
 !
£t_vÆue_Àn


5852 || 0!=
	`°∫cmp
(
gë_vÆue
, 
£t_vÆue
, 
gë_vÆue_Àn
)))

5854 
	`Ârötf
(
°dîr
, "Values don't match?\n");

5855 
rc

MEMCACHED_FAILURE
;

5857 
	`‰ì
(
gë_vÆue
);

5861 
rc

	`memˇched_£t
(
mc
,

5862 
£t_key
, 
£t_key_Àn
,

5863 
£t_vÆue
, 
£t_vÆue_Àn
,

5867 i‡(
rc
 !
MEMCACHED_SUCCESS
)

5869 
	`memˇched_dõ
(
mc
, 
rc
, "memˇched_£t", 
x
);

5873 
	`memˇched_quô
(
mc
);

5874 
	`memˇched_‰ì
(
mc
);

5876 i‡(
rc
 !
MEMCACHED_SUCCESS
)

5882  
TEST_SUCCESS
;

5883 
	}
}

5891 
ã°_ªtu∫_t
 
	$ß¶_auth_ã°
(
memˇched_°
 *
memc
)

5893 #ifde‡
LIBMEMCACHED_WITH_SASL_SUPPORT


5894 
memˇched_ªtu∫_t
 
rc
;

5896 
rc

	`memˇched_£t
(
memc
, "foo", 3, "b¨", 3, (
time_t
)0, (
uöt32_t
)0);

5897 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5898 
	`ã°_åue
((
rc

	`memˇched_dñëe
(
memc
, "foo", 3, 0)Ë=
MEMCACHED_SUCCESS
);

5899 
	`ã°_åue
((
rc

	`memˇched_de°roy_ß¶_auth_d©a
(
memc
)Ë=
MEMCACHED_SUCCESS
);

5900 
	`ã°_åue
((
rc

	`memˇched_de°roy_ß¶_auth_d©a
(
memc
)Ë=
MEMCACHED_FAILURE
);

5901 
	`ã°_åue
((
rc

	`memˇched_de°roy_ß¶_auth_d©a
(
NULL
)Ë=
MEMCACHED_FAILURE
);

5902 
	`memˇched_quô
(
memc
);

5904 
rc

	`memˇched_£t_ß¶_auth_d©a
(
memc
,

5905 
	`gëív
("LIBMEMCACHED_TEST_SASL_USERNAME"),

5906 
	`gëív
("LIBMEMCACHED_TEST_SASL_SERVER"));

5907 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

5909 
rc

	`memˇched_£t
(
memc
, "foo", 3, "b¨", 3, (
time_t
)0, (
uöt32_t
)0);

5910 
	`ã°_åue
(
rc
 =
MEMCACHED_AUTH_FAILURE
);

5911 
	`ã°_åue
(
	`memˇched_de°roy_ß¶_auth_d©a
(
memc
Ë=
MEMCACHED_SUCCESS
);

5913 
	`memˇched_quô
(
memc
);

5914  
TEST_SUCCESS
;

5916 ()
memc
;

5917  
TEST_FAILURE
;

5919 
	}
}

5922 
ã°_°
 
	gã°s
[] ={

5923 {"utû_vîsi⁄", 1, (
ã°_ˇŒback_‚
)
utû_vîsi⁄_ã°
 },

5924 {"Êush", 0, (
ã°_ˇŒback_‚
)
Êush_ã°
 },

5925 {"öô", 0, (
ã°_ˇŒback_‚
)
öô_ã°
 },

5926 {"Æloˇti⁄", 0, (
ã°_ˇŒback_‚
)
Æloˇti⁄_ã°
 },

5927 {"£rvî_li°_nuŒ_ã°", 0, (
ã°_ˇŒback_‚
)
£rvî_li°_nuŒ_ã°
},

5928 {"£rvî_uns‹t", 0, (
ã°_ˇŒback_‚
)
£rvî_uns‹t_ã°
},

5929 {"£rvî_s‹t", 0, (
ã°_ˇŒback_‚
)
£rvî_s‹t_ã°
},

5930 {"£rvî_s‹t2", 0, (
ã°_ˇŒback_‚
)
£rvî_s‹t2_ã°
},

5931 {"memˇched_£rvî_ªmove", 0, (
ã°_ˇŒback_‚
)
memˇched_£rvî_ªmove_ã°
},

5932 {"˛⁄e_ã°", 0, (
ã°_ˇŒback_‚
)
˛⁄e_ã°
 },

5933 {"c⁄√˘i⁄_ã°", 0, (
ã°_ˇŒback_‚
)
c⁄√˘i⁄_ã°
},

5934 {"ˇŒback_ã°", 0, (
ã°_ˇŒback_‚
)
ˇŒback_ã°
},

5935 {"u£rd©a_ã°", 0, (
ã°_ˇŒback_‚
)
u£rd©a_ã°
},

5936 {"îr‹", 0, (
ã°_ˇŒback_‚
)
îr‹_ã°
 },

5937 {"£t", 0, (
ã°_ˇŒback_‚
)
£t_ã°
 },

5938 {"£t2", 0, (
ã°_ˇŒback_‚
)
£t_ã°2
 },

5939 {"£t3", 0, (
ã°_ˇŒback_‚
)
£t_ã°3
 },

5940 {"dump", 1, (
ã°_ˇŒback_‚
)
dump_ã°
},

5941 {"add", 1, (
ã°_ˇŒback_‚
)
add_ã°
 },

5942 {"ª∂a˚", 1, (
ã°_ˇŒback_‚
)
ª∂a˚_ã°
 },

5943 {"dñëe", 1, (
ã°_ˇŒback_‚
)
dñëe_ã°
 },

5944 {"gë", 1, (
ã°_ˇŒback_‚
)
gë_ã°
 },

5945 {"gë2", 0, (
ã°_ˇŒback_‚
)
gë_ã°2
 },

5946 {"gë3", 0, (
ã°_ˇŒback_‚
)
gë_ã°3
 },

5947 {"gë4", 0, (
ã°_ˇŒback_‚
)
gë_ã°4
 },

5948 {"∑πü»mgë", 0, (
ã°_ˇŒback_‚
)
gë_ã°5
 },

5949 {"°©s_£rvî«me", 0, (
ã°_ˇŒback_‚
)
°©s_£rvî«me_ã°
 },

5950 {"ö¸emít", 0, (
ã°_ˇŒback_‚
)
ö¸emít_ã°
 },

5951 {"ö¸emít_wôh_öôül", 1, (
ã°_ˇŒback_‚
)
ö¸emít_wôh_öôül_ã°
 },

5952 {"de¸emít", 0, (
ã°_ˇŒback_‚
)
de¸emít_ã°
 },

5953 {"de¸emít_wôh_öôül", 1, (
ã°_ˇŒback_‚
)
de¸emít_wôh_öôül_ã°
 },

5954 {"ö¸emít_by_key", 0, (
ã°_ˇŒback_‚
)
ö¸emít_by_key_ã°
 },

5955 {"ö¸emít_wôh_öôül_by_key", 1, (
ã°_ˇŒback_‚
)
ö¸emít_wôh_öôül_by_key_ã°
 },

5956 {"de¸emít_by_key", 0, (
ã°_ˇŒback_‚
)
de¸emít_by_key_ã°
 },

5957 {"de¸emít_wôh_öôül_by_key", 1, (
ã°_ˇŒback_‚
)
de¸emít_wôh_öôül_by_key_ã°
 },

5958 {"quô", 0, (
ã°_ˇŒback_‚
)
quô_ã°
 },

5959 {"mgë", 1, (
ã°_ˇŒback_‚
)
mgë_ã°
 },

5960 {"mgë_ªsu…", 1, (
ã°_ˇŒback_‚
)
mgë_ªsu…_ã°
 },

5961 {"mgë_ªsu…_Æloc", 1, (
ã°_ˇŒback_‚
)
mgë_ªsu…_Æloc_ã°
 },

5962 {"mgë_ªsu…_fun˘i⁄", 1, (
ã°_ˇŒback_‚
)
mgë_ªsu…_fun˘i⁄
 },

5963 {"mgë_execuã", 1, (
ã°_ˇŒback_‚
)
mgë_execuã
 },

5964 {"mgë_íd", 0, (
ã°_ˇŒback_‚
)
mgë_íd
 },

5965 {"gë_°©s", 0, (
ã°_ˇŒback_‚
)
gë_°©s
 },

5966 {"add_ho°_ã°", 0, (
ã°_ˇŒback_‚
)
add_ho°_ã°
 },

5967 {"add_ho°_ã°_1", 0, (
ã°_ˇŒback_‚
)
add_ho°_ã°1
 },

5968 {"gë_°©s_keys", 0, (
ã°_ˇŒback_‚
)
gë_°©s_keys
 },

5969 {"vîsi⁄_°rög_ã°", 0, (
ã°_ˇŒback_‚
)
vîsi⁄_°rög_ã°
},

5970 {"bad_key", 1, (
ã°_ˇŒback_‚
)
bad_key_ã°
 },

5971 {"memˇched_£rvî_curs‹", 1, (
ã°_ˇŒback_‚
)
memˇched_£rvî_curs‹_ã°
 },

5972 {"ªad_through", 1, (
ã°_ˇŒback_‚
)
ªad_through
 },

5973 {"dñëe_through", 1, (
ã°_ˇŒback_‚
)
dñëe_through
 },

5974 {"n‹ïly", 1, (
ã°_ˇŒback_‚
)
n‹ïly_ã°
},

5975 {"™Æyzî", 1, (
ã°_ˇŒback_‚
)
™Æyzî_ã°
},

5976 {"c⁄√˘i⁄poﬁ", 1, (
ã°_ˇŒback_‚
)
c⁄√˘i⁄_poﬁ_ã°
 },

5977 {"memˇched_poﬁ_ã°", 1, (
ã°_ˇŒback_‚
)
memˇched_poﬁ_ã°
 },

5978 {"pög", 1, (
ã°_ˇŒback_‚
)
pög_ã°
 },

5979 {"ã°_gë_œ°_disc⁄√˘", 1, (
ã°_ˇŒback_‚
)
ã°_gë_œ°_disc⁄√˘
},

5980 {"vîbosôy", 1, (
ã°_ˇŒback_‚
)
ã°_vîbosôy
},

5981 {"ã°_£rvî_Áûuª", 1, (
ã°_ˇŒback_‚
)
ã°_£rvî_Áûuª
},

5982 {"cuŒ_£rvîs", 1, (
ã°_ˇŒback_‚
)
ã°_cuŒ_£rvîs
},

5983 {"memˇched_°©_execuã", 1, (
ã°_ˇŒback_‚
)
memˇched_°©_execuã_ã°
},

5987 
ã°_°
 
	gbehavi‹_ã°s
[] ={

5988 {"behavi‹_ã°", 0, (
ã°_ˇŒback_‚
)
behavi‹_ã°
},

5989 {"MEMCACHED_BEHAVIOR_CORK", 0, (
ã°_ˇŒback_‚
)
MEMCACHED_BEHAVIOR_CORK_ã°
},

5990 {"MEMCACHED_BEHAVIOR_TCP_KEEPALIVE", 0, (
ã°_ˇŒback_‚
)
MEMCACHED_BEHAVIOR_TCP_KEEPALIVE_ã°
},

5991 {"MEMCACHED_BEHAVIOR_TCP_KEEPIDLE", 0, (
ã°_ˇŒback_‚
)
MEMCACHED_BEHAVIOR_TCP_KEEPIDLE_ã°
},

5995 
ã°_°
 
	gbasic_ã°s
[] ={

5996 {"öô", 1, (
ã°_ˇŒback_‚
)
basic_öô_ã°
},

5997 {"˛⁄e", 1, (
ã°_ˇŒback_‚
)
basic_˛⁄e_ã°
},

5998 {"ª£t", 1, (
ã°_ˇŒback_‚
)
basic_ª£t_°ack_ã°
},

5999 {"ª£àhóp", 1, (
ã°_ˇŒback_‚
)
basic_ª£t_hóp_ã°
},

6000 {"ª£à°ack cl⁄e", 1, (
ã°_ˇŒback_‚
)
basic_ª£t_°ack_˛⁄e_ã°
},

6001 {"ª£àhó∞˛⁄e", 1, (
ã°_ˇŒback_‚
)
basic_ª£t_hóp_˛⁄e_ã°
},

6005 
ã°_°
 
	gªgªssi⁄_bö¨y_vs_block
[] ={

6006 {"blockádd", 1, (
ã°_ˇŒback_‚
)
block_add_ªgªssi⁄
},

6007 {"bö¨yádd", 1, (
ã°_ˇŒback_‚
)
bö¨y_add_ªgªssi⁄
},

6011 
ã°_°
 
	gasync_ã°s
[] ={

6012 {"add", 1, (
ã°_ˇŒback_‚
)
add_wøµî
 },

6016 
ã°_°
 
	g°rög_ã°s
[] ={

6017 {"°rög sèti¯wôhÇuŒ", 0, (
ã°_ˇŒback_‚
)
°rög_°©ic_nuŒ
 },

6018 {"°rögáŒo¯wôhÇuŒ", 0, (
ã°_ˇŒback_‚
)
°rög_Æloc_nuŒ
 },

6019 {"°rögáŒo¯wôh 1K", 0, (
ã°_ˇŒback_‚
)
°rög_Æloc_wôh_size
 },

6020 {"°rögáŒo¯wôh mÆlo¯Áûuª", 0, (
ã°_ˇŒback_‚
)
°rög_Æloc_wôh_size_toobig
 },

6021 {"°rögáµíd", 0, (
ã°_ˇŒback_‚
)
°rög_Æloc_≠≥nd
 },

6022 {"°rögáµíd faûuª (toÿbig)", 0, (
ã°_ˇŒback_‚
)
°rög_Æloc_≠≥nd_toobig
 },

6023 {"°rög_Æloc_≠≥nd_mu…ùÀ", 0, (
ã°_ˇŒback_‚
)
°rög_Æloc_≠≥nd_mu…ùÀ
 },

6024 {0, 0, (
ã°_ˇŒback_‚
)0}

6027 
ã°_°
 
	gªsu…_ã°s
[] ={

6028 {"ªsu… sètic", 0, (
ã°_ˇŒback_‚
)
ªsu…_°©ic
},

6029 {"ªsu…áŒoc", 0, (
ã°_ˇŒback_‚
)
ªsu…_Æloc
},

6030 {0, 0, (
ã°_ˇŒback_‚
)0}

6033 
ã°_°
 
	gvîsi⁄_1_2_3
[] ={

6034 {"≠≥nd", 0, (
ã°_ˇŒback_‚
)
≠≥nd_ã°
 },

6035 {"¥ïíd", 0, (
ã°_ˇŒback_‚
)
¥ïíd_ã°
 },

6036 {"ˇs", 0, (
ã°_ˇŒback_‚
)
ˇs_ã°
 },

6037 {"ˇs2", 0, (
ã°_ˇŒback_‚
)
ˇs2_ã°
 },

6038 {"≠≥nd_bö¨y", 0, (
ã°_ˇŒback_‚
)
≠≥nd_bö¨y_ã°
 },

6039 {0, 0, (
ã°_ˇŒback_‚
)0}

6042 
ã°_°
 
	gu£r_ã°s
[] ={

6043 {"u£r_suµlõd_bug1", 0, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug1
 },

6044 {"u£r_suµlõd_bug2", 0, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug2
 },

6045 {"u£r_suµlõd_bug3", 0, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug3
 },

6046 {"u£r_suµlõd_bug4", 0, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug4
 },

6047 {"u£r_suµlõd_bug5", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug5
 },

6048 {"u£r_suµlõd_bug6", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug6
 },

6049 {"u£r_suµlõd_bug7", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug7
 },

6050 {"u£r_suµlõd_bug8", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug8
 },

6051 {"u£r_suµlõd_bug9", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug9
 },

6052 {"u£r_suµlõd_bug10", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug10
 },

6053 {"u£r_suµlõd_bug11", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug11
 },

6054 {"u£r_suµlõd_bug12", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug12
 },

6055 {"u£r_suµlõd_bug13", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug13
 },

6056 {"u£r_suµlõd_bug14", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug14
 },

6057 {"u£r_suµlõd_bug15", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug15
 },

6058 {"u£r_suµlõd_bug16", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug16
 },

6059 #i‡!
deföed
(
__sun
Ë&& !deföed(
__O≥nBSD__
)

6067 {"u£r_suµlõd_bug17", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug17
 },

6069 {"u£r_suµlõd_bug18", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug18
 },

6070 {"u£r_suµlõd_bug19", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug19
 },

6071 {"u£r_suµlõd_bug20", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug20
 },

6072 {"u£r_suµlõd_bug21", 1, (
ã°_ˇŒback_‚
)
u£r_suµlõd_bug21
 },

6073 {"wr⁄g_Áûuª_cou¡î_ã°", 1, (
ã°_ˇŒback_‚
)
wr⁄g_Áûuª_cou¡î_ã°
},

6074 {"wr⁄g_Áûuª_cou¡î_two_ã°", 1, (
ã°_ˇŒback_‚
)
wr⁄g_Áûuª_cou¡î_two_ã°
},

6075 {0, 0, (
ã°_ˇŒback_‚
)0}

6078 
ã°_°
 
	gª∂iˇti⁄_ã°s
[]= {

6079 {"£t", 1, (
ã°_ˇŒback_‚
)
ª∂iˇti⁄_£t_ã°
 },

6080 {"gë", 0, (
ã°_ˇŒback_‚
)
ª∂iˇti⁄_gë_ã°
 },

6081 {"mgë", 0, (
ã°_ˇŒback_‚
)
ª∂iˇti⁄_mgë_ã°
 },

6082 {"dñëe", 0, (
ã°_ˇŒback_‚
)
ª∂iˇti⁄_dñëe_ã°
 },

6083 {"ønd_mgë", 0, (
ã°_ˇŒback_‚
)
ª∂iˇti⁄_øndomize_mgë_ã°
 },

6084 {0, 0, (
ã°_ˇŒback_‚
)0}

6093 
ã°_°
 
	gªgªssi⁄_ã°s
[]= {

6094 {"Õ:434484", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_434484
 },

6095 {"Õ:434843", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_434843
 },

6096 {"Õ:434843-buf„ªd", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_434843_buf„ªd
 },

6097 {"Õ:421108", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_421108
 },

6098 {"Õ:442914", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_442914
 },

6099 {"Õ:447342", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_447342
 },

6100 {"Õ:463297", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_463297
 },

6101 {"Õ:490486", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_490486
 },

6102 {"Õ:583031", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_583031
 },

6103 {"Õ:?", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_
 },

6104 {"Õ:728286", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_728286
 },

6105 {"Õ:581030", 1, (
ã°_ˇŒback_‚
)
ªgªssi⁄_bug_581030
 },

6106 {0, 0, (
ã°_ˇŒback_‚
)0}

6109 
ã°_°
 
	gß¶_auth_ã°s
[]= {

6110 {"ß¶_auth", 1, (
ã°_ˇŒback_‚
)
ß¶_auth_ã°
 },

6111 {0, 0, (
ã°_ˇŒback_‚
)0}

6114 
ã°_°
 
	gkëama_com∑tibûôy
[]= {

6115 {"libmemˇched", 1, (
ã°_ˇŒback_‚
)
këama_com∑tibûôy_libmemˇched
 },

6116 {"•ymemˇched", 1, (
ã°_ˇŒback_‚
)
këama_com∑tibûôy_•ymemˇched
 },

6117 {0, 0, (
ã°_ˇŒback_‚
)0}

6120 
ã°_°
 
	ggíî©e_ã°s
[] ={

6121 {"gíî©e_∑ús", 1, (
ã°_ˇŒback_‚
)
gíî©e_∑ús
 },

6122 {"gíî©e_d©a", 1, (
ã°_ˇŒback_‚
)
gíî©e_d©a
 },

6123 {"gë_ªad", 0, (
ã°_ˇŒback_‚
)
gë_ªad
 },

6124 {"dñëe_gíî©e", 0, (
ã°_ˇŒback_‚
)
dñëe_gíî©e
 },

6125 {"gíî©e_buf„r_d©a", 1, (
ã°_ˇŒback_‚
)
gíî©e_buf„r_d©a
 },

6126 {"dñëe_buf„r", 0, (
ã°_ˇŒback_‚
)
dñëe_buf„r_gíî©e
},

6127 {"gíî©e_d©a", 1, (
ã°_ˇŒback_‚
)
gíî©e_d©a
 },

6128 {"mgë_ªad", 0, (
ã°_ˇŒback_‚
)
mgë_ªad
 },

6129 {"mgë_ªad_ªsu…", 0, (
ã°_ˇŒback_‚
)
mgë_ªad_ªsu…
 },

6130 {"mgë_ªad_fun˘i⁄", 0, (
ã°_ˇŒback_‚
)
mgë_ªad_fun˘i⁄
 },

6131 {"˛ónup", 1, (
ã°_ˇŒback_‚
)
˛ónup_∑ús
 },

6132 {"gíî©e_œrge_∑ús", 1, (
ã°_ˇŒback_‚
)
gíî©e_œrge_∑ús
 },

6133 {"gíî©e_d©a", 1, (
ã°_ˇŒback_‚
)
gíî©e_d©a
 },

6134 {"gíî©e_buf„r_d©a", 1, (
ã°_ˇŒback_‚
)
gíî©e_buf„r_d©a
 },

6135 {"˛ónup", 1, (
ã°_ˇŒback_‚
)
˛ónup_∑ús
 },

6136 {0, 0, (
ã°_ˇŒback_‚
)0}

6139 
ã°_°
 
	gc⁄si°ít_ã°s
[] ={

6140 {"gíî©e_∑ús", 1, (
ã°_ˇŒback_‚
)
gíî©e_∑ús
 },

6141 {"gíî©e_d©a", 1, (
ã°_ˇŒback_‚
)
gíî©e_d©a
 },

6142 {"gë_ªad", 0, (
ã°_ˇŒback_‚
)
gë_ªad_cou¡
 },

6143 {"˛ónup", 1, (
ã°_ˇŒback_‚
)
˛ónup_∑ús
 },

6144 {0, 0, (
ã°_ˇŒback_‚
)0}

6147 
ã°_°
 
	gc⁄si°ít_weighãd_ã°s
[] ={

6148 {"gíî©e_∑ús", 1, (
ã°_ˇŒback_‚
)
gíî©e_∑ús
 },

6149 {"gíî©e_d©a", 1, (
ã°_ˇŒback_‚
)
gíî©e_d©a_wôh_°©s
 },

6150 {"gë_ªad", 0, (
ã°_ˇŒback_‚
)
gë_ªad_cou¡
 },

6151 {"˛ónup", 1, (
ã°_ˇŒback_‚
)
˛ónup_∑ús
 },

6152 {0, 0, (
ã°_ˇŒback_‚
)0}

6155 
ã°_°
 
	ghsõh_avaûabûôy
[] ={

6156 {"hsõh_avaibûôy_ã°", 0, (
ã°_ˇŒback_‚
)
hsõh_avaibûôy_ã°
},

6157 {0, 0, (
ã°_ˇŒback_‚
)0}

6160 
ã°_°
 
	gmurmur_avaûabûôy
[] ={

6161 {"murmur_avaibûôy_ã°", 0, (
ã°_ˇŒback_‚
)
murmur_avaibûôy_ã°
},

6162 {0, 0, (
ã°_ˇŒback_‚
)0}

6166 
ã°_°
 
	ghash_ßnôy
[] ={

6167 {"hash s™ôy", 0, (
ã°_ˇŒback_‚
)
hash_ßnôy_ã°
},

6168 {0, 0, (
ã°_ˇŒback_‚
)0}

6172 
ã°_°
 
	gkëama_auto_eje˘_ho°s
[] ={

6173 {"auto_eje˘_ho°s", 1, (
ã°_ˇŒback_‚
)
auto_eje˘_ho°s
 },

6174 {"ouçut_këama_weighãd_keys", 1, (
ã°_ˇŒback_‚
)
ouçut_këama_weighãd_keys
 },

6175 {0, 0, (
ã°_ˇŒback_‚
)0}

6178 
ã°_°
 
	ghash_ã°s
[] ={

6179 {"⁄e_©_a_time_run", 0, (
ã°_ˇŒback_‚
)
⁄e_©_a_time_run
 },

6180 {"md5", 0, (
ã°_ˇŒback_‚
)
md5_run
 },

6181 {"¸c", 0, (
ã°_ˇŒback_‚
)
¸c_run
 },

6182 {"‚v1_64", 0, (
ã°_ˇŒback_‚
)
‚v1_64_run
 },

6183 {"‚v1a_64", 0, (
ã°_ˇŒback_‚
)
‚v1a_64_run
 },

6184 {"‚v1_32", 0, (
ã°_ˇŒback_‚
)
‚v1_32_run
 },

6185 {"‚v1a_32", 0, (
ã°_ˇŒback_‚
)
‚v1a_32_run
 },

6186 {"hsõh", 0, (
ã°_ˇŒback_‚
)
hsõh_run
 },

6187 {"murmur", 0, (
ã°_ˇŒback_‚
)
murmur_run
 },

6188 {"jíkis", 0, (
ã°_ˇŒback_‚
)
jíkös_run
 },

6189 {"memˇched_gë_hashkô", 0, (
ã°_ˇŒback_‚
)
memˇched_gë_hashkô_ã°
 },

6190 {0, 0, (
ã°_ˇŒback_‚
)0}

6193 
ã°_°
 
	gîr‹_c⁄dôi⁄s
[] ={

6194 {"memˇched_gë(MEMCACHED_ERRNO)", 0, (
ã°_ˇŒback_‚
)
memˇched_gë_MEMCACHED_ERRNO
 },

6195 {"memˇched_gë(MEMCACHED_NOTFOUND)", 0, (
ã°_ˇŒback_‚
)
memˇched_gë_MEMCACHED_NOTFOUND
 },

6196 {"memˇched_gë_by_key(MEMCACHED_ERRNO)", 0, (
ã°_ˇŒback_‚
)
memˇched_gë_by_key_MEMCACHED_ERRNO
 },

6197 {"memˇched_gë_by_key(MEMCACHED_NOTFOUND)", 0, (
ã°_ˇŒback_‚
)
memˇched_gë_by_key_MEMCACHED_NOTFOUND
 },

6198 {"memˇched_gë_by_key(MEMCACHED_NOTFOUND)", 0, (
ã°_ˇŒback_‚
)
memˇched_gë_by_key_MEMCACHED_NOTFOUND
 },

6199 {"memˇched_ö¸emít(MEMCACHED_NO_SERVERS)", 0, (
ã°_ˇŒback_‚
)
memˇched_ö¸emít_MEMCACHED_NO_SERVERS
 },

6200 {0, 0, (
ã°_ˇŒback_‚
)0}

6204 
ã°_°
 
	g∑r£r_ã°s
[] ={

6205 {"behavi‹", 0, (
ã°_ˇŒback_‚
)
behavi‹_∑r£r_ã°
 },

6206 {"boﬁón_›ti⁄s", 0, (
ã°_ˇŒback_‚
)
∑r£r_boﬁón_›ti⁄s_ã°
 },

6207 {"c⁄figuª_fûe", 0, (
ã°_ˇŒback_‚
)
memˇched_¸óã_wôh_›ti⁄s_wôh_fûíame
 },

6208 {"di°ribti⁄s", 0, (
ã°_ˇŒback_‚
)
∑r£r_di°ributi⁄_ã°
 },

6209 {"hash", 0, (
ã°_ˇŒback_‚
)
∑r£r_hash_ã°
 },

6210 {"libmemˇched_check_c⁄figuøti⁄", 0, (
ã°_ˇŒback_‚
)
libmemˇched_check_c⁄figuøti⁄_ã°
 },

6211 {"libmemˇched_check_c⁄figuøti⁄_wôh_fûíame", 0, (
ã°_ˇŒback_‚
)
libmemˇched_check_c⁄figuøti⁄_wôh_fûíame_ã°
 },

6212 {"numbî_›ti⁄s", 0, (
ã°_ˇŒback_‚
)
∑r£r_numbî_›ti⁄s_ã°
 },

6213 {"øndomly gíî©ed o±i⁄s", 0, (
ã°_ˇŒback_‚
)
øndom_°©emít_buûd_ã°
 },

6214 {"¥efix_key", 0, (
ã°_ˇŒback_‚
)
∑r£r_key_¥efix_ã°
 },

6215 {"£rvî", 0, (
ã°_ˇŒback_‚
)
£rvî_ã°
 },

6216 {"bad sîvî såögs", 0, (
ã°_ˇŒback_‚
)
£rvîs_bad_ã°
 },

6217 {"£rvî wôh weights", 0, (
ã°_ˇŒback_‚
)
£rvî_wôh_weight_ã°
 },

6218 {0, 0, (
ã°_ˇŒback_‚
)0}

6221 
ã°_°
 
	gvútuÆ_buckë_ã°s
[] ={

6222 {"basic", 0, (
ã°_ˇŒback_‚
)
vútuÆ_back_m≠
 },

6223 {0, 0, (
ã°_ˇŒback_‚
)0}

6226 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

6228 {"hash_ßnôy", 0, 0, 
hash_ßnôy
},

6230 {"basic", 0, 0, 
basic_ã°s
},

6231 {"hsõh_avaûabûôy", 0, 0, 
hsõh_avaûabûôy
},

6232 {"murmur_avaûabûôy", 0, 0, 
murmur_avaûabûôy
},

6233 {"block", 0, 0, 
ã°s
},

6234 {"bö¨y", (
ã°_ˇŒback_‚
)
¥e_bö¨y
, 0, 
ã°s
},

6235 {"n⁄block", (
ã°_ˇŒback_‚
)
¥e_n⁄block
, 0, 
ã°s
},

6236 {"nodñay", (
ã°_ˇŒback_‚
)
¥e_nodñay
, 0, 
ã°s
},

6237 {"£âimî", (
ã°_ˇŒback_‚
)
¥e_£âimî
, 0, 
ã°s
},

6238 {"md5", (
ã°_ˇŒback_‚
)
¥e_md5
, 0, 
ã°s
},

6239 {"¸c", (
ã°_ˇŒback_‚
)
¥e_¸c
, 0, 
ã°s
},

6240 {"hsõh", (
ã°_ˇŒback_‚
)
¥e_hsõh
, 0, 
ã°s
},

6241 {"jíkös", (
ã°_ˇŒback_‚
)
¥e_jíkös
, 0, 
ã°s
},

6242 {"‚v1_64", (
ã°_ˇŒback_‚
)
¥e_hash_‚v1_64
, 0, 
ã°s
},

6243 {"‚v1a_64", (
ã°_ˇŒback_‚
)
¥e_hash_‚v1a_64
, 0, 
ã°s
},

6244 {"‚v1_32", (
ã°_ˇŒback_‚
)
¥e_hash_‚v1_32
, 0, 
ã°s
},

6245 {"‚v1a_32", (
ã°_ˇŒback_‚
)
¥e_hash_‚v1a_32
, 0, 
ã°s
},

6246 {"këama", (
ã°_ˇŒback_‚
)
¥e_behavi‹_këama
, 0, 
ã°s
},

6247 {"këama_auto_eje˘_ho°s", (
ã°_ˇŒback_‚
)
¥e_behavi‹_këama
, 0, 
këama_auto_eje˘_ho°s
},

6248 {"unix_sockë", (
ã°_ˇŒback_‚
)
¥e_unix_sockë
, 0, 
ã°s
},

6249 {"unix_sockë_nodñay", (
ã°_ˇŒback_‚
)
¥e_nodñay
, 0, 
ã°s
},

6250 {"pﬁl_timeout", (
ã°_ˇŒback_‚
)
pﬁl_timeout
, 0, 
ã°s
},

6251 {"gës", (
ã°_ˇŒback_‚
)
íabÀ_ˇs
, 0, 
ã°s
},

6252 {"c⁄si°ít_¸c", (
ã°_ˇŒback_‚
)
íabÀ_c⁄si°ít_¸c
, 0, 
ã°s
},

6253 {"c⁄si°ít_hsõh", (
ã°_ˇŒback_‚
)
íabÀ_c⁄si°ít_hsõh
, 0, 
ã°s
},

6254 #ifde‡
MEMCACHED_ENABLE_DEPRECATED


6255 {"dïªˇãd_mem‹y_Æloˇt‹s", (
ã°_ˇŒback_‚
)
dïªˇãd_£t_mem‹y_Æloc
, 0, 
ã°s
},

6257 {"mem‹y_Æloˇt‹s", (
ã°_ˇŒback_‚
)
£t_mem‹y_Æloc
, 0, 
ã°s
},

6258 {"¥efix", (
ã°_ˇŒback_‚
)
£t_¥efix
, 0, 
ã°s
},

6259 {"ß¶_auth", (
ã°_ˇŒback_‚
)
¥e_ß¶
, 0, 
ß¶_auth_ã°s
 },

6260 {"ß¶", (
ã°_ˇŒback_‚
)
¥e_ß¶
, 0, 
ã°s
 },

6261 {"vîsi⁄_1_2_3", (
ã°_ˇŒback_‚
)
check_f‹_1_2_3
, 0, 
vîsi⁄_1_2_3
},

6262 {"°rög", 0, 0, 
°rög_ã°s
},

6263 {"ªsu…", 0, 0, 
ªsu…_ã°s
},

6264 {"async", (
ã°_ˇŒback_‚
)
¥e_n⁄block
, 0, 
async_ã°s
},

6265 {"async_bö¨y", (
ã°_ˇŒback_‚
)
¥e_n⁄block_bö¨y
, 0, 
async_ã°s
},

6266 {"u£r", 0, 0, 
u£r_ã°s
},

6267 {"gíî©e", 0, 0, 
gíî©e_ã°s
},

6268 {"gíî©e_hsõh", (
ã°_ˇŒback_‚
)
¥e_hsõh
, 0, 
gíî©e_ã°s
},

6269 {"gíî©e_këama", (
ã°_ˇŒback_‚
)
¥e_behavi‹_këama
, 0, 
gíî©e_ã°s
},

6270 {"gíî©e_hsõh_c⁄si°ít", (
ã°_ˇŒback_‚
)
íabÀ_c⁄si°ít_hsõh
, 0, 
gíî©e_ã°s
},

6271 {"gíî©e_md5", (
ã°_ˇŒback_‚
)
¥e_md5
, 0, 
gíî©e_ã°s
},

6272 {"gíî©e_murmur", (
ã°_ˇŒback_‚
)
¥e_murmur
, 0, 
gíî©e_ã°s
},

6273 {"gíî©e_jíkös", (
ã°_ˇŒback_‚
)
¥e_jíkös
, 0, 
gíî©e_ã°s
},

6274 {"gíî©e_n⁄block", (
ã°_ˇŒback_‚
)
¥e_n⁄block
, 0, 
gíî©e_ã°s
},

6276 {"gíî©e_c‹ked", (
ã°_ˇŒback_‚
)
¥e_c‹k
, 0, 
gíî©e_ã°s
},

6277 {"gíî©e_c‹ked_™d_n⁄block", (
ã°_ˇŒback_‚
)
¥e_c‹k_™d_n⁄block
, 0, 
gíî©e_ã°s
},

6278 {"c⁄si°ít_nŸ", 0, 0, 
c⁄si°ít_ã°s
},

6279 {"c⁄si°ít_këama", (
ã°_ˇŒback_‚
)
¥e_behavi‹_këama
, 0, 
c⁄si°ít_ã°s
},

6280 {"c⁄si°ít_këama_weighãd", (
ã°_ˇŒback_‚
)
¥e_behavi‹_këama_weighãd
, 0, 
c⁄si°ít_weighãd_ã°s
},

6281 {"këama_com∑t", 0, 0, 
këama_com∑tibûôy
},

6282 {"ã°_hashes", 0, 0, 
hash_ã°s
},

6283 {"ª∂iˇti⁄", (
ã°_ˇŒback_‚
)
¥e_ª∂iˇti⁄
, 0, 
ª∂iˇti⁄_ã°s
},

6284 {"ª∂iˇti⁄_noblock", (
ã°_ˇŒback_‚
)
¥e_ª∂iˇti⁄_noblock
, 0, 
ª∂iˇti⁄_ã°s
},

6285 {"ªgªssi⁄", 0, 0, 
ªgªssi⁄_ã°s
},

6286 {"behavi‹s", 0, 0, 
behavi‹_ã°s
},

6287 {"ªgªssi⁄_bö¨y_vs_block", (
ã°_ˇŒback_‚
)
key_£tup
, (ã°_ˇŒback_‚)
key_ã¨down
, 
ªgªssi⁄_bö¨y_vs_block
},

6288 {"îr‹_c⁄dôi⁄s", 0, 0, 
îr‹_c⁄dôi⁄s
},

6289 {"∑r£r", 0, 0, 
∑r£r_ã°s
},

6290 {"vútuÆ buckës", 0, 0, 
vútuÆ_buckë_ã°s
},

6294 
	~"libmemˇched_w‹ld.h
"

6296 
	$gë_w‹ld
(
w‹ld_°
 *
w‹ld
)

6298 
w‹ld
->
cﬁÀ˘i⁄s

cﬁÀ˘i⁄
;

6300 
w‹ld
->
¸óã
(
ã°_ˇŒback_¸óã_‚
)
w‹ld_¸óã
;

6301 
w‹ld
->
de°roy
(
ã°_ˇŒback_‚
)
w‹ld_de°roy
;

6303 
w‹ld
->
ã°
.
°¨tup
(
ã°_ˇŒback_‚
)
w‹ld_ã°_°¨tup
;

6304 
w‹ld
->
ã°
.
Êush
(
ã°_ˇŒback_‚
)
w‹ld_Êush
;

6305 
w‹ld
->
ã°
.
¥e_run
(
ã°_ˇŒback_‚
)
w‹ld_¥e_run
;

6306 
w‹ld
->
ã°
.
po°_run
(
ã°_ˇŒback_‚
)
w‹ld_po°_run
;

6307 
w‹ld
->
ã°
.
⁄_îr‹
(
ã°_ˇŒback_îr‹_‚
)
w‹ld_⁄_îr‹
;

6309 
w‹ld
->
cﬁÀ˘i⁄
.
°¨tup
(
ã°_ˇŒback_‚
)
w‹ld_c⁄èöî_°¨tup
;

6310 
w‹ld
->
cﬁÀ˘i⁄
.
shutdown
(
ã°_ˇŒback_‚
)
w‹ld_c⁄èöî_shutdown
;

6312 
w‹ld
->
ru¬î
&
defuÆt_libmemˇched_ru¬î
;

6313 
	}
}

	@tests/mem_udp.c

13 
	~"c⁄fig.h
"

15 
	~"libmemˇched/comm⁄.h
"

17 
	~<as£π.h
>

18 
	~<°dio.h
>

19 
	~<°döt.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<sys/time.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/°©.h
>

25 
	~<sig«l.h
>

26 
	~<uni°d.h
>

27 
	~<time.h
>

29 
	~<libã°/£rvî.h
>

30 
	~<libã°/ã°.h
>

32 
	#SERVERS_TO_CREATE
 5

	)

38 
ã°_ªtu∫_t
 
	$¥e_bö¨y
(
memˇched_°
 *
memc
)

40 
memˇched_ªtu∫_t
 
rc

MEMCACHED_FAILURE
;

41 
memˇched_°
 *
memc_˛⁄e
;

42 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
;

44 
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

45 
	`ã°_åue
(
memc_˛⁄e
);

48 
	`memˇched_vîsi⁄
(
memc_˛⁄e
);

50 
ö°™˚

	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc_˛⁄e
, 0);

52 i‡(
ö°™˚
->
maj‹_vîsi⁄
 >1 && in°™˚->
mö‹_vîsi⁄
 > 2)

54 
rc
 = 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
, 1);

55 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

56 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_BINARY_PROTOCOL
) == 1);

59 
	`memˇched_‰ì
(
memc_˛⁄e
);

61  
rc
 =
MEMCACHED_SUCCESS
 ? 
TEST_SUCCESS
 : 
TEST_SKIPPED
;

62 
	}
}

64 
	$ö¸emít_ªque°_id
(
uöt16_t
 *
id
)

66 (*
id
)++;

67 i‡((*
id
 & 
UDP_REQUEST_ID_THREAD_MASK
) != 0)

68 *
id
= 0;

69 
	}
}

71 
uöt16_t
 *
	$gë_udp_ªque°_ids
(
memˇched_°
 *
memc
)

73 
uöt16_t
 *
ids

	`mÆloc
((uöt16_tË* 
	`memˇched_£rvî_cou¡
(
memc
));

74 
	`as£π
(
ids
 !
NULL
);

76 
uöt32_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

78 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

79 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
x
);

81 
ids
[
x
]
	`gë_udp_d©agøm_ªque°_id
((
udp_d©agøm_hódî_°
 *Ë((
memˇched_£rvî_ö°™˚_°
 )
ö°™˚
)->
wrôe_buf„r
);

84  
ids
;

85 
	}
}

87 
ã°_ªtu∫_t
 
	$po°_udp_›_check
(
memˇched_°
 *
memc
, 
uöt16_t
 *
ex≥˘ed_ªq_ids
)

89 ()
memc
;

90 ()
ex≥˘ed_ªq_ids
;

92 
memˇched_£rvî_°
 *
cur_£rvî
 = 
	`memˇched_£rvî_li°
(
memc
);

93 
uöt16_t
 *
cur_ªq_ids
 = 
	`gë_udp_ªque°_ids
(
memc
);

95 
size_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

97 
	`ã°_åue
(
cur_£rvî
[
x
].
curs‹_a˘ive
 == 0);

98 
	`ã°_åue
(
cur_ªq_ids
[
x
] =
ex≥˘ed_ªq_ids
[x]);

100 
	`‰ì
(
ex≥˘ed_ªq_ids
);

101 
	`‰ì
(
cur_ªq_ids
);

104  
TEST_SUCCESS
;

105 
	}
}

111 
ã°_ªtu∫_t
 
	$öô_udp
(
memˇched_°
 *
memc
)

113 
	`memˇched_vîsi⁄
(
memc
);

115 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

116 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

119 i‡(
ö°™˚
->
maj‹_vîsi⁄
 !1 || in°™˚->
mö‹_vîsi⁄
 != 2

120 || 
ö°™˚
->
mi¸o_vîsi⁄
 < 6)

121  
TEST_SKIPPED
;

123 
uöt32_t
 
num_ho°s

	`memˇched_£rvî_cou¡
(
memc
);

124 
memˇched_£rvî_°
 
£rvîs
[
num_ho°s
];

125 
	`mem˝y
(
£rvîs
, 
	`memˇched_£rvî_li°
(
memc
), (
memˇched_£rvî_°
Ë* 
num_ho°s
);

126 
uöt32_t
 
x
0; x < 
num_ho°s
; x++)

128 
memˇched_£rvî_ö°™˚_°
 
£t_ö°™˚
=

129 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
x
);

131 
	`memˇched_£rvî_‰ì
(((
memˇched_£rvî_wrôe_ö°™˚_°
)
£t_ö°™˚
));

134 
memc
->
numbî_of_ho°s
= 0;

135 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_USE_UDP
, 1);

136 
uöt32_t
 
x
0; x < 
num_ho°s
; x++)

138 
memˇched_£rvî_ö°™˚_°
 
£t_ö°™˚
=

139 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
x
);

141 
	`ã°_åue
(
	`memˇched_£rvî_add_udp
(
memc
, 
£rvîs
[
x
].
ho°«me
, sîvîs[x].
p‹t
Ë=
MEMCACHED_SUCCESS
);

142 
	`ã°_åue
(
£t_ö°™˚
->
wrôe_buf„r_off£t
 =
UDP_DATAGRAM_HEADER_LENGTH
);

146  
TEST_SKIPPED
;

147 
	}
}

149 
ã°_ªtu∫_t
 
	$bö¨y_öô_udp
(
memˇched_°
 *
memc
)

151 
ã°_ªtu∫_t
 
ã°_rc
;

152 
ã°_rc

	`¥e_bö¨y
(
memc
);

154 i‡(
ã°_rc
 !
TEST_SUCCESS
)

155  
ã°_rc
;

157  
	`öô_udp
(
memc
);

158 
	}
}

161 
ã°_ªtu∫_t
 
	$add_t˝_£rvî_udp_˛õ¡_ã°
(
memˇched_°
 *
memc
)

163 ()
memc
;

165 
memˇched_£rvî_°
 
£rvî
;

166 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

167 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

168 
	`memˇched_£rvî_˛⁄e
(&
£rvî
, &
memc
->
ho°s
[0]);

169 
	`ã°_åue
(
	`memˇched_£rvî_ªmove
(&(
memc
->
ho°s
[0])Ë=
MEMCACHED_SUCCESS
);

170 
	`ã°_åue
(
	`memˇched_£rvî_add
(
memc
, 
£rvî
.
ho°«me
, sîvî.
p‹t
Ë=
MEMCACHED_INVALID_HOST_PROTOCOL
);

172  
TEST_SUCCESS
;

173 
	}
}

176 
ã°_ªtu∫_t
 
	$add_udp_£rvî_t˝_˛õ¡_ã°
(
memˇched_°
 *
memc
)

178 ()
memc
;

180 
memˇched_£rvî_°
 
£rvî
;

181 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

182 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

183 
	`memˇched_£rvî_˛⁄e
(&
£rvî
, &
memc
->
ho°s
[0]);

184 
	`ã°_åue
(
	`memˇched_£rvî_ªmove
(&(
memc
->
ho°s
[0])Ë=
MEMCACHED_SUCCESS
);

186 
memˇched_°
 
t˝_˛õ¡
;

187 
	`memˇched_¸óã
(&
t˝_˛õ¡
);

188 
	`ã°_åue
(
	`memˇched_£rvî_add_udp
(&
t˝_˛õ¡
, 
£rvî
.
ho°«me
, sîvî.
p‹t
Ë=
MEMCACHED_INVALID_HOST_PROTOCOL
);

191  
TEST_SUCCESS
;

192 
	}
}

194 
ã°_ªtu∫_t
 
	$£t_udp_behavi‹_ã°
(
memˇched_°
 *
memc
)

197 
	`memˇched_quô
(
memc
);

198 
memc
->
numbî_of_ho°s
= 0;

199 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
, memc->
di°ributi⁄
);

200 
	`ã°_åue
(
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_USE_UDP
, 1Ë=
MEMCACHED_SUCCESS
);

201 
	`ã°_åue
(
memc
->
Êags
.
u£_udp
);

202 
	`ã°_åue
(
memc
->
Êags
.
no_ª∂y
);

204 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
memc
) == 0);

206 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_USE_UDP
,0);

207 
	`ã°_åue
(! (
memc
->
Êags
.
u£_udp
));

208 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
,0);

209 
	`ã°_åue
(! (
memc
->
Êags
.
no_ª∂y
));

211  
TEST_SUCCESS
;

212 
	}
}

214 
ã°_ªtu∫_t
 
	$udp_£t_ã°
(
memˇched_°
 *
memc
)

216 
num_ôîs
= 1025;

218 
size_t
 
x
0; x < 
num_ôîs
;x++)

220 
memˇched_ªtu∫_t
 
rc
;

221 c⁄° *
key
= "foo";

222 c⁄° *
vÆue
= "when we sanitize";

223 
uöt16_t
 *
ex≥˘ed_ids

	`gë_udp_ªque°_ids
(
memc
);

224 
£rvî_key

	`memˇched_gíî©e_hash
(
memc
, 
key
, 
	`°æí
(key));

225 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

226 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_key
);

227 
size_t
 
öô_off£t

ö°™˚
->
wrôe_buf„r_off£t
;

229 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

230 
vÆue
, 
	`°æí
(value),

231 (
time_t
)0, (
uöt32_t
)0);

232 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

237 i‡(
rc
 =
MEMCACHED_SUCCESS
 ||

238 
ö°™˚
->
wrôe_buf„r_off£t
 < 
öô_off£t
)

239 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
£rvî_key
]);

241 i‡(
rc
 =
MEMCACHED_SUCCESS
)

243 
	`ã°_åue
(
ö°™˚
->
wrôe_buf„r_off£t
 =
UDP_DATAGRAM_HEADER_LENGTH
);

247 
	`ã°_åue
(
ö°™˚
->
wrôe_buf„r_off£t
 !
UDP_DATAGRAM_HEADER_LENGTH
);

248 
	`ã°_åue
(
ö°™˚
->
wrôe_buf„r_off£t
 <
MAX_UDP_DATAGRAM_LENGTH
);

250 
	`ã°_åue
(
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
Ë=
TEST_SUCCESS
);

252  
TEST_SUCCESS
;

253 
	}
}

255 
ã°_ªtu∫_t
 
	$udp_buf„ªd_£t_ã°
(
memˇched_°
 *
memc
)

257 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 1);

258  
	`udp_£t_ã°
(
memc
);

259 
	}
}

261 
ã°_ªtu∫_t
 
	$udp_£t_too_big_ã°
(
memˇched_°
 *
memc
)

263 
memˇched_ªtu∫_t
 
rc
;

264 c⁄° *
key
= "bar";

265 
vÆue
[
MAX_UDP_DATAGRAM_LENGTH
];

266 
uöt16_t
 *
ex≥˘ed_ids

	`gë_udp_ªque°_ids
(
memc
);

267 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

268 
vÆue
, 
MAX_UDP_DATAGRAM_LENGTH
,

269 (
time_t
)0, (
uöt32_t
)0);

270 
	`ã°_åue
(
rc
 =
MEMCACHED_WRITE_FAILURE
);

272  
	`po°_udp_›_check
(
memc
,
ex≥˘ed_ids
);

273 
	}
}

275 
ã°_ªtu∫_t
 
	$udp_dñëe_ã°
(
memˇched_°
 *
memc
)

277 
num_ôîs
= 1025;

279 
size_t
 
x
0; x < 
num_ôîs
;x++)

281 
memˇched_ªtu∫_t
 
rc
;

282 c⁄° *
key
= "foo";

283 
uöt16_t
 *
ex≥˘ed_ids
=
	`gë_udp_ªque°_ids
(
memc
);

284 
£rvî_key

	`memˇched_gíî©e_hash
(
memc
, 
key
, 
	`°æí
(key));

285 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

286 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 
£rvî_key
);

287 
size_t
 
öô_off£t

ö°™˚
->
wrôe_buf„r_off£t
;

289 
rc

	`memˇched_dñëe
(
memc
, 
key
, 
	`°æí
(key), 0);

290 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
 ||Ñ¯=
MEMCACHED_BUFFERED
);

292 i‡(
rc
 =
MEMCACHED_SUCCESS
 || 
ö°™˚
->
wrôe_buf„r_off£t
 < 
öô_off£t
)

293 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
£rvî_key
]);

294 i‡(
rc
 =
MEMCACHED_SUCCESS
)

296 
	`ã°_åue
(
ö°™˚
->
wrôe_buf„r_off£t
 =
UDP_DATAGRAM_HEADER_LENGTH
);

300 
	`ã°_åue
(
ö°™˚
->
wrôe_buf„r_off£t
 !
UDP_DATAGRAM_HEADER_LENGTH
);

301 
	`ã°_åue
(
ö°™˚
->
wrôe_buf„r_off£t
 <
MAX_UDP_DATAGRAM_LENGTH
);

303 
	`ã°_åue
(
	`po°_udp_›_check
(
memc
,
ex≥˘ed_ids
Ë=
TEST_SUCCESS
);

305  
TEST_SUCCESS
;

306 
	}
}

308 
ã°_ªtu∫_t
 
	$udp_buf„ªd_dñëe_ã°
(
memˇched_°
 *
memc
)

310 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_BUFFER_REQUESTS
, 1);

311  
	`udp_dñëe_ã°
(
memc
);

312 
	}
}

314 
ã°_ªtu∫_t
 
	$udp_vîbosôy_ã°
(
memˇched_°
 *
memc
)

316 
memˇched_ªtu∫_t
 
rc
;

317 
uöt16_t
 *
ex≥˘ed_ids

	`gë_udp_ªque°_ids
(
memc
);

319 
size_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

321 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
x
]);

324 
rc

	`memˇched_vîbosôy
(
memc
,3);

325 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

326  
	`po°_udp_›_check
(
memc
,
ex≥˘ed_ids
);

327 
	}
}

329 
ã°_ªtu∫_t
 
	$udp_quô_ã°
(
memˇched_°
 *
memc
)

331 
uöt16_t
 *
ex≥˘ed_ids

	`gë_udp_ªque°_ids
(
memc
);

332 
	`memˇched_quô
(
memc
);

333  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

334 
	}
}

336 
ã°_ªtu∫_t
 
	$udp_Êush_ã°
(
memˇched_°
 *
memc
)

338 
memˇched_ªtu∫_t
 
rc
;

339 
uöt16_t
 *
ex≥˘ed_ids

	`gë_udp_ªque°_ids
(
memc
);

341 
size_t
 
x
0; x < 
	`memˇched_£rvî_cou¡
(
memc
); x++)

343 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
x
]);

346 
rc

	`memˇched_Êush
(
memc
,0);

347 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

348  
	`po°_udp_›_check
(
memc
,
ex≥˘ed_ids
);

349 
	}
}

351 
ã°_ªtu∫_t
 
	$udp_ö¸_ã°
(
memˇched_°
 *
memc
)

353 
memˇched_ªtu∫_t
 
rc
;

354 c⁄° *
key
= "incr";

355 c⁄° *
vÆue
= "1";

356 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

357 
vÆue
, 
	`°æí
(value),

358 (
time_t
)0, (
uöt32_t
)0);

360 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

361 
uöt16_t
 *
ex≥˘ed_ids

	`gë_udp_ªque°_ids
(
memc
);

362 
£rvî_key

	`memˇched_gíî©e_hash
(
memc
, 
key
, 
	`°æí
(key));

363 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
£rvî_key
]);

364 
uöt64_t
 
√wvÆue
;

365 
rc

	`memˇched_ö¸emít
(
memc
, 
key
, 
	`°æí
(key), 1, &
√wvÆue
);

366 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

367  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

368 
	}
}

370 
ã°_ªtu∫_t
 
	$udp_de¸_ã°
(
memˇched_°
 *
memc
)

372 
memˇched_ªtu∫_t
 
rc
;

373 c⁄° *
key
= "decr";

374 c⁄° *
vÆue
= "1";

375 
rc

	`memˇched_£t
(
memc
, 
key
, 
	`°æí
(key),

376 
vÆue
, 
	`°æí
(value),

377 (
time_t
)0, (
uöt32_t
)0);

379 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

380 
uöt16_t
 *
ex≥˘ed_ids

	`gë_udp_ªque°_ids
(
memc
);

381 
£rvî_key

	`memˇched_gíî©e_hash
(
memc
, 
key
, 
	`°æí
(key));

382 
	`ö¸emít_ªque°_id
(&
ex≥˘ed_ids
[
£rvî_key
]);

383 
uöt64_t
 
√wvÆue
;

384 
rc

	`memˇched_de¸emít
(
memc
, 
key
, 
	`°æí
(key), 1, &
√wvÆue
);

385 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

386  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

387 
	}
}

390 
ã°_ªtu∫_t
 
	$udp_°©_ã°
(
memˇched_°
 *
memc
)

392 
memˇched_°©_°
 * 
rv

NULL
;

393 
memˇched_ªtu∫_t
 
rc
;

394 
¨gs
[]= "";

395 
uöt16_t
 *
ex≥˘ed_ids
 = 
	`gë_udp_ªque°_ids
(
memc
);

396 
rv
 = 
	`memˇched_°©
(
memc
, 
¨gs
, &
rc
);

397 
	`‰ì
(
rv
);

398 
	`ã°_åue
(
rc
 =
MEMCACHED_NOT_SUPPORTED
);

399  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

400 
	}
}

402 
ã°_ªtu∫_t
 
	$udp_vîsi⁄_ã°
(
memˇched_°
 *
memc
)

404 
memˇched_ªtu∫_t
 
rc
;

405 
uöt16_t
 *
ex≥˘ed_ids
 = 
	`gë_udp_ªque°_ids
(
memc
);

406 
rc
 = 
	`memˇched_vîsi⁄
(
memc
);

407 
	`ã°_åue
(
rc
 =
MEMCACHED_NOT_SUPPORTED
);

408  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

409 
	}
}

411 
ã°_ªtu∫_t
 
	$udp_gë_ã°
(
memˇched_°
 *
memc
)

413 
memˇched_ªtu∫_t
 
rc
;

414 c⁄° *
key
= "foo";

415 
size_t
 
vÀn
;

416 
uöt16_t
 *
ex≥˘ed_ids
 = 
	`gë_udp_ªque°_ids
(
memc
);

417 *
vÆ

	`memˇched_gë
(
memc
, 
key
, 
	`°æí
(key), &
vÀn
, (
uöt32_t
)0, &
rc
);

418 
	`ã°_åue
(
rc
 =
MEMCACHED_NOT_SUPPORTED
);

419 
	`ã°_åue
(
vÆ
 =
NULL
);

420  
	`po°_udp_›_check
(
memc
, 
ex≥˘ed_ids
);

421 
	}
}

423 
ã°_ªtu∫_t
 
	$udp_mixed_io_ã°
(
memˇched_°
 *
memc
)

425 
ã°_°
 
cuºít_›
;

426 
ã°_°
 
mixed_io_›s
 [] ={

428 (
ã°_ˇŒback_‚
)
udp_£t_ã°
},

430 (
ã°_ˇŒback_‚
)
udp_£t_too_big_ã°
},

432 (
ã°_ˇŒback_‚
)
udp_dñëe_ã°
},

434 (
ã°_ˇŒback_‚
)
udp_vîbosôy_ã°
},

436 (
ã°_ˇŒback_‚
)
udp_quô_ã°
},

438 (
ã°_ˇŒback_‚
)
udp_Êush_ã°
},

440 (
ã°_ˇŒback_‚
)
udp_ö¸_ã°
},

442 (
ã°_ˇŒback_‚
)
udp_de¸_ã°
},

444 (
ã°_ˇŒback_‚
)
udp_vîsi⁄_ã°
}

447 
size_t
 
x
= 0; x < 500; x++)

449 
cuºít_›

mixed_io_›s
[
	`øndom
() % 9];

450 
	`ã°_åue
(
cuºít_›
.
	`ã°_‚
(
memc
Ë=
TEST_SUCCESS
);

452  
TEST_SUCCESS
;

453 
	}
}

455 
ã°_°
 
	gudp_£tup_£rvî_ã°s
[] ={

456 {"£t_udp_behavi‹_ã°", 0, (
ã°_ˇŒback_‚
)
£t_udp_behavi‹_ã°
},

457 {"add_t˝_£rvî_udp_˛õ¡_ã°", 0, (
ã°_ˇŒback_‚
)
add_t˝_£rvî_udp_˛õ¡_ã°
},

458 {"add_udp_£rvî_t˝_˛õ¡_ã°", 0, (
ã°_ˇŒback_‚
)
add_udp_£rvî_t˝_˛õ¡_ã°
},

462 
ã°_°
 
	gupd_io_ã°s
[] ={

463 {"udp_£t_ã°", 0, (
ã°_ˇŒback_‚
)
udp_£t_ã°
},

464 {"udp_buf„ªd_£t_ã°", 0, (
ã°_ˇŒback_‚
)
udp_buf„ªd_£t_ã°
},

465 {"udp_£t_too_big_ã°", 0, (
ã°_ˇŒback_‚
)
udp_£t_too_big_ã°
},

466 {"udp_dñëe_ã°", 0, (
ã°_ˇŒback_‚
)
udp_dñëe_ã°
},

467 {"udp_buf„ªd_dñëe_ã°", 0, (
ã°_ˇŒback_‚
)
udp_buf„ªd_dñëe_ã°
},

468 {"udp_vîbosôy_ã°", 0, (
ã°_ˇŒback_‚
)
udp_vîbosôy_ã°
},

469 {"udp_quô_ã°", 0, (
ã°_ˇŒback_‚
)
udp_quô_ã°
},

470 {"udp_Êush_ã°", 0, (
ã°_ˇŒback_‚
)
udp_Êush_ã°
},

471 {"udp_ö¸_ã°", 0, (
ã°_ˇŒback_‚
)
udp_ö¸_ã°
},

472 {"udp_de¸_ã°", 0, (
ã°_ˇŒback_‚
)
udp_de¸_ã°
},

473 {"udp_°©_ã°", 0, (
ã°_ˇŒback_‚
)
udp_°©_ã°
},

474 {"udp_vîsi⁄_ã°", 0, (
ã°_ˇŒback_‚
)
udp_vîsi⁄_ã°
},

475 {"udp_gë_ã°", 0, (
ã°_ˇŒback_‚
)
udp_gë_ã°
},

476 {"udp_mixed_io_ã°", 0, (
ã°_ˇŒback_‚
)
udp_mixed_io_ã°
},

480 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

481 {"udp_£tup", (
ã°_ˇŒback_‚
)
öô_udp
, 0, 
udp_£tup_£rvî_ã°s
},

482 {"udp_io", (
ã°_ˇŒback_‚
)
öô_udp
, 0, 
upd_io_ã°s
},

483 {"udp_bö¨y_io", (
ã°_ˇŒback_‚
)
bö¨y_öô_udp
, 0, 
upd_io_ã°s
},

487 
	#SERVERS_TO_CREATE
 5

	)

489 
	~"libmemˇched_w‹ld.h
"

491 
	$gë_w‹ld
(
w‹ld_°
 *
w‹ld
)

493 
w‹ld
->
cﬁÀ˘i⁄s

cﬁÀ˘i⁄
;

495 
w‹ld
->
¸óã
(
ã°_ˇŒback_¸óã_‚
)
w‹ld_¸óã
;

496 
w‹ld
->
de°roy
(
ã°_ˇŒback_‚
)
w‹ld_de°roy
;

498 
w‹ld
->
ã°
.
°¨tup
(
ã°_ˇŒback_‚
)
w‹ld_ã°_°¨tup
;

499 
w‹ld
->
ã°
.
Êush
(
ã°_ˇŒback_‚
)
w‹ld_Êush
;

500 
w‹ld
->
ã°
.
¥e_run
(
ã°_ˇŒback_‚
)
w‹ld_¥e_run
;

501 
w‹ld
->
ã°
.
po°_run
(
ã°_ˇŒback_‚
)
w‹ld_po°_run
;

502 
w‹ld
->
ã°
.
⁄_îr‹
(
ã°_ˇŒback_îr‹_‚
)
w‹ld_⁄_îr‹
;

504 
w‹ld
->
cﬁÀ˘i⁄
.
°¨tup
(
ã°_ˇŒback_‚
)
w‹ld_c⁄èöî_°¨tup
;

505 
w‹ld
->
cﬁÀ˘i⁄
.
shutdown
(
ã°_ˇŒback_‚
)
w‹ld_c⁄èöî_shutdown
;

507 
w‹ld
->
ru¬î
&
defuÆt_libmemˇched_ru¬î
;

508 
	}
}

	@tests/parser.cc

38 
	~<c⁄fig.h
>

40 
	~<ve˘‹
>

41 
	~<io°ªam
>

42 
	~<°rög
>

43 
	~<î∫o.h
>

45 
	#BUILDING_LIBMEMCACHED


	)

46 
	~<libmemˇched/memˇched.h
>

48 
	~"ã°s/∑r£r.h
"

49 
	~"ã°s/¥öt.h
"

51 
	esˇ¬î_ty≥_t


53 
	mNIL
,

54 
	mUNSIGNED
,

55 
	mSIGNED
,

56 
	mARRAY


60 
	ssˇ¬î_°rög_°
 {

61 c⁄° *
	mc_°r
;

62 
size_t
 
	msize
;

65 
ölöe
 
sˇ¬î_°rög_°
 
	$sˇ¬î_°rög
(c⁄° *
¨g
, 
size_t
 
¨g_size
)

67 
sˇ¬î_°rög_°
 
loˇl
{ 
¨g
, 
¨g_size
 };

68  
loˇl
;

69 
	}
}

71 
	#make_sˇ¬î_°rög
(
X
Ë
	`sˇ¬î_°rög
((X), 
°©ic_ˇ°
<
size_t
>((XË- 1))

	)

73 
sˇ¬î_°rög_°
 
	gsˇ¬î_°rög_nuŒ
= { 0, 0};

75 
	ssˇ¬î_v¨übÀ_t
 {

76 
sˇ¬î_ty≥_t
 
	mty≥
;

77 
sˇ¬î_°rög_°
 
	m›ti⁄
;

78 
sˇ¬î_°rög_°
 
	mªsu…
;

79 
ã°_ªtu∫_t
 (*
check_func
)(
memˇched_°
 *
	mmemc
, c⁄° 
	msˇ¬î_°rög_°
 &
	mho°«me
);

83 
ã°_ªtu∫_t
 
	$__check_ho°
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &
ho°«me
)

85 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

86 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

88 
	`ã°_åue
(
ö°™˚
);

90 c⁄° *
fú°_ho°«me
 = 
	`memˇched_£rvî_«me
(
ö°™˚
);

91 
	`ã°_åue
(
fú°_ho°«me
);

92 
	`ã°_°rcmp
(
fú°_ho°«me
, 
ho°«me
.
c_°r
);

94  
TEST_SUCCESS
;

95 
	}
}

98 
ã°_ªtu∫_t
 
	$__check_¥efix_key
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &
ho°«me
)

100 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

101 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc
, 0);

103 
	`ã°_åue
(
ö°™˚
);

105 c⁄° *
fú°_ho°«me
 = 
	`memˇched_£rvî_«me
(
ö°™˚
);

106 
	`ã°_åue
(
fú°_ho°«me
);

107 
	`ã°_°rcmp
(
fú°_ho°«me
, 
ho°«me
.
c_°r
);

109  
TEST_SUCCESS
;

110 
	}
}

112 
ã°_ªtu∫_t
 
	$__check_IO_MSG_WATERMARK
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &
vÆue
)

114 
uöt64_t
 
vÆue_numbî
;

116 
vÆue_numbî

	`©ﬁl
(
vÆue
.
c_°r
);

118 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK
Ë=
vÆue_numbî
);

119  
TEST_SUCCESS
;

120 
	}
}

122 
ã°_ªtu∫_t
 
	$__check_REMOVE_FAILED_SERVERS
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &)

124 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS
));

125  
TEST_SUCCESS
;

126 
	}
}

128 
ã°_ªtu∫_t
 
	$__check_NOREPLY
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &)

130 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_NOREPLY
));

131  
TEST_SUCCESS
;

132 
	}
}

134 
ã°_ªtu∫_t
 
	$__check_VERIFY_KEY
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &)

136 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_VERIFY_KEY
));

137  
TEST_SUCCESS
;

138 
	}
}

140 
ã°_ªtu∫_t
 
	$__check_di°ributi⁄_RANDOM
(
memˇched_°
 *
memc
, c⁄° 
sˇ¬î_°rög_°
 &)

142 
	`ã°_åue
(
	`memˇched_behavi‹_gë
(
memc
, 
MEMCACHED_BEHAVIOR_DISTRIBUTION
Ë=
MEMCACHED_DISTRIBUTION_RANDOM
);

143  
TEST_SUCCESS
;

144 
	}
}

146 
sˇ¬î_v¨übÀ_t
 
	gã°_£rvî_°rögs
[]= {

147 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîˆoˇlho°"), make_sˇ¬î_°rög("loˇlho°"), 
__check_ho°
 },

148 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvî=10.0.2.1"), make_sˇ¬î_°rög("10.0.2.1"), 
__check_ho°
 },

149 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîÛxam∂e.com"), make_sˇ¬î_°rög("exam∂e.com"), 
__check_ho°
 },

150 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîˆoˇlho°:30"), make_sˇ¬î_°rög("loˇlho°"), 
__check_ho°
 },

151 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvî=10.0.2.1:20"), make_sˇ¬î_°rög("10.0.2.1"), 
__check_ho°
 },

152 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîÛxam∂e.com:1024"), make_sˇ¬î_°rög("exam∂e.com"), 
__check_ho°
 },

153 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
 }

156 
sˇ¬î_v¨übÀ_t
 
	gã°_£rvî_°rögs_wôh_weights
[]= {

157 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvî=10.0.2.1:30/?40"), make_sˇ¬î_°rög("10.0.2.1"), 
__check_ho°
 },

158 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîÛxam∂e.com:1024/?30"), make_sˇ¬î_°rög("exam∂e.com"), 
__check_ho°
 },

159 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvî=10.0.2.1/?20"), make_sˇ¬î_°rög("10.0.2.1"), 
__check_ho°
 },

160 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîÛxam∂e.com/?10"), make_sˇ¬î_°rög("exam∂e.com"), 
__check_ho°
 },

161 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
 }

164 
sˇ¬î_v¨übÀ_t
 
	gbad_ã°_°rögs
[]= {

165 { 
ARRAY
, 
make_sˇ¬î_°rög
("-£rvîsˆoˇlho°:11221,loˇlho°:11222,loˇlho°:11223,loˇlho°:11224,loˇlho°:11225"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

166 { 
ARRAY
, 
make_sˇ¬î_°rög
("-- sîvîs˜.exam∂e.com:81,loˇlho°:82,b.exam∂e.com"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

167 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîsˆoˇlho°:+80"), 
sˇ¬î_°rög_nuŒ
, 
NULL
},

168 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîsˆoˇlho°.com."), 
sˇ¬î_°rög_nuŒ
, 
NULL
},

169 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîˆoˇlho°.com."), 
sˇ¬î_°rög_nuŒ
, 
NULL
},

170 { 
ARRAY
, 
make_sˇ¬î_°rög
("--£rvîˆoˇlho°.com.:80"), 
sˇ¬î_°rög_nuŒ
, 
NULL
},

171 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

174 
sˇ¬î_v¨übÀ_t
 
	gã°_numbî_›ti⁄s
[]= {

175 { 
ARRAY
, 
make_sˇ¬î_°rög
("--CONNECT-TIMEOUT=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

176 { 
ARRAY
, 
make_sˇ¬î_°rög
("--IO-BYTES-WATERMARK=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

177 { 
ARRAY
, 
make_sˇ¬î_°rög
("--IO-KEY-PREFETCH=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

178 { 
ARRAY
, 
make_sˇ¬î_°rög
("--IO-MSG-WATERMARK=456"), make_sˇ¬î_°rög("456"), 
__check_IO_MSG_WATERMARK
 },

179 { 
ARRAY
, 
make_sˇ¬î_°rög
("--NUMBER-OF-REPLICAS=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

180 { 
ARRAY
, 
make_sˇ¬î_°rög
("--POLL-TIMEOUT=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

181 { 
ARRAY
, 
make_sˇ¬î_°rög
("--RCV-TIMEOUT=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

182 { 
ARRAY
, 
make_sˇ¬î_°rög
("--REMOVE-FAILED-SERVERS=3"), 
sˇ¬î_°rög_nuŒ
, 
__check_REMOVE_FAILED_SERVERS
 },

183 { 
ARRAY
, 
make_sˇ¬î_°rög
("--RETRY-TIMEOUT=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

184 { 
ARRAY
, 
make_sˇ¬î_°rög
("--SND-TIMEOUT=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

185 { 
ARRAY
, 
make_sˇ¬î_°rög
("--SOCKET-RECV-SIZE=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

186 { 
ARRAY
, 
make_sˇ¬î_°rög
("--SOCKET-SEND-SIZE=456"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

187 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

190 
sˇ¬î_v¨übÀ_t
 
	gã°_boﬁón_›ti⁄s
[]= {

191 { 
ARRAY
, 
make_sˇ¬î_°rög
("--BINARY-PROTOCOL"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

192 { 
ARRAY
, 
make_sˇ¬î_°rög
("--BUFFER-REQUESTS"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

193 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH-WITH-NAMESPACE"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

194 { 
ARRAY
, 
make_sˇ¬î_°rög
("--NOREPLY"), 
sˇ¬î_°rög_nuŒ
, 
__check_NOREPLY
 },

195 { 
ARRAY
, 
make_sˇ¬î_°rög
("--RANDOMIZE-REPLICA-READ"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

196 { 
ARRAY
, 
make_sˇ¬î_°rög
("--SORT-HOSTS"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

197 { 
ARRAY
, 
make_sˇ¬î_°rög
("--SUPPORT-CAS"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

198 { 
ARRAY
, 
make_sˇ¬î_°rög
("--TCP-NODELAY"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

199 { 
ARRAY
, 
make_sˇ¬î_°rög
("--TCP-KEEPALIVE"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

200 { 
ARRAY
, 
make_sˇ¬î_°rög
("--TCP-KEEPIDLE"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

201 { 
ARRAY
, 
make_sˇ¬î_°rög
("--USE-UDP"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

202 { 
ARRAY
, 
make_sˇ¬î_°rög
("--VERIFY-KEY"), 
sˇ¬î_°rög_nuŒ
, 
__check_VERIFY_KEY
 },

203 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

206 
sˇ¬î_v¨übÀ_t
 
	g¥efix_key_°rögs
[]= {

207 { 
ARRAY
, 
make_sˇ¬î_°rög
("--NAMESPACE=foo"), make_sˇ¬î_°rög("foo"), 
__check_¥efix_key
 },

208 { 
ARRAY
, 
make_sˇ¬î_°rög
("--NAMESPACE=\"foo\""), make_sˇ¬î_°rög("foo"), 
__check_¥efix_key
 },

209 { 
ARRAY
, 
make_sˇ¬î_°rög
("--NAMESPACE=\"This_is_a_vîy_l⁄g_key\""), make_sˇ¬î_°rög("This_is_a_vîy_l⁄g_key"), 
__check_¥efix_key
 },

210 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

213 
sˇ¬î_v¨übÀ_t
 
	gdi°ributi⁄_°rögs
[]= {

214 { 
ARRAY
, 
make_sˇ¬î_°rög
("--DISTRIBUTION=c⁄si°ít"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

215 { 
ARRAY
, 
make_sˇ¬î_°rög
("--DISTRIBUTION=c⁄si°ít,CRC"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

216 { 
ARRAY
, 
make_sˇ¬î_°rög
("--DISTRIBUTION=c⁄si°ít,MD5"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

217 { 
ARRAY
, 
make_sˇ¬î_°rög
("--DISTRIBUTIONÙ™dom"), 
sˇ¬î_°rög_nuŒ
, 
__check_di°ributi⁄_RANDOM
 },

218 { 
ARRAY
, 
make_sˇ¬î_°rög
("--DISTRIBUTION=moduœ"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

219 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

222 
sˇ¬î_v¨übÀ_t
 
	ghash_°rögs
[]= {

223 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=CRC"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

224 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=FNV1A_32"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

225 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=FNV1A_64"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

226 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=FNV1_32"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

227 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=FNV1_64"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

228 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=JENKINS"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

229 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=MD5"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

230 { 
ARRAY
, 
make_sˇ¬î_°rög
("--HASH=MURMUR"), 
sˇ¬î_°rög_nuŒ
, 
NULL
 },

231 { 
NIL
, 
sˇ¬î_°rög_nuŒ
, sˇ¬î_°rög_nuŒ, 
NULL
}

235 
ã°_ªtu∫_t
 
	$_ã°_›ti⁄
(
sˇ¬î_v¨übÀ_t
 *
sˇ¬î
, 
boﬁ
 
ã°_åue

åue
)

237 ()
ã°_åue
;

239 
sˇ¬î_v¨übÀ_t
 *
±r

sˇ¬î
;Öå->
ty≥
 !
NIL
;Ötr++)

241 
memˇched_°
 *
memc
;

242 
memc

	`memˇched
(
±r
->
›ti⁄
.
c_°r
,Öå->›ti⁄.
size
);

243 i‡(
ã°_åue
)

245 i‡(
nŸ
 
memc
)

247 
buf„r
[2048];

248 
memˇched_ªtu∫_t
 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
±r
->
›ti⁄
.
c_°r
,Öå->›ti⁄.
size
, 
buf„r
, (buffer));

249 
°d
::
˚º
 << "Abouàîr‹ f‹ " << 
	`memˇched_°ªº‹
(
NULL
, 
rc
Ë<< " : " << 
buf„r
 << std::
ídl
;

252 
	`ã°_åue
(
memc
);

254 i‡(
±r
->
check_func
)

256 
ã°_ªtu∫_t
 
ã°_rc
(*
±r
->
check_func
)(
memc
,Öå->
ªsu…
);

257 i‡(
ã°_rc
 !
TEST_SUCCESS
)

259 
	`memˇched_‰ì
(
memc
);

260  
ã°_rc
;

264 
	`memˇched_‰ì
(
memc
);

268 
	`ã°_Ál£_wôh
(
memc
, 
±r
->
›ti⁄
.
c_°r
);

272  
TEST_SUCCESS
;

273 
	}
}

275 
ã°_ªtu∫_t
 
	$£rvî_ã°
(
memˇched_°
 *)

277  
	`_ã°_›ti⁄
(
ã°_£rvî_°rögs
);

278 
	}
}

280 
ã°_ªtu∫_t
 
	$£rvî_wôh_weight_ã°
(
memˇched_°
 *)

282  
	`_ã°_›ti⁄
(
ã°_£rvî_°rögs_wôh_weights
);

283 
	}
}

285 
ã°_ªtu∫_t
 
	$£rvîs_bad_ã°
(
memˇched_°
 *)

287 
ã°_ªtu∫_t
 
rc
;

288 i‡((
rc

	`_ã°_›ti⁄
(
bad_ã°_°rögs
, 
Ál£
)Ë!
TEST_SUCCESS
)

290  
rc
;

293  
TEST_SUCCESS
;

294 
	}
}

296 
ã°_ªtu∫_t
 
	$∑r£r_numbî_›ti⁄s_ã°
(
memˇched_°
*)

298  
	`_ã°_›ti⁄
(
ã°_numbî_›ti⁄s
);

299 
	}
}

301 
ã°_ªtu∫_t
 
	$∑r£r_boﬁón_›ti⁄s_ã°
(
memˇched_°
*)

303  
	`_ã°_›ti⁄
(
ã°_boﬁón_›ti⁄s
);

304 
	}
}

306 
ã°_ªtu∫_t
 
	$behavi‹_∑r£r_ã°
(
memˇched_°
*)

308  
TEST_SUCCESS
;

309 
	}
}

311 
ã°_ªtu∫_t
 
	$∑r£r_hash_ã°
(
memˇched_°
*)

313  
	`_ã°_›ti⁄
(
hash_°rögs
);

314 
	}
}

316 
ã°_ªtu∫_t
 
	$∑r£r_di°ributi⁄_ã°
(
memˇched_°
*)

318  
	`_ã°_›ti⁄
(
di°ributi⁄_°rögs
);

319 
	}
}

321 
ã°_ªtu∫_t
 
	$∑r£r_key_¥efix_ã°
(
memˇched_°
*)

323  
	`_ã°_›ti⁄
(
di°ributi⁄_°rögs
);

324 
	}
}

326 
	#SUPPORT_EXAMPLE_CNF
 "suµ‹t/exam∂e.˙f"

	)

328 
ã°_ªtu∫_t
 
	$memˇched_¸óã_wôh_›ti⁄s_wôh_fûíame
(
memˇched_°
*)

330 i‡(
	`ac˚ss
(
SUPPORT_EXAMPLE_CNF
, 
R_OK
))

331  
TEST_SKIPPED
;

333 
memˇched_°
 *
memc_±r
;

334 
memc_±r

	`memˇched
(
	`STRING_WITH_LEN
("--CONFIGURE-FILE=\"support/example.cnf\""));

335 
	`ã°_åue_gŸ
(
memc_±r
, 
	`memˇched_œ°_îr‹_mesßge
(memc_ptr));

336 
	`memˇched_‰ì
(
memc_±r
);

338  
TEST_SUCCESS
;

339 
	}
}

341 
ã°_ªtu∫_t
 
	$libmemˇched_check_c⁄figuøti⁄_wôh_fûíame_ã°
(
memˇched_°
*)

343 i‡(
	`ac˚ss
(
SUPPORT_EXAMPLE_CNF
, 
R_OK
))

344  
TEST_SKIPPED
;

346 
memˇched_ªtu∫_t
 
rc
;

347 
buf„r
[
BUFSIZ
];

349 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
	`STRING_WITH_LEN
("--CONFIGURE-FILE=\"suµ‹t/exam∂e.˙f\""), 
buf„r
, (buffer));

350 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
, 
buf„r
);

352 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
	`STRING_WITH_LEN
("--CONFIGURE-FILE=suµ‹t/exam∂e.˙f"), 
buf„r
, (buffer));

353 
	`ã°_Ál£_wôh
(
rc
 =
MEMCACHED_SUCCESS
, 
buf„r
);

355 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
	`STRING_WITH_LEN
("--CONFIGURE-FILE=\"bad-∑th/exam∂e.˙f\""), 
buf„r
, (buffer));

356 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_ERRNO
, 
buf„r
);

358  
TEST_SUCCESS
;

359 
	}
}

361 
ã°_ªtu∫_t
 
	$libmemˇched_check_c⁄figuøti⁄_ã°
(
memˇched_°
*)

363 
memˇched_ªtu∫_t
 
rc
;

364 
buf„r
[
BUFSIZ
];

366 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
	`STRING_WITH_LEN
("--£rvîˆoˇlho°"), 
buf„r
, (buffer));

367 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
, 
buf„r
);

369 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
	`STRING_WITH_LEN
("--dudeˆoˇlho°"), 
buf„r
, (buffer));

370 
	`ã°_Ál£_wôh
(
rc
 =
MEMCACHED_SUCCESS
, 
buf„r
);

371 
	`ã°_åue
(
rc
 =
MEMCACHED_PARSE_ERROR
);

373  
TEST_SUCCESS
;

374 
	}
}

376 
ã°_ªtu∫_t
 
	$memˇched_¸óã_wôh_›ti⁄s_ã°
(
memˇched_°
*)

378 
memˇched_°
 *
memc_±r
;

379 
memc_±r

	`memˇched
(
	`STRING_WITH_LEN
("--server=localhost"));

380 
	`ã°_åue_gŸ
(
memc_±r
, 
	`memˇched_œ°_îr‹_mesßge
(memc_ptr));

381 
	`memˇched_‰ì
(
memc_±r
);

383 
memc_±r

	`memˇched
(
	`STRING_WITH_LEN
("--dude=localhost"));

384 
	`ã°_Ál£_wôh
(
memc_±r
, 
	`memˇched_œ°_îr‹_mesßge
(memc_ptr));

386  
TEST_SUCCESS
;

387 
	}
}

389 
ã°_ªtu∫_t
 
	$ã°_ö˛ude_keyw‹d
(
memˇched_°
*)

391 i‡(
	`ac˚ss
(
SUPPORT_EXAMPLE_CNF
, 
R_OK
))

392  
TEST_SKIPPED
;

394 
buf„r
[
BUFSIZ
];

395 
memˇched_ªtu∫_t
 
rc
;

396 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
	`STRING_WITH_LEN
("INCLUDE \"suµ‹t/exam∂e.˙f\""), 
buf„r
, (buffer));

397 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
, 
buf„r
);

399  
TEST_SUCCESS
;

400 
	}
}

402 
ã°_ªtu∫_t
 
	$ã°_íd_keyw‹d
(
memˇched_°
*)

404 
buf„r
[
BUFSIZ
];

405 
memˇched_ªtu∫_t
 
rc
;

406 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
	`STRING_WITH_LEN
("--£rvîˆoˇlho° END bad keyw‹ds"), 
buf„r
, (buffer));

407 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
, 
buf„r
);

409  
TEST_SUCCESS
;

410 
	}
}

412 
ã°_ªtu∫_t
 
	$ã°_ª£t_keyw‹d
(
memˇched_°
*)

414 
buf„r
[
BUFSIZ
];

415 
memˇched_ªtu∫_t
 
rc
;

416 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
	`STRING_WITH_LEN
("--£rvîˆoˇlho°Ñe£à--£rvî=bad.com"), 
buf„r
, (buffer));

417 
	`ã°_åue_gŸ
(
rc
 =
MEMCACHED_SUCCESS
, 
buf„r
);

419  
TEST_SUCCESS
;

420 
	}
}

422 
ã°_ªtu∫_t
 
	$ã°_îr‹_keyw‹d
(
memˇched_°
*)

424 
buf„r
[
BUFSIZ
];

425 
memˇched_ªtu∫_t
 
rc
;

426 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
	`STRING_WITH_LEN
("--£rvîˆoˇlho° ERROR --£rvî=bad.com"), 
buf„r
, (buffer));

427 
	`ã°_åue_gŸ
(
rc
 !
MEMCACHED_SUCCESS
, 
buf„r
);

429  
TEST_SUCCESS
;

430 
	}
}

432 
	#RANDOM_STRINGS
 100

	)

433 
ã°_ªtu∫_t
 
	$øndom_°©emít_buûd_ã°
(
memˇched_°
*)

435 
°d
::
ve˘‹
<
sˇ¬î_°rög_°
 *> 
›ti⁄_li°
;

437 
sˇ¬î_v¨übÀ_t
 *
±r

ã°_£rvî_°rögs
;Öå->
ty≥
 !
NIL
;Ötr++)

438 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

440 
sˇ¬î_v¨übÀ_t
 *
±r

ã°_numbî_›ti⁄s
;Öå->
ty≥
 !
NIL
;Ötr++)

441 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

443 
sˇ¬î_v¨übÀ_t
 *
±r

ã°_boﬁón_›ti⁄s
;Öå->
ty≥
 !
NIL
;Ötr++)

444 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

446 
sˇ¬î_v¨übÀ_t
 *
±r

¥efix_key_°rögs
;Öå->
ty≥
 !
NIL
;Ötr++)

447 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

449 
sˇ¬î_v¨übÀ_t
 *
±r

di°ributi⁄_°rögs
;Öå->
ty≥
 !
NIL
;Ötr++)

450 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

452 
sˇ¬î_v¨übÀ_t
 *
±r

hash_°rögs
;Öå->
ty≥
 !
NIL
;Ötr++)

453 
›ti⁄_li°
.
	`push_back
(&
±r
->
›ti⁄
);

455 
uöt32_t
 
x
0; x < 
RANDOM_STRINGS
; x++)

457 
°d
::
°rög
 
øndom_›ti⁄s
;

459 
uöt32_t
 
numbî_of

	`øndom
(Ë% 
›ti⁄_li°
.
	`size
();

460 
uöt32_t
 
›ti⁄s
0; o±i⁄†< 
numbî_of
; options++)

462 
øndom_›ti⁄s
+
›ti⁄_li°
[
	`øndom
(Ë% o±i⁄_li°.
	`size
()]->
c_°r
;

463 
øndom_›ti⁄s
+= " ";

466 
memˇched_°
 *
memc_±r

	`memˇched
(
øndom_›ti⁄s
.
	`c_°r
(),Ñ™dom_›ti⁄s.
	`size
() -1);

467 i‡(
nŸ
 
memc_±r
)

469 
î∫o
)

471 
EINVAL
:

475 
buf„r
[2048];

476 
memˇched_ªtu∫_t
 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
øndom_›ti⁄s
.
	`c_°r
(),Ñ™dom_›ti⁄s.
	`size
(), 
buf„r
, (buffer));

477 
	`ã°_åue_gŸ
(
rc
 !
MEMCACHED_SUCCESS
, "memcached_create_with_options() failed whiledÜibmemcached_check_configuration() was successful");

478 
°d
::
˚º
 << "Eº‹ occuªd o¿" << 
øndom_›ti⁄s
.
	`c_°r
(Ë<< " : " << 
buf„r
 << std::
ídl
;

479  
TEST_FAILURE
;

483 
ENOMEM
:

484 
°d
::
˚º
 << "FaûedÅÿÆloˇã mem‹y f‹ memˇched_¸óã_wôh_›ti⁄s()" << std::
ídl
;

485 
	`memˇched_‰ì
(
memc_±r
);

486  
TEST_FAILURE
;

488 
°d
::
˚º
 << "Unknow¿îr‹ from memˇched_¸óã_wôh_›ti⁄s?!!" << std::
ídl
;

489 
	`memˇched_‰ì
(
memc_±r
);

490  
TEST_FAILURE
;

493 
	`memˇched_‰ì
(
memc_±r
);

496  
TEST_SUCCESS
;

497 
	}
}

	@tests/parser.h

38 #¥agm®
⁄˚


40 
	~<libã°/ã°.h
>

42 #ifdef 
__˝lu•lus


46 
LIBTEST_INTERNAL_API


47 
ã°_ªtu∫_t
 
£rvî_ã°
(
memˇched_°
 *
memc
);

49 
LIBTEST_INTERNAL_API


50 
ã°_ªtu∫_t
 
£rvîs_bad_ã°
(
memˇched_°
 *
memc
);

52 
LIBTEST_INTERNAL_API


53 
ã°_ªtu∫_t
 
behavi‹_∑r£r_ã°
(
memˇched_°
*);

55 
LIBTEST_INTERNAL_API


56 
ã°_ªtu∫_t
 
∑r£r_numbî_›ti⁄s_ã°
(
memˇched_°
*);

58 
LIBTEST_INTERNAL_API


59 
ã°_ªtu∫_t
 
∑r£r_di°ributi⁄_ã°
(
memˇched_°
*);

61 
LIBTEST_INTERNAL_API


62 
ã°_ªtu∫_t
 
∑r£r_hash_ã°
(
memˇched_°
*);

64 
LIBTEST_INTERNAL_API


65 
ã°_ªtu∫_t
 
∑r£r_boﬁón_›ti⁄s_ã°
(
memˇched_°
*);

67 
LIBTEST_INTERNAL_API


68 
ã°_ªtu∫_t
 
∑r£r_key_¥efix_ã°
(
memˇched_°
*);

70 
LIBTEST_INTERNAL_API


71 
ã°_ªtu∫_t
 
libmemˇched_check_c⁄figuøti⁄_ã°
(
memˇched_°
*);

73 
LIBTEST_INTERNAL_API


74 
ã°_ªtu∫_t
 
memˇched_¸óã_wôh_›ti⁄s_ã°
(
memˇched_°
*);

76 
LIBTEST_INTERNAL_API


77 
ã°_ªtu∫_t
 
memˇched_¸óã_wôh_›ti⁄s_wôh_fûíame
(
memˇched_°
*);

79 
LIBTEST_INTERNAL_API


80 
ã°_ªtu∫_t
 
libmemˇched_check_c⁄figuøti⁄_wôh_fûíame_ã°
(
memˇched_°
*);

82 
LIBTEST_INTERNAL_API


83 
ã°_ªtu∫_t
 
øndom_°©emít_buûd_ã°
(
memˇched_°
*);

85 
LIBTEST_INTERNAL_API


86 
ã°_ªtu∫_t
 
ã°_ö˛ude_keyw‹d
(
memˇched_°
*);

88 
LIBTEST_INTERNAL_API


89 
ã°_ªtu∫_t
 
ã°_íd_keyw‹d
(
memˇched_°
*);

91 
LIBTEST_INTERNAL_API


92 
ã°_ªtu∫_t
 
ã°_ª£t_keyw‹d
(
memˇched_°
*);

94 
LIBTEST_INTERNAL_API


95 
ã°_ªtu∫_t
 
ã°_îr‹_keyw‹d
(
memˇched_°
*);

97 
LIBTEST_INTERNAL_API


98 
ã°_ªtu∫_t
 
£rvî_wôh_weight_ã°
(
memˇched_°
 *);

100 #ifdef 
__˝lu•lus


	@tests/plus.cpp

4 
	~"libmemˇched/memˇched.hµ
"

6 
	~<as£π.h
>

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<sys/time.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/°©.h
>

13 
	~<uni°d.h
>

14 
	~<time.h
>

16 
	~<libã°/£rvî.h
>

18 
	~<libã°/ã°.h
>

20 
	~<°rög
>

21 
	~<io°ªam
>

23 
usög
 
«me•a˚
 
	g°d
;

24 
usög
 
«me•a˚
 
	gmemˇche
;

27 
ã°_ªtu∫_t
 
basic_ã°
(
memˇched_°
 *
memc
);

28 
ã°_ªtu∫_t
 
ö¸emít_ã°
(
memˇched_°
 *
memc
);

29 
ã°_ªtu∫_t
 
basic_ma°î_key_ã°
(
memˇched_°
 *
memc
);

30 
ã°_ªtu∫_t
 
mgë_ªsu…_fun˘i⁄
(
memˇched_°
 *
memc
);

31 
ã°_ªtu∫_t
 
basic_behavi‹
(
memˇched_°
 *
memc
);

32 
ã°_ªtu∫_t
 
mgë_ã°
(
memˇched_°
 *
memc
);

33 
memˇched_ªtu∫_t
 
ˇŒback_cou¡î
(c⁄° 
memˇched_°
 *,

34 
memˇched_ªsu…_°
 *,

35 *
c⁄ãxt
);

38 
p›uœã_ve˘‹
(
ve˘‹
<> &
vec
, c⁄° 
°rög
 &
°r
)

40 
vec
.
ª£rve
(
°r
.
Àngth
());

41 
vec
.
assign
(
°r
.
begö
(), så.
íd
());

44 
c›y_vec_to_°rög
(
ve˘‹
<> &
vec
, 
°rög
 &
°r
)

46 
°r
.
˛ór
();

47 i‡(! 
vec
.
em±y
())

49 
°r
.
assign
(
vec
.
begö
(), vec.
íd
());

53 
ã°_ªtu∫_t
 
	$basic_ã°
(
memˇched_°
 *
memc
)

55 
Memˇche
 
	`foo
(
memc
);

56 c⁄° 
°rög
 
	`vÆue_£t
("This is some data");

57 
°d
::
ve˘‹
<> 
vÆue
;

58 
°d
::
ve˘‹
<> 
ã°_vÆue
;

60 
	`p›uœã_ve˘‹
(
vÆue
, 
vÆue_£t
);

62 
foo
.
	`£t
("möe", 
vÆue
, 0, 0);

63 
foo
.
	`gë
("möe", 
ã°_vÆue
);

65 
	`as£π
((
	`memcmp
(&
ã°_vÆue
[0], &
vÆue
[0],Åe°_vÆue.
	`size
()) == 0));

71 
åy


73 
foo
.
	`£t
("", 
vÆue
, 0, 0);

75 
	`ˇtch
 (
Eº‹
 &
îr
)

77  
TEST_SUCCESS
;

80  
TEST_FAILURE
;

81 
	}
}

83 
ã°_ªtu∫_t
 
	$ö¸emít_ã°
(
memˇched_°
 *
memc
)

85 
Memˇche
 
	`mˇch
(
memc
);

86 
boﬁ
 
rc
;

87 c⁄° 
°rög
 
	`key
("blah");

88 c⁄° 
°rög
 
	`öc_vÆue
("1");

89 
°d
::
ve˘‹
<> 
öc_vÆ
;

90 
ve˘‹
<> 
ªt_vÆue
;

91 
°rög
 
ªt_°rög
;

92 
uöt64_t
 
öt_öc_vÆue
;

93 
uöt64_t
 
öt_ªt_vÆue
;

95 
	`p›uœã_ve˘‹
(
öc_vÆ
, 
öc_vÆue
);

97 
rc

mˇch
.
	`£t
(
key
, 
öc_vÆ
, 0, 0);

98 i‡(
rc
 =
Ál£
)

100  
TEST_FAILURE
;

102 
mˇch
.
	`gë
(
key
, 
ªt_vÆue
);

103 i‡(
ªt_vÆue
.
	`em±y
())

105  
TEST_FAILURE
;

107 
	`c›y_vec_to_°rög
(
ªt_vÆue
, 
ªt_°rög
);

109 
öt_öc_vÆue

	`uöt64_t
(
	`©ﬁ
(
öc_vÆue
.
	`c_°r
()));

110 
öt_ªt_vÆue

	`uöt64_t
(
	`©ﬁ
(
ªt_°rög
.
	`c_°r
()));

111 
	`as£π
(
öt_ªt_vÆue
 =
öt_öc_vÆue
);

113 
rc

mˇch
.
	`ö¸emít
(
key
, 1, &
öt_ªt_vÆue
);

114 
	`as£π
(
rc
 =
åue
);

115 
	`as£π
(
öt_ªt_vÆue
 == 2);

117 
rc

mˇch
.
	`ö¸emít
(
key
, 1, &
öt_ªt_vÆue
);

118 
	`as£π
(
rc
 =
åue
);

119 
	`as£π
(
öt_ªt_vÆue
 == 3);

121 
rc

mˇch
.
	`ö¸emít
(
key
, 5, &
öt_ªt_vÆue
);

122 
	`as£π
(
rc
 =
åue
);

123 
	`as£π
(
öt_ªt_vÆue
 == 8);

125  
TEST_SUCCESS
;

126 
	}
}

128 
ã°_ªtu∫_t
 
	$basic_ma°î_key_ã°
(
memˇched_°
 *
memc
)

130 
Memˇche
 
	`foo
(
memc
);

131 c⁄° 
°rög
 
	`vÆue_£t
("Data for server A");

132 
ve˘‹
<> 
vÆue
;

133 
ve˘‹
<> 
ã°_vÆue
;

134 c⁄° 
°rög
 
	`ma°î_key_a
("server-a");

135 c⁄° 
°rög
 
	`ma°î_key_b
("server-b");

136 c⁄° 
°rög
 
	`key
("xyz");

138 
	`p›uœã_ve˘‹
(
vÆue
, 
vÆue_£t
);

140 
foo
.
	`£tByKey
(
ma°î_key_a
, 
key
, 
vÆue
, 0, 0);

141 
foo
.
	`gëByKey
(
ma°î_key_a
, 
key
, 
ã°_vÆue
);

143 
	`as£π
((
	`memcmp
(&
vÆue
[0], &
ã°_vÆue
[0], vÆue.
	`size
()) == 0));

145 
ã°_vÆue
.
	`˛ór
();

147 
foo
.
	`gëByKey
(
ma°î_key_b
, 
key
, 
ã°_vÆue
);

148 
	`as£π
((
	`memcmp
(&
vÆue
[0], &
ã°_vÆue
[0], vÆue.
	`size
()) == 0));

150  
TEST_SUCCESS
;

151 
	}
}

154 
memˇched_ªtu∫_t
 
	$ˇŒback_cou¡î
(c⁄° 
memˇched_°
 *,

155 
memˇched_ªsu…_°
 *,

156 *
c⁄ãxt
)

158 *
cou¡î

°©ic_ˇ°
<*>(
c⁄ãxt
);

160 *
cou¡î
= *counter + 1;

162  
MEMCACHED_SUCCESS
;

163 
	}
}

165 
ã°_ªtu∫_t
 
	$mgë_ªsu…_fun˘i⁄
(
memˇched_°
 *
memc
)

167 
Memˇche
 
	`mc
(
memc
);

168 
boﬁ
 
rc
;

169 
°rög
 
	`key1
("fudge");

170 
°rög
 
	`key2
("son");

171 
°rög
 
	`key3
("food");

172 
ve˘‹
<
°rög
> 
keys
;

173 
ve˘‹
< ve˘‹<> *> 
vÆues
;

174 
ve˘‹
<> 
vÆ1
;

175 
ve˘‹
<> 
vÆ2
;

176 
ve˘‹
<> 
vÆ3
;

177 
	`p›uœã_ve˘‹
(
vÆ1
, 
key1
);

178 
	`p›uœã_ve˘‹
(
vÆ2
, 
key2
);

179 
	`p›uœã_ve˘‹
(
vÆ3
, 
key3
);

180 
keys
.
	`ª£rve
(3);

181 
keys
.
	`push_back
(
key1
);

182 
keys
.
	`push_back
(
key2
);

183 
keys
.
	`push_back
(
key3
);

184 
vÆues
.
	`ª£rve
(3);

185 
vÆues
.
	`push_back
(&
vÆ1
);

186 
vÆues
.
	`push_back
(&
vÆ2
);

187 
vÆues
.
	`push_back
(&
vÆ3
);

188 
cou¡î
;

189 
memˇched_execuã_‚
 
ˇŒbacks
[1];

192 
rc

mc
.
	`Êush
(0);

193 
rc

mc
.
	`£tAŒ
(
keys
, 
vÆues
, 50, 9);

194 
	`as£π
(
rc
 =
åue
);

196 
rc

mc
.
	`mgë
(
keys
);

197 
	`as£π
(
rc
 =
åue
);

199 
ˇŒbacks
[0]&
ˇŒback_cou¡î
;

200 
cou¡î
= 0;

201 
rc

mc
.
	`„tchExecuã
(
ˇŒbacks
, 
°©ic_ˇ°
<*>(&
cou¡î
), 1);

203 
	`as£π
(
cou¡î
 == 3);

205  
TEST_SUCCESS
;

206 
	}
}

208 
ã°_ªtu∫_t
 
	$mgë_ã°
(
memˇched_°
 *
memc
)

210 
Memˇche
 
	`mc
(
memc
);

211 
boﬁ
 
rc
;

212 
memˇched_ªtu∫_t
 
mc_rc
;

213 
ve˘‹
<
°rög
> 
keys
;

214 
ve˘‹
< ve˘‹<> *> 
vÆues
;

215 
keys
.
	`ª£rve
(3);

216 
keys
.
	`push_back
("fudge");

217 
keys
.
	`push_back
("son");

218 
keys
.
	`push_back
("food");

219 
ve˘‹
<> 
vÆ1
;

220 
ve˘‹
<> 
vÆ2
;

221 
ve˘‹
<> 
vÆ3
;

222 
	`p›uœã_ve˘‹
(
vÆ1
, "fudge");

223 
	`p›uœã_ve˘‹
(
vÆ2
, "son");

224 
	`p›uœã_ve˘‹
(
vÆ3
, "food");

225 
vÆues
.
	`ª£rve
(3);

226 
vÆues
.
	`push_back
(&
vÆ1
);

227 
vÆues
.
	`push_back
(&
vÆ2
);

228 
vÆues
.
	`push_back
(&
vÆ3
);

230 
°rög
 
ªtu∫_key
;

231 
ve˘‹
<> 
ªtu∫_vÆue
;

234 
rc

mc
.
	`Êush
(0);

235 
	`as£π
(
rc
 =
åue
);

237 
rc

mc
.
	`mgë
(
keys
);

238 
	`as£π
(
rc
 =
åue
);

240 (
mc_rc

mc
.
	`„tch
(
ªtu∫_key
, 
ªtu∫_vÆue
)Ë!
MEMCACHED_END
)

242 
	`as£π
(
ªtu∫_vÆue
.
	`size
() != 0);

243 
ªtu∫_vÆue
.
	`˛ór
();

245 
	`as£π
(
mc_rc
 =
MEMCACHED_END
);

247 
rc

mc
.
	`£tAŒ
(
keys
, 
vÆues
, 50, 9);

248 
	`as£π
(
rc
 =
åue
);

250 
rc

mc
.
	`mgë
(
keys
);

251 
	`as£π
(
rc
 =
åue
);

253 (
mc_rc

mc
.
	`„tch
(
ªtu∫_key
, 
ªtu∫_vÆue
)Ë!
MEMCACHED_END
)

255 
	`as£π
(
ªtu∫_key
.
	`Àngth
(Ë=
ªtu∫_vÆue
.
	`size
());

256 
	`as£π
(!
	`memcmp
(&
ªtu∫_vÆue
[0], 
ªtu∫_key
.
	`c_°r
(),Ñëu∫_vÆue.
	`size
()));

259  
TEST_SUCCESS
;

260 
	}
}

262 
ã°_ªtu∫_t
 
	$basic_behavi‹
(
memˇched_°
 *
memc
)

264 
Memˇche
 
	`mc
(
memc
);

265 
boﬁ
 
rc
;

266 
uöt64_t
 
vÆue
 = 1;

267 
rc
 = 
mc
.
	`£tBehavi‹
(
MEMCACHED_BEHAVIOR_VERIFY_KEY
, 
vÆue
);

268 
	`as£π
(
rc
);

269 
uöt64_t
 
behavi‹
 = 
mc
.
	`gëBehavi‹
(
MEMCACHED_BEHAVIOR_VERIFY_KEY
);

270 
	`as£π
(
behavi‹
 =
vÆue
);

272  
TEST_SUCCESS
;

273 
	}
}

275 
ã°_°
 
ã°s
[] ={

277 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
basic_ã°
) },

279 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
basic_ma°î_key_ã°
) },

281 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
ö¸emít_ã°
) },

283 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
mgë_ã°
) },

285 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
mgë_ªsu…_fun˘i⁄
) },

287 
ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
basic_behavi‹
) },

291 
cﬁÀ˘i⁄_°
 
	gcﬁÀ˘i⁄
[] ={

292 {"block", 0, 0, 
ã°s
},

296 
	#SERVERS_TO_CREATE
 5

	)

298 
	~"libmemˇched_w‹ld.h
"

300 
	$gë_w‹ld
(
w‹ld_°
 *
w‹ld
)

302 
w‹ld
->
cﬁÀ˘i⁄s

cﬁÀ˘i⁄
;

304 
w‹ld
->
¸óã

ªöãΩªt_ˇ°
<
ã°_ˇŒback_¸óã_‚
>(
w‹ld_¸óã
);

305 
w‹ld
->
de°roy

ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
w‹ld_de°roy
);

307 
w‹ld
->
ã°
.
°¨tup

ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
w‹ld_ã°_°¨tup
);

308 
w‹ld
->
ã°
.
Êush

ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
w‹ld_Êush
);

309 
w‹ld
->
ã°
.
¥e_run

ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
w‹ld_¥e_run
);

310 
w‹ld
->
ã°
.
po°_run

ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
w‹ld_po°_run
);

311 
w‹ld
->
ã°
.
⁄_îr‹

ªöãΩªt_ˇ°
<
ã°_ˇŒback_îr‹_‚
>(
w‹ld_⁄_îr‹
);

313 
w‹ld
->
cﬁÀ˘i⁄
.
°¨tup

ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
w‹ld_c⁄èöî_°¨tup
);

314 
w‹ld
->
cﬁÀ˘i⁄
.
shutdown

ªöãΩªt_ˇ°
<
ã°_ˇŒback_‚
>(
w‹ld_c⁄èöî_shutdown
);

316 
w‹ld
->
ru¬î
&
defuÆt_libmemˇched_ru¬î
;

317 
	}
}

	@tests/pool.cc

38 
	~<c⁄fig.h
>

40 
	~<ve˘‹
>

41 
	~<io°ªam
>

42 
	~<°rög
>

43 
	~<î∫o.h
>

45 
	~<libmemˇched/memˇched.h
>

46 
	~<libmemˇched/utû.h
>

47 
	~<ã°s/poﬁ.h
>

49 
ã°_ªtu∫_t
 
	$memˇched_poﬁ_ã°
(
memˇched_°
 *)

51 
memˇched_ªtu∫_t
 
rc
;

52 c⁄° *
c⁄fig_°rög
= "--SERVER=host10.example.com --SERVER=host11.example.com --SERVER=host10.example.com --POOL-MIN=10 --POOL-MAX=32";

54 
buf„r
[2048];

55 
rc

	`libmemˇched_check_c⁄figuøti⁄
(
c⁄fig_°rög
, (c⁄fig_°rögË-1, 
buf„r
, (buffer));

57 
	`ã°_åue_gŸ
(
rc
 !
MEMCACHED_SUCCESS
, 
buf„r
);

59 
memˇched_poﬁ_°
* 
poﬁ

	`memˇched_poﬁ
(
c⁄fig_°rög
, 
	`°æí
(config_string));

60 
	`ã°_åue_gŸ
(
poﬁ
, 
	`°ªº‹
(
î∫o
));

62 
memˇched_°
 *
memc

	`memˇched_poﬁ_p›
(
poﬁ
, 
Ál£
, &
rc
);

64 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

65 
	`ã°_åue
(
memc
);

70 
	`memˇched_poﬁ_push
(
poﬁ
, 
memc
);

75 
	`memˇched_poﬁ_de°roy
(
poﬁ
);

77  
TEST_SUCCESS
;

78 
	}
}

	@tests/pool.h

38 #¥agm®
⁄˚


40 
	~<libã°/ã°.h
>

42 #ifdef 
__˝lu•lus


46 
LIBTEST_INTERNAL_API


47 
ã°_ªtu∫_t
 
memˇched_poﬁ_ã°
(
memˇched_°
 *);

49 #ifdef 
__˝lu•lus


	@tests/print.cc

38 
	~<c⁄fig.h
>

40 
	~<io°ªam
>

42 
	~<libmemˇched/memˇched.h
>

43 
	~<libã°/ã°.h
>

45 
	~"ã°s/¥öt.h
"

47 
memˇched_ªtu∫_t
 
	$£rvî_¥öt_ˇŒback
(c⁄° 
memˇched_°
 *
±r
,

48 c⁄° 
memˇched_£rvî_°
 *
£rvî
,

49 *
c⁄ãxt
)

51 ()
±r
;

53 i‡(
c⁄ãxt
)

55 
°d
::
˚º
 << 
	`memˇched_£rvî_«me
(
£rvî
Ë<< ":" << 
	`memˇched_£rvî_p‹t
(£rvîË<< std::
ídl
;

58  
MEMCACHED_SUCCESS
;

59 
	}
}

	@tests/print.h

38 #¥agm®
⁄˚


40 #ifdef 
__˝lu•lus


44 
LIBTEST_INTERNAL_API


45 
memˇched_ªtu∫_t
 
£rvî_¥öt_ˇŒback
(c⁄° 
memˇched_°
 *
±r
,

46 c⁄° 
memˇched_£rvî_°
 *
£rvî
,

47 *
c⁄ãxt
);

49 #ifdef 
__˝lu•lus


	@tests/replication.cc

38 
	~<c⁄fig.h
>

40 
	~<libã°/ã°.h
>

41 
	~"libmemˇched/comm⁄.h
"

42 
	~<ã°s/ª∂iˇti⁄.h
>

44 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_£t_ã°
(
memˇched_°
 *
memc
)

46 
memˇched_ªtu∫_t
 
rc
;

47 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

48 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 0);

50 
rc

	`memˇched_£t
(
memc
, "bubba", 5, "0", 1, 0, 0);

51 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

66 
	`memˇched_quô
(
memc
);

74 
x
= 'a'; x <= 'z'; ++x)

76 c⁄° 
key
[2]{ ()
x
, 0 };

77 
size_t
 
Àn
;

78 
uöt32_t
 
Êags
;

79 *
vÆ

	`memˇched_gë_by_key
(
memc_˛⁄e
, 
key
, 1, "bubba", 5,

80 &
Àn
, &
Êags
, &
rc
);

81 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

82 
	`ã°_åue
(
vÆ
 !
NULL
);

83 
	`‰ì
(
vÆ
);

86 
	`memˇched_‰ì
(
memc_˛⁄e
);

88  
TEST_SUCCESS
;

89 
	}
}

91 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_gë_ã°
(
memˇched_°
 *
memc
)

93 
memˇched_ªtu∫_t
 
rc
;

100 
uöt32_t
 
ho°
0; ho° < 
	`memˇched_£rvî_cou¡
(
memc
); ++host)

102 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

103 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

104 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc_˛⁄e
, 
ho°
);

106 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚
)->
p‹t
= 0;

108 
x
= 'a'; x <= 'z'; ++x)

110 c⁄° 
key
[2]{ ()
x
, 0 };

111 
size_t
 
Àn
;

112 
uöt32_t
 
Êags
;

113 *
vÆ

	`memˇched_gë_by_key
(
memc_˛⁄e
, 
key
, 1, "bubba", 5,

114 &
Àn
, &
Êags
, &
rc
);

115 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

116 
	`ã°_åue
(
vÆ
 !
NULL
);

117 
	`‰ì
(
vÆ
);

120 
	`memˇched_‰ì
(
memc_˛⁄e
);

123  
TEST_SUCCESS
;

124 
	}
}

126 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_mgë_ã°
(
memˇched_°
 *
memc
)

128 
memˇched_ªtu∫_t
 
rc
;

129 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

130 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 0);

132 c⁄° *
keys
[]= { "bubba", "key1", "key2", "key3" };

133 
size_t
 
Àn
[]= { 5, 4, 4, 4 };

135 
size_t
 
x
= 0; x< 4; ++x)

137 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
Àn
[x], "0", 1, 0, 0);

138 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

154 
	`memˇched_quô
(
memc
);

161 
memˇched_ªsu…_°
 
ªsu…_obj
;

162 
uöt32_t
 
ho°
0; ho° < 
memc_˛⁄e
->
numbî_of_ho°s
; host++)

164 
memˇched_°
 *
√w_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

165 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

166 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
√w_˛⁄e
, 
ho°
);

167 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚
)->
p‹t
= 0;

169 
x
= 'a'; x <= 'z'; ++x)

171 
key
[2]{ ()
x
, 0 };

173 
rc

	`memˇched_mgë_by_key
(
√w_˛⁄e
, 
key
, 1, 
keys
, 
Àn
, 4);

174 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

176 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
√w_˛⁄e
, &
ªsu…_obj
);

177 
	`ã°_åue
(
ªsu…s
);

179 
hôs
= 0;

180 (
ªsu…s

	`memˇched_„tch_ªsu…
(
√w_˛⁄e
, &
ªsu…_obj
, &
rc
)Ë!
NULL
)

182 
hôs
++;

184 
	`ã°_åue
(
hôs
 == 4);

185 
	`memˇched_ªsu…_‰ì
(&
ªsu…_obj
);

188 
	`memˇched_‰ì
(
√w_˛⁄e
);

191 
	`memˇched_‰ì
(
memc_˛⁄e
);

193  
TEST_SUCCESS
;

194 
	}
}

196 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_øndomize_mgë_ã°
(
memˇched_°
 *
memc
)

198 
memˇched_ªsu…_°
 
ªsu…_obj
;

199 
memˇched_ªtu∫_t
 
rc
;

200 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

201 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, 3);

202 
	`memˇched_behavi‹_£t
(
memc_˛⁄e
, 
MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ
, 1);

204 c⁄° *
keys
[]= { "key1", "key2", "key3", "key4", "key5", "key6", "key7" };

205 
size_t
 
Àn
[]= { 4, 4, 4, 4, 4, 4, 4 };

207 
size_t
 
x
= 0; x< 7; ++x)

209 
rc

	`memˇched_£t
(
memc
, 
keys
[
x
], 
Àn
[x], "1", 1, 0, 0);

210 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

213 
	`memˇched_quô
(
memc
);

215 
size_t
 
x
= 0; x< 7; ++x)

217 c⁄° 
key
[2]{ ()
x
, 0 };

219 
rc

	`memˇched_mgë_by_key
(
memc_˛⁄e
, 
key
, 1, 
keys
, 
Àn
, 7);

220 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

222 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc_˛⁄e
, &
ªsu…_obj
);

223 
	`ã°_åue
(
ªsu…s
);

225 
hôs
= 0;

226 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc_˛⁄e
, &
ªsu…_obj
, &
rc
)Ë!
NULL
)

228 ++
hôs
;

230 
	`ã°_åue
(
hôs
 == 7);

231 
	`memˇched_ªsu…_‰ì
(&
ªsu…_obj
);

233 
	`memˇched_‰ì
(
memc_˛⁄e
);

234  
TEST_SUCCESS
;

235 
	}
}

237 
ã°_ªtu∫_t
 
	$ª∂iˇti⁄_dñëe_ã°
(
memˇched_°
 *
memc
)

239 
memˇched_ªtu∫_t
 
rc
;

240 
memˇched_°
 *
memc_˛⁄e

	`memˇched_˛⁄e
(
NULL
, 
memc
);

242 
uöt64_t
 
ª∂

	`memˇched_behavi‹_gë
(
memc
,

243 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
);

244 
	`memˇched_behavi‹_£t
(
memc
, 
MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS
, --
ª∂
);

246 c⁄° *
keys
[]= { "bubba", "key1", "key2", "key3" };

247 
size_t
 
Àn
[]= { 5, 4, 4, 4 };

249 
size_t
 
x
= 0; x< 4; ++x)

251 
rc

	`memˇched_dñëe_by_key
(
memc
, 
keys
[0], 
Àn
[0], keys[
x
],Üen[x], 0);

252 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

260 
uöt32_t
 
hash

	`memˇched_gíî©e_hash
(
memc
, 
keys
[0], 
Àn
[0]);

261 
uöt32_t
 
x
0; x < (
ª∂
 + 1); ++x)

263 
memˇched_£rvî_ö°™˚_°
 
ö°™˚
=

264 
	`memˇched_£rvî_ö°™˚_by_posôi⁄
(
memc_˛⁄e
, 
x
);

266 ((
memˇched_£rvî_wrôe_ö°™˚_°
)
ö°™˚
)->
p‹t
= 0;

267 i‡(++
hash
 =
memc_˛⁄e
->
numbî_of_ho°s
)

268 
hash
= 0;

271 
memˇched_ªsu…_°
 
ªsu…_obj
;

272 
uöt32_t
 
ho°
0; ho° < 
memc_˛⁄e
->
numbî_of_ho°s
; ++host)

274 
size_t
 
x
= 'a'; x <= 'z'; ++x)

276 c⁄° 
key
[2]{ ()
x
, 0 };

278 
rc

	`memˇched_mgë_by_key
(
memc_˛⁄e
, 
key
, 1, 
keys
, 
Àn
, 4);

279 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

281 
memˇched_ªsu…_°
 *
ªsu…s

	`memˇched_ªsu…_¸óã
(
memc_˛⁄e
, &
ªsu…_obj
);

282 
	`ã°_åue
(
ªsu…s
);

284 
hôs
= 0;

285 (
ªsu…s

	`memˇched_„tch_ªsu…
(
memc_˛⁄e
, &
ªsu…_obj
, &
rc
)Ë!
NULL
)

287 ++
hôs
;

289 
	`ã°_åue
(
hôs
 == 4);

290 
	`memˇched_ªsu…_‰ì
(&
ªsu…_obj
);

293 
	`memˇched_‰ì
(
memc_˛⁄e
);

295  
TEST_SUCCESS
;

296 
	}
}

	@tests/replication.h

38 #¥agm®
⁄˚


40 #ifdef 
__˝lu•lus


44 
LIBTEST_INTERNAL_API


45 
ã°_ªtu∫_t
 
ª∂iˇti⁄_£t_ã°
(
memˇched_°
 *
memc
);

47 
LIBTEST_INTERNAL_API


48 
ã°_ªtu∫_t
 
ª∂iˇti⁄_gë_ã°
(
memˇched_°
 *
memc
);

50 
LIBTEST_INTERNAL_API


51 
ã°_ªtu∫_t
 
ª∂iˇti⁄_mgë_ã°
(
memˇched_°
 *
memc
);

53 
LIBTEST_INTERNAL_API


54 
ã°_ªtu∫_t
 
ª∂iˇti⁄_dñëe_ã°
(
memˇched_°
 *
memc
);

56 
LIBTEST_INTERNAL_API


57 
ã°_ªtu∫_t
 
ª∂iˇti⁄_øndomize_mgë_ã°
(
memˇched_°
 *
memc
);

59 #ifdef 
__˝lu•lus


	@tests/start.c

12 
	~"c⁄fig.h
"

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 
	~<libã°/£rvî.h
>

18 
	$maö
()

20 
£rvî_°¨tup_°
 
c⁄°ru˘
;

22 
	`mem£t
(&
c⁄°ru˘
, 0, (
£rvî_°¨tup_°
));

24 
c⁄°ru˘
.
cou¡
= 4;

26 
	`£rvî_°¨tup
(&
c⁄°ru˘
);

28  
EXIT_SUCCESS
;

29 
	}
}

	@tests/string.cc

38 
	~"libmemˇched/comm⁄.h
"

39 
	~"libmemˇched/îr‹.h
"

40 
	~"ã°s/°rög.h
"

42 
ã°_ªtu∫_t
 
	$°rög_°©ic_nuŒ
(
memˇched_°
 *
memc
)

44 
memˇched_°rög_°
 
°rög
;

45 
memˇched_°rög_°
 *
°rög_±r
;

47 
°rög_±r

	`memˇched_°rög_¸óã
(
memc
, &
°rög
, 0);

48 
	`ã°_åue
(
°rög
.
›ti⁄s
.
is_öôülized
 =
åue
);

49 
	`ã°_åue
(
°rög_±r
);

52 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög_±r
Ë=
Ál£
);

53 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(&
°rög
Ë=
Ál£
);

54 
	`ã°_åue
(&
°rög
 =
°rög_±r
);

56 
	`ã°_åue
(
°rög
.
›ti⁄s
.
is_öôülized
 =
åue
);

57 
	`ã°_åue
(
	`memˇched_is_öôülized
(&
°rög
Ë=
åue
);

58 
	`memˇched_°rög_‰ì
(&
°rög
);

59 
	`ã°_åue
(
	`memˇched_is_öôülized
(&
°rög
Ë=
Ál£
);

61  
TEST_SUCCESS
;

62 
	}
}

64 
ã°_ªtu∫_t
 
	$°rög_Æloc_nuŒ
(
memˇched_°
 *
memc
)

66 
memˇched_°rög_°
 *
°rög
;

68 
°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 0);

69 
	`ã°_åue
(
°rög
);

70 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
Ë=
åue
);

71 
	`ã°_åue
(
	`memˇched_is_öôülized
(
°rög
Ë=
åue
);

72 
	`memˇched_°rög_‰ì
(
°rög
);

74  
TEST_SUCCESS
;

75 
	}
}

77 
ã°_ªtu∫_t
 
	$°rög_Æloc_wôh_size
(
memˇched_°
 *
memc
)

79 
memˇched_°rög_°
 *
°rög
;

81 
°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 1024);

82 
	`ã°_åue
(
°rög
);

83 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
Ë=
åue
);

84 
	`ã°_åue
(
	`memˇched_is_öôülized
(
°rög
Ë=
åue
);

85 
	`memˇched_°rög_‰ì
(
°rög
);

87  
TEST_SUCCESS
;

88 
	}
}

90 
ã°_ªtu∫_t
 
	$°rög_Æloc_wôh_size_toobig
(
memˇched_°
 *
memc
)

92 
memˇched_°rög_°
 *
°rög
;

94 
°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 
SIZE_MAX
);

95 
	`ã°_åue
(
°rög
 =
NULL
);

97  
TEST_SUCCESS
;

98 
	}
}

100 
ã°_ªtu∫_t
 
	$°rög_Æloc_≠≥nd
(
memˇched_°
 *
memc
)

102 
x
;

103 
buf„r
[
SMALL_STRING_LEN
];

104 
memˇched_°rög_°
 *
°rög
;

107 
	`mem£t
(
buf„r
, 6, 
SMALL_STRING_LEN
);

109 
°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 100);

110 
	`ã°_åue
(
°rög
);

111 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
Ë=
åue
);

112 
	`ã°_åue
(
	`memˇched_is_öôülized
(
°rög
Ë=
åue
);

114 
x
= 0; x < 1024; x++)

116 
memˇched_ªtu∫_t
 
rc
;

117 
rc

	`memˇched_°rög_≠≥nd
(
°rög
, 
buf„r
, 
SMALL_STRING_LEN
);

118 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

120 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
Ë=
åue
);

121 
	`memˇched_°rög_‰ì
(
°rög
);

123  
TEST_SUCCESS
;

124 
	}
}

126 
ã°_ªtu∫_t
 
	$°rög_Æloc_≠≥nd_toobig
(
memˇched_°
 *
memc
)

128 
memˇched_ªtu∫_t
 
rc
;

129 
buf„r
[
SMALL_STRING_LEN
];

130 
memˇched_°rög_°
 *
°rög
;

133 
	`mem£t
(
buf„r
, 6, (buffer));

135 
°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 100);

136 
	`ã°_åue
(
°rög
);

137 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
Ë=
åue
);

138 
	`ã°_åue
(
	`memˇched_is_öôülized
(
°rög
Ë=
åue
);

140 
x
= 0; x < 1024; x++)

142 
rc

	`memˇched_°rög_≠≥nd
(
°rög
, 
buf„r
, 
SMALL_STRING_LEN
);

143 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

145 
rc

	`memˇched_°rög_≠≥nd
(
°rög
, 
buf„r
, 
SIZE_MAX
);

146 
	`ã°_åue
(
rc
 =
MEMCACHED_MEMORY_ALLOCATION_FAILURE
);

147 
	`ã°_åue
(
	`memˇched_is_Æloˇãd
(
°rög
Ë=
åue
);

148 
	`memˇched_°rög_‰ì
(
°rög
);

150  
TEST_SUCCESS
;

151 
	}
}

153 
ã°_ªtu∫_t
 
	$°rög_Æloc_≠≥nd_mu…ùÀ
(
memˇched_°
 *
memc
)

155 
memˇched_°rög_°
 *
îr‹_°rög

	`memˇched_°rög_¸óã
(
memc
, 
NULL
, 1024);

156 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`memˇched_°rög_wôh_size
("Error occured whileÖarsing: "));

157 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`memˇched_°rög_make_‰om_c°r
("jogÅhe strlen() method"));

158 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`memˇched_°rög_wôh_size
(" ("));

160 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`memˇched_°rög_make_‰om_c°r
(
	`memˇched_°ªº‹
(
NULL
, 
MEMCACHED_SUCCESS
)));

161 
	`memˇched_°rög_≠≥nd
(
îr‹_°rög
, 
	`memˇched_°rög_wôh_size
(")"));

163 
	`memˇched_°rög_‰ì
(
îr‹_°rög
);

165  
TEST_SUCCESS
;

166 
	}
}

	@tests/string.h

38 #¥agm®
⁄˚


40 
	~<libã°/ã°.h
>

42 #ifdef 
__˝lu•lus


46 
LIBTEST_INTERNAL_API


47 
ã°_ªtu∫_t
 
°rög_°©ic_nuŒ
(
memˇched_°
 *
memc
);

49 
LIBTEST_INTERNAL_API


50 
ã°_ªtu∫_t
 
°rög_Æloc_nuŒ
(
memˇched_°
 *
memc
);

52 
LIBTEST_INTERNAL_API


53 
ã°_ªtu∫_t
 
°rög_Æloc_wôh_size
(
memˇched_°
 *
memc
);

55 
LIBTEST_INTERNAL_API


56 
ã°_ªtu∫_t
 
°rög_Æloc_wôh_size_toobig
(
memˇched_°
 *
memc
);

58 
LIBTEST_INTERNAL_API


59 
ã°_ªtu∫_t
 
°rög_Æloc_≠≥nd
(
memˇched_°
 *
memc
);

61 
LIBTEST_INTERNAL_API


62 
ã°_ªtu∫_t
 
°rög_Æloc_≠≥nd_toobig
(
memˇched_°
 *
memc
);

64 
LIBTEST_INTERNAL_API


65 
ã°_ªtu∫_t
 
°rög_Æloc_≠≥nd_mu…ùÀ
(
memˇched_°
 *
memc
);

67 #ifdef 
__˝lu•lus


	@tests/virtual_buckets.cc

38 
	~<c⁄fig.h
>

40 
	~<ã°s/vútuÆ_buckës.h
>

42 
	~<libmemˇched/memˇched.h
>

44 
	slibã°_°rög_t
 {

45 c⁄° *
	mc_°r
;

46 
size_t
 
	msize
;

49 
ölöe
 
libã°_°rög_t
 
	$libã°_°rög
(c⁄° *
¨g
, 
size_t
 
¨g_size
)

51 
libã°_°rög_t
 
loˇl
{ 
¨g
, 
¨g_size
 };

52  
loˇl
;

53 
	}
}

55 
	#make_libã°_°rög
(
X
Ë
	`libã°_°rög
((X), 
°©ic_ˇ°
<
size_t
>((XË- 1))

	)

57 
libã°_°rög_t
 
	glibã°_°rög_t_nuŒ
= { 0, 0};

59 
boﬁ
 
	$libã°_°rög_is_nuŒ
(c⁄° 
libã°_°rög_t
 &
°rög
)

61 i‡(
°rög
.
c_°r
 =0 
™d
 såög.
size
 == 0)

62  
åue
;

64  
Ál£
;

65 
	}
}

67 
	sex≥˘_t
 {

68 
libã°_°rög_t
 
	mkey
;

69 
uöt32_t
 
	m£rvî_id
;

70 
uöt32_t
 
	mbuckë_id
;

73 
ex≥˘_t
 
	gbasic_keys
[]= {

74 { 
make_libã°_°rög
("hello"), 0, 0 },

75 { 
make_libã°_°rög
("doctor"), 0, 0 },

76 { 
make_libã°_°rög
("name"), 1, 3 },

77 { 
make_libã°_°rög
("continue"), 1, 3 },

78 { 
make_libã°_°rög
("yesterday"), 0, 0 },

79 { 
make_libã°_°rög
("tomorrow"), 1, 1 },

80 { 
make_libã°_°rög
("another key"), 2, 2 },

81 { 
libã°_°rög_t_nuŒ
, 0, 0 }

84 
ã°_ªtu∫_t
 
	$vútuÆ_back_m≠
(
memˇched_°
 *)

86 
memˇched_ªtu∫_t
 
rc
;

87 
memˇched_£rvî_°
 *
£rvî_poﬁ
;

88 
memˇched_°
 *
memc
;

90 
memc

	`memˇched_¸óã
(
NULL
);

91 
	`ã°_åue
(
memc
);

93 
uöt32_t
 
£rvî_m≠
[] = { 0, 1, 2, 1 };

94 
rc

	`memˇched_buckë_£t
(
memc
, 
£rvî_m≠
, 
NULL
, 4, 2);

95 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

97 
memˇched_£rvî_di°ributi⁄_t
 
dt
;

98 
dt

	`memˇched_behavi‹_gë_di°ributi⁄
(
memc
);

99 
	`ã°_åue
(
dt
 =
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
);

101 
	`memˇched_behavi‹_£t_key_hash
(
memc
, 
MEMCACHED_HASH_CRC
);

102 
	`ã°_åue
(
rc
 =
MEMCACHED_SUCCESS
);

104 
memˇched_hash_t
 
hash_ty≥

	`memˇched_behavi‹_gë_key_hash
(
memc
);

105 
	`ã°_åue
(
hash_ty≥
 =
MEMCACHED_HASH_CRC
);

107 
£rvî_poﬁ
 = 
	`memˇched_£rvîs_∑r£
("localhost:11211,Üocalhost1:11210,Üocalhost2:11211");

108 
	`ã°_åue
(
£rvî_poﬁ
);

109 
	`memˇched_£rvî_push
(
memc
, 
£rvî_poﬁ
);

112 
	`ã°_åue
(
	`memˇched_£rvî_cou¡
(
memc
) == 3);

113 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[0].
ho°«me
, "localhost") == 0);

114 
	`ã°_åue
(
£rvî_poﬁ
[0].
p‹t
 == 11211);

116 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[1].
ho°«me
, "localhost1") == 0);

117 
	`ã°_åue
(
£rvî_poﬁ
[1].
p‹t
 == 11210);

119 
	`ã°_åue
(
	`°rcmp
(
£rvî_poﬁ
[2].
ho°«me
, "localhost2") == 0);

120 
	`ã°_åue
(
£rvî_poﬁ
[2].
p‹t
 == 11211);

122 
dt

	`memˇched_behavi‹_gë_di°ributi⁄
(
memc
);

123 
hash_ty≥

	`memˇched_behavi‹_gë_key_hash
(
memc
);

124 
	`ã°_åue
(
dt
 =
MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET
);

125 
	`ã°_åue
(
hash_ty≥
 =
MEMCACHED_HASH_CRC
);

128 
ex≥˘_t
 *
±r

basic_keys
; 
nŸ
 
	`libã°_°rög_is_nuŒ
’å->
key
);Ötr++)

130 
uöt32_t
 
£rvî_idx
 = 
	`memˇched_gíî©e_hash
(
memc
, 
±r
->
key
.
c_°r
,Öå->key.
size
);

132 
buf„r
[1024];

133 
	`¢¥ötf
(
buf„r
, (buf„r), "%.*s:%lu GŸ/Ex≥˘ed %u =%u", ()
±r
->
key
.
size
,Öå->key.
c_°r
, (Ìå->key.size, 
£rvî_idx
,Öå->
£rvî_id
);

134 
	`ã°_åue_gŸ
(
£rvî_idx
 =
±r
->
£rvî_id
, 
buf„r
);

137 
	`memˇched_£rvî_li°_‰ì
(
£rvî_poﬁ
);

138 
	`memˇched_‰ì
(
memc
);

140  
TEST_SUCCESS
;

141 
	}
}

	@tests/virtual_buckets.h

38 #¥agm®
⁄˚


40 
	~<libã°/ã°.h
>

42 
	gmemˇched_°
;

44 #ifdef 
__˝lu•lus


48 
LIBTEST_INTERNAL_API


49 
ã°_ªtu∫_t
 
vútuÆ_back_m≠
(
memˇched_°
 *);

51 #ifdef 
__˝lu•lus


	@win32/wrappers.h

12 #i‚de‡
WIN32_WRAPPERS_H


13 
	#WIN32_WRAPPERS_H
 1

	)

15 
	~<öây≥s.h
>

22 #unde‡
öãrÁ˚


24 #unde‡
mÆloc


25 #unde‡
ªÆloc


32 
	#EADDRINUSE
 
WSAEADDRINUSE


	)

33 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

34 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

35 
	#EALREADY
 
WSAEALREADY


	)

36 
	#EISCONN
 
WSAEISCONN


	)

37 
	#ENOTCONN
 
WSAENOTCONN


	)

38 
	#ENOBUFS
 
WSAENOBUFS


	)

39 
	#SHUT_RDWR
 
SD_BOTH


	)

42 
	#EAI_SYSTEM
 11

	)

45 
	#ödex
(
a
,
b
Ë
	`°rchr
◊,b)

	)

46 
	#rödex
(
a
,
b
Ë
	`°ºchr
◊,b)

	)

47 
	#øndom
(Ë
	`ønd
()

	)

48 
	#§™dom
(
a
Ë
Ál£
Ë{}

	)

49 
	#kûl
(
a
, 
b
Ë
Ál£
Ë{}

	)

50 
	#f‹k
(Ë(-1)

	)

51 
	#waôpid
(
a
,
b
,
c
Ë(-1)

	)

52 
	#‚m©ch
(
a
,
b
,
c
Ë(-1)

	)

53 
	#¶ìp
(
a
Ë
	`SÀï
◊*1000)

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

50 #i‚de‡
__îr‹_t_deföed


51 
	#__îr‹_t_deföed
 1

	)

52 
	tîr‹_t
;

57 
__END_DECLS


	@/usr/include/event.h

27 #i‚de‡
EVENT1_EVENT_H_INCLUDED_


28 
	#EVENT1_EVENT_H_INCLUDED_


	)

40 #ifde‡
__˝lu•lus


44 
	~<evít2/evít-c⁄fig.h
>

45 #ifde‡
EVENT__HAVE_SYS_TYPES_H


46 
	~<sys/ty≥s.h
>

48 #ifde‡
EVENT__HAVE_SYS_TIME_H


49 
	~<sys/time.h
>

51 #ifde‡
EVENT__HAVE_STDINT_H


52 
	~<°döt.h
>

54 
	~<°d¨g.h
>

57 
	~<evutû.h
>

59 #ifde‡
_WIN32


60 #i‚de‡
WIN32_LEAN_AND_MEAN


61 
	#WIN32_LEAN_AND_MEAN


	)

63 
	~<wösock2.h
>

64 
	~<wödows.h
>

65 #unde‡
WIN32_LEAN_AND_MEAN


68 
	~<evít2/evít_°ru˘.h
>

69 
	~<evít2/evít.h
>

70 
	~<evít2/evít_com∑t.h
>

71 
	~<evít2/buf„r.h
>

72 
	~<evít2/buf„r_com∑t.h
>

73 
	~<evít2/buf„ªvít.h
>

74 
	~<evít2/buf„ªvít_°ru˘.h
>

75 
	~<evít2/buf„ªvít_com∑t.h
>

76 
	~<evít2/èg.h
>

77 
	~<evít2/èg_com∑t.h
>

79 #ifde‡
__˝lu•lus


	@/usr/include/execinfo.h

18 #i‚de‡
_EXECINFO_H


19 
	#_EXECINFO_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


27 
	$backåa˚
 (**
__¨øy
, 
__size
Ë
	`__n⁄nuŒ
 ((1));

32 **
	$backåa˚_symbﬁs
 (*c⁄° *
__¨øy
, 
__size
)

33 
__THROW
 
	`__n⁄nuŒ
 ((1));

38 
	$backåa˚_symbﬁs_fd
 (*c⁄° *
__¨øy
, 
__size
, 
__fd
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1));

41 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 
f˙é
 (
__fd
, 
__cmd
, ...);

156 #i‚de‡
__USE_FILE_OFFSET64


157 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__REDIRECT


160 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

161 
	`__n⁄nuŒ
 ((1));

163 
	#›í
 
›í64


	)

166 #ifde‡
__USE_LARGEFILE64


167 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__USE_ATFILE


180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

184 #ifde‡
__REDIRECT


185 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

186 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

188 
	#›í©
 
›í©64


	)

191 #ifde‡
__USE_LARGEFILE64


192 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__REDIRECT


206 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

207 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

209 
	#¸ót
 
¸ót64


	)

212 #ifde‡
__USE_LARGEFILE64


213 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

217 && !
deföed
 
__USE_POSIX
))

226 
	#F_ULOCK
 0

	)

227 
	#F_LOCK
 1

	)

228 
	#F_TLOCK
 2

	)

229 
	#F_TEST
 3

	)

231 #i‚de‡
__USE_FILE_OFFSET64


232 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

234 #ifde‡
__REDIRECT


235 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

237 
	#lockf
 
lockf64


	)

240 #ifde‡
__USE_LARGEFILE64


241 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

245 #ifde‡
__USE_XOPEN2K


248 #i‚de‡
__USE_FILE_OFFSET64


249 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

250 
__advi£
Ë
__THROW
;

252 #ifde‡
__REDIRECT_NTH


253 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

254 
__off64_t
 
__Àn
, 
__advi£
),

255 
posix_Ádvi£64
);

257 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

260 #ifde‡
__USE_LARGEFILE64


261 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

262 
__advi£
Ë
__THROW
;

270 #i‚de‡
__USE_FILE_OFFSET64


271 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

273 #ifde‡
__REDIRECT


274 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

275 
__off64_t
 
__Àn
),

276 
posix_ÁŒoˇã64
);

278 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

281 #ifde‡
__USE_LARGEFILE64


282 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

288 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

289 && 
deföed
 
__va_¨g_∑ck_Àn


290 
	~<bôs/f˙é2.h
>

293 
__END_DECLS


	@/usr/include/fnmatch.h

18 #i‚def 
_FNMATCH_H


19 
	#_FNMATCH_H
 1

	)

21 #ifdef 
__˝lu•lus


27 #unde‡
FNM_PATHNAME


28 #unde‡
FNM_NOESCAPE


29 #unde‡
FNM_PERIOD


32 
	#FNM_PATHNAME
 (1 << 0Ë

	)

33 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

34 
	#FNM_PERIOD
 (1 << 2Ë

	)

36 #i‡!
deföed
 
_POSIX_C_SOURCE
 || _POSIX_C_SOURCE < 2 || deföed 
_GNU_SOURCE


37 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

38 
	#FNM_LEADING_DIR
 (1 << 3Ë

	)

39 
	#FNM_CASEFOLD
 (1 << 4Ë

	)

40 
	#FNM_EXTMATCH
 (1 << 5Ë

	)

44 
	#FNM_NOMATCH
 1

	)

50 #ifde‡
_XOPEN_SOURCE


51 
	#FNM_NOSYS
 (-1)

	)

56 
‚m©ch
 (c⁄° *
__∑âîn
, c⁄° *
__«me
, 
__Êags
);

58 #ifdef 
__˝lu•lus


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


22 
	#_GETOPT_H
 1

	)

24 
	~<„©uªs.h
>

31 #i‚de‡
__gë›t_¨gv_c⁄°


32 
	#__gë›t_¨gv_c⁄°
 c⁄°

	)

35 
	~<bôs/gë›t_c‹e.h
>

36 
	~<bôs/gë›t_ext.h
>

	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

57 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

58 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

61 
	$‰ì
 (*
__±r
Ë
__THROW
;

64 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

65 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

68 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

72 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

76 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

79 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

80 
__THROW
 
__©åibuã_mÆloc__
;

84 
	smÆlöfo


86 
¨ía
;

87 
‹dblks
;

88 
smblks
;

89 
hblks
;

90 
hblkhd
;

91 
usmblks
;

92 
fsmblks
;

93 
u‹dblks
;

94 
f‹dblks
;

95 
kìpco°
;

99 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

102 #i‚de‡
M_MXFAST


103 
	#M_MXFAST
 1

	)

105 #i‚de‡
M_NLBLKS


106 
	#M_NLBLKS
 2

	)

108 #i‚de‡
M_GRAIN


109 
	#M_GRAIN
 3

	)

111 #i‚de‡
M_KEEP


112 
	#M_KEEP
 4

	)

116 
	#M_TRIM_THRESHOLD
 -1

	)

117 
	#M_TOP_PAD
 -2

	)

118 
	#M_MMAP_THRESHOLD
 -3

	)

119 
	#M_MMAP_MAX
 -4

	)

120 
	#M_CHECK_ACTION
 -5

	)

121 
	#M_PERTURB
 -6

	)

122 
	#M_ARENA_TEST
 -7

	)

123 
	#M_ARENA_MAX
 -8

	)

126 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

130 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

134 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

137 
	$mÆloc_°©s
 (Ë
__THROW
;

140 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

143 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

145 
__MALLOC_DEPRECATED
;

146 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

148 
__MALLOC_DEPRECATED
;

149 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

150 
size_t
 
__size
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

154 
size_t
 
__size
,

156 
__MALLOC_DEPRECATED
;

157 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

160 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

163 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

116 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

118 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

119 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

121 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

122 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

124 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

125 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

127 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

128 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

130 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

131 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

133 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

138 
	~<bôs/Êt-evÆ-mëhod.h
>

140 #ifde‡
__USE_ISOC99


148 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

149 
	tÊﬂt_t
;

150 
	tdoubÀ_t
;

151 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

152 
	tÊﬂt_t
;

153 
	tdoubÀ_t
;

154 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

155 
	tÊﬂt_t
;

156 
	tdoubÀ_t
;

157 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

158 
_Flﬂt32
 
	tÊﬂt_t
;

159 
	tdoubÀ_t
;

160 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

161 
_Flﬂt32x
 
	tÊﬂt_t
;

162 
_Flﬂt32x
 
	tdoubÀ_t
;

163 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

164 
_Flﬂt64
 
	tÊﬂt_t
;

165 
_Flﬂt64
 
	tdoubÀ_t
;

166 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

167 
_Flﬂt64x
 
	tÊﬂt_t
;

168 
_Flﬂt64x
 
	tdoubÀ_t
;

169 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

170 
_Flﬂt128
 
	tÊﬂt_t
;

171 
_Flﬂt128
 
	tdoubÀ_t
;

172 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

173 
_Flﬂt128x
 
	tÊﬂt_t
;

174 
_Flﬂt128x
 
	tdoubÀ_t
;

190 
	~<bôs/Â-logb.h
>

191 #ifde‡
__USE_ISOC99


192 #i‡
__FP_LOGB0_IS_MIN


193 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

195 
	#FP_ILOGB0
 (-2147483647)

	)

197 #i‡
__FP_LOGBNAN_IS_MIN


198 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

200 
	#FP_ILOGBNAN
 2147483647

	)

203 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

204 #i‡
__WORDSIZE
 == 32

205 
	#__FP_LONG_MAX
 0x7fffffffL

	)

207 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

209 #i‡
__FP_LOGB0_IS_MIN


210 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

212 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

214 #i‡
__FP_LOGBNAN_IS_MIN


215 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

217 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

233 
	~<bôs/Â-Á°.h
>

235 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

239 
	mFP_INT_UPWARD
 =

240 
	#FP_INT_UPWARD
 0

	)

241 
FP_INT_UPWARD
,

242 
	mFP_INT_DOWNWARD
 =

243 
	#FP_INT_DOWNWARD
 1

	)

244 
FP_INT_DOWNWARD
,

245 
	mFP_INT_TOWARDZERO
 =

246 
	#FP_INT_TOWARDZERO
 2

	)

247 
FP_INT_TOWARDZERO
,

248 
	mFP_INT_TONEARESTFROMZERO
 =

249 
	#FP_INT_TONEARESTFROMZERO
 3

	)

250 
FP_INT_TONEARESTFROMZERO
,

251 
	mFP_INT_TONEAREST
 =

252 
	#FP_INT_TONEAREST
 4

	)

253 
FP_INT_TONEAREST
,

262 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

264 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

265 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

266 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

268 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

269 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

270 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

272 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

273 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

274 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

275 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

276 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

277 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

278 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

279 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

280 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

281 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

282 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

285 
	#_MdoubÀ_
 

	)

286 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

287 
	#__MATH_DECLARING_DOUBLE
 1

	)

288 
	#__MATH_DECLARING_FLOATN
 0

	)

289 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

290 
	~<bôs/m©hˇŒs.h
>

291 #unde‡
_MdoubÀ_


292 #unde‡
__MATH_PRECNAME


293 #unde‡
__MATH_DECLARING_DOUBLE


294 #unde‡
__MATH_DECLARING_FLOATN


296 #ifde‡
__USE_ISOC99


302 
	#_MdoubÀ_
 

	)

303 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

304 
	#__MATH_DECLARING_DOUBLE
 0

	)

305 
	#__MATH_DECLARING_FLOATN
 0

	)

306 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

307 
	~<bôs/m©hˇŒs.h
>

308 #unde‡
_MdoubÀ_


309 #unde‡
__MATH_PRECNAME


310 #unde‡
__MATH_DECLARING_DOUBLE


311 #unde‡
__MATH_DECLARING_FLOATN


313 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

314 || 
deföed
 
__LDBL_COMPAT
 \

315 || 
deföed
 
_LIBC_TEST


316 #ifde‡
__LDBL_COMPAT


318 #ifde‡
__USE_ISOC99


319 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

321 #ifde‡
__REDIRECT_NTH


322 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

323 
__∆dbl_√xâow¨df
)

324 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

326 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

327 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

328 (
__x
, 
__y
),

329 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

333 #unde‡
__MATHDECL_1


334 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

335 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

336 
¨gs
, 
Æüs
)

	)

337 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

338 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

344 
	#_MdoubÀ_
 

	)

345 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

346 
	#__MATH_DECLARING_DOUBLE
 0

	)

347 
	#__MATH_DECLARING_FLOATN
 0

	)

348 
	#__MATH_DECLARE_LDOUBLE
 1

	)

349 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

350 
	~<bôs/m©hˇŒs.h
>

351 #unde‡
_MdoubÀ_


352 #unde‡
__MATH_PRECNAME


353 #unde‡
__MATH_DECLARING_DOUBLE


354 #unde‡
__MATH_DECLARING_FLOATN


363 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

364 
	#_MdoubÀ_
 
_Flﬂt16


	)

365 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

366 
	#__MATH_DECLARING_DOUBLE
 0

	)

367 
	#__MATH_DECLARING_FLOATN
 1

	)

368 #i‡
__HAVE_DISTINCT_FLOAT16


369 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

371 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

372 
	~<bôs/m©hˇŒs.h
>

374 #unde‡
_MdoubÀ_


375 #unde‡
__MATH_PRECNAME


376 #unde‡
__MATH_DECLARING_DOUBLE


377 #unde‡
__MATH_DECLARING_FLOATN


380 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

381 
	#_MdoubÀ_
 
_Flﬂt32


	)

382 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

383 
	#__MATH_DECLARING_DOUBLE
 0

	)

384 
	#__MATH_DECLARING_FLOATN
 1

	)

385 #i‡
__HAVE_DISTINCT_FLOAT32


386 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

388 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

389 
	~<bôs/m©hˇŒs.h
>

391 #unde‡
_MdoubÀ_


392 #unde‡
__MATH_PRECNAME


393 #unde‡
__MATH_DECLARING_DOUBLE


394 #unde‡
__MATH_DECLARING_FLOATN


397 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

398 
	#_MdoubÀ_
 
_Flﬂt64


	)

399 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

400 
	#__MATH_DECLARING_DOUBLE
 0

	)

401 
	#__MATH_DECLARING_FLOATN
 1

	)

402 #i‡
__HAVE_DISTINCT_FLOAT64


403 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

405 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

406 
	~<bôs/m©hˇŒs.h
>

408 #unde‡
_MdoubÀ_


409 #unde‡
__MATH_PRECNAME


410 #unde‡
__MATH_DECLARING_DOUBLE


411 #unde‡
__MATH_DECLARING_FLOATN


414 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

415 
	#_MdoubÀ_
 
_Flﬂt128


	)

416 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

417 
	#__MATH_DECLARING_DOUBLE
 0

	)

418 
	#__MATH_DECLARING_FLOATN
 1

	)

419 #i‡
__HAVE_DISTINCT_FLOAT128


420 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

422 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

423 
	~<bôs/m©hˇŒs.h
>

425 #unde‡
_MdoubÀ_


426 #unde‡
__MATH_PRECNAME


427 #unde‡
__MATH_DECLARING_DOUBLE


428 #unde‡
__MATH_DECLARING_FLOATN


431 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

432 
	#_MdoubÀ_
 
_Flﬂt32x


	)

433 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

434 
	#__MATH_DECLARING_DOUBLE
 0

	)

435 
	#__MATH_DECLARING_FLOATN
 1

	)

436 #i‡
__HAVE_DISTINCT_FLOAT32X


437 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

439 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

440 
	~<bôs/m©hˇŒs.h
>

442 #unde‡
_MdoubÀ_


443 #unde‡
__MATH_PRECNAME


444 #unde‡
__MATH_DECLARING_DOUBLE


445 #unde‡
__MATH_DECLARING_FLOATN


448 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

449 
	#_MdoubÀ_
 
_Flﬂt64x


	)

450 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

451 
	#__MATH_DECLARING_DOUBLE
 0

	)

452 
	#__MATH_DECLARING_FLOATN
 1

	)

453 #i‡
__HAVE_DISTINCT_FLOAT64X


454 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

456 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

457 
	~<bôs/m©hˇŒs.h
>

459 #unde‡
_MdoubÀ_


460 #unde‡
__MATH_PRECNAME


461 #unde‡
__MATH_DECLARING_DOUBLE


462 #unde‡
__MATH_DECLARING_FLOATN


465 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

466 
	#_MdoubÀ_
 
_Flﬂt128x


	)

467 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

468 
	#__MATH_DECLARING_DOUBLE
 0

	)

469 
	#__MATH_DECLARING_FLOATN
 1

	)

470 #i‡
__HAVE_DISTINCT_FLOAT128X


471 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

473 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

474 
	~<bôs/m©hˇŒs.h
>

476 #unde‡
_MdoubÀ_


477 #unde‡
__MATH_PRECNAME


478 #unde‡
__MATH_DECLARING_DOUBLE


479 #unde‡
__MATH_DECLARING_FLOATN


482 #unde‡
__MATHDECL_1


483 #unde‡
__MATHDECL


484 #unde‡
__MATHCALL


487 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


489 
signgam
;

492 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

493 || 
__HAVE_DISTINCT_FLOAT32
 \

494 || 
__HAVE_DISTINCT_FLOAT64
 \

495 || 
__HAVE_DISTINCT_FLOAT32X
 \

496 || 
__HAVE_DISTINCT_FLOAT64X
 \

497 || 
__HAVE_DISTINCT_FLOAT128X
)

510 #ifde‡
__NO_LONG_DOUBLE_MATH


511 #i‡
__HAVE_DISTINCT_FLOAT128


514 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

515 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

516 #ñi‡
__HAVE_DISTINCT_FLOAT128


517 #i‡
__HAVE_GENERIC_SELECTION


518 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


519 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

521 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

523 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


524 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


525 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

527 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

530 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

532 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

533 
	`_Gíîic
 ((
TG_ARG
), \

534 : 
FUNC
 ## 
f
 
ARGS
, \

535 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

536 : 
FUNC
 
ARGS
, \

537 : 
FUNC
 ## 
l
 
ARGS
, \

538 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

539 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

541 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


544 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

545 
__buûtö_choo£_ex¥
 \

546 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

547 
FUNC
 ## 
f
 
ARGS
, \

548 
__buûtö_choo£_ex¥
 \

549 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

550 
FUNC
 
ARGS
, \

551 
__buûtö_choo£_ex¥
 \

552 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

553 
FUNC
 ## 
l
 
ARGS
, \

554 
FUNC
 ## 
f128
 
ARGS
)))

	)

557 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

558 ( (
TG_ARG
) ==  () \

559 ? 
FUNC
 ## 
f
 
ARGS
 \

560 :  (
TG_ARG
) ==  () \

561 ? 
FUNC
 
ARGS
 \

562 : 
FUNC
 ## 
l
 
ARGS
)

	)

566 #ifde‡
__USE_ISOC99


571 
FP_NAN
 =

572 
	#FP_NAN
 0

	)

573 
FP_NAN
,

574 
FP_INFINITE
 =

575 
	#FP_INFINITE
 1

	)

576 
FP_INFINITE
,

577 
FP_ZERO
 =

578 
	#FP_ZERO
 2

	)

579 
FP_ZERO
,

580 
FP_SUBNORMAL
 =

581 
	#FP_SUBNORMAL
 3

	)

582 
FP_SUBNORMAL
,

583 
FP_NORMAL
 =

584 
	#FP_NORMAL
 4

	)

585 
FP_NORMAL


593 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

594 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

601 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

602 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

604 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

608 #i‡
	`__GNUC_PREREQ
 (6,0)

609 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

610 #ñi‡
deföed
 
__˝lu•lus


618 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

619 #ñi‡
	`__GNUC_PREREQ
 (4,0)

620 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

622 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

626 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


627 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

629 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

633 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


634 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

636 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

641 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


642 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

644 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

648 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

649 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


655 
	#isöf
(
x
) \

656 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

657 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

658 #ñi‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


659 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

661 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

665 
	#MATH_ERRNO
 1

	)

666 
	#MATH_ERREXCEPT
 2

	)

673 #ifde‡
__FAST_MATH__


674 
	#m©h_îrh™dlög
 0

	)

675 #ñi‡
deföed
 
__NO_MATH_ERRNO__


676 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

678 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

683 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

684 
	~<bôs/isˇn⁄iˇl.h
>

687 #i‚de‡
__˝lu•lus


688 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

697 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

698 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

699 
ölöe
 

700 
	`issig«lög
 (
__vÆ
)

702 #ifde‡
__NO_LONG_DOUBLE_MATH


703  
	`__issig«lög
 (
__vÆ
);

705  
	`__issig«lögl
 (
__vÆ
);

708 #i‡
__HAVE_DISTINCT_FLOAT128


709 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

711 
	}
}

715 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

718 #i‚de‡
__˝lu•lus


719 #ifde‡
__SUPPORT_SNAN__


720 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

722 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

726 #ifde‡
__SUPPORT_SNAN__


727 
ölöe
 

728 
iszîo
 (
__vÆ
)

730  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

732 
ölöe
 

733 
iszîo
 (
__vÆ
)

735  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

737 
ölöe
 

738 
iszîo
 (
__vÆ
)

740 #ifde‡
__NO_LONG_DOUBLE_MATH


741  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

743  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

746 #i‡
__HAVE_DISTINCT_FLOAT128


747 
ölöe
 

748 
iszîo
 (
_Flﬂt128
 
__vÆ
)

750  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

754 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


755 
iszîo
 (
__T
 
__vÆ
)

757  
__vÆ
 == 0;

764 #ifde‡
__USE_XOPEN


766 
	#MAXFLOAT
 3.40282347e+38F

	)

771 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


772 
	#M_E
 2.7182818284590452354

	)

773 
	#M_LOG2E
 1.4426950408889634074

	)

774 
	#M_LOG10E
 0.43429448190325182765

	)

775 
	#M_LN2
 0.69314718055994530942

	)

776 
	#M_LN10
 2.30258509299404568402

	)

777 
	#M_PI
 3.14159265358979323846

	)

778 
	#M_PI_2
 1.57079632679489661923

	)

779 
	#M_PI_4
 0.78539816339744830962

	)

780 
	#M_1_PI
 0.31830988618379067154

	)

781 
	#M_2_PI
 0.63661977236758134308

	)

782 
	#M_2_SQRTPI
 1.12837916709551257390

	)

783 
	#M_SQRT2
 1.41421356237309504880

	)

784 
	#M_SQRT1_2
 0.70710678118654752440

	)

790 #ifde‡
__USE_GNU


791 
	#M_El
 2.718281828459045235360287471352662498L

	)

792 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

793 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

794 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

795 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

796 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

797 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

798 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

799 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

800 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

801 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

802 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

803 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

806 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


807 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

808 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

809 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

810 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

811 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

812 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

813 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

814 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

815 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

816 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

817 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

818 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

819 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

822 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


823 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

824 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

825 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

826 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

827 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

828 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

829 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

830 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

831 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

832 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

833 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

834 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

835 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

838 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


839 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

840 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

841 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

842 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

843 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

844 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

845 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

846 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

847 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

848 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

849 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

850 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

851 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

854 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


855 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

856 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

857 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

858 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

859 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

860 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

861 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

862 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

863 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

864 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

865 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

866 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

867 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

870 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


871 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

872 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

873 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

874 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

875 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

876 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

877 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

878 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

879 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

880 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

881 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

882 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

883 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

886 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


887 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

888 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

889 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

890 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

891 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

892 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

893 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

894 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

895 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

896 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

897 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

898 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

899 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

902 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


909 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


910 
	#__NO_MATH_INLINES
 1

	)

913 #ifde‡
__USE_ISOC99


914 #i‡
__GNUC_PREREQ
 (3, 1)

921 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

922 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

923 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

924 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

925 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

926 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

928 
	#isgª©î
(
x
, 
y
) \

929 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

930 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

931 
	#isgª©îequÆ
(
x
, 
y
) \

932 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

933 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

934 
	#i¶ess
(
x
, 
y
) \

935 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

936 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

937 
	#i¶es£quÆ
(
x
, 
y
) \

938 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

939 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

940 
	#i¶essgª©î
(
x
, 
y
) \

941 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

942 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

944 
	#isun‹dîed
(
x
, 
y
) \

945 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

946 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

951 #ifde‡
__USE_EXTERN_INLINES


952 
	~<bôs/m©hölöe.h
>

957 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

960 
	#_MdoubÀ_
 

	)

961 
	#__MATH_DECLARING_DOUBLE
 1

	)

962 
	#__MATH_DECLARING_FLOATN
 0

	)

963 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

964 
fun˘i⁄
 ## 
ªíå™t


	)

965 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

966 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

967 
	~<bôs/m©h-föôe.h
>

968 #unde‡
_MdoubÀ_


969 #unde‡
__MATH_DECLARING_DOUBLE


970 #unde‡
__MATH_DECLARING_FLOATN


971 #unde‡
__REDIRFROM_X


972 #unde‡
__REDIRTO_X


976 #ifde‡
__USE_ISOC99


979 
	#_MdoubÀ_
 

	)

980 
	#__MATH_DECLARING_DOUBLE
 0

	)

981 
	#__MATH_DECLARING_FLOATN
 0

	)

982 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

983 
fun˘i⁄
 ## 
f
 ## 
ªíå™t


	)

984 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

985 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

986 
	~<bôs/m©h-föôe.h
>

987 #unde‡
_MdoubÀ_


988 #unde‡
__MATH_DECLARING_DOUBLE


989 #unde‡
__MATH_DECLARING_FLOATN


990 #unde‡
__REDIRFROM_X


991 #unde‡
__REDIRTO_X


994 #ifde‡
__MATH_DECLARE_LDOUBLE


995 
	#_MdoubÀ_
 

	)

996 
	#__MATH_DECLARING_DOUBLE
 0

	)

997 
	#__MATH_DECLARING_FLOATN
 0

	)

998 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

999 
fun˘i⁄
 ## 
l
 ## 
ªíå™t


	)

1000 #ifde‡
__NO_LONG_DOUBLE_MATH


1001 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1002 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1004 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1005 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1007 
	~<bôs/m©h-föôe.h
>

1008 #unde‡
_MdoubÀ_


1009 #unde‡
__MATH_DECLARING_DOUBLE


1010 #unde‡
__MATH_DECLARING_FLOATN


1011 #unde‡
__REDIRFROM_X


1012 #unde‡
__REDIRTO_X


1019 #i‡(
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)) \

1020 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1021 
	#_MdoubÀ_
 
_Flﬂt16


	)

1022 
	#__MATH_DECLARING_DOUBLE
 0

	)

1023 
	#__MATH_DECLARING_FLOATN
 1

	)

1024 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1025 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t


	)

1026 #i‡
__HAVE_DISTINCT_FLOAT16


1027 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1028 
__
 ## 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t
 ## 
_föôe


	)

1032 
	~<bôs/m©h-föôe.h
>

1033 #unde‡
_MdoubÀ_


1034 #unde‡
__MATH_DECLARING_DOUBLE


1035 #unde‡
__MATH_DECLARING_FLOATN


1036 #unde‡
__REDIRFROM_X


1037 #unde‡
__REDIRTO_X


1040 #i‡(
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)) \

1041 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1042 
	#_MdoubÀ_
 
_Flﬂt32


	)

1043 
	#__MATH_DECLARING_DOUBLE
 0

	)

1044 
	#__MATH_DECLARING_FLOATN
 1

	)

1045 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1046 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t


	)

1047 #i‡
__HAVE_DISTINCT_FLOAT32


1048 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1049 
__
 ## 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t
 ## 
_föôe


	)

1051 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1052 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

1054 
	~<bôs/m©h-föôe.h
>

1055 #unde‡
_MdoubÀ_


1056 #unde‡
__MATH_DECLARING_DOUBLE


1057 #unde‡
__MATH_DECLARING_FLOATN


1058 #unde‡
__REDIRFROM_X


1059 #unde‡
__REDIRTO_X


1062 #i‡(
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)) \

1063 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1064 
	#_MdoubÀ_
 
_Flﬂt64


	)

1065 
	#__MATH_DECLARING_DOUBLE
 0

	)

1066 
	#__MATH_DECLARING_FLOATN
 1

	)

1067 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1068 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t


	)

1069 #i‡
__HAVE_DISTINCT_FLOAT64


1070 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1071 
__
 ## 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t
 ## 
_föôe


	)

1073 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1074 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1076 
	~<bôs/m©h-föôe.h
>

1077 #unde‡
_MdoubÀ_


1078 #unde‡
__MATH_DECLARING_DOUBLE


1079 #unde‡
__MATH_DECLARING_FLOATN


1080 #unde‡
__REDIRFROM_X


1081 #unde‡
__REDIRTO_X


1084 #i‡(
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)) \

1085 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1086 
	#_MdoubÀ_
 
_Flﬂt128


	)

1087 
	#__MATH_DECLARING_DOUBLE
 0

	)

1088 
	#__MATH_DECLARING_FLOATN
 1

	)

1089 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1090 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t


	)

1091 #i‡
__HAVE_DISTINCT_FLOAT128


1092 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1093 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1095 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1096 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1098 
	~<bôs/m©h-föôe.h
>

1099 #unde‡
_MdoubÀ_


1100 #unde‡
__MATH_DECLARING_DOUBLE


1101 #unde‡
__MATH_DECLARING_FLOATN


1102 #unde‡
__REDIRFROM_X


1103 #unde‡
__REDIRTO_X


1106 #i‡(
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)) \

1107 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1108 
	#_MdoubÀ_
 
_Flﬂt32x


	)

1109 
	#__MATH_DECLARING_DOUBLE
 0

	)

1110 
	#__MATH_DECLARING_FLOATN
 1

	)

1111 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1112 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t


	)

1113 #i‡
__HAVE_DISTINCT_FLOAT32X


1114 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1115 
__
 ## 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t
 ## 
_föôe


	)

1117 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1118 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1120 
	~<bôs/m©h-föôe.h
>

1121 #unde‡
_MdoubÀ_


1122 #unde‡
__MATH_DECLARING_DOUBLE


1123 #unde‡
__MATH_DECLARING_FLOATN


1124 #unde‡
__REDIRFROM_X


1125 #unde‡
__REDIRTO_X


1128 #i‡(
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)) \

1129 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1130 
	#_MdoubÀ_
 
_Flﬂt64x


	)

1131 
	#__MATH_DECLARING_DOUBLE
 0

	)

1132 
	#__MATH_DECLARING_FLOATN
 1

	)

1133 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1134 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t


	)

1135 #i‡
__HAVE_DISTINCT_FLOAT64X


1136 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1137 
__
 ## 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t
 ## 
_föôe


	)

1138 #ñi‡
__HAVE_FLOAT64X_LONG_DOUBLE


1139 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1140 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1142 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1143 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1145 
	~<bôs/m©h-föôe.h
>

1146 #unde‡
_MdoubÀ_


1147 #unde‡
__MATH_DECLARING_DOUBLE


1148 #unde‡
__MATH_DECLARING_FLOATN


1149 #unde‡
__REDIRFROM_X


1150 #unde‡
__REDIRTO_X


1153 #i‡(
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)) \

1154 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1155 
	#_MdoubÀ_
 
_Flﬂt128x


	)

1156 
	#__MATH_DECLARING_DOUBLE
 0

	)

1157 
	#__MATH_DECLARING_FLOATN
 1

	)

1158 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1159 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t


	)

1160 #i‡
__HAVE_DISTINCT_FLOAT128X


1161 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1162 
__
 ## 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t
 ## 
_föôe


	)

1166 
	~<bôs/m©h-föôe.h
>

1167 #unde‡
_MdoubÀ_


1168 #unde‡
__MATH_DECLARING_DOUBLE


1169 #unde‡
__MATH_DECLARING_FLOATN


1170 #unde‡
__REDIRFROM_X


1171 #unde‡
__REDIRTO_X


1176 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

1179 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1180 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1181 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1182 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1183 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1184 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1186 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1191 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1192 
	#i£qsig
(
x
, 
y
) \

1193 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1206 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1208 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1210 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1212  
	`__i£qsigf
 (
__x
, 
__y
);

1216 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1218 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1220  
	`__i£qsig
 (
__x
, 
__y
);

1224 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1226 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1228 #i‚de‡
__NO_LONG_DOUBLE_MATH


1229  
	`__i£qsigl
 (
__x
, 
__y
);

1231  
	`__i£qsig
 (
__x
, 
__y
);

1236 #i‡
__HAVE_DISTINCT_FLOAT128


1237 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1239 
	`__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
	`throw
 ()

1241  
	`__i£qsigf128
 (
__x
, 
__y
);

1246 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1247 
ölöe
 

1248 
	`i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
	`throw
 ()

1250 #i‡
__˝lu•lus
 >= 201103L

1251 
	`de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1253 
	`__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1255  
__i£qsig_ty≥
<
_T3
>::
	`__ˇŒ
 (
__x
, 
__y
);

1258 
	}
}

1263 
__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/°döt-uöä.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	~<bôs/ty≥s/sigevít_t.h
>

37 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

40 
	~<bôs/√tdb.h
>

43 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

44 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

45 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

46 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

47 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

48 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

51 
	g__BEGIN_DECLS


53 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


56 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

59 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

63 
	#HOST_NOT_FOUND
 1

	)

64 
	#TRY_AGAIN
 2

	)

66 
	#NO_RECOVERY
 3

	)

68 
	#NO_DATA
 4

	)

71 #ifde‡
__USE_MISC


72 
	#NETDB_INTERNAL
 -1

	)

73 
	#NETDB_SUCCESS
 0

	)

74 
	#NO_ADDRESS
 
NO_DATA


	)

77 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


79 
	#IPPORT_RESERVED
 1024

	)

82 #ifde‡
__USE_GNU


84 
	#SCOPE_DELIMITER
 '%'

	)

87 #ifde‡
__USE_MISC


90 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

93 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

98 
	sho°ít


100 *
h_«me
;

101 **
h_Æü£s
;

102 
h_addπy≥
;

103 
h_Àngth
;

104 **
h_addr_li°
;

105 #ifde‡
__USE_MISC


106 
	#h_addr
 
h_addr_li°
[0]

	)

115 
	`£tho°ít
 (
__°ay_›í
);

121 
	`ídho°ít
 ();

128 
ho°ít
 *
	`gëho°ít
 ();

135 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

136 
__ty≥
);

142 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

144 #ifde‡
__USE_MISC


153 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

165 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

167 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

168 *
__ª°ri˘
 
__h_î∫›
);

170 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

171 
__ty≥
,

172 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

173 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

174 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

175 *
__ª°ri˘
 
__h_î∫›
);

177 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

178 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

179 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

180 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

181 *
__ª°ri˘
 
__h_î∫›
);

183 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

184 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

185 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

186 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

187 *
__ª°ri˘
 
__h_î∫›
);

196 
	`£äëít
 (
__°ay_›í
);

202 
	`íd√ã¡
 ();

209 
√ã¡
 *
	`gë√ã¡
 ();

216 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

222 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

224 #ifdef 
__USE_MISC


235 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

236 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

237 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

238 *
__ª°ri˘
 
__h_î∫›
);

240 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

241 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

242 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

243 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

244 *
__ª°ri˘
 
__h_î∫›
);

246 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

247 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

248 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

249 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

250 *
__ª°ri˘
 
__h_î∫›
);

255 
	s£rvít


257 *
s_«me
;

258 **
s_Æü£s
;

259 
s_p‹t
;

260 *
s_¥Ÿo
;

268 
	`£t£rvít
 (
__°ay_›í
);

274 
	`íd£rvít
 ();

281 
£rvít
 *
	`gë£rvít
 ();

288 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

295 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

298 #ifdef 
__USE_MISC


306 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

307 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

308 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

310 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

311 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

312 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

313 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

314 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

316 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

317 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

318 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

319 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

324 
	s¥Ÿ€¡


326 *
p_«me
;

327 **
p_Æü£s
;

328 
p_¥Ÿo
;

336 
	`£çrŸ€¡
 (
__°ay_›í
);

342 
	`íd¥Ÿ€¡
 ();

349 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

355 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

361 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

364 #ifdef 
__USE_MISC


372 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

373 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

374 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

376 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

377 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

378 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

379 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

381 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

382 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

383 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

384 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

393 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

401 
	`íd√tgª¡
 ();

410 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

411 **
__ª°ri˘
 
__u£Ω
,

412 **
__ª°ri˘
 
__domaöp
);

421 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

422 c⁄° *
__u£r
, c⁄° *
__domaö
);

430 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

431 **
__ª°ri˘
 
__u£Ω
,

432 **
__ª°ri˘
 
__domaöp
,

433 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

437 #ifde‡
__USE_MISC


449 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

450 c⁄° *
__ª°ri˘
 
__locu£r
,

451 c⁄° *
__ª°ri˘
 
__ªmu£r
,

452 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

461 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

462 c⁄° *
__ª°ri˘
 
__locu£r
,

463 c⁄° *
__ª°ri˘
 
__ªmu£r
,

464 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

465 
ß_Ámûy_t
 
__af
);

477 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

478 c⁄° *
__ª°ri˘
 
__«me
,

479 c⁄° *
__ª°ri˘
 
__∑ss
,

480 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

489 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

490 c⁄° *
__ª°ri˘
 
__«me
,

491 c⁄° *
__ª°ri˘
 
__∑ss
,

492 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

493 
ß_Ámûy_t
 
__af
);

503 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

504 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

513 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

514 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

515 
ß_Ámûy_t
 
__af
);

526 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

527 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

537 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

538 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

539 
ß_Ámûy_t
 
__af
);

549 
	`ºesvp‹t
 (*
__Æp‹t
);

558 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

563 #ifde‡
__USE_XOPEN2K


565 
	saddröfo


567 
ai_Êags
;

568 
ai_Ámûy
;

569 
ai_sockty≥
;

570 
ai_¥Ÿocﬁ
;

571 
sockÀn_t
 
ai_addæí
;

572 
sockaddr
 *
ai_addr
;

573 *
ai_ˇn⁄«me
;

574 
addröfo
 *
ai_√xt
;

577 #ifde‡
__USE_GNU


579 
	sgaicb


581 c⁄° *
¨_«me
;

582 c⁄° *
¨_£rvi˚
;

583 c⁄° 
addröfo
 *
¨_ªque°
;

584 
addröfo
 *
¨_ªsu…
;

586 
__ªtu∫
;

587 
__glibc_ª£rved
[5];

591 
	#GAI_WAIT
 0

	)

592 
	#GAI_NOWAIT
 1

	)

596 
	#AI_PASSIVE
 0x0001

	)

597 
	#AI_CANONNAME
 0x0002

	)

598 
	#AI_NUMERICHOST
 0x0004

	)

599 
	#AI_V4MAPPED
 0x0008

	)

600 
	#AI_ALL
 0x0010

	)

601 
	#AI_ADDRCONFIG
 0x0020

	)

603 #ifde‡
__USE_GNU


604 
	#AI_IDN
 0x0040

	)

607 
	#AI_CANONIDN
 0x0080

	)

608 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

610 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

613 
	#AI_NUMERICSERV
 0x0400

	)

616 
	#EAI_BADFLAGS
 -1

	)

617 
	#EAI_NONAME
 -2

	)

618 
	#EAI_AGAIN
 -3

	)

619 
	#EAI_FAIL
 -4

	)

620 
	#EAI_FAMILY
 -6

	)

621 
	#EAI_SOCKTYPE
 -7

	)

622 
	#EAI_SERVICE
 -8

	)

623 
	#EAI_MEMORY
 -10

	)

624 
	#EAI_SYSTEM
 -11

	)

625 
	#EAI_OVERFLOW
 -12

	)

626 #ifde‡
__USE_GNU


627 
	#EAI_NODATA
 -5

	)

628 
	#EAI_ADDRFAMILY
 -9

	)

629 
	#EAI_INPROGRESS
 -100

	)

630 
	#EAI_CANCELED
 -101

	)

631 
	#EAI_NOTCANCELED
 -102

	)

632 
	#EAI_ALLDONE
 -103

	)

633 
	#EAI_INTR
 -104

	)

634 
	#EAI_IDN_ENCODE
 -105

	)

637 #ifde‡
__USE_MISC


638 
	#NI_MAXHOST
 1025

	)

639 
	#NI_MAXSERV
 32

	)

642 
	#NI_NUMERICHOST
 1

	)

643 
	#NI_NUMERICSERV
 2

	)

644 
	#NI_NOFQDN
 4

	)

645 
	#NI_NAMEREQD
 8

	)

646 
	#NI_DGRAM
 16

	)

647 #ifde‡
__USE_GNU


648 
	#NI_IDN
 32

	)

649 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

651 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

660 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

661 c⁄° *
__ª°ri˘
 
__£rvi˚
,

662 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

663 
addröfo
 **
__ª°ri˘
 
__∑i
);

666 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

669 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

675 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

676 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

677 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

678 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

681 #ifde‡
__USE_GNU


690 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

691 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

701 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

702 c⁄° 
time•ec
 *
__timeout
);

705 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

708 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

711 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/°döt-uöä.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‡!
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‡!
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 
uöt16_t
 
	m__u6_addr16
[8];

217 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #ifde‡
__USE_MISC


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‡!
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #ifde‡
__USE_MISC


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‡!
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #ifde‡
__USE_MISC


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

386 
	~<bôs/uöä-idítôy.h
>

388 #ifde‡
__OPTIMIZE__


392 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


395 
	#¡ohl
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

396 
	#¡ohs
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

397 
	#ht⁄l
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

398 
	#ht⁄s
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

400 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


401 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

402 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

403 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

404 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

409 #ifde‡
__GNUC__


410 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

411 (
__exãnsi⁄__
 \

412 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

413 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

414 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

415 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

416 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =0; 
	}
}))

	)

418 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

419 (
__exãnsi⁄__
 \

420 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

421 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

422 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

423 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

424 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

426 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

429 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

431 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

432 (
__exãnsi⁄__
 \

433 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

434 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

436 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

437 (
__exãnsi⁄__
 \

438 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

439 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

440 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

441 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

443 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

444 (
__exãnsi⁄__
 \

445 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

446 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

447 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

448 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

449 && 
	`¡ohl
 (
__a
->
__ö6_u
.
__u6_addr32
[3]Ë> 1; }))

	)

451 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

452 (
__exãnsi⁄__
 \

453 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

454 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

455 
__a
->
__ö6_u
.
__u6_addr32
[0] =
__b
->__in6_u.__u6_addr32[0] \

456 && 
__a
->
__ö6_u
.
__u6_addr32
[1] =
__b
->__in6_u.__u6_addr32[1] \

457 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
__b
->__in6_u.__u6_addr32[2] \

458 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
__b
->__ö6_u.__u6_addr32[3]; }))

	)

460 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

461 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

466 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

467 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

472 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

473 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

474 =
	`ht⁄l
 (0x„800000))

	)

476 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

477 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

478 =
	`ht⁄l
 (0x„c00000))

	)

480 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

481 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

485 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

486 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

489 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

491 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

492 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

498 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

500 #ifde‡
__USE_MISC


502 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

505 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

506 
__THROW
;

510 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

511 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

512 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

514 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

515 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

516 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

518 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

519 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

520 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

522 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

523 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

524 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

526 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

527 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

528 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

531 #ifde‡
__USE_GNU


532 
cmsghdr
;

534 #i‡!
__USE_KERNEL_IPV6_DEFS


536 
	sö6_pktöfo


538 
ö6_addr
 
ùi6_addr
;

539 
ùi6_ifödex
;

543 
	sù6_mtuöfo


545 
sockaddr_ö6
 
ù6m_addr
;

546 
uöt32_t
 
ù6m_mtu
;

551 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

552 
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

554 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

555 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

556 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

557 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

558 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

559 
__mu…x
, 
__∂usy
)

560 
__THROW
 
__©åibuã_dïªˇãd__
;

561 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

562 
uöt8_t
 **
__çåp
)

563 
__THROW
 
__©åibuã_dïªˇãd__
;

564 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

565 
uöt8_t
 **
__çåp
, 
__ty≥
)

566 
__THROW
 
__©åibuã_dïªˇãd__
;

570 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

571 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

572 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

573 **
__d©abuÂ
Ë
__THROW
;

574 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

575 
__THROW
;

576 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

577 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

578 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

579 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

580 **
__d©abuÂ
Ë
__THROW
;

581 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

582 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

583 **
__d©abuÂ
Ë
__THROW
;

584 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

585 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

589 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

590 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

591 
__£gmíts
Ë
__THROW
;

592 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

593 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

594 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

595 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

596 
__THROW
;

602 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

603 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

604 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

605 
__THROW
;

608 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

609 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

610 
uöt32_t
 
__num§c
,

611 c⁄° 
ö_addr
 *
__¶i°
)

612 
__THROW
;

616 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

617 c⁄° 
sockaddr
 *
__group
,

618 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

619 
uöt32_t
 *
__num§c
,

620 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

623 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

624 c⁄° 
sockaddr
 *
__group
,

625 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

626 
uöt32_t
 
__num§c
,

627 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

630 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

72 
	#TCP_REPAIR_WINDOW
 29

	)

73 
	#TCP_FASTOPEN_CONNECT
 30

	)

74 
	#TCP_ULP
 31

	)

75 
	#TCP_MD5SIG_EXT
 32

	)

77 #ifde‡
__USE_MISC


78 
	~<sys/ty≥s.h
>

79 
	~<sys/sockë.h
>

80 
	~<°döt.h
>

82 
uöt32_t
 
	tt˝_£q
;

87 
	st˝hdr


89 
__exãnsi⁄__
 union

93 
uöt16_t
 
	mth_•‹t
;

94 
uöt16_t
 
	mth_dp‹t
;

95 
t˝_£q
 
	mth_£q
;

96 
t˝_£q
 
	mth_ack
;

97 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


98 
uöt8_t
 
	mth_x2
:4;

99 
uöt8_t
 
	mth_off
:4;

101 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


102 
uöt8_t
 
	mth_off
:4;

103 
uöt8_t
 
	mth_x2
:4;

105 
uöt8_t
 
	mth_Êags
;

106 
	#TH_FIN
 0x01

	)

107 
	#TH_SYN
 0x02

	)

108 
	#TH_RST
 0x04

	)

109 
	#TH_PUSH
 0x08

	)

110 
	#TH_ACK
 0x10

	)

111 
	#TH_URG
 0x20

	)

112 
uöt16_t
 
	mth_wö
;

113 
uöt16_t
 
	mth_sum
;

114 
uöt16_t
 
	mth_uΩ
;

118 
uöt16_t
 
	msour˚
;

119 
uöt16_t
 
	mde°
;

120 
uöt32_t
 
	m£q
;

121 
uöt32_t
 
	mack_£q
;

122 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


123 
uöt16_t
 
	mªs1
:4;

124 
uöt16_t
 
	mdoff
:4;

125 
uöt16_t
 
	mfö
:1;

126 
uöt16_t
 
	msyn
:1;

127 
uöt16_t
 
	mr°
:1;

128 
uöt16_t
 
	mpsh
:1;

129 
uöt16_t
 
	mack
:1;

130 
uöt16_t
 
	murg
:1;

131 
uöt16_t
 
	mªs2
:2;

132 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


133 
uöt16_t
 
	mdoff
:4;

134 
uöt16_t
 
	mªs1
:4;

135 
uöt16_t
 
	mªs2
:2;

136 
uöt16_t
 
	murg
:1;

137 
uöt16_t
 
	mack
:1;

138 
uöt16_t
 
	mpsh
:1;

139 
uöt16_t
 
	mr°
:1;

140 
uöt16_t
 
	msyn
:1;

141 
uöt16_t
 
	mfö
:1;

145 
uöt16_t
 
	mwödow
;

146 
uöt16_t
 
	mcheck
;

147 
uöt16_t
 
	murg_±r
;

154 
	mTCP_ESTABLISHED
 = 1,

155 
	mTCP_SYN_SENT
,

156 
	mTCP_SYN_RECV
,

157 
	mTCP_FIN_WAIT1
,

158 
	mTCP_FIN_WAIT2
,

159 
	mTCP_TIME_WAIT
,

160 
	mTCP_CLOSE
,

161 
	mTCP_CLOSE_WAIT
,

162 
	mTCP_LAST_ACK
,

163 
	mTCP_LISTEN
,

164 
	mTCP_CLOSING


167 
	#TCPOPT_EOL
 0

	)

168 
	#TCPOPT_NOP
 1

	)

169 
	#TCPOPT_MAXSEG
 2

	)

170 
	#TCPOLEN_MAXSEG
 4

	)

171 
	#TCPOPT_WINDOW
 3

	)

172 
	#TCPOLEN_WINDOW
 3

	)

173 
	#TCPOPT_SACK_PERMITTED
 4

	)

174 
	#TCPOLEN_SACK_PERMITTED
 2

	)

175 
	#TCPOPT_SACK
 5

	)

176 
	#TCPOPT_TIMESTAMP
 8

	)

177 
	#TCPOLEN_TIMESTAMP
 10

	)

178 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

180 
	#TCPOPT_TSTAMP_HDR
 \

181 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

189 
	#TCP_MSS
 512

	)

191 
	#TCP_MAXWIN
 65535

	)

193 
	#TCP_MAX_WINSHIFT
 14

	)

195 
	#SOL_TCP
 6

	)

198 
	#TCPI_OPT_TIMESTAMPS
 1

	)

199 
	#TCPI_OPT_SACK
 2

	)

200 
	#TCPI_OPT_WSCALE
 4

	)

201 
	#TCPI_OPT_ECN
 8

	)

202 
	#TCPI_OPT_ECN_SEEN
 16

	)

203 
	#TCPI_OPT_SYN_DATA
 32

	)

206 
	et˝_ˇ_°©e


208 
	mTCP_CA_O≥n
 = 0,

209 
	mTCP_CA_Dis‹dî
 = 1,

210 
	mTCP_CA_CWR
 = 2,

211 
	mTCP_CA_Recovîy
 = 3,

212 
	mTCP_CA_Loss
 = 4

215 
	st˝_öfo


217 
uöt8_t
 
	mt˝i_°©e
;

218 
uöt8_t
 
	mt˝i_ˇ_°©e
;

219 
uöt8_t
 
	mt˝i_ªå™smôs
;

220 
uöt8_t
 
	mt˝i_¥obes
;

221 
uöt8_t
 
	mt˝i_backoff
;

222 
uöt8_t
 
	mt˝i_›ti⁄s
;

223 
uöt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

225 
uöt32_t
 
	mt˝i_πo
;

226 
uöt32_t
 
	mt˝i_©o
;

227 
uöt32_t
 
	mt˝i_¢d_mss
;

228 
uöt32_t
 
	mt˝i_rcv_mss
;

230 
uöt32_t
 
	mt˝i_u«cked
;

231 
uöt32_t
 
	mt˝i_ßcked
;

232 
uöt32_t
 
	mt˝i_lo°
;

233 
uöt32_t
 
	mt˝i_ªå™s
;

234 
uöt32_t
 
	mt˝i_Áckës
;

237 
uöt32_t
 
	mt˝i_œ°_d©a_£¡
;

238 
uöt32_t
 
	mt˝i_œ°_ack_£¡
;

239 
uöt32_t
 
	mt˝i_œ°_d©a_ªcv
;

240 
uöt32_t
 
	mt˝i_œ°_ack_ªcv
;

243 
uöt32_t
 
	mt˝i_pmtu
;

244 
uöt32_t
 
	mt˝i_rcv_s°hªsh
;

245 
uöt32_t
 
	mt˝i_πt
;

246 
uöt32_t
 
	mt˝i_πtv¨
;

247 
uöt32_t
 
	mt˝i_¢d_s°hªsh
;

248 
uöt32_t
 
	mt˝i_¢d_cwnd
;

249 
uöt32_t
 
	mt˝i_advmss
;

250 
uöt32_t
 
	mt˝i_ª‹dîög
;

252 
uöt32_t
 
	mt˝i_rcv_πt
;

253 
uöt32_t
 
	mt˝i_rcv_•a˚
;

255 
uöt32_t
 
	mt˝i_tŸÆ_ªå™s
;

260 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

263 
	#TCP_MD5SIG_FLAG_PREFIX
 1

	)

265 
	st˝_md5sig


267 
sockaddr_°‹age
 
	mt˝m_addr
;

268 
uöt8_t
 
	mt˝m_Êags
;

269 
uöt8_t
 
	mt˝m_¥efixÀn
;

270 
uöt16_t
 
	mt˝m_keyÀn
;

271 
uöt32_t
 
	m__t˝m_∑d
;

272 
uöt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

276 
	st˝_ª∑ú_›t


278 
uöt32_t
 
	m›t_code
;

279 
uöt32_t
 
	m›t_vÆ
;

285 
	mTCP_NO_QUEUE
,

286 
	mTCP_RECV_QUEUE
,

287 
	mTCP_SEND_QUEUE
,

288 
	mTCP_QUEUES_NR
,

292 
	#TCP_COOKIE_MIN
 8

	)

293 
	#TCP_COOKIE_MAX
 16

	)

294 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

297 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

298 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

302 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

303 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

305 
	#TCP_MSS_DEFAULT
 536U

	)

306 
	#TCP_MSS_DESIRED
 1220U

	)

308 
	st˝_cookõ_å™ß˘i⁄s


310 
uöt16_t
 
	mt˝˘_Êags
;

311 
uöt8_t
 
	m__t˝˘_∑d1
;

312 
uöt8_t
 
	mt˝˘_cookõ_desúed
;

313 
uöt16_t
 
	mt˝˘_s_d©a_desúed
;

314 
uöt16_t
 
	mt˝˘_u£d
;

315 
uöt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

319 
	st˝_ª∑ú_wödow


321 
uöt32_t
 
	m¢d_wl1
;

322 
uöt32_t
 
	m¢d_wnd
;

323 
uöt32_t
 
	mmax_wödow
;

324 
uöt32_t
 
	mrcv_wnd
;

325 
uöt32_t
 
	mrcv_wup
;

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	mPTHREAD_CREATE_JOINABLE
,

36 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

37 
	mPTHREAD_CREATE_DETACHED


38 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

45 
	mPTHREAD_MUTEX_TIMED_NP
,

46 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

47 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

48 
	mPTHREAD_MUTEX_ADAPTIVE_NP


49 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


51 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

52 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

53 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

54 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


56 #ifde‡
__USE_GNU


58 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


63 #ifde‡
__USE_XOPEN2K


67 
	mPTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_ROBUST
,

70 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


75 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_PREV


87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

99 
	#PTHREAD_MUTEX_INITIALIZER
 \

100 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

101 #ifde‡
__USE_GNU


102 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

104 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

106 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

107 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


127 #i‡
__WORDSIZE
 == 64

128 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

133 
	#PTHREAD_RWLOCK_INITIALIZER
 \

134 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

135 #ifde‡
__USE_GNU


136 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

139 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

141 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


142 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

143 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

144 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

146 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

147 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

148 0 } }

	)

158 
	mPTHREAD_INHERIT_SCHED
,

159 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

160 
	mPTHREAD_EXPLICIT_SCHED


161 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

168 
	mPTHREAD_SCOPE_SYSTEM
,

169 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

170 
	mPTHREAD_SCOPE_PROCESS


171 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

178 
	mPTHREAD_PROCESS_PRIVATE
,

179 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

180 
	mPTHREAD_PROCESS_SHARED


181 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

187 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

191 
	s_±hªad_˛ónup_buf„r


193 (*
	m__routöe
) (*);

194 *
	m__¨g
;

195 
	m__ˇn˚…y≥
;

196 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

202 
	mPTHREAD_CANCEL_ENABLE
,

203 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

204 
	mPTHREAD_CANCEL_DISABLE


205 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

209 
	mPTHREAD_CANCEL_DEFERRED
,

210 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

211 
	mPTHREAD_CANCEL_ASYNCHRONOUS


212 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

214 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

218 
	#PTHREAD_ONCE_INIT
 0

	)

221 #ifde‡
__USE_XOPEN2K


225 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

229 
__BEGIN_DECLS


234 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

235 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

236 *(*
__°¨t_routöe
) (*),

237 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

243 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

251 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

253 #ifde‡
__USE_GNU


256 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

264 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

265 c⁄° 
time•ec
 *
__ab°ime
);

272 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

276 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

279 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

280 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

288 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

291 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

296 *
__dëach°©e
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

300 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

301 
__dëach°©e
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

306 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

307 
size_t
 *
__gu¨dsize
)

308 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

311 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

312 
size_t
 
__gu¨dsize
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1));

317 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

318 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

322 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

323 c⁄° 
sched_∑øm
 *
__ª°ri˘


324 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

327 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


337 
__©å
, *
__ª°ri˘
 
__öhîô
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

341 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

342 
__öhîô
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

348 *
__ª°ri˘
 
__sc›e
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

352 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

356 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


357 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

358 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

364 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

365 *
__°ackaddr
)

366 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

369 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


370 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

376 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

377 
size_t
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1));

380 #ifde‡
__USE_XOPEN2K


382 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

383 **
__ª°ri˘
 
__°ackaddr
,

384 
size_t
 *
__ª°ri˘
 
__°acksize
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

390 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

391 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

394 #ifde‡
__USE_GNU


397 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 c⁄° 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

405 
size_t
 
__˝u£tsize
,

406 
˝u_£t_t
 *
__˝u£t
)

407 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

410 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

415 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

416 
__THROW
 
	`__n⁄nuŒ
 ((1));

421 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2));

430 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

431 c⁄° 
sched_∑øm
 *
__∑øm
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

436 *
__ª°ri˘
 
__pﬁicy
,

437 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

441 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

442 
__THROW
;

445 #ifde‡
__USE_GNU


447 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

448 
size_t
 
__buÊí
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

452 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2));

457 #ifde‡
__USE_UNIX98


459 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

462 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

465 #ifde‡
__USE_GNU


470 
	$±hªad_yõld
 (Ë
__THROW
;

475 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

476 c⁄° 
˝u_£t_t
 *
__˝u£t
)

477 
__THROW
 
	`__n⁄nuŒ
 ((3));

480 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

481 
˝u_£t_t
 *
__˝u£t
)

482 
__THROW
 
	`__n⁄nuŒ
 ((3));

495 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

496 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

507 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

511 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

514 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

519 
	`±hªad_ã°ˇn˚l
 ();

528 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

529 
__mask_was_ßved
;

530 } 
__ˇn˚l_jmp_buf
[1];

531 *
__∑d
[4];

532 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

535 #i‚de‡
__˛ónup_f˘_©åibuã


536 
	#__˛ónup_f˘_©åibuã


	)

541 
	s__±hªad_˛ónup_‰ame


543 (*
__ˇn˚l_routöe
) (*);

544 *
__ˇn˚l_¨g
;

545 
__do_ô
;

546 
__ˇn˚l_ty≥
;

549 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


550 #ifde‡
__˝lu•lus


552 ˛as†
	c__±hªad_˛ónup_˛ass


554 (*
__ˇn˚l_routöe
) (*);

555 *
__ˇn˚l_¨g
;

556 
__do_ô
;

557 
__ˇn˚l_ty≥
;

559 
public
:

560 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

561 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

562 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

563 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

564 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

565 &
__ˇn˚l_ty≥
); 
	}
}

566 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

576 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

578 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

582 
	#±hªad_˛ónup_p›
(
execuã
) \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

586 #ifde‡
__USE_GNU


590 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

592 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

593 
__˛‰ame
.
	`__de„r
 ()

	)

598 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

599 
__˛‰ame
.
	`__ª°‹e
 (); \

600 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

601 } 0)

	)

608 
__exã∫_ölöe
 

609 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

611 i‡(
__‰ame
->
__do_ô
)

612 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

613 
	}
}

622 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 };

	)

631 
	#±hªad_˛ónup_p›
(
execuã
) \

632 
__˛‰ame
.
__do_ô
 = (
execuã
); \

633 } 0)

	)

635 #ifde‡
__USE_GNU


639 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

641 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

642 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

643 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

644 .
__do_ô
 = 1 }; \

645 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

646 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

651 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

652 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

653 
__˛‰ame
.
__do_ô
 = (
execuã
); \

654 } 0)

	)

665 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

667 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

668 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

669 *
__ˇn˚l_¨g
 = (
¨g
); \

670 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

671 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

672 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

679 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

680 dÿ{

	)

681 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

682 
__˛ónup_f˘_©åibuã
;

686 
	#±hªad_˛ónup_p›
(
execuã
) \

689 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 i‡(
execuã
) \

691 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

692 } 0)

	)

693 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

694 
__˛ónup_f˘_©åibuã
;

696 #ifde‡
__USE_GNU


700 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

702 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

703 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

704 *
__ˇn˚l_¨g
 = (
¨g
); \

705 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

706 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

707 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

709 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

710 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

714 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

715 dÿ{

	)

716 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

717 
__˛ónup_f˘_©åibuã
;

722 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

725 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

726 i‡(
execuã
) \

727 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

728 
	}
} 0)

	)

729 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

730 
__˛ónup_f˘_©åibuã
;

734 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

735 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

736 #i‚de‡
SHARED


737 
	`__©åibuã__
 ((
__wók__
))

743 
__jmp_buf_èg
;

744 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

750 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

751 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

752 
__THROW
 
	`__n⁄nuŒ
 ((1));

755 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1));

759 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

760 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

763 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

764 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

766 #ifde‡
__USE_XOPEN2K


768 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

769 c⁄° 
time•ec
 *
__ª°ri˘


770 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

774 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

775 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

779 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

780 
__ª°ri˘
 
__muãx
,

781 *
__ª°ri˘
 
__¥io˚ûög
)

782 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

786 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

787 
__¥io˚ûög
,

788 *
__ª°ri˘
 
__ﬁd_˚ûög
)

789 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

792 #ifde‡
__USE_XOPEN2K8


794 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

796 #ifde‡
__USE_GNU


797 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

811 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1));

815 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

816 
__ª°ri˘
 
__©å
,

817 *
__ª°ri˘
 
__psh¨ed
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

821 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

822 
__psh¨ed
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


827 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


828 
__©å
, *
__ª°ri˘
 
__köd
)

829 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

834 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

835 
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

840 
__ª°ri˘
 
__©å
,

841 *
__ª°ri˘
 
__¥Ÿocﬁ
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

846 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

847 
__¥Ÿocﬁ
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

852 
__ª°ri˘
 
__©å
,

853 *
__ª°ri˘
 
__¥io˚ûög
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

857 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

858 
__¥io˚ûög
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 #ifde‡
__USE_XOPEN2K


863 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

864 *
__robu°√ss
)

865 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

866 #ifde‡
__USE_GNU


867 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

868 *
__robu°√ss
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

873 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

874 
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

878 
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


889 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

890 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


891 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

894 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

895 
__THROW
 
	`__n⁄nuŒ
 ((1));

898 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

899 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

902 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

903 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

908 c⁄° 
time•ec
 *
__ª°ri˘


909 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

913 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

914 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

917 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

918 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

920 #ifde‡
__USE_XOPEN2K


922 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

923 c⁄° 
time•ec
 *
__ª°ri˘


924 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

928 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

929 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1));

943 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

944 
__ª°ri˘
 
__©å
,

945 *
__ª°ri˘
 
__psh¨ed
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

949 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

950 
__psh¨ed
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

955 
__ª°ri˘
 
__©å
,

956 *
__ª°ri˘
 
__¥ef
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

960 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

961 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

970 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

975 
__THROW
 
	`__n⁄nuŒ
 ((1));

978 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

979 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

982 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

983 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

990 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

991 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

992 
	`__n⁄nuŒ
 ((1, 2));

1001 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1002 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1003 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1004 
	`__n⁄nuŒ
 ((1, 2, 3));

1009 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1));

1013 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1018 
__ª°ri˘
 
__©å
,

1019 *
__ª°ri˘
 
__psh¨ed
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1023 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1024 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1026 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1029 
__ª°ri˘
 
__©å
,

1030 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1034 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1035 
__˛ockid_t
 
__˛ock_id
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 #ifde‡
__USE_XOPEN2K


1045 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1049 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1050 
__THROW
 
	`__n⁄nuŒ
 ((1));

1053 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1054 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1057 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1058 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1061 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1062 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1069 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1070 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1071 
__©å
, 
__cou¡
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1076 
__THROW
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1080 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1084 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1085 
__THROW
 
	`__n⁄nuŒ
 ((1));

1088 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1093 
__ª°ri˘
 
__©å
,

1094 *
__ª°ri˘
 
__psh¨ed
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1098 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1099 
__psh¨ed
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1));

1112 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1113 (*
__de°r_fun˘i⁄
) (*))

1114 
__THROW
 
	`__n⁄nuŒ
 ((1));

1117 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1120 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1123 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1124 c⁄° *
__poöãr
Ë
__THROW
 ;

1127 #ifde‡
__USE_XOPEN2K


1129 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1130 
__˛ockid_t
 *
__˛ock_id
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((2));

1146 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1147 (*
__∑ª¡
) (),

1148 (*
__chûd
Ë()Ë
__THROW
;

1151 #ifde‡
__USE_EXTERN_INLINES


1153 
__exã∫_ölöe
 

1154 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1156  
__thªad1
 =
__thªad2
;

1157 
	}
}

1160 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/FILE.h
>

66 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


71 
£çwít
 ();

77 
ídpwít
 ();

83 
∑sswd
 *
gëpwít
 ();

86 #ifdef 
__USE_MISC


93 
∑sswd
 *
	$fgëpwít
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

101 
	`puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

102 
FILE
 *
__ª°ri˘
 
__f
);

109 
∑sswd
 *
	`gëpwuid
 (
__uid_t
 
__uid
);

115 
∑sswd
 *
	$gëpw«m
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

117 #ifde‡
__USE_POSIX


119 #ifde‡
__USE_MISC


122 
	#NSS_BUFLEN_PASSWD
 1024

	)

133 #ifde‡
__USE_MISC


138 
	$gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

139 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

140 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

141 
	`__n⁄nuŒ
 ((1, 2, 4));

144 
	$gëpwuid_r
 (
__uid_t
 
__uid
,

145 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

146 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

147 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

148 
	`__n⁄nuŒ
 ((2, 3, 5));

150 
	$gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

151 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

152 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

153 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

154 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

157 #ifdef 
__USE_MISC


165 
	$fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

166 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

167 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

168 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

169 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

174 #ifde‡
__USE_GNU


183 
	`gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

186 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

160 #ifde‡
__USE_MISC


167 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

170 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

173 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

180 #ifde‡
__USE_MISC


181 
	#NSIG
 
_NSIG


	)

184 #ifde‡
__USE_GNU


185 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

189 #ifde‡
__USE_MISC


190 
__sigh™dÀr_t
 
	tsig_t
;

193 #ifde‡
__USE_POSIX


196 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

209 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__USE_GNU


213 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

220 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

221 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

226 
	~<bôs/siga˘i⁄.h
>

229 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

230 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

237 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

240 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

241 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

244 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__USE_POSIX199506


252 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

253 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__USE_POSIX199309


261 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

262 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

269 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

270 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

271 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

272 
	`__n⁄nuŒ
 ((1));

276 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

277 
__THROW
;

282 #ifde‡
__USE_MISC


286 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

287 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

291 
	~<bôs/sigc⁄ãxt.h
>

294 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

299 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


300 
	#__√ed_size_t


	)

301 
	~<°ddef.h
>

303 
	~<bôs/ty≥s/°ack_t.h
>

304 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


306 
	~<sys/uc⁄ãxt.h
>

310 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


314 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

316 
	~<bôs/sig°ack.h
>

317 
	~<bôs/ss_Êags.h
>

321 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

322 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

325 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

326 || 
deföed
 
__USE_MISC
)

327 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

330 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

331 || 
deföed
 
__USE_MISC
)

335 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

336 
__THROW
 
__©åibuã_dïªˇãd__
;

339 #ifde‡
__USE_XOPEN_EXTENDED


343 
	$sighﬁd
 (
__sig
Ë
__THROW
;

346 
	$sigªl£
 (
__sig
Ë
__THROW
;

349 
	$sigign‹e
 (
__sig
Ë
__THROW
;

352 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

355 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


358 
	~<bôs/±hªadty≥s.h
>

359 
	~<bôs/sigthªad.h
>

366 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

368 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

370 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

371 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

373 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 sig√d 
	töt_Àa°8_t
;

44 
	töt_Àa°16_t
;

45 
	töt_Àa°32_t
;

46 #i‡
__WORDSIZE
 == 64

47 
	töt_Àa°64_t
;

49 
__exãnsi⁄__


50 
	töt_Àa°64_t
;

54 
	tuöt_Àa°8_t
;

55 
	tuöt_Àa°16_t
;

56 
	tuöt_Àa°32_t
;

57 #i‡
__WORDSIZE
 == 64

58 
	tuöt_Àa°64_t
;

60 
__exãnsi⁄__


61 
	tuöt_Àa°64_t
;

68 sig√d 
	töt_Á°8_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

74 
	töt_Á°16_t
;

75 
	töt_Á°32_t
;

76 
__exãnsi⁄__


77 
	töt_Á°64_t
;

81 
	tuöt_Á°8_t
;

82 #i‡
__WORDSIZE
 == 64

83 
	tuöt_Á°16_t
;

84 
	tuöt_Á°32_t
;

85 
	tuöt_Á°64_t
;

87 
	tuöt_Á°16_t
;

88 
	tuöt_Á°32_t
;

89 
__exãnsi⁄__


90 
	tuöt_Á°64_t
;

95 #i‡
__WORDSIZE
 == 64

96 #i‚de‡
__öçå_t_deföed


97 
	töçå_t
;

98 
	#__öçå_t_deföed


	)

100 
	tuöçå_t
;

102 #i‚de‡
__öçå_t_deföed


103 
	töçå_t
;

104 
	#__öçå_t_deföed


	)

106 
	tuöçå_t
;

111 
__ötmax_t
 
	tötmax_t
;

112 
__uötmax_t
 
	tuötmax_t
;

115 #i‡
__WORDSIZE
 == 64

116 
	#__INT64_C
(
c
Ë¯## 
L


	)

117 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

119 
	#__INT64_C
(
c
Ë¯## 
LL


	)

120 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

126 
	#INT8_MIN
 (-128)

	)

127 
	#INT16_MIN
 (-32767-1)

	)

128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

131 
	#INT8_MAX
 (127)

	)

132 
	#INT16_MAX
 (32767)

	)

133 
	#INT32_MAX
 (2147483647)

	)

134 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32767-1)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

155 
	#UINT_LEAST8_MAX
 (255)

	)

156 
	#UINT_LEAST16_MAX
 (65535)

	)

157 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

158 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

162 
	#INT_FAST8_MIN
 (-128)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

165 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

167 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

168 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

170 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

172 
	#INT_FAST8_MAX
 (127)

	)

173 #i‡
__WORDSIZE
 == 64

174 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

175 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

177 
	#INT_FAST16_MAX
 (2147483647)

	)

178 
	#INT_FAST32_MAX
 (2147483647)

	)

180 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

183 
	#UINT_FAST8_MAX
 (255)

	)

184 #i‡
__WORDSIZE
 == 64

185 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

186 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

188 
	#UINT_FAST16_MAX
 (4294967295U)

	)

189 
	#UINT_FAST32_MAX
 (4294967295U)

	)

191 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 #i‡
__WORDSIZE
 == 64

196 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

197 
	#INTPTR_MAX
 (9223372036854775807L)

	)

198 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

200 
	#INTPTR_MIN
 (-2147483647-1)

	)

201 
	#INTPTR_MAX
 (2147483647)

	)

202 
	#UINTPTR_MAX
 (4294967295U)

	)

207 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

209 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

220 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

222 #i‡
__WORDSIZE32_PTRDIFF_LONG


223 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

224 
	#PTRDIFF_MAX
 (2147483647L)

	)

226 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

227 
	#PTRDIFF_MAX
 (2147483647)

	)

232 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

233 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

236 #i‡
__WORDSIZE
 == 64

237 
	#SIZE_MAX
 (18446744073709551615UL)

	)

239 #i‡
__WORDSIZE32_SIZE_ULONG


240 
	#SIZE_MAX
 (4294967295UL)

	)

242 
	#SIZE_MAX
 (4294967295U)

	)

247 #i‚de‡
WCHAR_MIN


249 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

250 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

254 
	#WINT_MIN
 (0u)

	)

255 
	#WINT_MAX
 (4294967295u)

	)

258 
	#INT8_C
(
c
Ë
	)
c

259 
	#INT16_C
(
c
Ë
	)
c

260 
	#INT32_C
(
c
Ë
	)
c

261 #i‡
__WORDSIZE
 == 64

262 
	#INT64_C
(
c
Ë¯## 
L


	)

264 
	#INT64_C
(
c
Ë¯## 
LL


	)

268 
	#UINT8_C
(
c
Ë
	)
c

269 
	#UINT16_C
(
c
Ë
	)
c

270 
	#UINT32_C
(
c
Ë¯## 
U


	)

271 #i‡
__WORDSIZE
 == 64

272 
	#UINT64_C
(
c
Ë¯## 
UL


	)

274 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

278 #i‡
__WORDSIZE
 == 64

279 
	#INTMAX_C
(
c
Ë¯## 
L


	)

280 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

282 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

283 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

288 
	#INT8_WIDTH
 8

	)

289 
	#UINT8_WIDTH
 8

	)

290 
	#INT16_WIDTH
 16

	)

291 
	#UINT16_WIDTH
 16

	)

292 
	#INT32_WIDTH
 32

	)

293 
	#UINT32_WIDTH
 32

	)

294 
	#INT64_WIDTH
 64

	)

295 
	#UINT64_WIDTH
 64

	)

297 
	#INT_LEAST8_WIDTH
 8

	)

298 
	#UINT_LEAST8_WIDTH
 8

	)

299 
	#INT_LEAST16_WIDTH
 16

	)

300 
	#UINT_LEAST16_WIDTH
 16

	)

301 
	#INT_LEAST32_WIDTH
 32

	)

302 
	#UINT_LEAST32_WIDTH
 32

	)

303 
	#INT_LEAST64_WIDTH
 64

	)

304 
	#UINT_LEAST64_WIDTH
 64

	)

306 
	#INT_FAST8_WIDTH
 8

	)

307 
	#UINT_FAST8_WIDTH
 8

	)

308 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

309 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

310 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

311 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

312 
	#INT_FAST64_WIDTH
 64

	)

313 
	#UINT_FAST64_WIDTH
 64

	)

315 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

316 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

318 
	#INTMAX_WIDTH
 64

	)

319 
	#UINTMAX_WIDTH
 64

	)

321 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

322 
	#SIG_ATOMIC_WIDTH
 32

	)

323 
	#SIZE_WIDTH
 
__WORDSIZE


	)

324 
	#WCHAR_WIDTH
 32

	)

325 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<bôs/libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

961 #ifde‡
__USE_XOPEN


963 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 #ifde‡
__USE_XOPEN2KXSI


971 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

974 #ifde‡
__USE_XOPEN_EXTENDED


979 
	$gø¡±
 (
__fd
Ë
__THROW
;

983 
	$u∆ock±
 (
__fd
Ë
__THROW
;

988 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

991 #ifde‡
__USE_GNU


995 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

996 
__THROW
 
	`__n⁄nuŒ
 ((2));

999 
	`gë±
 ();

1002 #ifde‡
__USE_MISC


1006 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1013 
	$ây¶Ÿ
 (Ë
__THROW
;

1016 
	~<bôs/°dlib-Êﬂt.h
>

1019 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1020 
	~<bôs/°dlib.h
>

1022 #ifde‡
__LDBL_COMPAT


1023 
	~<bôs/°dlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #ifde‡
__USE_POSIX


128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #ifde‡
__USE_POSIX


149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

178 #ifde‡
__USE_MISC


181 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

187 
	#__i¶óp
(
yór
) \

188 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

191 #ifde‡
__USE_MISC


196 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

199 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

202 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

206 #ifde‡
__USE_POSIX199309


211 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

212 
time•ec
 *
__ªmaöög
);

216 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

219 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

222 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

223 
__THROW
;

225 #ifde‡
__USE_XOPEN2K


230 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

231 c⁄° 
time•ec
 *
__ªq
,

232 
time•ec
 *
__ªm
);

235 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

240 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

241 
sigevít
 *
__ª°ri˘
 
__evp
,

242 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

245 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

248 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

249 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

250 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

253 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

254 
__THROW
;

257 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

261 #ifde‡
__USE_ISOC11


263 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

268 #ifde‡
__USE_XOPEN_EXTENDED


280 
gëd©e_îr
;

289 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

292 #ifde‡
__USE_GNU


303 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

304 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

307 
__END_DECLS


	@/usr/include/ucontext.h

20 #i‚de‡
_UCONTEXT_H


21 
	#_UCONTEXT_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<sys/uc⁄ãxt.h
>

28 
__BEGIN_DECLS


31 
	$gëc⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

34 
	$£tc⁄ãxt
 (c⁄° 
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

38 
	$sw≠c⁄ãxt
 (
uc⁄ãxt_t
 *
__ª°ri˘
 
__ou˝
,

39 c⁄° 
uc⁄ãxt_t
 *
__ª°ri˘
 
__u˝
Ë
__THROWNL
;

47 
	$makec⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
, (*
__func
) (),

48 
__¨gc
, ...Ë
__THROW
;

50 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #ifde‡
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	~<bôs/gë›t_posix.h
>

876 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


880 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_MISC


887 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

898 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

900 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$vh™gup
 (Ë
__THROW
;

910 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

919 
size_t
 
__off£t
, 
__sˇÀ
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

930 *
	$gëu£rshñl
 (Ë
__THROW
;

931 
	$ídu£rshñl
 (Ë
__THROW
;

932 
	$£tu£rshñl
 (Ë
__THROW
;

938 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

942 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

945 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

949 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

957 
	`fsync
 (
__fd
);

960 #ifde‡
__USE_GNU


963 
	$syncfs
 (
__fd
Ë
__THROW
;

967 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


970 
	`gëho°id
 ();

973 
	$sync
 (Ë
__THROW
;

976 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


979 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

984 
	$gëdèbÀsize
 (Ë
__THROW
;

990 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


993 #i‚de‡
__USE_FILE_OFFSET64


994 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

997 #ifde‡
__REDIRECT_NTH


998 
	`__REDIRECT_NTH
 (
åunˇã
,

999 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1000 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1002 
	#åunˇã
 
åunˇã64


	)

1005 #ifde‡
__USE_LARGEFILE64


1006 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1012 #i‡
deföed
 
__USE_POSIX199309
 \

1013 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1016 #i‚de‡
__USE_FILE_OFFSET64


1017 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1019 #ifde‡
__REDIRECT_NTH


1020 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1021 
·runˇã64
Ë
__wur
;

1023 
	#·runˇã
 
·runˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1033 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1034 || 
deföed
 
__USE_MISC


1038 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1044 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1048 #ifde‡
__USE_MISC


1059 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1064 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1076 
	#F_ULOCK
 0

	)

1077 
	#F_LOCK
 1

	)

1078 
	#F_TLOCK
 2

	)

1079 
	#F_TEST
 3

	)

1081 #i‚de‡
__USE_FILE_OFFSET64


1082 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1084 #ifde‡
__REDIRECT


1085 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1086 
lockf64
Ë
__wur
;

1088 
	#lockf
 
lockf64


	)

1091 #ifde‡
__USE_LARGEFILE64


1092 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1097 #ifde‡
__USE_GNU


1102 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1103 (
__exãnsi⁄__
 \

1104 ({ 
__ªsu…
; \

1105 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1106 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1107 
__ªsu…
; 
	}
}))

	)

1110 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1111 
__outfd
, 
__off64_t
 *
__poutoff
,

1112 
size_t
 
__Àngth
, 
__Êags
);

1115 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1118 
fd©async
 (
__fûdes
);

1124 #ifdef 
__USE_XOPEN


1126 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1131 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1132 
__THROW
 
	`__n⁄nuŒ
 ((1));

1139 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1140 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1149 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1152 *
	`cu£rid
 (*
__s
);

1158 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1159 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1160 (*
__∑ª¡
) (),

1161 (*
__chûd
Ë()Ë
__THROW
;

1164 #ifde‡
__USE_MISC


1167 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1171 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1172 
	~<bôs/uni°d.h
>

1175 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/event2/buffer.h

26 #i‚de‡
EVENT2_BUFFER_H_INCLUDED_


27 
	#EVENT2_BUFFER_H_INCLUDED_


	)

75 
	~<evít2/visibûôy.h
>

77 #ifde‡
__˝lu•lus


81 
	~<evít2/evít-c⁄fig.h
>

82 
	~<°d¨g.h
>

83 #ifde‡
EVENT__HAVE_SYS_TYPES_H


84 
	~<sys/ty≥s.h
>

86 #ifde‡
EVENT__HAVE_SYS_UIO_H


87 
	~<sys/uio.h
>

89 
	~<evít2/utû.h
>

97 
evbuf„r


98 #ifde‡
EVENT_IN_DOXYGEN_


116 
	sevbuf„r_±r
 {

117 
ev_ssize_t
 
pos
;

122 *
chaö
;

123 
size_t
 
pos_ö_chaö
;

124 } 
öã∫Æ_
;

132 #ifde‡
EVENT__HAVE_SYS_UIO_H


133 
	#evbuf„r_iovec
 
iovec


	)

135 
	#EVBUFFER_IOVEC_IS_NATIVE_


	)

137 
	sevbuf„r_iovec
 {

139 *
iov_ba£
;

141 
size_t
 
iov_Àn
;

151 
EVENT2_EXPORT_SYMBOL


152 
evbuf„r
 *
evbuf„r_√w
();

158 
EVENT2_EXPORT_SYMBOL


159 
evbuf„r_‰ì
(
evbuf„r
 *
buf
);

173 
EVENT2_EXPORT_SYMBOL


174 
evbuf„r_íabÀ_lockög
(
evbuf„r
 *
buf
, *
lock
);

180 
EVENT2_EXPORT_SYMBOL


181 
evbuf„r_lock
(
evbuf„r
 *
buf
);

187 
EVENT2_EXPORT_SYMBOL


188 
evbuf„r_u∆ock
(
evbuf„r
 *
buf
);

206 
	#EVBUFFER_FLAG_DRAINS_TO_FD
 1

	)

215 
EVENT2_EXPORT_SYMBOL


216 
evbuf„r_£t_Êags
(
evbuf„r
 *
buf
, 
ev_uöt64_t
 
Êags
);

224 
EVENT2_EXPORT_SYMBOL


225 
evbuf„r_˛ór_Êags
(
evbuf„r
 *
buf
, 
ev_uöt64_t
 
Êags
);

233 
EVENT2_EXPORT_SYMBOL


234 
size_t
 
evbuf„r_gë_Àngth
(c⁄° 
evbuf„r
 *
buf
);

248 
EVENT2_EXPORT_SYMBOL


249 
size_t
 
evbuf„r_gë_c⁄tiguous_•a˚
(c⁄° 
evbuf„r
 *
buf
);

261 
EVENT2_EXPORT_SYMBOL


262 
evbuf„r_ex∑nd
(
evbuf„r
 *
buf
, 
size_t
 
d©Àn
);

297 
EVENT2_EXPORT_SYMBOL


299 
evbuf„r_ª£rve_•a˚
(
evbuf„r
 *
buf
, 
ev_ssize_t
 
size
,

300 
evbuf„r_iovec
 *
vec
, 
n_vec
);

323 
EVENT2_EXPORT_SYMBOL


324 
evbuf„r_commô_•a˚
(
evbuf„r
 *
buf
,

325 
evbuf„r_iovec
 *
vec
, 
n_vecs
);

335 
EVENT2_EXPORT_SYMBOL


336 
evbuf„r_add
(
evbuf„r
 *
buf
, c⁄° *
d©a
, 
size_t
 
d©Àn
);

350 
EVENT2_EXPORT_SYMBOL


351 
evbuf„r_ªmove
(
evbuf„r
 *
buf
, *
d©a
, 
size_t
 
d©Àn
);

364 
EVENT2_EXPORT_SYMBOL


365 
ev_ssize_t
 
evbuf„r_c›yout
(
evbuf„r
 *
buf
, *
d©a_out
, 
size_t
 
d©Àn
);

379 
EVENT2_EXPORT_SYMBOL


380 
ev_ssize_t
 
evbuf„r_c›yout_‰om
(
evbuf„r
 *
buf
, c⁄° 
evbuf„r_±r
 *
pos
, *
d©a_out
, 
size_t
 
d©Àn
);

395 
EVENT2_EXPORT_SYMBOL


396 
evbuf„r_ªmove_buf„r
(
evbuf„r
 *
§c
, evbuf„∏*
d°
,

397 
size_t
 
d©Àn
);

401 
	eevbuf„r_eﬁ_°yÀ
 {

411 
EVBUFFER_EOL_ANY
,

414 
EVBUFFER_EOL_CRLF
,

416 
EVBUFFER_EOL_CRLF_STRICT
,

418 
EVBUFFER_EOL_LF
,

420 
EVBUFFER_EOL_NUL


437 
EVENT2_EXPORT_SYMBOL


438 *
evbuf„r_ªad 
(
evbuf„r
 *
buf„r
, 
size_t
 *
n_ªad_out
,

439 
evbuf„r_eﬁ_°yÀ
 
eﬁ_°yÀ
);

453 
EVENT2_EXPORT_SYMBOL


454 
evbuf„r_add_buf„r
(
evbuf„r
 *
outbuf
, evbuf„∏*
öbuf
);

469 
EVENT2_EXPORT_SYMBOL


470 
evbuf„r_add_buf„r_ª„ªn˚
(
evbuf„r
 *
outbuf
,

471 
evbuf„r
 *
öbuf
);

479 (*
evbuf„r_ªf_˛ónup_cb
)(c⁄° *
	td©a
,

480 
	tsize_t
 
	td©Æí
, *
	texåa
);

497 
EVENT2_EXPORT_SYMBOL


498 
evbuf„r_add_ª„ªn˚
(
evbuf„r
 *
outbuf
,

499 c⁄° *
d©a
, 
size_t
 
d©Àn
,

500 
evbuf„r_ªf_˛ónup_cb
 
˛ónup‚
, *
˛ónup‚_¨g
);

526 
EVENT2_EXPORT_SYMBOL


527 
evbuf„r_add_fûe
(
evbuf„r
 *
outbuf
, 
fd
, 
ev_off_t
 
off£t
,

528 
ev_off_t
 
Àngth
);

538 
evbuf„r_fûe_£gmít
;

545 
	#EVBUF_FS_CLOSE_ON_FREE
 0x01

	)

550 
	#EVBUF_FS_DISABLE_MMAP
 0x02

	)

560 
	#EVBUF_FS_DISABLE_SENDFILE
 0x04

	)

567 
	#EVBUF_FS_DISABLE_LOCKING
 0x08

	)

573 (*
evbuf„r_fûe_£gmít_˛ónup_cb
)(

574 
	tevbuf„r_fûe_£gmít
 c⁄°* 
	t£g
, 
	tÊags
, * 
	t¨g
);

598 
EVENT2_EXPORT_SYMBOL


599 
evbuf„r_fûe_£gmít
 *
evbuf„r_fûe_£gmít_√w
(

600 
fd
, 
ev_off_t
 
off£t
,Év_off_à
Àngth
, 
Êags
);

609 
EVENT2_EXPORT_SYMBOL


610 
evbuf„r_fûe_£gmít_‰ì
(
evbuf„r_fûe_£gmít
 *
£g
);

619 
EVENT2_EXPORT_SYMBOL


620 
evbuf„r_fûe_£gmít_add_˛ónup_cb
(
evbuf„r_fûe_£gmít
 *
£g
,

621 
evbuf„r_fûe_£gmít_˛ónup_cb
 
cb
, * 
¨g
);

645 
EVENT2_EXPORT_SYMBOL


646 
evbuf„r_add_fûe_£gmít
(
evbuf„r
 *
buf
,

647 
evbuf„r_fûe_£gmít
 *
£g
, 
ev_off_t
 
off£t
,Év_off_à
Àngth
);

661 
EVENT2_EXPORT_SYMBOL


662 
evbuf„r_add_¥ötf
(
evbuf„r
 *
buf
, c⁄° *
fmt
, ...)

663 #ifde‡
__GNUC__


664 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)))

676 
EVENT2_EXPORT_SYMBOL


677 
evbuf„r_add_v¥ötf
(
evbuf„r
 *
buf
, c⁄° *
fmt
, 
va_li°
 
≠
)

678 #ifde‡
__GNUC__


679 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 0)))

691 
EVENT2_EXPORT_SYMBOL


692 
evbuf„r_døö
(
evbuf„r
 *
buf
, 
size_t
 
Àn
);

705 
EVENT2_EXPORT_SYMBOL


706 
evbuf„r_wrôe
(
evbuf„r
 *
buf„r
, 
evutû_sockë_t
 
fd
);

720 
EVENT2_EXPORT_SYMBOL


721 
evbuf„r_wrôe_©mo°
(
evbuf„r
 *
buf„r
, 
evutû_sockë_t
 
fd
,

722 
ev_ssize_t
 
howmuch
);

733 
EVENT2_EXPORT_SYMBOL


734 
evbuf„r_ªad
(
evbuf„r
 *
buf„r
, 
evutû_sockë_t
 
fd
, 
howmuch
);

747 
EVENT2_EXPORT_SYMBOL


748 
evbuf„r_±r
 
evbuf„r_£¨ch
(
evbuf„r
 *
buf„r
, c⁄° *
wh©
, 
size_t
 
Àn
, c⁄° evbuf„r_±∏*
°¨t
);

764 
EVENT2_EXPORT_SYMBOL


765 
evbuf„r_±r
 
evbuf„r_£¨ch_ønge
(
evbuf„r
 *
buf„r
, c⁄° *
wh©
, 
size_t
 
Àn
, c⁄° evbuf„r_±∏*
°¨t
, c⁄° evbuf„r_±∏*
íd
);

771 
	eevbuf„r_±r_how
 {

774 
EVBUFFER_PTR_SET
,

776 
EVBUFFER_PTR_ADD


800 
EVENT2_EXPORT_SYMBOL


802 
evbuf„r_±r_£t
(
evbuf„r
 *
buf„r
, 
evbuf„r_±r
 *
±r
,

803 
size_t
 
posôi⁄
, 
evbuf„r_±r_how
 
how
);

819 
EVENT2_EXPORT_SYMBOL


820 
evbuf„r_±r
 
evbuf„r_£¨ch_eﬁ
(
evbuf„r
 *
buf„r
,

821 
evbuf„r_±r
 *
°¨t
, 
size_t
 *
eﬁ_Àn_out
,

822 
evbuf„r_eﬁ_°yÀ
 
eﬁ_°yÀ
);

852 
EVENT2_EXPORT_SYMBOL


853 
evbuf„r_≥ek
(
evbuf„r
 *
buf„r
, 
ev_ssize_t
 
Àn
,

854 
evbuf„r_±r
 *
°¨t_©
,

855 
evbuf„r_iovec
 *
vec_out
, 
n_vec
);

862 
	sevbuf„r_cb_öfo
 {

865 
size_t
 
‹ig_size
;

867 
size_t
 
n_added
;

869 
size_t
 
n_dñëed
;

891 (*
evbuf„r_cb_func
)(
	tevbuf„r
 *
	tbuf„r
, c⁄° 
	tevbuf„r_cb_öfo
 *
	töfo
, *
	t¨g
);

893 
evbuf„r_cb_íåy
;

905 
EVENT2_EXPORT_SYMBOL


906 
evbuf„r_cb_íåy
 *
evbuf„r_add_cb
(
evbuf„r
 *
buf„r
, 
evbuf„r_cb_func
 
cb
, *
cb¨g
);

916 
EVENT2_EXPORT_SYMBOL


917 
evbuf„r_ªmove_cb_íåy
(
evbuf„r
 *
buf„r
,

918 
evbuf„r_cb_íåy
 *
ít
);

926 
EVENT2_EXPORT_SYMBOL


927 
evbuf„r_ªmove_cb
(
evbuf„r
 *
buf„r
, 
evbuf„r_cb_func
 
cb
, *
cb¨g
);

934 
	#EVBUFFER_CB_ENABLED
 1

	)

943 
EVENT2_EXPORT_SYMBOL


944 
evbuf„r_cb_£t_Êags
(
evbuf„r
 *
buf„r
,

945 
evbuf„r_cb_íåy
 *
cb
, 
ev_uöt32_t
 
Êags
);

954 
EVENT2_EXPORT_SYMBOL


955 
evbuf„r_cb_˛ór_Êags
(
evbuf„r
 *
buf„r
,

956 
evbuf„r_cb_íåy
 *
cb
, 
ev_uöt32_t
 
Êags
);

968 
EVENT2_EXPORT_SYMBOL


969 
evbuf„r_cb_su•íd
(
evbuf„r
 *
buf„r
, 
evbuf„r_cb_íåy
 *
cb
);

978 
EVENT2_EXPORT_SYMBOL


979 
evbuf„r_cb_unsu•íd
(
evbuf„r
 *
buf„r
, 
evbuf„r_cb_íåy
 *
cb
);

992 
EVENT2_EXPORT_SYMBOL


993 *
evbuf„r_puŒup
(
evbuf„r
 *
buf
, 
ev_ssize_t
 
size
);

1004 
EVENT2_EXPORT_SYMBOL


1005 
evbuf„r_¥ïíd
(
evbuf„r
 *
buf
, c⁄° *
d©a
, 
size_t
 
size
);

1015 
EVENT2_EXPORT_SYMBOL


1016 
evbuf„r_¥ïíd_buf„r
(
evbuf„r
 *
d°
, evbuf„r* 
§c
);

1032 
EVENT2_EXPORT_SYMBOL


1033 
evbuf„r_‰ìze
(
evbuf„r
 *
buf
, 
©_‰⁄t
);

1042 
EVENT2_EXPORT_SYMBOL


1043 
evbuf„r_un‰ìze
(
evbuf„r
 *
buf
, 
©_‰⁄t
);

1045 
evít_ba£
;

1053 
EVENT2_EXPORT_SYMBOL


1054 
evbuf„r_de„r_ˇŒbacks
(
evbuf„r
 *
buf„r
, 
evít_ba£
 *
ba£
);

1069 
EVENT2_EXPORT_SYMBOL


1070 
size_t
 
evbuf„r_add_iovec
(
evbuf„r
 * 
buf„r
, 
evbuf„r_iovec
 * 
vec
, 
n_vec
);

1072 #ifde‡
__˝lu•lus


	@/usr/include/event2/buffer_compat.h

27 #i‚de‡
EVENT2_BUFFER_COMPAT_H_INCLUDED_


28 
	#EVENT2_BUFFER_COMPAT_H_INCLUDED_


	)

30 
	~<evít2/visibûôy.h
>

50 
EVENT2_EXPORT_SYMBOL


51 *
evbuf„r_ªadlöe
(
evbuf„r
 *
buf„r
);

73 (*
	tevbuf„r_cb
)(
	tevbuf„r
 *
	tbuf„r
, 
	tsize_t
 
	tﬁd_Àn
, size_à
	t√w_Àn
, *
	t¨g
);

94 
EVENT2_EXPORT_SYMBOL


95 
	`evbuf„r_£tcb
(
evbuf„r
 *
buf„r
, 
evbuf„r_cb
 
cb
, *
cb¨g
);

106 
EVENT2_EXPORT_SYMBOL


107 *
	`evbuf„r_föd
(
evbuf„r
 *
buf„r
, c⁄° *
wh©
, 
size_t
 
Àn
);

110 
	#EVBUFFER_LENGTH
(
x
Ë
	`evbuf„r_gë_Àngth
(x)

	)

112 
	#EVBUFFER_DATA
(
x
Ë
	`evbuf„r_puŒup
((x), -1)

	)

	@/usr/include/event2/bufferevent.h

27 #i‚de‡
EVENT2_BUFFEREVENT_H_INCLUDED_


28 
	#EVENT2_BUFFEREVENT_H_INCLUDED_


	)

77 
	~<evít2/visibûôy.h
>

79 #ifde‡
__˝lu•lus


83 
	~<evít2/evít-c⁄fig.h
>

84 #ifde‡
EVENT__HAVE_SYS_TYPES_H


85 
	~<sys/ty≥s.h
>

87 #ifde‡
EVENT__HAVE_SYS_TIME_H


88 
	~<sys/time.h
>

92 
	~<evít2/utû.h
>

100 
	#BEV_EVENT_READING
 0x01

	)

101 
	#BEV_EVENT_WRITING
 0x02

	)

102 
	#BEV_EVENT_EOF
 0x10

	)

103 
	#BEV_EVENT_ERROR
 0x20

	)

104 
	#BEV_EVENT_TIMEOUT
 0x40

	)

105 
	#BEV_EVENT_CONNECTED
 0x80

	)

113 
buf„ªvít


114 #ifde‡
EVENT_IN_DOXYGEN_


118 
evít_ba£
;

119 
evbuf„r
;

120 
sockaddr
;

135 (*
buf„ªvít_d©a_cb
)(
	tbuf„ªvít
 *
	tbev
, *
	t˘x
);

154 (*
buf„ªvít_evít_cb
)(
	tbuf„ªvít
 *
	tbev
, 
	twh©
, *
	t˘x
);

157 
	ebuf„ªvít_›ti⁄s
 {

160 
BEV_OPT_CLOSE_ON_FREE
 = (1<<0),

164 
BEV_OPT_THREADSAFE
 = (1<<1),

167 
BEV_OPT_DEFER_CALLBACKS
 = (1<<2),

173 
BEV_OPT_UNLOCK_CALLBACKS
 = (1<<3)

189 
EVENT2_EXPORT_SYMBOL


190 
buf„ªvít
 *
buf„ªvít_sockë_√w
(
evít_ba£
 *
ba£
, 
evutû_sockë_t
 
fd
, 
›ti⁄s
);

211 
EVENT2_EXPORT_SYMBOL


212 
buf„ªvít_sockë_c⁄√˘
(
buf„ªvít
 *, c⁄° 
sockaddr
 *, );

214 
evdns_ba£
;

241 
EVENT2_EXPORT_SYMBOL


242 
buf„ªvít_sockë_c⁄√˘_ho°«me
(
buf„ªvít
 *,

243 
evdns_ba£
 *, , const *, );

253 
EVENT2_EXPORT_SYMBOL


254 
buf„ªvít_sockë_gë_dns_îr‹
(
buf„ªvít
 *
bev
);

267 
EVENT2_EXPORT_SYMBOL


268 
buf„ªvít_ba£_£t
(
evít_ba£
 *
ba£
, 
buf„ªvít
 *
bu„v
);

273 
EVENT2_EXPORT_SYMBOL


274 
evít_ba£
 *
buf„ªvít_gë_ba£
(
buf„ªvít
 *
bev
);

285 
EVENT2_EXPORT_SYMBOL


286 
buf„ªvít_¥i‹ôy_£t
(
buf„ªvít
 *
bu„v
, 
¥i
);

293 
EVENT2_EXPORT_SYMBOL


294 
buf„ªvít_gë_¥i‹ôy
(c⁄° 
buf„ªvít
 *
bu„v
);

304 
EVENT2_EXPORT_SYMBOL


305 
buf„ªvít_‰ì
(
buf„ªvít
 *
bu„v
);

322 
EVENT2_EXPORT_SYMBOL


323 
buf„ªvít_£tcb
(
buf„ªvít
 *
bu„v
,

324 
buf„ªvít_d©a_cb
 
ªadcb
, buf„ªvít_d©a_cb 
wrôecb
,

325 
buf„ªvít_evít_cb
 
evítcb
, *
cb¨g
);

341 
EVENT2_EXPORT_SYMBOL


342 
buf„ªvít_gëcb
(
buf„ªvít
 *
bu„v
,

343 
buf„ªvít_d©a_cb
 *
ªadcb_±r
,

344 
buf„ªvít_d©a_cb
 *
wrôecb_±r
,

345 
buf„ªvít_evít_cb
 *
evítcb_±r
,

346 **
cb¨g_±r
);

355 
EVENT2_EXPORT_SYMBOL


356 
buf„ªvít_£tfd
(
buf„ªvít
 *
bu„v
, 
evutû_sockë_t
 
fd
);

362 
EVENT2_EXPORT_SYMBOL


363 
evutû_sockë_t
 
buf„ªvít_gëfd
(
buf„ªvít
 *
bu„v
);

369 
EVENT2_EXPORT_SYMBOL


370 
buf„ªvít
 *
buf„ªvít_gë_undîlyög
(buf„ªvíà*
bu„v
);

385 
EVENT2_EXPORT_SYMBOL


386 
buf„ªvít_wrôe
(
buf„ªvít
 *
bu„v
,

387 c⁄° *
d©a
, 
size_t
 
size
);

399 
EVENT2_EXPORT_SYMBOL


400 
buf„ªvít_wrôe_buf„r
(
buf„ªvít
 *
bu„v
, 
evbuf„r
 *
buf
);

413 
EVENT2_EXPORT_SYMBOL


414 
size_t
 
buf„ªvít_ªad
(
buf„ªvít
 *
bu„v
, *
d©a
, size_à
size
);

424 
EVENT2_EXPORT_SYMBOL


425 
buf„ªvít_ªad_buf„r
(
buf„ªvít
 *
bu„v
, 
evbuf„r
 *
buf
);

436 
EVENT2_EXPORT_SYMBOL


437 
evbuf„r
 *
buf„ªvít_gë_öput
(
buf„ªvít
 *
bu„v
);

451 
EVENT2_EXPORT_SYMBOL


452 
evbuf„r
 *
buf„ªvít_gë_ouçut
(
buf„ªvít
 *
bu„v
);

462 
EVENT2_EXPORT_SYMBOL


463 
buf„ªvít_íabÀ
(
buf„ªvít
 *
bu„v
, 
evít
);

473 
EVENT2_EXPORT_SYMBOL


474 
buf„ªvít_dißbÀ
(
buf„ªvít
 *
bu„v
, 
evít
);

482 
EVENT2_EXPORT_SYMBOL


483 
buf„ªvít_gë_íabÀd
(
buf„ªvít
 *
bu„v
);

511 
EVENT2_EXPORT_SYMBOL


512 
buf„ªvít_£t_timeouts
(
buf„ªvít
 *
bu„v
,

513 c⁄° 
timevÆ
 *
timeout_ªad
, c⁄° timevÆ *
timeout_wrôe
);

533 
EVENT2_EXPORT_SYMBOL


534 
buf„ªvít_£tw©îm¨k
(
buf„ªvít
 *
bu„v
, 
evíts
,

535 
size_t
 
lowm¨k
, size_à
highm¨k
);

547 
EVENT2_EXPORT_SYMBOL


548 
buf„ªvít_gëw©îm¨k
(
buf„ªvít
 *
bu„v
, 
evíts
,

549 
size_t
 *
lowm¨k
, size_à*
highm¨k
);

555 
EVENT2_EXPORT_SYMBOL


556 
buf„ªvít_lock
(
buf„ªvít
 *
bu„v
);

562 
EVENT2_EXPORT_SYMBOL


563 
buf„ªvít_u∆ock
(
buf„ªvít
 *
bu„v
);

574 
EVENT2_EXPORT_SYMBOL


575 
buf„ªvít_ö¸ef
(
buf„ªvít
 *
bu„v
);

588 
EVENT2_EXPORT_SYMBOL


589 
buf„ªvít_de¸ef
(
buf„ªvít
 *
bu„v
);

595 
	ebuf„ªvít_Êush_mode
 {

597 
BEV_NORMAL
 = 0,

600 
BEV_FLUSH
 = 1,

603 
BEV_FINISHED
 = 2

614 
EVENT2_EXPORT_SYMBOL


615 
buf„ªvít_Êush
(
buf„ªvít
 *
bu„v
,

616 
iŸy≥
,

617 
buf„ªvít_Êush_mode
 
mode
);

623 
	ebuf„ªvít_åiggî_›ti⁄s
 {

625 
BEV_TRIG_IGNORE_WATERMARKS
 = (1<<16),

628 
BEV_TRIG_DEFER_CALLBACKS
 = 
BEV_OPT_DEFER_CALLBACKS


645 
EVENT2_EXPORT_SYMBOL


646 
buf„ªvít_åiggî
(
buf„ªvít
 *
bu„v
, 
iŸy≥
,

647 
›ti⁄s
);

658 
EVENT2_EXPORT_SYMBOL


659 
buf„ªvít_åiggî_evít
(
buf„ªvít
 *
bu„v
, 
wh©
,

660 
›ti⁄s
);

670 
	ebuf„ªvít_fûãr_ªsu…
 {

672 
BEV_OK
 = 0,

675 
BEV_NEED_MORE
 = 1,

679 
BEV_ERROR
 = 2

700 
buf„ªvít_fûãr_ªsu…
 (*
	tbuf„ªvít_fûãr_cb
)(

701 
	tevbuf„r
 *
	t§c
, evbuf„∏*
	td°
, 
	tev_ssize_t
 
	td°_limô
,

702 
	tbuf„ªvít_Êush_mode
 
	tmode
, *
	t˘x
);

717 
EVENT2_EXPORT_SYMBOL


718 
buf„ªvít
 *

719 
buf„ªvít_fûãr_√w
(
buf„ªvít
 *
undîlyög
,

720 
buf„ªvít_fûãr_cb
 
öput_fûãr
,

721 
buf„ªvít_fûãr_cb
 
ouçut_fûãr
,

722 
›ti⁄s
,

723 (*
‰ì_c⁄ãxt
)(*),

724 *
˘x
);

737 
EVENT2_EXPORT_SYMBOL


738 
buf„ªvít_∑ú_√w
(
evít_ba£
 *
ba£
, 
›ti⁄s
,

739 
buf„ªvít
 *
∑ú
[2]);

745 
EVENT2_EXPORT_SYMBOL


746 
buf„ªvít
 *
buf„ªvít_∑ú_gë_∑π√r
(buf„ªvíà*
bev
);

752 
ev_tokí_buckë_cfg
;

758 
buf„ªvít_øã_limô_group
;

761 
	#EV_RATE_LIMIT_MAX
 
EV_SSIZE_MAX


	)

779 
EVENT2_EXPORT_SYMBOL


780 
ev_tokí_buckë_cfg
 *
ev_tokí_buckë_cfg_√w
(

781 
size_t
 
ªad_øã
, size_à
ªad_bur°
,

782 
size_t
 
wrôe_øã
, size_à
wrôe_bur°
,

783 c⁄° 
timevÆ
 *
tick_Àn
);

790 
EVENT2_EXPORT_SYMBOL


791 
ev_tokí_buckë_cfg_‰ì
(
ev_tokí_buckë_cfg
 *
cfg
);

804 
EVENT2_EXPORT_SYMBOL


805 
buf„ªvít_£t_øã_limô
(
buf„ªvít
 *
bev
,

806 
ev_tokí_buckë_cfg
 *
cfg
);

825 
EVENT2_EXPORT_SYMBOL


826 
buf„ªvít_øã_limô_group
 *
buf„ªvít_øã_limô_group_√w
(

827 
evít_ba£
 *
ba£
,

828 c⁄° 
ev_tokí_buckë_cfg
 *
cfg
);

834 
EVENT2_EXPORT_SYMBOL


835 
buf„ªvít_øã_limô_group_£t_cfg
(

836 
buf„ªvít_øã_limô_group
 *,

837 c⁄° 
ev_tokí_buckë_cfg
 *);

855 
EVENT2_EXPORT_SYMBOL


856 
buf„ªvít_øã_limô_group_£t_mö_sh¨e
(

857 
buf„ªvít_øã_limô_group
 *, 
size_t
);

863 
EVENT2_EXPORT_SYMBOL


864 
buf„ªvít_øã_limô_group_‰ì
(
buf„ªvít_øã_limô_group
 *);

876 
EVENT2_EXPORT_SYMBOL


877 
buf„ªvít_add_to_øã_limô_group
(
buf„ªvít
 *
bev
,

878 
buf„ªvít_øã_limô_group
 *
g
);

881 
EVENT2_EXPORT_SYMBOL


882 
buf„ªvít_ªmove_‰om_øã_limô_group
(
buf„ªvít
 *
bev
);

891 
EVENT2_EXPORT_SYMBOL


892 
buf„ªvít_£t_max_sögÀ_ªad
(
buf„ªvít
 *
bev
, 
size_t
 
size
);

901 
EVENT2_EXPORT_SYMBOL


902 
buf„ªvít_£t_max_sögÀ_wrôe
(
buf„ªvít
 *
bev
, 
size_t
 
size
);

905 
EVENT2_EXPORT_SYMBOL


906 
ev_ssize_t
 
buf„ªvít_gë_max_sögÀ_ªad
(
buf„ªvít
 *
bev
);

909 
EVENT2_EXPORT_SYMBOL


910 
ev_ssize_t
 
buf„ªvít_gë_max_sögÀ_wrôe
(
buf„ªvít
 *
bev
);

923 
EVENT2_EXPORT_SYMBOL


924 
ev_ssize_t
 
buf„ªvít_gë_ªad_limô
(
buf„ªvít
 *
bev
);

925 
EVENT2_EXPORT_SYMBOL


926 
ev_ssize_t
 
buf„ªvít_gë_wrôe_limô
(
buf„ªvít
 *
bev
);

929 
EVENT2_EXPORT_SYMBOL


930 
ev_ssize_t
 
buf„ªvít_gë_max_to_ªad
(
buf„ªvít
 *
bev
);

931 
EVENT2_EXPORT_SYMBOL


932 
ev_ssize_t
 
buf„ªvít_gë_max_to_wrôe
(
buf„ªvít
 *
bev
);

934 
EVENT2_EXPORT_SYMBOL


935 c⁄° 
ev_tokí_buckë_cfg
 *
buf„ªvít_gë_tokí_buckë_cfg
(c⁄° 
buf„ªvít
 * 
bev
);

946 
EVENT2_EXPORT_SYMBOL


947 
ev_ssize_t
 
buf„ªvít_øã_limô_group_gë_ªad_limô
(

948 
buf„ªvít_øã_limô_group
 *);

949 
EVENT2_EXPORT_SYMBOL


950 
ev_ssize_t
 
buf„ªvít_øã_limô_group_gë_wrôe_limô
(

951 
buf„ªvít_øã_limô_group
 *);

968 
EVENT2_EXPORT_SYMBOL


969 
buf„ªvít_de¸emít_ªad_limô
(
buf„ªvít
 *
bev
, 
ev_ssize_t
 
de¸
);

970 
EVENT2_EXPORT_SYMBOL


971 
buf„ªvít_de¸emít_wrôe_limô
(
buf„ªvít
 *
bev
, 
ev_ssize_t
 
de¸
);

987 
EVENT2_EXPORT_SYMBOL


988 
buf„ªvít_øã_limô_group_de¸emít_ªad
(

989 
buf„ªvít_øã_limô_group
 *, 
ev_ssize_t
);

990 
EVENT2_EXPORT_SYMBOL


991 
buf„ªvít_øã_limô_group_de¸emít_wrôe
(

992 
buf„ªvít_øã_limô_group
 *, 
ev_ssize_t
);

1002 
EVENT2_EXPORT_SYMBOL


1003 
buf„ªvít_øã_limô_group_gë_tŸÆs
(

1004 
buf„ªvít_øã_limô_group
 *
gΩ
,

1005 
ev_uöt64_t
 *
tŸÆ_ªad_out
,Év_uöt64_à*
tŸÆ_wrôãn_out
);

1012 
EVENT2_EXPORT_SYMBOL


1014 
buf„ªvít_øã_limô_group_ª£t_tŸÆs
(

1015 
buf„ªvít_øã_limô_group
 *
gΩ
);

1017 #ifde‡
__˝lu•lus


	@/usr/include/event2/bufferevent_compat.h

28 #i‚de‡
EVENT2_BUFFEREVENT_COMPAT_H_INCLUDED_


29 
	#EVENT2_BUFFEREVENT_COMPAT_H_INCLUDED_


	)

31 
	#evbuf„rcb
 
buf„ªvít_d©a_cb


	)

32 
	#evîr‹cb
 
buf„ªvít_evít_cb


	)

75 
buf„ªvít
 *
buf„ªvít_√w
(
evutû_sockë_t
 
fd
,

76 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
, 
evîr‹cb
 
îr‹cb
, *
cb¨g
);

86 
buf„ªvít_£âimeout
(
buf„ªvít
 *
bu„v
,

87 
timeout_ªad
, 
timeout_wrôe
);

89 
	#EVBUFFER_READ
 
BEV_EVENT_READING


	)

90 
	#EVBUFFER_WRITE
 
BEV_EVENT_WRITING


	)

91 
	#EVBUFFER_EOF
 
BEV_EVENT_EOF


	)

92 
	#EVBUFFER_ERROR
 
BEV_EVENT_ERROR


	)

93 
	#EVBUFFER_TIMEOUT
 
BEV_EVENT_TIMEOUT


	)

96 
	#EVBUFFER_INPUT
(
x
Ë
	`buf„ªvít_gë_öput
(x)

	)

98 
	#EVBUFFER_OUTPUT
(
x
Ë
	`buf„ªvít_gë_ouçut
(x)

	)

	@/usr/include/event2/bufferevent_struct.h

27 #i‚de‡
EVENT2_BUFFEREVENT_STRUCT_H_INCLUDED_


28 
	#EVENT2_BUFFEREVENT_STRUCT_H_INCLUDED_


	)

40 #ifde‡
__˝lu•lus


44 
	~<evít2/evít-c⁄fig.h
>

45 #ifde‡
EVENT__HAVE_SYS_TYPES_H


46 
	~<sys/ty≥s.h
>

48 #ifde‡
EVENT__HAVE_SYS_TIME_H


49 
	~<sys/time.h
>

53 
	~<evít2/utû.h
>

55 
	~<evít2/evít_°ru˘.h
>

57 
	sevít_w©îm¨k
 {

58 
size_t
 
low
;

59 
size_t
 
high
;

70 
	sbuf„ªvít
 {

72 
evít_ba£
 *
ev_ba£
;

75 c⁄° 
buf„ªvít_›s
 *
be_›s
;

80 
evít
 
ev_ªad
;

84 
evít
 
ev_wrôe
;

88 
evbuf„r
 *
öput
;

92 
evbuf„r
 *
ouçut
;

94 
evít_w©îm¨k
 
wm_ªad
;

95 
evít_w©îm¨k
 
wm_wrôe
;

97 
buf„ªvít_d©a_cb
 
ªadcb
;

98 
buf„ªvít_d©a_cb
 
wrôecb
;

101 
buf„ªvít_evít_cb
 
îr‹cb
;

102 *
cb¨g
;

104 
timevÆ
 
timeout_ªad
;

105 
timevÆ
 
timeout_wrôe
;

109 
íabÀd
;

112 #ifde‡
__˝lu•lus


	@/usr/include/event2/event-config.h

11 #i‚de‡
EVENT2_EVENT_CONFIG_H_INCLUDED_


12 
	#EVENT2_EVENT_CONFIG_H_INCLUDED_


	)

27 
	#EVENT__HAVE_ACCEPT4
 1

	)

36 
	#EVENT__HAVE_ARPA_INET_H
 1

	)

39 
	#EVENT__HAVE_CLOCK_GETTIME
 1

	)

43 
	#EVENT__HAVE_DECL_CTL_KERN
 1

	)

47 
	#EVENT__HAVE_DECL_KERN_ARND
 0

	)

51 
	#EVENT__HAVE_DECL_KERN_RANDOM
 1

	)

55 
	#EVENT__HAVE_DECL_RANDOM_UUID
 1

	)

61 
	#EVENT__HAVE_DLFCN_H
 1

	)

64 
	#EVENT__HAVE_EPOLL
 1

	)

67 
	#EVENT__HAVE_EPOLL_CREATE1
 1

	)

70 
	#EVENT__HAVE_EPOLL_CTL
 1

	)

73 
	#EVENT__HAVE_ERRNO_H
 1

	)

76 
	#EVENT__HAVE_EVENTFD
 1

	)

82 
	#EVENT__HAVE_FCNTL
 1

	)

85 
	#EVENT__HAVE_FCNTL_H
 1

	)

88 
	#EVENT__HAVE_FD_MASK
 1

	)

91 
	#EVENT__HAVE_GETADDRINFO
 1

	)

94 
	#EVENT__HAVE_GETEGID
 1

	)

97 
	#EVENT__HAVE_GETEUID
 1

	)

112 
	#EVENT__HAVE_GETIFADDRS
 1

	)

115 
	#EVENT__HAVE_GETNAMEINFO
 1

	)

118 
	#EVENT__HAVE_GETPROTOBYNUMBER
 1

	)

121 
	#EVENT__HAVE_GETSERVBYNAME
 1

	)

124 
	#EVENT__HAVE_GETTIMEOFDAY
 1

	)

127 
	#EVENT__HAVE_IFADDRS_H
 1

	)

130 
	#EVENT__HAVE_INET_NTOP
 1

	)

133 
	#EVENT__HAVE_INET_PTON
 1

	)

136 
	#EVENT__HAVE_INTTYPES_H
 1

	)

154 
	#EVENT__HAVE_MEMORY_H
 1

	)

157 
	#EVENT__HAVE_MMAP
 1

	)

160 
	#EVENT__HAVE_NANOSLEEP
 1

	)

163 
	#EVENT__HAVE_NETDB_H
 1

	)

169 
	#EVENT__HAVE_NETINET_IN_H
 1

	)

172 
	#EVENT__HAVE_NETINET_TCP_H
 1

	)

175 
	#EVENT__HAVE_OPENSSL
 1

	)

178 
	#EVENT__HAVE_PIPE
 1

	)

181 
	#EVENT__HAVE_PIPE2
 1

	)

184 
	#EVENT__HAVE_POLL
 1

	)

187 
	#EVENT__HAVE_POLL_H
 1

	)

199 
	#EVENT__HAVE_PTHREADS
 1

	)

202 
	#EVENT__HAVE_PUTENV
 1

	)

205 
	#EVENT__HAVE_SA_FAMILY_T
 1

	)

208 
	#EVENT__HAVE_SELECT
 1

	)

211 
	#EVENT__HAVE_SENDFILE
 1

	)

214 
	#EVENT__HAVE_SETENV
 1

	)

217 
	#EVENT__HAVE_SETFD
 1

	)

220 
	#EVENT__HAVE_SETRLIMIT
 1

	)

223 
	#EVENT__HAVE_SIGACTION
 1

	)

226 
	#EVENT__HAVE_SIGNAL
 1

	)

229 
	#EVENT__HAVE_SPLICE
 1

	)

232 
	#EVENT__HAVE_STDARG_H
 1

	)

235 
	#EVENT__HAVE_STDDEF_H
 1

	)

238 
	#EVENT__HAVE_STDINT_H
 1

	)

241 
	#EVENT__HAVE_STDLIB_H
 1

	)

244 
	#EVENT__HAVE_STRINGS_H
 1

	)

247 
	#EVENT__HAVE_STRING_H
 1

	)

253 
	#EVENT__HAVE_STRSEP
 1

	)

256 
	#EVENT__HAVE_STRTOK_R
 1

	)

259 
	#EVENT__HAVE_STRTOLL
 1

	)

262 
	#EVENT__HAVE_STRUCT_ADDRINFO
 1

	)

265 
	#EVENT__HAVE_STRUCT_IN6_ADDR
 1

	)

268 
	#EVENT__HAVE_STRUCT_IN6_ADDR_S6_ADDR16
 1

	)

271 
	#EVENT__HAVE_STRUCT_IN6_ADDR_S6_ADDR32
 1

	)

274 
	#EVENT__HAVE_STRUCT_SOCKADDR_IN6
 1

	)

283 
	#EVENT__HAVE_STRUCT_SOCKADDR_STORAGE
 1

	)

286 
	#EVENT__HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY
 1

	)

295 
	#EVENT__HAVE_SYSCTL
 1

	)

301 
	#EVENT__HAVE_SYS_EPOLL_H
 1

	)

304 
	#EVENT__HAVE_SYS_EVENTFD_H
 1

	)

310 
	#EVENT__HAVE_SYS_IOCTL_H
 1

	)

313 
	#EVENT__HAVE_SYS_MMAN_H
 1

	)

316 
	#EVENT__HAVE_SYS_PARAM_H
 1

	)

319 
	#EVENT__HAVE_SYS_QUEUE_H
 1

	)

322 
	#EVENT__HAVE_SYS_RESOURCE_H
 1

	)

325 
	#EVENT__HAVE_SYS_SELECT_H
 1

	)

328 
	#EVENT__HAVE_SYS_SENDFILE_H
 1

	)

331 
	#EVENT__HAVE_SYS_SOCKET_H
 1

	)

334 
	#EVENT__HAVE_SYS_STAT_H
 1

	)

337 
	#EVENT__HAVE_SYS_SYSCTL_H
 1

	)

340 
	#EVENT__HAVE_SYS_TIMERFD_H
 1

	)

343 
	#EVENT__HAVE_SYS_TIME_H
 1

	)

346 
	#EVENT__HAVE_SYS_TYPES_H
 1

	)

349 
	#EVENT__HAVE_SYS_UIO_H
 1

	)

352 
	#EVENT__HAVE_SYS_WAIT_H
 1

	)

355 
	#EVENT__HAVE_TAILQFOREACH
 1

	)

358 
	#EVENT__HAVE_TIMERADD
 1

	)

361 
	#EVENT__HAVE_TIMERCLEAR
 1

	)

364 
	#EVENT__HAVE_TIMERCMP
 1

	)

367 
	#EVENT__HAVE_TIMERFD_CREATE
 1

	)

370 
	#EVENT__HAVE_TIMERISSET
 1

	)

373 
	#EVENT__HAVE_UINT16_T
 1

	)

376 
	#EVENT__HAVE_UINT32_T
 1

	)

379 
	#EVENT__HAVE_UINT64_T
 1

	)

382 
	#EVENT__HAVE_UINT8_T
 1

	)

385 
	#EVENT__HAVE_UINTPTR_T
 1

	)

388 
	#EVENT__HAVE_UMASK
 1

	)

391 
	#EVENT__HAVE_UNISTD_H
 1

	)

394 
	#EVENT__HAVE_UNSETENV
 1

	)

397 
	#EVENT__HAVE_USLEEP
 1

	)

400 
	#EVENT__HAVE_VASPRINTF
 1

	)

412 
	#EVENT__LT_OBJDIR
 ".libs/"

	)

415 
	#EVENT__NUMERIC_VERSION
 0x02010800

	)

418 
	#EVENT__PACKAGE
 "libevít"

	)

421 
	#EVENT__PACKAGE_BUGREPORT
 ""

	)

424 
	#EVENT__PACKAGE_NAME
 "libevít"

	)

427 
	#EVENT__PACKAGE_STRING
 "libevíà2.1.8-°abÀ"

	)

430 
	#EVENT__PACKAGE_TARNAME
 "libevít"

	)

433 
	#EVENT__PACKAGE_URL
 ""

	)

436 
	#EVENT__PACKAGE_VERSION
 "2.1.8-°abÀ"

	)

443 
	#EVENT__SIZEOF_INT
 4

	)

446 
	#EVENT__SIZEOF_LONG
 8

	)

449 
	#EVENT__SIZEOF_LONG_LONG
 8

	)

452 
	#EVENT__SIZEOF_OFF_T
 8

	)

455 
	#EVENT__SIZEOF_PTHREAD_T
 8

	)

458 
	#EVENT__SIZEOF_SHORT
 2

	)

461 
	#EVENT__SIZEOF_SIZE_T
 8

	)

464 
	#EVENT__SIZEOF_VOID_P
 8

	)

467 
	#EVENT__STDC_HEADERS
 1

	)

470 
	#EVENT__TIME_WITH_SYS_TIME
 1

	)

473 #i‚de‡
EVENT___ALL_SOURCE


474 
	#EVENT___ALL_SOURCE
 1

	)

477 #i‚de‡
EVENT___GNU_SOURCE


478 
	#EVENT___GNU_SOURCE
 1

	)

481 #i‚de‡
EVENT___POSIX_PTHREAD_SEMANTICS


482 
	#EVENT___POSIX_PTHREAD_SEMANTICS
 1

	)

485 #i‚de‡
EVENT___TANDEM_SOURCE


486 
	#EVENT___TANDEM_SOURCE
 1

	)

489 #i‚de‡
EVENT____EXTENSIONS__


490 
	#EVENT____EXTENSIONS__
 1

	)

495 
	#EVENT__VERSION
 "2.1.8-°abÀ"

	)

498 #i‚de‡
EVENT___DARWIN_USE_64_BIT_INODE


499 
	#EVENT___DARWIN_USE_64_BIT_INODE
 1

	)

526 #i‚de‡
EVENT____˝lu•lus


	@/usr/include/event2/event.h

27 #i‚de‡
EVENT2_EVENT_H_INCLUDED_


28 
	#EVENT2_EVENT_H_INCLUDED_


	)

185 
	~<evít2/visibûôy.h
>

187 #ifde‡
__˝lu•lus


191 
	~<evít2/evít-c⁄fig.h
>

192 #ifde‡
EVENT__HAVE_SYS_TYPES_H


193 
	~<sys/ty≥s.h
>

195 #ifde‡
EVENT__HAVE_SYS_TIME_H


196 
	~<sys/time.h
>

199 
	~<°dio.h
>

202 
	~<evít2/utû.h
>

217 
evít_ba£


218 #ifde‡
EVENT_IN_DOXYGEN_


276 
evít


277 #ifde‡
EVENT_IN_DOXYGEN_


295 
evít_c⁄fig


296 #ifde‡
EVENT_IN_DOXYGEN_


321 
EVENT2_EXPORT_SYMBOL


322 
evít_íabÀ_debug_mode
();

333 
EVENT2_EXPORT_SYMBOL


334 
evít_debug_u«ssign
(
evít
 *);

343 
EVENT2_EXPORT_SYMBOL


344 
evít_ba£
 *
evít_ba£_√w
();

356 
EVENT2_EXPORT_SYMBOL


357 
evít_ªöô
(
evít_ba£
 *
ba£
);

372 
EVENT2_EXPORT_SYMBOL


373 
evít_ba£_di•©ch
(
evít_ba£
 *);

381 
EVENT2_EXPORT_SYMBOL


382 c⁄° *
evít_ba£_gë_mëhod
(c⁄° 
evít_ba£
 *);

396 
EVENT2_EXPORT_SYMBOL


397 c⁄° **
evít_gë_suµ‹ãd_mëhods
();

402 
EVENT2_EXPORT_SYMBOL


403 
evít_gëtime_m⁄Ÿ⁄ic
(
evít_ba£
 *
ba£
, 
timevÆ
 *
ç
);

413 
	#EVENT_BASE_COUNT_ACTIVE
 1U

	)

416 
	#EVENT_BASE_COUNT_VIRTUAL
 2U

	)

419 
	#EVENT_BASE_COUNT_ADDED
 4U

	)

440 
EVENT2_EXPORT_SYMBOL


441 
evít_ba£_gë_num_evíts
(
evít_ba£
 *, );

453 
EVENT2_EXPORT_SYMBOL


454 
evít_ba£_gë_max_evíts
(
evít_ba£
 *, , );

466 
EVENT2_EXPORT_SYMBOL


467 
evít_c⁄fig
 *
evít_c⁄fig_√w
();

474 
EVENT2_EXPORT_SYMBOL


475 
evít_c⁄fig_‰ì
(
evít_c⁄fig
 *
cfg
);

489 
EVENT2_EXPORT_SYMBOL


490 
evít_c⁄fig_avoid_mëhod
(
evít_c⁄fig
 *
cfg
, c⁄° *
mëhod
);

501 
	eevít_mëhod_„©uª
 {

503 
EV_FEATURE_ET
 = 0x01,

508 
EV_FEATURE_O1
 = 0x02,

511 
EV_FEATURE_FDS
 = 0x04,

518 
EV_FEATURE_EARLY_CLOSE
 = 0x08

529 
	eevít_ba£_c⁄fig_Êag
 {

536 
EVENT_BASE_FLAG_NOLOCK
 = 0x01,

539 
EVENT_BASE_FLAG_IGNORE_ENV
 = 0x02,

546 
EVENT_BASE_FLAG_STARTUP_IOCP
 = 0x04,

550 
EVENT_BASE_FLAG_NO_CACHE_TIME
 = 0x08,

566 
EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST
 = 0x10,

573 
EVENT_BASE_FLAG_PRECISE_TIMER
 = 0x20

583 
EVENT2_EXPORT_SYMBOL


584 
evít_ba£_gë_„©uªs
(c⁄° 
evít_ba£
 *
ba£
);

608 
EVENT2_EXPORT_SYMBOL


609 
evít_c⁄fig_ªquúe_„©uªs
(
evít_c⁄fig
 *
cfg
, 
„©uª
);

617 
EVENT2_EXPORT_SYMBOL


618 
evít_c⁄fig_£t_Êag
(
evít_c⁄fig
 *
cfg
, 
Êag
);

629 
EVENT2_EXPORT_SYMBOL


630 
evít_c⁄fig_£t_num_˝us_höt
(
evít_c⁄fig
 *
cfg
, 
˝us
);

660 
EVENT2_EXPORT_SYMBOL


661 
evít_c⁄fig_£t_max_di•©ch_öãrvÆ
(
evít_c⁄fig
 *
cfg
,

662 c⁄° 
timevÆ
 *
max_öãrvÆ
, 
max_ˇŒbacks
,

663 
mö_¥i‹ôy
);

677 
EVENT2_EXPORT_SYMBOL


678 
evít_ba£
 *
evít_ba£_√w_wôh_c⁄fig
(c⁄° 
evít_c⁄fig
 *);

691 
EVENT2_EXPORT_SYMBOL


692 
evít_ba£_‰ì
(
evít_ba£
 *);

700 
EVENT2_EXPORT_SYMBOL


701 
evít_ba£_‰ì_noföÆize
(
evít_ba£
 *);

706 
	#EVENT_LOG_DEBUG
 0

	)

707 
	#EVENT_LOG_MSG
 1

	)

708 
	#EVENT_LOG_WARN
 2

	)

709 
	#EVENT_LOG_ERR
 3

	)

714 
	#_EVENT_LOG_DEBUG
 
EVENT_LOG_DEBUG


	)

715 
	#_EVENT_LOG_MSG
 
EVENT_LOG_MSG


	)

716 
	#_EVENT_LOG_WARN
 
EVENT_LOG_WARN


	)

717 
	#_EVENT_LOG_ERR
 
EVENT_LOG_ERR


	)

724 (*
evít_log_cb
)(
	t£vîôy
, c⁄° *
	tmsg
);

735 
EVENT2_EXPORT_SYMBOL


736 
evít_£t_log_ˇŒback
(
evít_log_cb
 
cb
);

743 (*
evít_Áèl_cb
)(
	tîr
);

757 
EVENT2_EXPORT_SYMBOL


758 
evít_£t_Áèl_ˇŒback
(
evít_Áèl_cb
 
cb
);

760 
	#EVENT_DBG_ALL
 0xffffffffu

	)

761 
	#EVENT_DBG_NONE
 0

	)

777 
EVENT2_EXPORT_SYMBOL


778 
evít_íabÀ_debug_loggög
(
ev_uöt32_t
 
which
);

789 
EVENT2_EXPORT_SYMBOL


790 
evít_ba£_£t
(
evít_ba£
 *, 
evít
 *);

799 
	#EVLOOP_ONCE
 0x01

	)

802 
	#EVLOOP_NONBLOCK
 0x02

	)

807 
	#EVLOOP_NO_EXIT_ON_EMPTY
 0x04

	)

828 
EVENT2_EXPORT_SYMBOL


829 
evít_ba£_lo›
(
evít_ba£
 *, );

846 
EVENT2_EXPORT_SYMBOL


847 
evít_ba£_lo›exô
(
evít_ba£
 *, c⁄° 
timevÆ
 *);

862 
EVENT2_EXPORT_SYMBOL


863 
evít_ba£_lo›bªak
(
evít_ba£
 *);

882 
EVENT2_EXPORT_SYMBOL


883 
evít_ba£_lo›c⁄töue
(
evít_ba£
 *);

897 
EVENT2_EXPORT_SYMBOL


898 
evít_ba£_gŸ_exô
(
evít_ba£
 *);

912 
EVENT2_EXPORT_SYMBOL


913 
evít_ba£_gŸ_bªak
(
evít_ba£
 *);

924 
	#EV_TIMEOUT
 0x01

	)

926 
	#EV_READ
 0x02

	)

928 
	#EV_WRITE
 0x04

	)

930 
	#EV_SIGNAL
 0x08

	)

937 
	#EV_PERSIST
 0x10

	)

939 
	#EV_ET
 0x20

	)

951 
	#EV_FINALIZE
 0x40

	)

960 
	#EV_CLOSED
 0x80

	)

968 
	#evtimî_assign
(
ev
, 
b
, 
cb
, 
¨g
) \

969 
	`evít_assign
((
ev
), (
b
), -1, 0, (
cb
), (
¨g
))

	)

970 
	#evtimî_√w
(
b
, 
cb
, 
¨g
Ë
	`evít_√w
((b), -1, 0, (cb), (¨g))

	)

971 
	#evtimî_add
(
ev
, 
tv
Ë
	`evít_add
(”v), (tv))

	)

972 
	#evtimî_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

973 
	#evtimî_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
(”v), 
EV_TIMEOUT
, (tv))

	)

974 
	#evtimî_öôülized
(
ev
Ë
	`evít_öôülized
”v)

	)

983 
	#evsig«l_add
(
ev
, 
tv
Ë
	`evít_add
(”v), (tv))

	)

984 
	#evsig«l_assign
(
ev
, 
b
, 
x
, 
cb
, 
¨g
) \

985 
	`evít_assign
((
ev
), (
b
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, 
cb
, (
¨g
))

	)

986 
	#evsig«l_√w
(
b
, 
x
, 
cb
, 
¨g
) \

987 
	`evít_√w
((
b
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
¨g
))

	)

988 
	#evsig«l_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

989 
	#evsig«l_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
(”v), 
EV_SIGNAL
, (tv))

	)

990 
	#evsig«l_öôülized
(
ev
Ë
	`evít_öôülized
”v)

	)

1004 (*
evít_ˇŒback_‚
)(
	tevutû_sockë_t
, , *);

1028 
EVENT2_EXPORT_SYMBOL


1029 *
evít_£lf_cb¨g
();

1079 
EVENT2_EXPORT_SYMBOL


1080 
evít
 *
evít_√w
(
evít_ba£
 *, 
evutû_sockë_t
, , 
evít_ˇŒback_‚
, *);

1121 
EVENT2_EXPORT_SYMBOL


1122 
evít_assign
(
evít
 *, 
evít_ba£
 *, 
evutû_sockë_t
, , 
evít_ˇŒback_‚
, *);

1130 
EVENT2_EXPORT_SYMBOL


1131 
evít_‰ì
(
evít
 *);

1140 (*
evít_föÆize_ˇŒback_‚
)(
	tevít
 *, *);

1175 
EVENT2_EXPORT_SYMBOL


1176 
evít_föÆize
(, 
evít
 *, 
evít_föÆize_ˇŒback_‚
);

1177 
EVENT2_EXPORT_SYMBOL


1178 
evít_‰ì_föÆize
(, 
evít
 *, 
evít_föÆize_ˇŒback_‚
);

1205 
EVENT2_EXPORT_SYMBOL


1206 
evít_ba£_⁄˚
(
evít_ba£
 *, 
evutû_sockë_t
, , 
evít_ˇŒback_‚
, *, c⁄° 
timevÆ
 *);

1229 
EVENT2_EXPORT_SYMBOL


1230 
evít_add
(
evít
 *
ev
, c⁄° 
timevÆ
 *
timeout
);

1241 
EVENT2_EXPORT_SYMBOL


1242 
evít_ªmove_timî
(
evít
 *
ev
);

1255 
EVENT2_EXPORT_SYMBOL


1256 
evít_dñ
(
evít
 *);

1266 
EVENT2_EXPORT_SYMBOL


1267 
evít_dñ_noblock
(
evít
 *
ev
);

1276 
EVENT2_EXPORT_SYMBOL


1277 
evít_dñ_block
(
evít
 *
ev
);

1293 
EVENT2_EXPORT_SYMBOL


1294 
evít_a˘ive
(
evít
 *
ev
, 
ªs
, 
nˇŒs
);

1309 
EVENT2_EXPORT_SYMBOL


1310 
evít_≥ndög
(c⁄° 
evít
 *
ev
, 
evíts
, 
timevÆ
 *
tv
);

1318 
EVENT2_EXPORT_SYMBOL


1319 
evít
 *
evít_ba£_gë_ru¬ög_evít
(
evít_ba£
 *
ba£
);

1336 
EVENT2_EXPORT_SYMBOL


1337 
evít_öôülized
(c⁄° 
evít
 *
ev
);

1342 
	#evít_gë_sig«l
(
ev
Ë(()
	`evít_gë_fd
”v))

	)

1348 
EVENT2_EXPORT_SYMBOL


1349 
evutû_sockë_t
 
evít_gë_fd
(c⁄° 
evít
 *
ev
);

1354 
EVENT2_EXPORT_SYMBOL


1355 
evít_ba£
 *
evít_gë_ba£
(c⁄° 
evít
 *
ev
);

1360 
EVENT2_EXPORT_SYMBOL


1361 
evít_gë_evíts
(c⁄° 
evít
 *
ev
);

1366 
EVENT2_EXPORT_SYMBOL


1367 
evít_ˇŒback_‚
 
evít_gë_ˇŒback
(c⁄° 
evít
 *
ev
);

1372 
EVENT2_EXPORT_SYMBOL


1373 *
evít_gë_ˇŒback_¨g
(c⁄° 
evít
 *
ev
);

1379 
EVENT2_EXPORT_SYMBOL


1380 
evít_gë_¥i‹ôy
(c⁄° 
evít
 *
ev
);

1389 
EVENT2_EXPORT_SYMBOL


1390 
evít_gë_assignmít
(c⁄° 
evít
 *event,

1391 
evít_ba£
 **
ba£_out
, 
evutû_sockë_t
 *
fd_out
, *
evíts_out
,

1392 
evít_ˇŒback_‚
 *
ˇŒback_out
, **
¨g_out
);

1407 
EVENT2_EXPORT_SYMBOL


1408 
size_t
 
evít_gë_°ru˘_evít_size
();

1419 
EVENT2_EXPORT_SYMBOL


1420 c⁄° *
evít_gë_vîsi⁄
();

1433 
EVENT2_EXPORT_SYMBOL


1434 
ev_uöt32_t
 
evít_gë_vîsi⁄_numbî
();

1437 
	#LIBEVENT_VERSION
 
EVENT__VERSION


	)

1440 
	#LIBEVENT_VERSION_NUMBER
 
EVENT__NUMERIC_VERSION


	)

1443 
	#EVENT_MAX_PRIORITIES
 256

	)

1471 
EVENT2_EXPORT_SYMBOL


1472 
evít_ba£_¥i‹ôy_öô
(
evít_ba£
 *, );

1481 
EVENT2_EXPORT_SYMBOL


1482 
evít_ba£_gë_≈ri‹ôõs
(
evít_ba£
 *
eb
);

1492 
EVENT2_EXPORT_SYMBOL


1493 
evít_¥i‹ôy_£t
(
evít
 *, );

1514 
EVENT2_EXPORT_SYMBOL


1515 c⁄° 
timevÆ
 *
evít_ba£_öô_comm⁄_timeout
(
evít_ba£
 *
ba£
,

1516 c⁄° 
timevÆ
 *
duøti⁄
);

1518 #i‡!
deföed
(
EVENT__DISABLE_MM_REPLACEMENT
Ë|| deföed(
EVENT_IN_DOXYGEN_
)

1541 
EVENT2_EXPORT_SYMBOL


1542 
evít_£t_mem_fun˘i⁄s
(

1543 *(*
mÆloc_‚
)(
size_t
 
sz
),

1544 *(*
ªÆloc_‚
)(*
±r
, 
size_t
 
sz
),

1545 (*
‰ì_‚
)(*
±r
));

1548 
	#EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED


	)

1561 
EVENT2_EXPORT_SYMBOL


1562 
evít_ba£_dump_evíts
(
evít_ba£
 *, 
FILE
 *);

1575 
EVENT2_EXPORT_SYMBOL


1576 
evít_ba£_a˘ive_by_fd
(
evít_ba£
 *
ba£
, 
evutû_sockë_t
 
fd
, 
evíts
);

1587 
EVENT2_EXPORT_SYMBOL


1588 
evít_ba£_a˘ive_by_sig«l
(
evít_ba£
 *
ba£
, 
sig
);

1593 (*
evít_ba£_f‹óch_evít_cb
)(c⁄° 
	tevít_ba£
 *, c⁄° 
	tevít
 *, *);

1620 
EVENT2_EXPORT_SYMBOL


1621 
evít_ba£_f‹óch_evít
(
evít_ba£
 *
ba£
, 
evít_ba£_f‹óch_evít_cb
 
‚
, *
¨g
);

1635 
EVENT2_EXPORT_SYMBOL


1636 
evít_ba£_gëtimeofday_ˇched
(
evít_ba£
 *
ba£
,

1637 
timevÆ
 *
tv
);

1651 
EVENT2_EXPORT_SYMBOL


1652 
evít_ba£_upd©e_ˇche_time
(
evít_ba£
 *
ba£
);

1668 
EVENT2_EXPORT_SYMBOL


1669 
libevít_globÆ_shutdown
();

1671 #ifde‡
__˝lu•lus


	@/usr/include/event2/event_compat.h

27 #i‚de‡
EVENT2_EVENT_COMPAT_H_INCLUDED_


28 
	#EVENT2_EVENT_COMPAT_H_INCLUDED_


	)

44 
	~<evít2/visibûôy.h
>

46 #ifde‡
__˝lu•lus


50 
	~<evít2/evít-c⁄fig.h
>

51 #ifde‡
EVENT__HAVE_SYS_TYPES_H


52 
	~<sys/ty≥s.h
>

54 #ifde‡
EVENT__HAVE_SYS_TIME_H


55 
	~<sys/time.h
>

59 
	~<evít2/utû.h
>

74 
EVENT2_EXPORT_SYMBOL


75 
evít_ba£
 *
evít_öô
();

88 
EVENT2_EXPORT_SYMBOL


89 
evít_di•©ch
();

102 
EVENT2_EXPORT_SYMBOL


103 
evít_lo›
();

118 
EVENT2_EXPORT_SYMBOL


119 
evít_lo›exô
(c⁄° 
timevÆ
 *);

134 
EVENT2_EXPORT_SYMBOL


135 
evít_lo›bªak
();

146 
EVENT2_EXPORT_SYMBOL


147 
evít_⁄˚
(
evutû_sockë_t
 , ,

148 (*)(
evutû_sockë_t
, , *), *, c⁄° 
timevÆ
 *);

160 
EVENT2_EXPORT_SYMBOL


161 c⁄° *
evít_gë_mëhod
();

173 
EVENT2_EXPORT_SYMBOL


174 
evít_¥i‹ôy_öô
();

183 
EVENT2_EXPORT_SYMBOL


184 
evít_£t
(
evít
 *, 
evutû_sockë_t
, , (*)(evutil_socket_t, , *), *);

186 
	#evtimî_£t
(
ev
, 
cb
, 
¨g
Ë
	`evít_£t
(”v), -1, 0, (cb), (¨g))

	)

187 
	#evsig«l_£t
(
ev
, 
x
, 
cb
, 
¨g
) \

188 
	`evít_£t
((
ev
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
¨g
))

	)

198 
	#timeout_add
(
ev
, 
tv
Ë
	`evít_add
(”v), (tv))

	)

199 
	#timeout_£t
(
ev
, 
cb
, 
¨g
Ë
	`evít_£t
(”v), -1, 0, (cb), (¨g))

	)

200 
	#timeout_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

201 
	#timeout_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
(”v), 
EV_TIMEOUT
, (tv))

	)

202 
	#timeout_öôülized
(
ev
Ë
	`evít_öôülized
”v)

	)

212 
	#sig«l_add
(
ev
, 
tv
Ë
	`evít_add
(”v), (tv))

	)

213 
	#sig«l_£t
(
ev
, 
x
, 
cb
, 
¨g
) \

214 
	`evít_£t
((
ev
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
¨g
))

	)

215 
	#sig«l_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

216 
	#sig«l_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
(”v), 
EV_SIGNAL
, (tv))

	)

217 
	#sig«l_öôülized
(
ev
Ë
	`evít_öôülized
”v)

	)

220 #i‚de‡
EVENT_FD


222 
	#EVENT_FD
(
ev
Ë(()
	`evít_gë_fd
”v))

	)

223 
	#EVENT_SIGNAL
(
ev
Ë
	`evít_gë_sig«l
”v)

	)

226 #ifde‡
__˝lu•lus


	@/usr/include/event2/event_struct.h

27 #i‚de‡
EVENT2_EVENT_STRUCT_H_INCLUDED_


28 
	#EVENT2_EVENT_STRUCT_H_INCLUDED_


	)

39 #ifde‡
__˝lu•lus


43 
	~<evít2/evít-c⁄fig.h
>

44 #ifde‡
EVENT__HAVE_SYS_TYPES_H


45 
	~<sys/ty≥s.h
>

47 #ifde‡
EVENT__HAVE_SYS_TIME_H


48 
	~<sys/time.h
>

52 
	~<evít2/utû.h
>

55 
	~<evít2/keyvÆq_°ru˘.h
>

57 
	#EVLIST_TIMEOUT
 0x01

	)

58 
	#EVLIST_INSERTED
 0x02

	)

59 
	#EVLIST_SIGNAL
 0x04

	)

60 
	#EVLIST_ACTIVE
 0x08

	)

61 
	#EVLIST_INTERNAL
 0x10

	)

62 
	#EVLIST_ACTIVE_LATER
 0x20

	)

63 
	#EVLIST_FINALIZING
 0x40

	)

64 
	#EVLIST_INIT
 0x80

	)

66 
	#EVLIST_ALL
 0xff

	)

69 #i‚de‡
TAILQ_ENTRY


70 
	#EVENT_DEFINED_TQENTRY_


	)

71 
	#TAILQ_ENTRY
(
ty≥
) \

73 
ty≥
 *
tqe_√xt
; \

74 
ty≥
 **
tqe_¥ev
; \

75 }

	)

78 #i‚de‡
TAILQ_HEAD


79 
	#EVENT_DEFINED_TQHEAD_


	)

80 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

81 
	s«me
 { \

82 
ty≥
 *
tqh_fú°
; \

83 
ty≥
 **
tqh_œ°
; \

84 }

	)

88 #i‚de‡
LIST_ENTRY


89 
	#EVENT_DEFINED_LISTENTRY_


	)

90 
	#LIST_ENTRY
(
ty≥
) \

92 
ty≥
 *
À_√xt
; \

93 
ty≥
 **
À_¥ev
; \

94 }

	)

97 #i‚de‡
LIST_HEAD


98 
	#EVENT_DEFINED_LISTHEAD_


	)

99 
	#LIST_HEAD
(
«me
, 
ty≥
) \

100 
	s«me
 { \

101 
ty≥
 *
lh_fú°
; \

102 }

	)

105 
evít
;

107 
	sevít_ˇŒback
 {

108 
TAILQ_ENTRY
(
evít_ˇŒback
Ë
evcb_a˘ive_√xt
;

109 
evcb_Êags
;

110 
ev_uöt8_t
 
evcb_¥i
;

111 
ev_uöt8_t
 
evcb_˛osuª
;

114 (*
evcb_ˇŒback
)(
evutû_sockë_t
, , *);

115 (*
evcb_£lfcb
)(
evít_ˇŒback
 *, *);

116 (*
evcb_evföÆize
)(
evít
 *, *);

117 (*
evcb_cbföÆize
)(
evít_ˇŒback
 *, *);

118 } 
evcb_cb_uni⁄
;

119 *
evcb_¨g
;

122 
evít_ba£
;

123 
	sevít
 {

124 
evít_ˇŒback
 
ev_evˇŒback
;

128 
TAILQ_ENTRY
(
evít
Ë
ev_√xt_wôh_comm⁄_timeout
;

129 
mö_hóp_idx
;

130 } 
ev_timeout_pos
;

131 
evutû_sockë_t
 
ev_fd
;

133 
evít_ba£
 *
ev_ba£
;

138 
LIST_ENTRY
 (
evít
Ë
ev_io_√xt
;

139 
timevÆ
 
ev_timeout
;

140 } 
ev_io
;

144 
LIST_ENTRY
 (
evít
Ë
ev_sig«l_√xt
;

145 
ev_nˇŒs
;

147 *
ev_≤ˇŒs
;

148 } 
ev_sig«l
;

149 } 
ev_
;

151 
ev_evíts
;

152 
ev_ªs
;

153 
timevÆ
 
ev_timeout
;

156 
TAILQ_HEAD
 (
evít_li°
, 
evít
);

158 #ifde‡
EVENT_DEFINED_TQENTRY_


159 #unde‡
TAILQ_ENTRY


162 #ifde‡
EVENT_DEFINED_TQHEAD_


163 #unde‡
TAILQ_HEAD


166 
LIST_HEAD
 (
evít_dli°
, 
evít
);

168 #ifde‡
EVENT_DEFINED_LISTENTRY_


169 #unde‡
LIST_ENTRY


172 #ifde‡
EVENT_DEFINED_LISTHEAD_


173 #unde‡
LIST_HEAD


176 #ifde‡
__˝lu•lus


	@/usr/include/event2/tag.h

27 #i‚de‡
EVENT2_TAG_H_INCLUDED_


28 
	#EVENT2_TAG_H_INCLUDED_


	)

36 
	~<evít2/visibûôy.h
>

38 #ifde‡
__˝lu•lus


42 
	~<evít2/evít-c⁄fig.h
>

43 #ifde‡
EVENT__HAVE_SYS_TYPES_H


44 
	~<sys/ty≥s.h
>

46 #ifde‡
EVENT__HAVE_SYS_TIME_H


47 
	~<sys/time.h
>

51 
	~<evít2/utû.h
>

53 
evbuf„r
;

61 
EVENT2_EXPORT_SYMBOL


62 
evèg_öô
();

71 
EVENT2_EXPORT_SYMBOL


72 
evèg_unm¨shÆ_hódî
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
±ag
);

74 
EVENT2_EXPORT_SYMBOL


75 
evèg_m¨shÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, c⁄° *
d©a
,

76 
ev_uöt32_t
 
Àn
);

77 
EVENT2_EXPORT_SYMBOL


78 
evèg_m¨shÆ_buf„r
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

79 
evbuf„r
 *
d©a
);

91 
EVENT2_EXPORT_SYMBOL


92 
evèg_ícode_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
numbî
);

93 
EVENT2_EXPORT_SYMBOL


94 
evèg_ícode_öt64
(
evbuf„r
 *
evbuf
, 
ev_uöt64_t
 
numbî
);

96 
EVENT2_EXPORT_SYMBOL


97 
evèg_m¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

98 
ev_uöt32_t
 
öãgî
);

99 
EVENT2_EXPORT_SYMBOL


100 
evèg_m¨shÆ_öt64
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

101 
ev_uöt64_t
 
öãgî
);

103 
EVENT2_EXPORT_SYMBOL


104 
evèg_m¨shÆ_°rög
(
evbuf„r
 *
buf
, 
ev_uöt32_t
 
èg
,

105 c⁄° *
°rög
);

107 
EVENT2_EXPORT_SYMBOL


108 
evèg_m¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

109 
timevÆ
 *
tv
);

111 
EVENT2_EXPORT_SYMBOL


112 
evèg_unm¨shÆ
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 *
±ag
,

113 
evbuf„r
 *
d°
);

114 
EVENT2_EXPORT_SYMBOL


115 
evèg_≥ek
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
±ag
);

116 
EVENT2_EXPORT_SYMBOL


117 
evèg_≥ek_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
);

118 
EVENT2_EXPORT_SYMBOL


119 
evèg_∑ylﬂd_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
);

120 
EVENT2_EXPORT_SYMBOL


121 
evèg_c⁄sume
(
evbuf„r
 *
evbuf
);

123 
EVENT2_EXPORT_SYMBOL


124 
evèg_unm¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

125 
ev_uöt32_t
 *
pöãgî
);

126 
EVENT2_EXPORT_SYMBOL


127 
evèg_unm¨shÆ_öt64
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

128 
ev_uöt64_t
 *
pöãgî
);

130 
EVENT2_EXPORT_SYMBOL


131 
evèg_unm¨shÆ_fixed
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 
√ed_èg
,

132 *
d©a
, 
size_t
 
Àn
);

134 
EVENT2_EXPORT_SYMBOL


135 
evèg_unm¨shÆ_°rög
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

136 **
p°rög
);

138 
EVENT2_EXPORT_SYMBOL


139 
evèg_unm¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

140 
timevÆ
 *
±v
);

142 #ifde‡
__˝lu•lus


	@/usr/include/event2/tag_compat.h

27 #i‚de‡
EVENT2_TAG_COMPAT_H_INCLUDED_


28 
	#EVENT2_TAG_COMPAT_H_INCLUDED_


	)

45 
	#ícode_öt
(
evbuf
, 
numbî
Ë
	`evèg_ícode_öt
(”vbuf), (numbî))

	)

46 
	#ícode_öt64
(
evbuf
, 
numbî
Ë
	`evèg_ícode_öt64
(”vbuf), (numbî))

	)

	@/usr/include/evutil.h

26 #i‚de‡
EVENT1_EVUTIL_H_INCLUDED_


27 
	#EVENT1_EVUTIL_H_INCLUDED_


	)

37 
	~<evít2/utû.h
>

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
	slc⁄v


55 *
	mdecimÆ_poöt
;

56 *
	mthoußnds_£p
;

62 *
	mgroupög
;

68 *
	möt_cuº_symbﬁ
;

69 *
	mcuºícy_symbﬁ
;

70 *
	mm⁄_decimÆ_poöt
;

71 *
	mm⁄_thoußnds_£p
;

72 *
	mm⁄_groupög
;

73 *
	mposôive_sign
;

74 *
	m√g©ive_sign
;

75 
	möt_‰ac_digôs
;

76 
	m‰ac_digôs
;

78 
	mp_cs_¥e˚des
;

80 
	mp_£p_by_•a˚
;

82 
	mn_cs_¥e˚des
;

84 
	mn_£p_by_•a˚
;

91 
	mp_sign_po¢
;

92 
	mn_sign_po¢
;

93 #ifde‡
__USE_ISOC99


95 
	möt_p_cs_¥e˚des
;

97 
	möt_p_£p_by_•a˚
;

99 
	möt_n_cs_¥e˚des
;

101 
	möt_n_£p_by_•a˚
;

108 
	möt_p_sign_po¢
;

109 
	möt_n_sign_po¢
;

111 
	m__öt_p_cs_¥e˚des
;

112 
	m__öt_p_£p_by_•a˚
;

113 
	m__öt_n_cs_¥e˚des
;

114 
	m__öt_n_£p_by_•a˚
;

115 
	m__öt_p_sign_po¢
;

116 
	m__öt_n_sign_po¢
;

122 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

125 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

128 #ifdef 
__USE_XOPEN2K8


135 
	~<bôs/ty≥s/loˇÀ_t.h
>

141 
loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

142 
loˇÀ_t
 
__ba£
Ë
__THROW
;

148 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

149 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

150 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

151 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

152 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

153 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

154 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

155 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

156 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

157 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

158 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

159 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

160 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

161 | 
LC_NUMERIC_MASK
 \

162 | 
LC_TIME_MASK
 \

163 | 
LC_COLLATE_MASK
 \

164 | 
LC_MONETARY_MASK
 \

165 | 
LC_MESSAGES_MASK
 \

166 | 
LC_PAPER_MASK
 \

167 | 
LC_NAME_MASK
 \

168 | 
LC_ADDRESS_MASK
 \

169 | 
LC_TELEPHONE_MASK
 \

170 | 
LC_MEASUREMENT_MASK
 \

171 | 
LC_IDENTIFICATION_MASK
 \

172 )

	)

176 
loˇÀ_t
 
	$du∂oˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

180 
	$‰ìloˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

187 
loˇÀ_t
 
	$u£loˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	#LC_GLOBAL_LOCALE
 ((
loˇÀ_t
Ë-1L)

	)

195 
__END_DECLS


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/event2/keyvalq_struct.h

27 #i‚de‡
EVENT2_KEYVALQ_STRUCT_H_INCLUDED_


28 
	#EVENT2_KEYVALQ_STRUCT_H_INCLUDED_


	)

30 #ifde‡
__˝lu•lus


36 #i‚de‡
TAILQ_ENTRY


37 
	#EVENT_DEFINED_TQENTRY_


	)

38 
	#TAILQ_ENTRY
(
ty≥
) \

40 
ty≥
 *
tqe_√xt
; \

41 
ty≥
 **
tqe_¥ev
; \

42 }

	)

45 #i‚de‡
TAILQ_HEAD


46 
	#EVENT_DEFINED_TQHEAD_


	)

47 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

48 
	s«me
 { \

49 
ty≥
 *
tqh_fú°
; \

50 
ty≥
 **
tqh_œ°
; \

51 }

	)

58 
	sevkeyvÆ
 {

59 
TAILQ_ENTRY
(
evkeyvÆ
Ë
√xt
;

61 *
key
;

62 *
vÆue
;

65 
TAILQ_HEAD
 (
evkeyvÆq
, 
evkeyvÆ
);

68 #ifde‡
EVENT_DEFINED_TQENTRY_


69 #unde‡
TAILQ_ENTRY


72 #ifde‡
EVENT_DEFINED_TQHEAD_


73 #unde‡
TAILQ_HEAD


76 #ifde‡
__˝lu•lus


	@/usr/include/event2/util.h

26 #i‚de‡
EVENT2_UTIL_H_INCLUDED_


27 
	#EVENT2_UTIL_H_INCLUDED_


	)

35 
	~<evít2/visibûôy.h
>

37 #ifde‡
__˝lu•lus


41 
	~<evít2/evít-c⁄fig.h
>

42 #ifde‡
EVENT__HAVE_SYS_TIME_H


43 
	~<sys/time.h
>

45 #ifde‡
EVENT__HAVE_STDINT_H


46 
	~<°döt.h
>

47 #ñi‡
deföed
(
EVENT__HAVE_INTTYPES_H
)

48 
	~<öây≥s.h
>

50 #ifde‡
EVENT__HAVE_SYS_TYPES_H


51 
	~<sys/ty≥s.h
>

53 #ifde‡
EVENT__HAVE_STDDEF_H


54 
	~<°ddef.h
>

56 #ifde‡
_MSC_VER


57 
	~<Ba£Tsd.h
>

59 
	~<°d¨g.h
>

60 #ifde‡
EVENT__HAVE_NETDB_H


61 #i‡!
deföed
(
_GNU_SOURCE
)

62 
	#_GNU_SOURCE


	)

64 
	~<√tdb.h
>

67 #ifde‡
_WIN32


68 
	~<wösock2.h
>

69 #ifde‡
EVENT__HAVE_GETADDRINFO


71 
	~<ws2t˝ù.h
>

74 #ifde‡
EVENT__HAVE_ERRNO_H


75 
	~<î∫o.h
>

77 
	~<sys/sockë.h
>

80 
	~<time.h
>

83 #i‡
deföed
(
EVENT__SIZEOF_VOID__
Ë&& !deföed(
EVENT__SIZEOF_VOID_P
)

84 
	#EVENT__SIZEOF_VOID_P
 
EVENT__SIZEOF_VOID__


	)

116 #ifde‡
EVENT__HAVE_UINT64_T


117 
	#ev_uöt64_t
 
uöt64_t


	)

118 
	#ev_öt64_t
 
öt64_t


	)

119 #ñi‡
deföed
(
_WIN32
)

120 
	#ev_uöt64_t
 
__öt64


	)

121 
	#ev_öt64_t
 sig√d 
__öt64


	)

122 #ñi‡
EVENT__SIZEOF_LONG_LONG
 == 8

123 
	#ev_uöt64_t
 

	)

124 
	#ev_öt64_t
 

	)

125 #ñi‡
EVENT__SIZEOF_LONG
 == 8

126 
	#ev_uöt64_t
 

	)

127 
	#ev_öt64_t
 

	)

128 #ñi‡
deföed
(
EVENT_IN_DOXYGEN_
)

129 
	#ev_uöt64_t
 ...

	)

130 
	#ev_öt64_t
 ...

	)

135 #ifde‡
EVENT__HAVE_UINT32_T


136 
	#ev_uöt32_t
 
uöt32_t


	)

137 
	#ev_öt32_t
 
öt32_t


	)

138 #ñi‡
deföed
(
_WIN32
)

139 
	#ev_uöt32_t
 

	)

140 
	#ev_öt32_t
 sig√d 

	)

141 #ñi‡
EVENT__SIZEOF_LONG
 == 4

142 
	#ev_uöt32_t
 

	)

143 
	#ev_öt32_t
 sig√d 

	)

144 #ñi‡
EVENT__SIZEOF_INT
 == 4

145 
	#ev_uöt32_t
 

	)

146 
	#ev_öt32_t
 sig√d 

	)

147 #ñi‡
deföed
(
EVENT_IN_DOXYGEN_
)

148 
	#ev_uöt32_t
 ...

	)

149 
	#ev_öt32_t
 ...

	)

154 #ifde‡
EVENT__HAVE_UINT16_T


155 
	#ev_uöt16_t
 
uöt16_t


	)

156 
	#ev_öt16_t
 
öt16_t


	)

157 #ñi‡
deföed
(
_WIN32
)

158 
	#ev_uöt16_t
 

	)

159 
	#ev_öt16_t
 sig√d 

	)

160 #ñi‡
EVENT__SIZEOF_INT
 == 2

161 
	#ev_uöt16_t
 

	)

162 
	#ev_öt16_t
 sig√d 

	)

163 #ñi‡
EVENT__SIZEOF_SHORT
 == 2

164 
	#ev_uöt16_t
 

	)

165 
	#ev_öt16_t
 sig√d 

	)

166 #ñi‡
deföed
(
EVENT_IN_DOXYGEN_
)

167 
	#ev_uöt16_t
 ...

	)

168 
	#ev_öt16_t
 ...

	)

173 #ifde‡
EVENT__HAVE_UINT8_T


174 
	#ev_uöt8_t
 
uöt8_t


	)

175 
	#ev_öt8_t
 
öt8_t


	)

176 #ñi‡
deföed
(
EVENT_IN_DOXYGEN_
)

177 
	#ev_uöt8_t
 ...

	)

178 
	#ev_öt8_t
 ...

	)

180 
	#ev_uöt8_t
 

	)

181 
	#ev_öt8_t
 sig√d 

	)

184 #ifde‡
EVENT__HAVE_UINTPTR_T


185 
	#ev_uöçå_t
 
uöçå_t


	)

186 
	#ev_öçå_t
 
öçå_t


	)

187 #ñi‡
EVENT__SIZEOF_VOID_P
 <= 4

188 
	#ev_uöçå_t
 
ev_uöt32_t


	)

189 
	#ev_öçå_t
 
ev_öt32_t


	)

190 #ñi‡
EVENT__SIZEOF_VOID_P
 <= 8

191 
	#ev_uöçå_t
 
ev_uöt64_t


	)

192 
	#ev_öçå_t
 
ev_öt64_t


	)

193 #ñi‡
deföed
(
EVENT_IN_DOXYGEN_
)

194 
	#ev_uöçå_t
 ...

	)

195 
	#ev_öçå_t
 ...

	)

200 #ifde‡
EVENT__ssize_t


201 
	#ev_ssize_t
 
EVENT__ssize_t


	)

203 
	#ev_ssize_t
 
ssize_t


	)

213 #ifde‡
_WIN32


214 
	#ev_off_t
 
ev_öt64_t


	)

215 #ñi‡
EVENT__SIZEOF_OFF_T
 == 8

216 
	#ev_off_t
 
ev_öt64_t


	)

217 #ñi‡
EVENT__SIZEOF_OFF_T
 == 4

218 
	#ev_off_t
 
ev_öt32_t


	)

219 #ñi‡
deföed
(
EVENT_IN_DOXYGEN_
)

220 
	#ev_off_t
 ...

	)

222 
	#ev_off_t
 
off_t


	)

241 #i‚de‡
EVENT__HAVE_STDINT_H


242 
	#EV_UINT64_MAX
 ((((
ev_uöt64_t
)0xffffffffULË<< 32Ë| 0xffffffffUL)

	)

243 
	#EV_INT64_MAX
 ((((
ev_öt64_t
Ë0x7fffffffLË<< 32Ë| 0xffffffffL)

	)

244 
	#EV_INT64_MIN
 ((-
EV_INT64_MAX
Ë- 1)

	)

245 
	#EV_UINT32_MAX
 ((
ev_uöt32_t
)0xffffffffUL)

	)

246 
	#EV_INT32_MAX
 ((
ev_öt32_t
Ë0x7fffffffL)

	)

247 
	#EV_INT32_MIN
 ((-
EV_INT32_MAX
Ë- 1)

	)

248 
	#EV_UINT16_MAX
 ((
ev_uöt16_t
)0xffffUL)

	)

249 
	#EV_INT16_MAX
 ((
ev_öt16_t
Ë0x7fffL)

	)

250 
	#EV_INT16_MIN
 ((-
EV_INT16_MAX
Ë- 1)

	)

251 
	#EV_UINT8_MAX
 255

	)

252 
	#EV_INT8_MAX
 127

	)

253 
	#EV_INT8_MIN
 ((-
EV_INT8_MAX
Ë- 1)

	)

255 
	#EV_UINT64_MAX
 
UINT64_MAX


	)

256 
	#EV_INT64_MAX
 
INT64_MAX


	)

257 
	#EV_INT64_MIN
 
INT64_MIN


	)

258 
	#EV_UINT32_MAX
 
UINT32_MAX


	)

259 
	#EV_INT32_MAX
 
INT32_MAX


	)

260 
	#EV_INT32_MIN
 
INT32_MIN


	)

261 
	#EV_UINT16_MAX
 
UINT16_MAX


	)

262 
	#EV_INT16_MAX
 
INT16_MAX


	)

263 
	#EV_UINT8_MAX
 
UINT8_MAX


	)

264 
	#EV_INT8_MAX
 
INT8_MAX


	)

265 
	#EV_INT8_MIN
 
INT8_MIN


	)

275 #i‡
EVENT__SIZEOF_SIZE_T
 == 8

276 
	#EV_SIZE_MAX
 
EV_UINT64_MAX


	)

277 
	#EV_SSIZE_MAX
 
EV_INT64_MAX


	)

278 #ñi‡
EVENT__SIZEOF_SIZE_T
 == 4

279 
	#EV_SIZE_MAX
 
EV_UINT32_MAX


	)

280 
	#EV_SSIZE_MAX
 
EV_INT32_MAX


	)

281 #ñi‡
deföed
(
EVENT_IN_DOXYGEN_
)

282 
	#EV_SIZE_MAX
 ...

	)

283 
	#EV_SSIZE_MAX
 ...

	)

288 
	#EV_SSIZE_MIN
 ((-
EV_SSIZE_MAX
Ë- 1)

	)

291 #ifde‡
_WIN32


292 
	#ev_sockÀn_t
 

	)

293 #ñi‡
deföed
(
EVENT__sockÀn_t
)

294 
	#ev_sockÀn_t
 
EVENT__sockÀn_t


	)

296 
	#ev_sockÀn_t
 
sockÀn_t


	)

299 #ifde‡
EVENT__HAVE_STRUCT_SOCKADDR_STORAGE___SS_FAMILY


300 #i‡!
deföed
(
EVENT__HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY
) \

301 && !
deföed
(
ss_Ámûy
)

302 
	#ss_Ámûy
 
__ss_Ámûy


	)

309 #ifde‡
_WIN32


310 
	#evutû_sockë_t
 
öçå_t


	)

312 
	#evutû_sockë_t
 

	)

327 
evutû_m⁄Ÿ⁄ic_timî


328 #ifde‡
EVENT_IN_DOXYGEN_


333 
	#EV_MONOT_PRECISE
 1

	)

334 
	#EV_MONOT_FALLBACK
 2

	)

342 
EVENT2_EXPORT_SYMBOL
 

343 
evutû_d©e_rfc1123
(*
d©e
, c⁄° 
size_t
 
d©ñí
, c⁄° 
tm
 *tm);

350 
EVENT2_EXPORT_SYMBOL


351 
evutû_m⁄Ÿ⁄ic_timî
 * 
evutû_m⁄Ÿ⁄ic_timî_√w
();

356 
EVENT2_EXPORT_SYMBOL


357 
evutû_m⁄Ÿ⁄ic_timî_‰ì
(
evutû_m⁄Ÿ⁄ic_timî
 *
timî
);

362 
EVENT2_EXPORT_SYMBOL


363 
evutû_c⁄figuª_m⁄Ÿ⁄ic_time
(
evutû_m⁄Ÿ⁄ic_timî
 *
timî
,

364 
Êags
);

376 
EVENT2_EXPORT_SYMBOL


377 
evutû_gëtime_m⁄Ÿ⁄ic
(
evutû_m⁄Ÿ⁄ic_timî
 *
timî
,

378 
timevÆ
 *
ç
);

391 
EVENT2_EXPORT_SYMBOL


392 
evutû_sockë∑ú
(
d
, 
ty≥
, 
¥Ÿocﬁ
, 
evutû_sockë_t
 
sv
[2]);

398 
EVENT2_EXPORT_SYMBOL


399 
evutû_make_sockë_n⁄blockög
(
evutû_sockë_t
 
sock
);

412 
EVENT2_EXPORT_SYMBOL


413 
evutû_make_li°í_sockë_ªu£abÀ
(
evutû_sockë_t
 
sock
);

425 
EVENT2_EXPORT_SYMBOL


426 
evutû_make_li°í_sockë_ªu£abÀ_p‹t
(
evutû_sockë_t
 
sock
);

434 
EVENT2_EXPORT_SYMBOL


435 
evutû_make_sockë_˛o£⁄exec
(
evutû_sockë_t
 
sock
);

443 
EVENT2_EXPORT_SYMBOL


444 
evutû_˛o£sockë
(
evutû_sockë_t
 
sock
);

445 
	#EVUTIL_CLOSESOCKET
(
s
Ë
	`evutû_˛o£sockë
(s)

	)

458 
EVENT2_EXPORT_SYMBOL


459 
evutû_make_t˝_li°í_sockë_de„ºed
(
evutû_sockë_t
 
sock
);

461 #ifde‡
_WIN32


463 
	#EVUTIL_SOCKET_ERROR
(Ë
	`WSAGëLa°Eº‹
()

	)

465 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

466 dÿ{ 
	`WSASëLa°Eº‹
(
îrcode
); } 0)

	)

468 
EVENT2_EXPORT_SYMBOL


469 
evutû_sockë_gëîr‹
(
evutû_sockë_t
 
sock
);

471 
EVENT2_EXPORT_SYMBOL


472 c⁄° *
evutû_sockë_îr‹_to_°rög
(
îrcode
);

473 #ñi‡
deföed
(
EVENT_IN_DOXYGEN_
)

489 
	#EVUTIL_SOCKET_ERROR
(Ë...

	)

491 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
Ë...

	)

493 
	#evutû_sockë_gëîr‹
(
sock
Ë...

	)

495 
	#evutû_sockë_îr‹_to_°rög
(
îrcode
Ë...

	)

498 
	#EVUTIL_SOCKET_ERROR
(Ë(
î∫o
)

	)

499 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

500 dÿ{ 
î∫o
 = (
îrcode
); } 0)

	)

501 
	#evutû_sockë_gëîr‹
(
sock
Ë(
î∫o
)

	)

502 
	#evutû_sockë_îr‹_to_°rög
(
îrcode
Ë(
	`°ªº‹
”ºcode))

	)

514 #ifde‡
EVENT__HAVE_TIMERADD


515 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
Ë
	`timîadd
(—vp), (uvp), (vvp))

	)

516 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
Ë
	`timîsub
(—vp), (uvp), (vvp))

	)

518 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
) \

520 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

521 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

522 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

523 (
vvp
)->
tv_£c
++; \

524 (
vvp
)->
tv_u£c
 -= 1000000; \

526 } 0)

	)

527 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
) \

529 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

530 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

531 i‡((
vvp
)->
tv_u£c
 < 0) { \

532 (
vvp
)->
tv_£c
--; \

533 (
vvp
)->
tv_u£c
 += 1000000; \

535 } 0)

	)

538 #ifde‡
EVENT__HAVE_TIMERCLEAR


539 
	#evutû_timî˛ór
(
tvp
Ë
	`timî˛ór
—vp)

	)

541 
	#evutû_timî˛ór
(
tvp
Ë—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

547 
	#evutû_timîcmp
(
tvp
, 
uvp
, 
cmp
) \

548 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

549 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

550 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

552 #ifde‡
EVENT__HAVE_TIMERISSET


553 
	#evutû_timîis£t
(
tvp
Ë
	`timîis£t
—vp)

	)

555 
	#evutû_timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

559 #ifde‡
off£tof


560 
	#evutû_off£tof
(
ty≥
, 
fõld
Ë
	`off£tof
—y≥, fõld)

	)

562 
	#evutû_off£tof
(
ty≥
, 
fõld
Ë((
off_t
)(&(—y≥ *)0)->fõld))

	)

567 
EVENT2_EXPORT_SYMBOL


568 
ev_öt64_t
 
evutû_°πﬁl
(c⁄° *
s
, **
íd±r
, 
ba£
);

571 #ifde‡
EVENT__HAVE_GETTIMEOFDAY


572 
	#evutû_gëtimeofday
(
tv
, 
tz
Ë
	`gëtimeofday
(—v), (tz))

	)

574 
timez⁄e
;

575 
EVENT2_EXPORT_SYMBOL


576 
evutû_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
);

582 
EVENT2_EXPORT_SYMBOL


583 
evutû_¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, ...)

584 #ifde‡
__GNUC__


585 
__©åibuã__
((
f‹m©
(
¥ötf
, 3, 4)))

591 
EVENT2_EXPORT_SYMBOL


592 
evutû_v¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

593 #ifde‡
__GNUC__


594 
__©åibuã__
((
f‹m©
(
¥ötf
, 3, 0)))

599 
EVENT2_EXPORT_SYMBOL


600 c⁄° *
evutû_öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
size_t
 
Àn
);

602 
EVENT2_EXPORT_SYMBOL


603 
evutû_öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

604 
sockaddr
;

626 
EVENT2_EXPORT_SYMBOL


627 
evutû_∑r£_sockaddr_p‹t
(c⁄° *
°r
, 
sockaddr
 *
out
, *
ouéí
);

634 
EVENT2_EXPORT_SYMBOL


635 
evutû_sockaddr_cmp
(c⁄° 
sockaddr
 *
ß1
, c⁄° sockadd∏*
ß2
,

636 
ö˛ude_p‹t
);

641 
EVENT2_EXPORT_SYMBOL


642 
evutû_ascii_°rˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
);

646 
EVENT2_EXPORT_SYMBOL


647 
evutû_ascii_°∫ˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
n
);

651 #ifde‡
EVENT__HAVE_STRUCT_ADDRINFO


652 
	#evutû_addröfo
 
addröfo


	)

659 
	sevutû_addröfo
 {

660 
ai_Êags
;

661 
ai_Ámûy
;

662 
ai_sockty≥
;

663 
ai_¥Ÿocﬁ
;

664 
size_t
 
ai_addæí
;

665 *
ai_ˇn⁄«me
;

666 
sockaddr
 *
ai_addr
;

667 
evutû_addröfo
 *
ai_√xt
;

677 #i‡
deföed
(
EAI_ADDRFAMILY
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

678 
	#EVUTIL_EAI_ADDRFAMILY
 
EAI_ADDRFAMILY


	)

680 
	#EVUTIL_EAI_ADDRFAMILY
 -901

	)

682 #i‡
deföed
(
EAI_AGAIN
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

683 
	#EVUTIL_EAI_AGAIN
 
EAI_AGAIN


	)

685 
	#EVUTIL_EAI_AGAIN
 -902

	)

687 #i‡
deföed
(
EAI_BADFLAGS
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

688 
	#EVUTIL_EAI_BADFLAGS
 
EAI_BADFLAGS


	)

690 
	#EVUTIL_EAI_BADFLAGS
 -903

	)

692 #i‡
deföed
(
EAI_FAIL
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

693 
	#EVUTIL_EAI_FAIL
 
EAI_FAIL


	)

695 
	#EVUTIL_EAI_FAIL
 -904

	)

697 #i‡
deföed
(
EAI_FAMILY
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

698 
	#EVUTIL_EAI_FAMILY
 
EAI_FAMILY


	)

700 
	#EVUTIL_EAI_FAMILY
 -905

	)

702 #i‡
deföed
(
EAI_MEMORY
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

703 
	#EVUTIL_EAI_MEMORY
 
EAI_MEMORY


	)

705 
	#EVUTIL_EAI_MEMORY
 -906

	)

710 #i‡
deföed
(
EAI_NODATA
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
Ë&& (!deföed(
EAI_NONAME
) || EAI_NODATA != EAI_NONAME)

711 
	#EVUTIL_EAI_NODATA
 
EAI_NODATA


	)

713 
	#EVUTIL_EAI_NODATA
 -907

	)

715 #i‡
deföed
(
EAI_NONAME
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

716 
	#EVUTIL_EAI_NONAME
 
EAI_NONAME


	)

718 
	#EVUTIL_EAI_NONAME
 -908

	)

720 #i‡
deföed
(
EAI_SERVICE
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

721 
	#EVUTIL_EAI_SERVICE
 
EAI_SERVICE


	)

723 
	#EVUTIL_EAI_SERVICE
 -909

	)

725 #i‡
deföed
(
EAI_SOCKTYPE
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

726 
	#EVUTIL_EAI_SOCKTYPE
 
EAI_SOCKTYPE


	)

728 
	#EVUTIL_EAI_SOCKTYPE
 -910

	)

730 #i‡
deföed
(
EAI_SYSTEM
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

731 
	#EVUTIL_EAI_SYSTEM
 
EAI_SYSTEM


	)

733 
	#EVUTIL_EAI_SYSTEM
 -911

	)

736 
	#EVUTIL_EAI_CANCEL
 -90001

	)

738 #i‡
deföed
(
AI_PASSIVE
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

739 
	#EVUTIL_AI_PASSIVE
 
AI_PASSIVE


	)

741 
	#EVUTIL_AI_PASSIVE
 0x1000

	)

743 #i‡
deföed
(
AI_CANONNAME
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

744 
	#EVUTIL_AI_CANONNAME
 
AI_CANONNAME


	)

746 
	#EVUTIL_AI_CANONNAME
 0x2000

	)

748 #i‡
deföed
(
AI_NUMERICHOST
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

749 
	#EVUTIL_AI_NUMERICHOST
 
AI_NUMERICHOST


	)

751 
	#EVUTIL_AI_NUMERICHOST
 0x4000

	)

753 #i‡
deföed
(
AI_NUMERICSERV
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

754 
	#EVUTIL_AI_NUMERICSERV
 
AI_NUMERICSERV


	)

756 
	#EVUTIL_AI_NUMERICSERV
 0x8000

	)

758 #i‡
deföed
(
AI_V4MAPPED
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

759 
	#EVUTIL_AI_V4MAPPED
 
AI_V4MAPPED


	)

761 
	#EVUTIL_AI_V4MAPPED
 0x10000

	)

763 #i‡
deföed
(
AI_ALL
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

764 
	#EVUTIL_AI_ALL
 
AI_ALL


	)

766 
	#EVUTIL_AI_ALL
 0x20000

	)

768 #i‡
deföed
(
AI_ADDRCONFIG
Ë&& deföed(
EVENT__HAVE_GETADDRINFO
)

769 
	#EVUTIL_AI_ADDRCONFIG
 
AI_ADDRCONFIG


	)

771 
	#EVUTIL_AI_ADDRCONFIG
 0x40000

	)

775 
evutû_addröfo
;

787 
EVENT2_EXPORT_SYMBOL


788 
evutû_gëaddröfo
(c⁄° *
nodíame
, c⁄° *
£rv«me
,

789 c⁄° 
evutû_addröfo
 *
höts_ö
, evutû_addröfÿ**
ªs
);

792 
EVENT2_EXPORT_SYMBOL


793 
evutû_‰ìaddröfo
(
evutû_addröfo
 *
ai
);

795 
EVENT2_EXPORT_SYMBOL


796 c⁄° *
evutû_gai_°ªº‹
(
îr
);

807 
EVENT2_EXPORT_SYMBOL


808 
evutû_£cuª_∫g_gë_byãs
(*
buf
, 
size_t
 
n
);

826 
EVENT2_EXPORT_SYMBOL


827 
evutû_£cuª_∫g_öô
();

842 
EVENT2_EXPORT_SYMBOL


843 
evutû_£cuª_∫g_£t_uøndom_devi˚_fûe
(*
‚ame
);

859 
EVENT2_EXPORT_SYMBOL


860 
evutû_£cuª_∫g_add_byãs
(c⁄° *
d©
, 
size_t
 
d©Àn
);

862 #ifde‡
__˝lu•lus


	@/usr/include/event2/visibility.h

27 #i‚de‡
EVENT2_VISIBILITY_H_INCLUDED_


28 
	#EVENT2_VISIBILITY_H_INCLUDED_


	)

30 
	~<evít2/evít-c⁄fig.h
>

32 #i‡
deföed
(
evít_EXPORTS
Ë|| deföed(
evít_exåa_EXPORTS
Ë|| deföed(
evít_c‹e_EXPORTS
)

33 #i‡
deföed
 (
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

34 
	#EVENT2_EXPORT_SYMBOL
 
__globÆ


	)

35 #ñi‡
deföed
 
__GNUC__


36 
	#EVENT2_EXPORT_SYMBOL
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

37 #ñi‡
deföed
(
_MSC_VER
)

38 
	#EVENT2_EXPORT_SYMBOL
 
	`__de˛•ec
(
dŒexp‹t
)

	)

40 
	#EVENT2_EXPORT_SYMBOL


	)

43 #i‡
deföed
(
EVENT__NEED_DLLIMPORT
Ë&& deföed(
_MSC_VER
Ë&& !deföed(
EVENT_BUILDING_REGRESS_TEST
)

44 
	#EVENT2_EXPORT_SYMBOL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

46 
	#EVENT2_EXPORT_SYMBOL


	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
275
6380
build/config.h
build/config/top.h
build/libhashkit/configure.h
build/libmemcached/configure.h
clients/client_options.h
clients/execute.c
clients/execute.h
clients/generator.c
clients/generator.h
clients/memaslap.c
clients/memcapable.c
clients/memcat.c
clients/memcp.c
clients/memdump.c
clients/memerror.c
clients/memflush.c
clients/memparse.cc
clients/memrm.c
clients/memslap.c
clients/memstat.c
clients/ms_atomic.h
clients/ms_conn.c
clients/ms_conn.h
clients/ms_memslap.h
clients/ms_setting.c
clients/ms_setting.h
clients/ms_sigsegv.c
clients/ms_sigsegv.h
clients/ms_stats.c
clients/ms_stats.h
clients/ms_task.c
clients/ms_task.h
clients/ms_thread.c
clients/ms_thread.h
clients/utilities.c
clients/utilities.h
example/interface_v0.c
example/interface_v1.c
example/memcached_light.c
example/memcached_light.h
example/storage.c
example/storage.h
example/storage_innodb.c
libhashkit/algorithm.c
libhashkit/algorithm.h
libhashkit/behavior.c
libhashkit/behavior.h
libhashkit/common.h
libhashkit/configure.h
libhashkit/crc32.c
libhashkit/digest.c
libhashkit/digest.h
libhashkit/fnv.c
libhashkit/function.c
libhashkit/function.h
libhashkit/hashkit.c
libhashkit/hashkit.h
libhashkit/hsieh.c
libhashkit/jenkins.c
libhashkit/ketama.c
libhashkit/md5.c
libhashkit/murmur.c
libhashkit/one_at_a_time.c
libhashkit/str_algorithm.c
libhashkit/str_algorithm.h
libhashkit/strerror.c
libhashkit/strerror.h
libhashkit/types.h
libhashkit/visibility.h
libmemcached/allocators.c
libmemcached/allocators.h
libmemcached/analyze.c
libmemcached/analyze.h
libmemcached/array.c
libmemcached/array.h
libmemcached/auto.c
libmemcached/auto.h
libmemcached/behavior.c
libmemcached/behavior.h
libmemcached/byteorder.c
libmemcached/byteorder.h
libmemcached/callback.c
libmemcached/callback.h
libmemcached/common.h
libmemcached/configure.h
libmemcached/connect.c
libmemcached/constants.h
libmemcached/delete.c
libmemcached/delete.h
libmemcached/do.c
libmemcached/do.h
libmemcached/dump.c
libmemcached/dump.h
libmemcached/error.cc
libmemcached/error.h
libmemcached/exception.hpp
libmemcached/fetch.c
libmemcached/fetch.h
libmemcached/flush.c
libmemcached/flush.h
libmemcached/flush_buffers.c
libmemcached/flush_buffers.h
libmemcached/get.c
libmemcached/get.h
libmemcached/hash.c
libmemcached/hash.h
libmemcached/hosts.c
libmemcached/initialize_query.cc
libmemcached/initialize_query.h
libmemcached/internal.h
libmemcached/io.c
libmemcached/io.h
libmemcached/is.h
libmemcached/key.c
libmemcached/libmemcached_probes.h
libmemcached/memcached.c
libmemcached/memcached.h
libmemcached/memcached.hpp
libmemcached/memcached/protocol_binary.h
libmemcached/memcached/vbucket.h
libmemcached/memcached_util.h
libmemcached/options.cc
libmemcached/options.h
libmemcached/options/context.h
libmemcached/options/parser.cc
libmemcached/options/parser.h
libmemcached/options/scanner.cc
libmemcached/options/scanner.h
libmemcached/options/server.h
libmemcached/options/string.h
libmemcached/options/symbol.h
libmemcached/parse.c
libmemcached/parse.h
libmemcached/platform.h
libmemcached/prefix_key.cc
libmemcached/prefix_key.h
libmemcached/protocol/ascii_handler.c
libmemcached/protocol/ascii_handler.h
libmemcached/protocol/binary_handler.c
libmemcached/protocol/binary_handler.h
libmemcached/protocol/cache.c
libmemcached/protocol/cache.h
libmemcached/protocol/callback.h
libmemcached/protocol/common.h
libmemcached/protocol/pedantic.c
libmemcached/protocol/protocol_handler.c
libmemcached/protocol_handler.h
libmemcached/purge.c
libmemcached/quit.c
libmemcached/quit.h
libmemcached/response.c
libmemcached/response.h
libmemcached/result.c
libmemcached/result.h
libmemcached/sasl.c
libmemcached/sasl.h
libmemcached/server.c
libmemcached/server.h
libmemcached/server_list.c
libmemcached/server_list.h
libmemcached/stats.c
libmemcached/stats.h
libmemcached/storage.c
libmemcached/storage.h
libmemcached/strerror.c
libmemcached/strerror.h
libmemcached/string.c
libmemcached/string.h
libmemcached/types.h
libmemcached/util.h
libmemcached/util/ping.c
libmemcached/util/ping.h
libmemcached/util/pool.c
libmemcached/util/pool.h
libmemcached/util/version.c
libmemcached/util/version.h
libmemcached/verbosity.c
libmemcached/verbosity.h
libmemcached/version.c
libmemcached/version.h
libmemcached/virtual_bucket.c
libmemcached/virtual_bucket.h
libmemcached/visibility.h
libmemcached/watchpoint.h
libtest/failed.h
libtest/server.c
libtest/server.h
libtest/test.c
libtest/test.h
libtest/visibility.h
poll/poll.c
poll/poll.h
tests/atomsmasher.c
tests/basic.cc
tests/basic.h
tests/cpp_example.cc
tests/deprecated.cc
tests/deprecated.h
tests/error_conditions.cc
tests/error_conditions.h
tests/hash_plus.cc
tests/hash_results.h
tests/hashkit_functions.c
tests/ketama_test_cases.h
tests/ketama_test_cases_spy.h
tests/libmemcached_world.h
tests/mem_functions.c
tests/mem_udp.c
tests/parser.cc
tests/parser.h
tests/plus.cpp
tests/pool.cc
tests/pool.h
tests/print.cc
tests/print.h
tests/replication.cc
tests/replication.h
tests/start.c
tests/string.cc
tests/string.h
tests/virtual_buckets.cc
tests/virtual_buckets.h
win32/wrappers.h
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/event.h
/usr/include/execinfo.h
/usr/include/fcntl.h
/usr/include/fnmatch.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/time.h
/usr/include/ucontext.h
/usr/include/unistd.h
/usr/include/endian.h
/usr/include/event2/buffer.h
/usr/include/event2/buffer_compat.h
/usr/include/event2/bufferevent.h
/usr/include/event2/bufferevent_compat.h
/usr/include/event2/bufferevent_struct.h
/usr/include/event2/event-config.h
/usr/include/event2/event.h
/usr/include/event2/event_compat.h
/usr/include/event2/event_struct.h
/usr/include/event2/tag.h
/usr/include/event2/tag_compat.h
/usr/include/evutil.h
/usr/include/features.h
/usr/include/locale.h
/usr/include/rpc/netdb.h
/usr/include/event2/keyvalq_struct.h
/usr/include/event2/util.h
/usr/include/event2/visibility.h
/usr/include/stdc-predef.h
