- old: |
    actual.Any().Should().BeTrue();

  new: |
    actual.Should().NotBeEmpty();

  old-message: |
    Expected True, but found False.

  new-message: |
    Expected collection not to be empty.

- old: |
    actual.Any().Should().BeFalse();

  new: |
    actual.Should().BeEmpty();

  old-message: |
    Expected False, but found True.

  new-message: |
    Expected collection to be empty, but found {SomeProperty: 0, OtherProperty: }.

- old: |
    actual.Any(x => x.SomeProperty).Should().BeTrue();

  new: |
    actual.Should().Contain(x => x.SomeProperty);

  old-message: |
    Expected True, but found False.

  new-message: |
    Collection {SomeProperty: 0, OtherProperty: Actual} should have an item matching (x.OtherProperty == value(UnitTests2.CollectionTests+<>c__DisplayClass5_0).expectedValue).

- old: |
    actual.Any(x => x.SomeProperty).Should().BeFalse();

  new: |
    actual.Should().NotContain(x => x.SomeProperty);

  old-message: |
    Expected False, but found True.

  new-message: |
    Expected Collection {SomeProperty: 0, OtherProperty: Unexpected} to not have any items matching (x.OtherProperty == value(UnitTests2.CollectionTests+<>c__DisplayClass7_0).unexpectedValue).

- old: |
    actual.All(x => x.SomeProperty).Should().BeTrue();

  new: |
    // now fails on empty collection;
    actual.Should().OnlyContain(x => x.SomeProperty)

  old-message: |
    Expected True, but found False.

  new-message: |
    Expected collection to contain only items matching (x.OtherProperty == value(UnitTests2.CollectionTests+<>c__DisplayClass9_0).expectedValue), but {SomeProperty: 0, OtherProperty: Actual} do(es) not match.

- old: |
    actual.Contains(expected).Should().BeTrue();

  new: |
    actual.Should().Contain(expected);

  old-message: |
    Expected True, but found False.

  new-message: |
    Expected collection {"Actual"} to contain "Expected".

- old: |
    actual.Contains(unexpected).Should().BeFalse();

  new: |
    actual.Should().NotContain(unexpected);

  old-message: |
    Expected False, but found True.

  new-message: |
    Expected collection {"Expected"} to not contain "Expected".

- old: |
    actual.Any(x => x == unexpected).Should().BeFalse();

  new: |
    actual.Should().NotContain(unexpected);

  old-message: |
    Expected False, but found True.

  new-message: |
    Expected collection {"Unexpected"} to not contain "Unexpected".

- old: |
    actual.Count().Should().Be(k);

  new: |
    actual.Should().HaveCount(k);

  old-message: |
    Expected value to be 2, but found 3.

  new-message: |
    Expected collection to contain 2 item(s), but found 3.

- old: |
    actual.Count().Should().BeGreaterThan(k);

  new: |
    actual.Should().HaveCountGreaterThan(k);

  old-message: |
    Expected a value greater than 4, but found 3.

  new-message: |
    Expected collection to contain more than 4 item(s), but found 3.

- old: |
    actual.Count().Should().BeGreaterOrEqualTo(k);

  new: |
    actual.Should().HaveCountGreaterOrEqualTo(k);

  old-message: |
    Expected a value greater or equal to 4, but found 3.

  new-message: |
    Expected collection to contain at least 4 item(s), but found 3.

- old: |
    actual.Count().Should().BeLessThan(k);

  new: |
    actual.Should().HaveCountLessThan(k);

  old-message: |
    Expected a value less than 2, but found 3.

  new-message: |
    Expected collection to contain fewer than 2 item(s), but found 3.

- old: |
    actual.Count().Should().BeLessOrEqualTo(k);

  new: |
    actual.Should().HaveCountLessOrEqualTo(k);

  old-message: |
    Expected a value less or equal to 2, but found 3.

  new-message: |
    Expected collection to contain at most 2 item(s), but found 3.

- old: |
    actual.Count().Should().NotBe(k);

  new: |
    actual.Should().NotHaveCount(k);

  old-message: |
    Did not expect 3.

  new-message: |
    Expected collection to not contain 3 item(s), but found 3.

- old: |
    actual.Should().HaveCount(1);

  new: |
    actual.Should().ContainSingle();

  old-message: |
    Expected collection to contain 1 item(s), but found 3.

  new-message: |
    Expected collection to contain a single item, but found {"", "", ""}.

- old: |
    actual.Should().HaveCount(0);

  new: |
    actual.Should().BeEmpty();

  old-message: |
    Expected collection to contain 0 item(s), but found 3.

  new-message: |
    Expected collection to be empty, but found {"", "", ""}.

- old: |
    actual.Should().HaveCount(expected.Count());

  new: |
    actual.Should().HaveSameCount(expected);

  old-message: |
    Expected collection to contain 2 item(s), but found 3.

  new-message: |
    Expected collection to have 2 item(s), but found 3.

- old: |
    actual.Count().Should().NotBe(unexpected.Count());

  new: |
    actual.Should().NotHaveSameCount(unexpected);

  old-message: |
    Did not expect 2.

  new-message: |
    Expected collection to not have 2 item(s), but found 2.

- old: |
    actual.Where(x => x.SomeProperty).Should().NotBeEmpty();

  new: |
    actual.Should().Contain(x => x.SomeProperty);

  old-message: |
    Expected collection not to be empty.

  new-message: |
    Collection {SomeProperty: 0, OtherProperty: Actual} should have an item matching (x.OtherProperty == value(UnitTests2.CollectionTests+<>c__DisplayClass39_0).expectedValue).

- old: |
    actual.Where(x => x.SomeProperty).Should().BeEmpty();

  new: |
    actual.Should().NotContain(x => x.SomeProperty);

  old-message: |
    Expected collection to be empty, but found {SomeProperty: 0, OtherProperty: Expected}.

  new-message: |
    Expected Collection {SomeProperty: 0, OtherProperty: Expected} to not have any items matching (x.OtherProperty == value(UnitTests2.CollectionTests+<>c__DisplayClass41_0).expectedValue).

- old: |
    actual.Where(x => x.SomeProperty).Should().HaveCount(1);

  new: |
    actual.Should().ContainSingle(x => x.SomeProperty);

  old-message: |
    Expected collection to contain 1 item(s), but found 0.

  new-message: |
    Expected collection to contain a single item matching (x.OtherProperty == value(UnitTests2.CollectionTests+<>c__DisplayClass43_0).expectedValue), but no such item was found.

- old: |
    actual.Should().OnlyContain(e => !e.SomeProperty);

  new: |
    actual.Should().NotContain(x => x.SomeProperty);

  old-message: |
    Expected collection to contain only items matching (x.OtherProperty != value(UnitTests2.CollectionTests+<>c__DisplayClass44_0).unexpectedValue), but {SomeProperty: 0, OtherProperty: Unexpected} do(es) not match.

  new-message: |
    Expected Collection {SomeProperty: 0, OtherProperty: Unexpected} to not have any items matching (x.OtherProperty == value(UnitTests2.CollectionTests+<>c__DisplayClass45_0).unexpectedValue).

- old: |
    actual.Should().NotBeNull().And.NotBeEmpty();

  new: |
    actual.Should().NotBeNullOrEmpty();

  old-message: |
    Expected collection not to be empty.

  new-message: |
    Expected collection not to be empty.

- old: |
    actual.ElementAt(k).Should().Be(expected);

  new: |
    actual.Should().HaveElementAt(k, expected);

  old-message: |
    Expected string to be 
    "Expected" with a length of 8, but 
    "Unexpected" has a length of 10.

  new-message: |
    Expected "Expected" at index 0, but found "Unexpected".

- old: |
    actual[k].Should().Be(expected);

  new: |
    actual.Should().HaveElementAt(k, expected);

  old-message: |
    Expected string to be 
    "Expected" with a length of 8, but 
    "Unexpected" has a length of 10.

  new-message: |
    Expected "Expected" at index 0, but found "Unexpected".

- old: |
    actual.Skip(k).First().Should().Be(expected);

  new: |
    actual.Should().HaveElementAt(k, expected);

  old-message: |
    Expected string to be 
    "Expected" with a length of 8, but 
    "Unexpected" has a length of 10.

  new-message: |
    Expected "Expected" at index 1, but found "Unexpected".

- old: |
    actual.OrderBy(x => x.SomeProperty)
        .Should().Equal(actual);

  new: |
    actual.Should().BeInAscendingOrder(x => x.SomeProperty);

  old-message: |
    Expected collection to be equal to {SomeProperty: 2, OtherProperty: , SomeProperty: 1, OtherProperty: }, but {SomeProperty: 1, OtherProperty: , SomeProperty: 2, OtherProperty: } differs at index 0.

  new-message: |
    Expected collection {SomeProperty: 2, OtherProperty: , SomeProperty: 1, OtherProperty: } to be ordered" by SomeProperty" and result in {SomeProperty: 1, OtherProperty: , SomeProperty: 2, OtherProperty: }.

- old: |
    actual.OrderByDescending(x => x.SomeProperty)
        .Should().Equal(actual);

  new: |
    actual.Should().BeInDescendingOrder(x => x.SomeProperty);

  old-message: |
    Expected collection to be equal to {SomeProperty: 1, OtherProperty: , SomeProperty: 2, OtherProperty: }, but {SomeProperty: 2, OtherProperty: , SomeProperty: 1, OtherProperty: } differs at index 0.

  new-message: |
    Expected collection {SomeProperty: 1, OtherProperty: , SomeProperty: 2, OtherProperty: } to be ordered" by SomeProperty" and result in {SomeProperty: 2, OtherProperty: , SomeProperty: 1, OtherProperty: }.

- old: |
    actual.Select(e1 => e1.SomeProperty).Should()
        .Equal(expected.Select(e2 => e2.SomeProperty));

  new: |
    actual.Should()
        .Equal(expected, 
            (e1, e2) => e1.SomeProperty == e2.SomeProperty);

  old-message: |
    Expected collection to be equal to {"Expected", "Expected"}, but {"Actual", "Actual"} differs at index 0.

  new-message: |
    Expected collection to be equal to {SomeProperty: 1, OtherProperty: Expected, SomeProperty: 2, OtherProperty: Expected}, but {SomeProperty: 1, OtherProperty: Actual, SomeProperty: 2, OtherProperty: Actual} differs at index 0.

- old: |
    actual.Intersect(expected).Should().BeEmpty();

  new: |
    actual.Should().NotIntersectWith(expected);

  old-message: |
    Expected collection to be empty, but found {SomeProperty: 1, OtherProperty: Expected}.

  new-message: |
    Did not expect collection to intersect with {SomeProperty: 1, OtherProperty: Expected}, but found the following shared items {SomeProperty: 1, OtherProperty: Expected}.

- old: |
    actual.Intersect(expected).Should().NotBeEmpty();

  new: |
    actual.Should().IntersectWith(expected);

  old-message: |
    Expected collection not to be empty.

  new-message: |
    Expected collection to intersect with {SomeProperty: 1, OtherProperty: Expected}, but {SomeProperty: 1, OtherProperty: Actual} does not contain any shared items.

- old: |
    actual.Select(x => x.SomeProperty)
        .Should().NotContainNulls();

  new: |
    actual.Should().NotContainNulls(e => e.OtherProperty);

  old-message: |
    Expected collection not to contain nulls, but found one at index 0.

  new-message: |
    Expected collection not to contain <null>s on e.OtherProperty, but found {SomeProperty: 1, OtherProperty: }.

- old: |
    actual.Should().HaveSameCount(actual.Distinct());

  new: |
    actual.Should().OnlyHaveUniqueItems();

  old-message: |
    Expected collection to have 1 item(s), but found 2.

  new-message: |
    Expected collection to only have unique items, but item SomeProperty: 1, OtherProperty:  is not unique.

- old: |
    actual.Select(x => x.SomeProperty)
        .Should().OnlyHaveUniqueItems();

  new: |
    actual.Should().OnlyHaveUniqueItems(x => x.SomeProperty);

  old-message: |
    Expected collection to only have unique items, but item 1 is not unique.

  new-message: |
    Expected collection to only have unique items on x.SomeProperty, but item SomeProperty: 1, OtherProperty:  is not unique.

- old: |
    // From the assertion it is unclear what is being tested.
    actual.FirstOrDefault().Should().BeNull();

  new: |
    // The enumerable is empty.
    actual.Should().BeEmpty();

  new: |
    // The first element is null.
    actual.Should().HaveElementAt(0, null);

  old-message: |
    Expected string to be <null>, but found "".

  new-message: |
    Expected collection to be empty, but found {""}.

  new-message: |
    Expected <null> at index 0, but found "".


